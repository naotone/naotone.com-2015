{"version":3,"sources":["../../node_modules/browserify/node_modules/browser-pack/_prelude.js","main.js","App.js","libs/greensock/src/uncompressed/TweenMax.js","modules/Cube.js","modules/LoadingPanel.js","modules/Meteor.js","modules/Planet.js","modules/Raycaster.js","modules/Scene.js","modules/Space.js","modules/SpaceShuttle.js","modules/Style.js","modules/Util.js","three/Detector.js","three/Stats.js"],"names":[],"mappings":"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","file":"App.min.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import App from './App'\n\nclass Main {\n  constructor() {\n    this.app = new App()\n  }\n}\n\nnew Main()\n","import Space from './modules/Space'\nimport Style from './modules/Style'\nimport {MouseOn, MouseOff} from './modules/Util'\n\nexport default class App {\n\n  constructor() {\n    this.el = document.getElementById('world')\n    this.mouseEnabled = false\n    new Pjax({\n      elements: 'a[href]', // default is 'a[href], form[action]'\n      selectors: ['title', 'meta[property=\"og:title\"]', 'meta[property=\"og:image\"]', '.js-Pjax', '.pjax']\n    })\n    this.three = new Space()\n    this.style = new Style()\n    this.three.init()\n    this._onResize()\n    this._bindEvents()\n  }\n\n  _bindEvents() {\n    const projects = document.getElementsByClassName(\"project\")\n    let transitionTrigger = document.querySelectorAll('nav a, h1 a')\n\n    window.addEventListener('resize', (el) => { this._onResize(el) })\n    window.addEventListener('popstate', () => { this.three._popstate() })\n\n    for(var i=0; i<transitionTrigger.length; i++){\n      transitionTrigger[i].addEventListener('click',  (el) => { this.three._start(el)}, false);\n    }\n\n    for(var i=0; i<projects.length; i++){\n      projects[i].addEventListener(MouseOn(), (el) => { this.three._initThumbnail(el) })\n      projects[i].addEventListener(MouseOff(),  () => { this.three._removeThumbnail() }, false)\n      projects[i].addEventListener('click',  (el) => { this.three._start(el)} , false);\n    }\n\n    document.addEventListener('pjax:complete', () => {\n      this.three._complete()\n\n      if(projects !== null){\n        for(var i=0; i<projects.length; i++){\n          projects[i].addEventListener(MouseOn(), (el) => { this.three._initThumbnail(el) })\n          projects[i].addEventListener(MouseOff(),  () => { this.three._removeThumbnail() }, false)\n          projects[i].addEventListener('click',  (el) => { this.three._start(el)}, false);\n        }\n      }\n    })\n  }\n\n  _onResize(el) {\n    this.three.camera.aspect = window.innerWidth / window.innerHeight\n    this.three.camera.updateProjectionMatrix()\n    this.three.renderer.setSize(window.innerWidth, window.innerHeight)\n    this.style._onResize()\n    // console.log(this.style.Height, window.innerHeight);\n    // this.style.Width = window.innerWidth\n    // this.style.Height = window.innerHeight\n    this.el.style.width = window.innerWidth + 'px'\n    this.el.style.height = window.innerHeight + 'px'\n  }\n\n}\n","(function (global){\n/*!\n * VERSION: 1.18.0\n * DATE: 2015-09-05\n * UPDATES AND DOCS AT: http://greensock.com\n * \n * Includes all of the following: TweenLite, TweenMax, TimelineLite, TimelineMax, EasePack, CSSPlugin, RoundPropsPlugin, BezierPlugin, AttrPlugin, DirectionalRotationPlugin\n *\n * @license Copyright (c) 2008-2015, GreenSock. All rights reserved.\n * This work is subject to the terms at http://greensock.com/standard-license or for\n * Club GreenSock members, the software agreement that was issued with your membership.\n * \n * @author: Jack Doyle, jack@greensock.com\n **/\"use strict\";var _gsScope=typeof module !== \"undefined\" && module.exports && typeof global !== \"undefined\"?global:undefined || window; //helps ensure compatibility with AMD/RequireJS and CommonJS/Node\n(_gsScope._gsQueue || (_gsScope._gsQueue = [])).push(function(){\"use strict\";_gsScope._gsDefine(\"TweenMax\",[\"core.Animation\",\"core.SimpleTimeline\",\"TweenLite\"],function(Animation,SimpleTimeline,TweenLite){var _slice=function _slice(a){ //don't use [].slice because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()\nvar b=[],l=a.length,i;for(i = 0;i !== l;b.push(a[i++]));return b;},_applyCycle=function _applyCycle(vars,targets,i){var alt=vars.cycle,p,val;for(p in alt) {val = alt[p];vars[p] = typeof val === \"function\"?val.call(targets[i],i):val[i % val.length];}delete vars.cycle;},TweenMax=function TweenMax(target,duration,vars){TweenLite.call(this,target,duration,vars);this._cycle = 0;this._yoyo = this.vars.yoyo === true;this._repeat = this.vars.repeat || 0;this._repeatDelay = this.vars.repeatDelay || 0;this._dirty = true; //ensures that if there is any repeat, the totalDuration will get recalculated to accurately report it.\nthis.render = TweenMax.prototype.render; //speed optimization (avoid prototype lookup on this \"hot\" method)\n},_tinyNum=0.0000000001,TweenLiteInternals=TweenLite._internals,_isSelector=TweenLiteInternals.isSelector,_isArray=TweenLiteInternals.isArray,p=TweenMax.prototype = TweenLite.to({},0.1,{}),_blankArray=[];TweenMax.version = \"1.18.0\";p.constructor = TweenMax;p.kill()._gc = false;TweenMax.killTweensOf = TweenMax.killDelayedCallsTo = TweenLite.killTweensOf;TweenMax.getTweensOf = TweenLite.getTweensOf;TweenMax.lagSmoothing = TweenLite.lagSmoothing;TweenMax.ticker = TweenLite.ticker;TweenMax.render = TweenLite.render;p.invalidate = function(){this._yoyo = this.vars.yoyo === true;this._repeat = this.vars.repeat || 0;this._repeatDelay = this.vars.repeatDelay || 0;this._uncache(true);return TweenLite.prototype.invalidate.call(this);};p.updateTo = function(vars,resetDuration){var curRatio=this.ratio,immediate=this.vars.immediateRender || vars.immediateRender,p;if(resetDuration && this._startTime < this._timeline._time){this._startTime = this._timeline._time;this._uncache(false);if(this._gc){this._enabled(true,false);}else {this._timeline.insert(this,this._startTime - this._delay); //ensures that any necessary re-sequencing of Animations in the timeline occurs to make sure the rendering order is correct.\n}}for(p in vars) {this.vars[p] = vars[p];}if(this._initted || immediate){if(resetDuration){this._initted = false;if(immediate){this.render(0,true,true);}}else {if(this._gc){this._enabled(true,false);}if(this._notifyPluginsOfEnabled && this._firstPT){TweenLite._onPluginEvent(\"_onDisable\",this); //in case a plugin like MotionBlur must perform some cleanup tasks\n}if(this._time / this._duration > 0.998){ //if the tween has finished (or come extremely close to finishing), we just need to rewind it to 0 and then render it again at the end which forces it to re-initialize (parsing the new vars). We allow tweens that are close to finishing (but haven't quite finished) to work this way too because otherwise, the values are so small when determining where to project the starting values that binary math issues creep in and can make the tween appear to render incorrectly when run backwards. \nvar prevTime=this._time;this.render(0,true,false);this._initted = false;this.render(prevTime,true,false);}else if(this._time > 0 || immediate){this._initted = false;this._init();var inv=1 / (1 - curRatio),pt=this._firstPT,endValue;while(pt) {endValue = pt.s + pt.c;pt.c *= inv;pt.s = endValue - pt.c;pt = pt._next;}}}}return this;};p.render = function(time,suppressEvents,force){if(!this._initted)if(this._duration === 0 && this.vars.repeat){ //zero duration tweens that render immediately have render() called from TweenLite's constructor, before TweenMax's constructor has finished setting _repeat, _repeatDelay, and _yoyo which are critical in determining totalDuration() so we need to call invalidate() which is a low-kb way to get those set properly.\nthis.invalidate();}var totalDur=!this._dirty?this._totalDuration:this.totalDuration(),prevTime=this._time,prevTotalTime=this._totalTime,prevCycle=this._cycle,duration=this._duration,prevRawPrevTime=this._rawPrevTime,isComplete,callback,pt,cycleDuration,r,type,pow,rawPrevTime;if(time >= totalDur){this._totalTime = totalDur;this._cycle = this._repeat;if(this._yoyo && (this._cycle & 1) !== 0){this._time = 0;this.ratio = this._ease._calcEnd?this._ease.getRatio(0):0;}else {this._time = duration;this.ratio = this._ease._calcEnd?this._ease.getRatio(1):1;}if(!this._reversed){isComplete = true;callback = \"onComplete\";force = force || this._timeline.autoRemoveChildren; //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.\n}if(duration === 0)if(this._initted || !this.vars.lazy || force){ //zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the \"playhead\" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's \"playhead\" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.\nif(this._startTime === this._timeline._duration){ //if a zero-duration tween is at the VERY end of a timeline and that timeline renders at its end, it will typically add a tiny bit of cushion to the render time to prevent rounding errors from getting in the way of tweens rendering their VERY end. If we then reverse() that timeline, the zero-duration tween will trigger its onReverseComplete even though technically the playhead didn't pass over it again. It's a very specific edge case we must accommodate.\ntime = 0;}if(time === 0 || prevRawPrevTime < 0 || prevRawPrevTime === _tinyNum)if(prevRawPrevTime !== time){force = true;if(prevRawPrevTime > _tinyNum){callback = \"onReverseComplete\";}}this._rawPrevTime = rawPrevTime = !suppressEvents || time || prevRawPrevTime === time?time:_tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.\n}}else if(time < 0.0000001){ //to work around occasional floating point math artifacts, round super small values to 0.\nthis._totalTime = this._time = this._cycle = 0;this.ratio = this._ease._calcEnd?this._ease.getRatio(0):0;if(prevTotalTime !== 0 || duration === 0 && prevRawPrevTime > 0){callback = \"onReverseComplete\";isComplete = this._reversed;}if(time < 0){this._active = false;if(duration === 0)if(this._initted || !this.vars.lazy || force){ //zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the \"playhead\" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's \"playhead\" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.\nif(prevRawPrevTime >= 0){force = true;}this._rawPrevTime = rawPrevTime = !suppressEvents || time || prevRawPrevTime === time?time:_tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.\n}}if(!this._initted){ //if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately.\nforce = true;}}else {this._totalTime = this._time = time;if(this._repeat !== 0){cycleDuration = duration + this._repeatDelay;this._cycle = this._totalTime / cycleDuration >> 0; //originally _totalTime % cycleDuration but floating point errors caused problems, so I normalized it. (4 % 0.8 should be 0 but Flash reports it as 0.79999999!)\nif(this._cycle !== 0)if(this._cycle === this._totalTime / cycleDuration){this._cycle--; //otherwise when rendered exactly at the end time, it will act as though it is repeating (at the beginning)\n}this._time = this._totalTime - this._cycle * cycleDuration;if(this._yoyo)if((this._cycle & 1) !== 0){this._time = duration - this._time;}if(this._time > duration){this._time = duration;}else if(this._time < 0){this._time = 0;}}if(this._easeType){r = this._time / duration;type = this._easeType;pow = this._easePower;if(type === 1 || type === 3 && r >= 0.5){r = 1 - r;}if(type === 3){r *= 2;}if(pow === 1){r *= r;}else if(pow === 2){r *= r * r;}else if(pow === 3){r *= r * r * r;}else if(pow === 4){r *= r * r * r * r;}if(type === 1){this.ratio = 1 - r;}else if(type === 2){this.ratio = r;}else if(this._time / duration < 0.5){this.ratio = r / 2;}else {this.ratio = 1 - r / 2;}}else {this.ratio = this._ease.getRatio(this._time / duration);}}if(prevTime === this._time && !force && prevCycle === this._cycle){if(prevTotalTime !== this._totalTime)if(this._onUpdate)if(!suppressEvents){ //so that onUpdate fires even during the repeatDelay - as long as the totalTime changed, we should trigger onUpdate.\nthis._callback(\"onUpdate\");}return;}else if(!this._initted){this._init();if(!this._initted || this._gc){ //immediateRender tweens typically won't initialize until the playhead advances (_time is greater than 0) in order to ensure that overwriting occurs properly. Also, if all of the tweening properties have been overwritten (which would cause _gc to be true, as set in _init()), we shouldn't continue otherwise an onStart callback could be called for example.\nreturn;}else if(!force && this._firstPT && (this.vars.lazy !== false && this._duration || this.vars.lazy && !this._duration)){ //we stick it in the queue for rendering at the very end of the tick - this is a performance optimization because browsers invalidate styles and force a recalculation if you read, write, and then read style data (so it's better to read/read/read/write/write/write than read/write/read/write/read/write). The down side, of course, is that usually you WANT things to render immediately because you may have code running right after that which depends on the change. Like imagine running TweenLite.set(...) and then immediately after that, creating a nother tween that animates the same property to another value; the starting values of that 2nd tween wouldn't be accurate if lazy is true.\nthis._time = prevTime;this._totalTime = prevTotalTime;this._rawPrevTime = prevRawPrevTime;this._cycle = prevCycle;TweenLiteInternals.lazyTweens.push(this);this._lazy = [time,suppressEvents];return;} //_ease is initially set to defaultEase, so now that init() has run, _ease is set properly and we need to recalculate the ratio. Overall this is faster than using conditional logic earlier in the method to avoid having to set ratio twice because we only init() once but renderTime() gets called VERY frequently.\nif(this._time && !isComplete){this.ratio = this._ease.getRatio(this._time / duration);}else if(isComplete && this._ease._calcEnd){this.ratio = this._ease.getRatio(this._time === 0?0:1);}}if(this._lazy !== false){this._lazy = false;}if(!this._active)if(!this._paused && this._time !== prevTime && time >= 0){this._active = true; //so that if the user renders a tween (as opposed to the timeline rendering it), the timeline is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the tween already finished but the user manually re-renders it as halfway done.\n}if(prevTotalTime === 0){if(this._initted === 2 && time > 0){ //this.invalidate();\nthis._init(); //will just apply overwriting since _initted of (2) means it was a from() tween that had immediateRender:true\n}if(this._startAt){if(time >= 0){this._startAt.render(time,suppressEvents,force);}else if(!callback){callback = \"_dummyGS\"; //if no callback is defined, use a dummy value just so that the condition at the end evaluates as true because _startAt should render AFTER the normal render loop when the time is negative. We could handle this in a more intuitive way, of course, but the render loop is the MOST important thing to optimize, so this technique allows us to avoid adding extra conditional logic in a high-frequency area.\n}}if(this.vars.onStart)if(this._totalTime !== 0 || duration === 0)if(!suppressEvents){this._callback(\"onStart\");}}pt = this._firstPT;while(pt) {if(pt.f){pt.t[pt.p](pt.c * this.ratio + pt.s);}else {pt.t[pt.p] = pt.c * this.ratio + pt.s;}pt = pt._next;}if(this._onUpdate){if(time < 0)if(this._startAt && this._startTime){ //if the tween is positioned at the VERY beginning (_startTime 0) of its parent timeline, it's illegal for the playhead to go back further, so we should not render the recorded startAt values.\nthis._startAt.render(time,suppressEvents,force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.\n}if(!suppressEvents)if(this._totalTime !== prevTotalTime || isComplete){this._callback(\"onUpdate\");}}if(this._cycle !== prevCycle)if(!suppressEvents)if(!this._gc)if(this.vars.onRepeat){this._callback(\"onRepeat\");}if(callback)if(!this._gc || force){ //check gc because there's a chance that kill() could be called in an onUpdate\nif(time < 0 && this._startAt && !this._onUpdate && this._startTime){ //if the tween is positioned at the VERY beginning (_startTime 0) of its parent timeline, it's illegal for the playhead to go back further, so we should not render the recorded startAt values.\nthis._startAt.render(time,suppressEvents,force);}if(isComplete){if(this._timeline.autoRemoveChildren){this._enabled(false,false);}this._active = false;}if(!suppressEvents && this.vars[callback]){this._callback(callback);}if(duration === 0 && this._rawPrevTime === _tinyNum && rawPrevTime !== _tinyNum){ //the onComplete or onReverseComplete could trigger movement of the playhead and for zero-duration tweens (which must discern direction) that land directly back on their start time, we don't want to fire again on the next render. Think of several addPause()'s in a timeline that forces the playhead to a certain spot, but what if it's already paused and another tween is tweening the \"time\" of the timeline? Each time it moves [forward] past that spot, it would move back, and since suppressEvents is true, it'd reset _rawPrevTime to _tinyNum so that when it begins again, the callback would fire (so ultimately it could bounce back and forth during that tween). Again, this is a very uncommon scenario, but possible nonetheless.\nthis._rawPrevTime = 0;}}}; //---- STATIC FUNCTIONS -----------------------------------------------------------------------------------------------------------\nTweenMax.to = function(target,duration,vars){return new TweenMax(target,duration,vars);};TweenMax.from = function(target,duration,vars){vars.runBackwards = true;vars.immediateRender = vars.immediateRender != false;return new TweenMax(target,duration,vars);};TweenMax.fromTo = function(target,duration,fromVars,toVars){toVars.startAt = fromVars;toVars.immediateRender = toVars.immediateRender != false && fromVars.immediateRender != false;return new TweenMax(target,duration,toVars);};TweenMax.staggerTo = TweenMax.allTo = function(targets,duration,vars,stagger,onCompleteAll,onCompleteAllParams,onCompleteAllScope){stagger = stagger || 0;var delay=vars.delay || 0,a=[],finalComplete=function finalComplete(){if(vars.onComplete){vars.onComplete.apply(vars.onCompleteScope || this,arguments);}onCompleteAll.apply(onCompleteAllScope || vars.callbackScope || this,onCompleteAllParams || _blankArray);},cycle=vars.cycle,fromCycle=vars.startAt && vars.startAt.cycle,l,copy,i,p;if(!_isArray(targets)){if(typeof targets === \"string\"){targets = TweenLite.selector(targets) || targets;}if(_isSelector(targets)){targets = _slice(targets);}}targets = targets || [];if(stagger < 0){targets = _slice(targets);targets.reverse();stagger *= -1;}l = targets.length - 1;for(i = 0;i <= l;i++) {copy = {};for(p in vars) {copy[p] = vars[p];}if(cycle){_applyCycle(copy,targets,i);}if(fromCycle){fromCycle = copy.startAt = {};for(p in vars.startAt) {fromCycle[p] = vars.startAt[p];}_applyCycle(copy.startAt,targets,i);}copy.delay = delay;if(i === l && onCompleteAll){copy.onComplete = finalComplete;}a[i] = new TweenMax(targets[i],duration,copy);delay += stagger;}return a;};TweenMax.staggerFrom = TweenMax.allFrom = function(targets,duration,vars,stagger,onCompleteAll,onCompleteAllParams,onCompleteAllScope){vars.runBackwards = true;vars.immediateRender = vars.immediateRender != false;return TweenMax.staggerTo(targets,duration,vars,stagger,onCompleteAll,onCompleteAllParams,onCompleteAllScope);};TweenMax.staggerFromTo = TweenMax.allFromTo = function(targets,duration,fromVars,toVars,stagger,onCompleteAll,onCompleteAllParams,onCompleteAllScope){toVars.startAt = fromVars;toVars.immediateRender = toVars.immediateRender != false && fromVars.immediateRender != false;return TweenMax.staggerTo(targets,duration,toVars,stagger,onCompleteAll,onCompleteAllParams,onCompleteAllScope);};TweenMax.delayedCall = function(delay,callback,params,scope,useFrames){return new TweenMax(callback,0,{delay:delay,onComplete:callback,onCompleteParams:params,callbackScope:scope,onReverseComplete:callback,onReverseCompleteParams:params,immediateRender:false,useFrames:useFrames,overwrite:0});};TweenMax.set = function(target,vars){return new TweenMax(target,0,vars);};TweenMax.isTweening = function(target){return TweenLite.getTweensOf(target,true).length > 0;};var _getChildrenOf=function _getChildrenOf(timeline,includeTimelines){var a=[],cnt=0,tween=timeline._first;while(tween) {if(tween instanceof TweenLite){a[cnt++] = tween;}else {if(includeTimelines){a[cnt++] = tween;}a = a.concat(_getChildrenOf(tween,includeTimelines));cnt = a.length;}tween = tween._next;}return a;},getAllTweens=TweenMax.getAllTweens = function(includeTimelines){return _getChildrenOf(Animation._rootTimeline,includeTimelines).concat(_getChildrenOf(Animation._rootFramesTimeline,includeTimelines));};TweenMax.killAll = function(complete,tweens,delayedCalls,timelines){if(tweens == null){tweens = true;}if(delayedCalls == null){delayedCalls = true;}var a=getAllTweens(timelines != false),l=a.length,allTrue=tweens && delayedCalls && timelines,isDC,tween,i;for(i = 0;i < l;i++) {tween = a[i];if(allTrue || tween instanceof SimpleTimeline || (isDC = tween.target === tween.vars.onComplete) && delayedCalls || tweens && !isDC){if(complete){tween.totalTime(tween._reversed?0:tween.totalDuration());}else {tween._enabled(false,false);}}}};TweenMax.killChildTweensOf = function(parent,complete){if(parent == null){return;}var tl=TweenLiteInternals.tweenLookup,a,curParent,p,i,l;if(typeof parent === \"string\"){parent = TweenLite.selector(parent) || parent;}if(_isSelector(parent)){parent = _slice(parent);}if(_isArray(parent)){i = parent.length;while(--i > -1) {TweenMax.killChildTweensOf(parent[i],complete);}return;}a = [];for(p in tl) {curParent = tl[p].target.parentNode;while(curParent) {if(curParent === parent){a = a.concat(tl[p].tweens);}curParent = curParent.parentNode;}}l = a.length;for(i = 0;i < l;i++) {if(complete){a[i].totalTime(a[i].totalDuration());}a[i]._enabled(false,false);}};var _changePause=function _changePause(pause,tweens,delayedCalls,timelines){tweens = tweens !== false;delayedCalls = delayedCalls !== false;timelines = timelines !== false;var a=getAllTweens(timelines),allTrue=tweens && delayedCalls && timelines,i=a.length,isDC,tween;while(--i > -1) {tween = a[i];if(allTrue || tween instanceof SimpleTimeline || (isDC = tween.target === tween.vars.onComplete) && delayedCalls || tweens && !isDC){tween.paused(pause);}}};TweenMax.pauseAll = function(tweens,delayedCalls,timelines){_changePause(true,tweens,delayedCalls,timelines);};TweenMax.resumeAll = function(tweens,delayedCalls,timelines){_changePause(false,tweens,delayedCalls,timelines);};TweenMax.globalTimeScale = function(value){var tl=Animation._rootTimeline,t=TweenLite.ticker.time;if(!arguments.length){return tl._timeScale;}value = value || _tinyNum; //can't allow zero because it'll throw the math off\ntl._startTime = t - (t - tl._startTime) * tl._timeScale / value;tl = Animation._rootFramesTimeline;t = TweenLite.ticker.frame;tl._startTime = t - (t - tl._startTime) * tl._timeScale / value;tl._timeScale = Animation._rootTimeline._timeScale = value;return value;}; //---- GETTERS / SETTERS ----------------------------------------------------------------------------------------------------------\np.progress = function(value){return !arguments.length?this._time / this.duration():this.totalTime(this.duration() * (this._yoyo && (this._cycle & 1) !== 0?1 - value:value) + this._cycle * (this._duration + this._repeatDelay),false);};p.totalProgress = function(value){return !arguments.length?this._totalTime / this.totalDuration():this.totalTime(this.totalDuration() * value,false);};p.time = function(value,suppressEvents){if(!arguments.length){return this._time;}if(this._dirty){this.totalDuration();}if(value > this._duration){value = this._duration;}if(this._yoyo && (this._cycle & 1) !== 0){value = this._duration - value + this._cycle * (this._duration + this._repeatDelay);}else if(this._repeat !== 0){value += this._cycle * (this._duration + this._repeatDelay);}return this.totalTime(value,suppressEvents);};p.duration = function(value){if(!arguments.length){return this._duration; //don't set _dirty = false because there could be repeats that haven't been factored into the _totalDuration yet. Otherwise, if you create a repeated TweenMax and then immediately check its duration(), it would cache the value and the totalDuration would not be correct, thus repeats wouldn't take effect.\n}return Animation.prototype.duration.call(this,value);};p.totalDuration = function(value){if(!arguments.length){if(this._dirty){ //instead of Infinity, we use 999999999999 so that we can accommodate reverses\nthis._totalDuration = this._repeat === -1?999999999999:this._duration * (this._repeat + 1) + this._repeatDelay * this._repeat;this._dirty = false;}return this._totalDuration;}return this._repeat === -1?this:this.duration((value - this._repeat * this._repeatDelay) / (this._repeat + 1));};p.repeat = function(value){if(!arguments.length){return this._repeat;}this._repeat = value;return this._uncache(true);};p.repeatDelay = function(value){if(!arguments.length){return this._repeatDelay;}this._repeatDelay = value;return this._uncache(true);};p.yoyo = function(value){if(!arguments.length){return this._yoyo;}this._yoyo = value;return this;};return TweenMax;},true); /*\n * ----------------------------------------------------------------\n * TimelineLite\n * ----------------------------------------------------------------\n */_gsScope._gsDefine(\"TimelineLite\",[\"core.Animation\",\"core.SimpleTimeline\",\"TweenLite\"],function(Animation,SimpleTimeline,TweenLite){var TimelineLite=function TimelineLite(vars){SimpleTimeline.call(this,vars);this._labels = {};this.autoRemoveChildren = this.vars.autoRemoveChildren === true;this.smoothChildTiming = this.vars.smoothChildTiming === true;this._sortChildren = true;this._onUpdate = this.vars.onUpdate;var v=this.vars,val,p;for(p in v) {val = v[p];if(_isArray(val))if(val.join(\"\").indexOf(\"{self}\") !== -1){v[p] = this._swapSelfInParams(val);}}if(_isArray(v.tweens)){this.add(v.tweens,0,v.align,v.stagger);}},_tinyNum=0.0000000001,TweenLiteInternals=TweenLite._internals,_internals=TimelineLite._internals = {},_isSelector=TweenLiteInternals.isSelector,_isArray=TweenLiteInternals.isArray,_lazyTweens=TweenLiteInternals.lazyTweens,_lazyRender=TweenLiteInternals.lazyRender,_globals=_gsScope._gsDefine.globals,_copy=function _copy(vars){var copy={},p;for(p in vars) {copy[p] = vars[p];}return copy;},_applyCycle=function _applyCycle(vars,targets,i){var alt=vars.cycle,p,val;for(p in alt) {val = alt[p];vars[p] = typeof val === \"function\"?val.call(targets[i],i):val[i % val.length];}delete vars.cycle;},_pauseCallback=_internals.pauseCallback = function(){},_slice=function _slice(a){ //don't use [].slice because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()\nvar b=[],l=a.length,i;for(i = 0;i !== l;b.push(a[i++]));return b;},p=TimelineLite.prototype = new SimpleTimeline();TimelineLite.version = \"1.18.0\";p.constructor = TimelineLite;p.kill()._gc = p._forcingPlayhead = p._hasPause = false; /* might use later...\n\t\t//translates a local time inside an animation to the corresponding time on the root/global timeline, factoring in all nesting and timeScales.\n\t\tfunction localToGlobal(time, animation) {\n\t\t\twhile (animation) {\n\t\t\t\ttime = (time / animation._timeScale) + animation._startTime;\n\t\t\t\tanimation = animation.timeline;\n\t\t\t}\n\t\t\treturn time;\n\t\t}\n\n\t\t//translates the supplied time on the root/global timeline into the corresponding local time inside a particular animation, factoring in all nesting and timeScales\n\t\tfunction globalToLocal(time, animation) {\n\t\t\tvar scale = 1;\n\t\t\ttime -= localToGlobal(0, animation);\n\t\t\twhile (animation) {\n\t\t\t\tscale *= animation._timeScale;\n\t\t\t\tanimation = animation.timeline;\n\t\t\t}\n\t\t\treturn time * scale;\n\t\t}\n\t\t*/p.to = function(target,duration,vars,position){var Engine=vars.repeat && _globals.TweenMax || TweenLite;return duration?this.add(new Engine(target,duration,vars),position):this.set(target,vars,position);};p.from = function(target,duration,vars,position){return this.add((vars.repeat && _globals.TweenMax || TweenLite).from(target,duration,vars),position);};p.fromTo = function(target,duration,fromVars,toVars,position){var Engine=toVars.repeat && _globals.TweenMax || TweenLite;return duration?this.add(Engine.fromTo(target,duration,fromVars,toVars),position):this.set(target,toVars,position);};p.staggerTo = function(targets,duration,vars,stagger,position,onCompleteAll,onCompleteAllParams,onCompleteAllScope){var tl=new TimelineLite({onComplete:onCompleteAll,onCompleteParams:onCompleteAllParams,callbackScope:onCompleteAllScope,smoothChildTiming:this.smoothChildTiming}),cycle=vars.cycle,copy,i;if(typeof targets === \"string\"){targets = TweenLite.selector(targets) || targets;}targets = targets || [];if(_isSelector(targets)){ //senses if the targets object is a selector. If it is, we should translate it into an array.\ntargets = _slice(targets);}stagger = stagger || 0;if(stagger < 0){targets = _slice(targets);targets.reverse();stagger *= -1;}for(i = 0;i < targets.length;i++) {copy = _copy(vars);if(copy.startAt){copy.startAt = _copy(copy.startAt);if(copy.startAt.cycle){_applyCycle(copy.startAt,targets,i);}}if(cycle){_applyCycle(copy,targets,i);}tl.to(targets[i],duration,copy,i * stagger);}return this.add(tl,position);};p.staggerFrom = function(targets,duration,vars,stagger,position,onCompleteAll,onCompleteAllParams,onCompleteAllScope){vars.immediateRender = vars.immediateRender != false;vars.runBackwards = true;return this.staggerTo(targets,duration,vars,stagger,position,onCompleteAll,onCompleteAllParams,onCompleteAllScope);};p.staggerFromTo = function(targets,duration,fromVars,toVars,stagger,position,onCompleteAll,onCompleteAllParams,onCompleteAllScope){toVars.startAt = fromVars;toVars.immediateRender = toVars.immediateRender != false && fromVars.immediateRender != false;return this.staggerTo(targets,duration,toVars,stagger,position,onCompleteAll,onCompleteAllParams,onCompleteAllScope);};p.call = function(callback,params,scope,position){return this.add(TweenLite.delayedCall(0,callback,params,scope),position);};p.set = function(target,vars,position){position = this._parseTimeOrLabel(position,0,true);if(vars.immediateRender == null){vars.immediateRender = position === this._time && !this._paused;}return this.add(new TweenLite(target,0,vars),position);};TimelineLite.exportRoot = function(vars,ignoreDelayedCalls){vars = vars || {};if(vars.smoothChildTiming == null){vars.smoothChildTiming = true;}var tl=new TimelineLite(vars),root=tl._timeline,tween,next;if(ignoreDelayedCalls == null){ignoreDelayedCalls = true;}root._remove(tl,true);tl._startTime = 0;tl._rawPrevTime = tl._time = tl._totalTime = root._time;tween = root._first;while(tween) {next = tween._next;if(!ignoreDelayedCalls || !(tween instanceof TweenLite && tween.target === tween.vars.onComplete)){tl.add(tween,tween._startTime - tween._delay);}tween = next;}root.add(tl,0);return tl;};p.add = function(value,position,align,stagger){var curTime,l,i,child,tl,beforeRawTime;if(typeof position !== \"number\"){position = this._parseTimeOrLabel(position,0,true,value);}if(!(value instanceof Animation)){if(value instanceof Array || value && value.push && _isArray(value)){align = align || \"normal\";stagger = stagger || 0;curTime = position;l = value.length;for(i = 0;i < l;i++) {if(_isArray(child = value[i])){child = new TimelineLite({tweens:child});}this.add(child,curTime);if(typeof child !== \"string\" && typeof child !== \"function\"){if(align === \"sequence\"){curTime = child._startTime + child.totalDuration() / child._timeScale;}else if(align === \"start\"){child._startTime -= child.delay();}}curTime += stagger;}return this._uncache(true);}else if(typeof value === \"string\"){return this.addLabel(value,position);}else if(typeof value === \"function\"){value = TweenLite.delayedCall(0,value);}else {throw \"Cannot add \" + value + \" into the timeline; it is not a tween, timeline, function, or string.\";}}SimpleTimeline.prototype.add.call(this,value,position); //if the timeline has already ended but the inserted tween/timeline extends the duration, we should enable this timeline again so that it renders properly. We should also align the playhead with the parent timeline's when appropriate.\nif(this._gc || this._time === this._duration)if(!this._paused)if(this._duration < this.duration()){ //in case any of the ancestors had completed but should now be enabled...\ntl = this;beforeRawTime = tl.rawTime() > value._startTime; //if the tween is placed on the timeline so that it starts BEFORE the current rawTime, we should align the playhead (move the timeline). This is because sometimes users will create a timeline, let it finish, and much later append a tween and expect it to run instead of jumping to its end state. While technically one could argue that it should jump to its end state, that's not what users intuitively expect.\nwhile(tl._timeline) {if(beforeRawTime && tl._timeline.smoothChildTiming){tl.totalTime(tl._totalTime,true); //moves the timeline (shifts its startTime) if necessary, and also enables it.\n}else if(tl._gc){tl._enabled(true,false);}tl = tl._timeline;}}return this;};p.remove = function(value){if(value instanceof Animation){this._remove(value,false);var tl=value._timeline = value.vars.useFrames?Animation._rootFramesTimeline:Animation._rootTimeline; //now that it's removed, default it to the root timeline so that if it gets played again, it doesn't jump back into this timeline.\nvalue._startTime = (value._paused?value._pauseTime:tl._time) - (!value._reversed?value._totalTime:value.totalDuration() - value._totalTime) / value._timeScale; //ensure that if it gets played again, the timing is correct.\nreturn this;}else if(value instanceof Array || value && value.push && _isArray(value)){var i=value.length;while(--i > -1) {this.remove(value[i]);}return this;}else if(typeof value === \"string\"){return this.removeLabel(value);}return this.kill(null,value);};p._remove = function(tween,skipDisable){SimpleTimeline.prototype._remove.call(this,tween,skipDisable);var last=this._last;if(!last){this._time = this._totalTime = this._duration = this._totalDuration = 0;}else if(this._time > last._startTime + last._totalDuration / last._timeScale){this._time = this.duration();this._totalTime = this._totalDuration;}return this;};p.append = function(value,offsetOrLabel){return this.add(value,this._parseTimeOrLabel(null,offsetOrLabel,true,value));};p.insert = p.insertMultiple = function(value,position,align,stagger){return this.add(value,position || 0,align,stagger);};p.appendMultiple = function(tweens,offsetOrLabel,align,stagger){return this.add(tweens,this._parseTimeOrLabel(null,offsetOrLabel,true,tweens),align,stagger);};p.addLabel = function(label,position){this._labels[label] = this._parseTimeOrLabel(position);return this;};p.addPause = function(position,callback,params,scope){var t=TweenLite.delayedCall(0,_pauseCallback,params,scope || this);t.vars.onComplete = t.vars.onReverseComplete = callback;t.data = \"isPause\";this._hasPause = true;return this.add(t,position);};p.removeLabel = function(label){delete this._labels[label];return this;};p.getLabelTime = function(label){return this._labels[label] != null?this._labels[label]:-1;};p._parseTimeOrLabel = function(timeOrLabel,offsetOrLabel,appendIfAbsent,ignore){var i; //if we're about to add a tween/timeline (or an array of them) that's already a child of this timeline, we should remove it first so that it doesn't contaminate the duration().\nif(ignore instanceof Animation && ignore.timeline === this){this.remove(ignore);}else if(ignore && (ignore instanceof Array || ignore.push && _isArray(ignore))){i = ignore.length;while(--i > -1) {if(ignore[i] instanceof Animation && ignore[i].timeline === this){this.remove(ignore[i]);}}}if(typeof offsetOrLabel === \"string\"){return this._parseTimeOrLabel(offsetOrLabel,appendIfAbsent && typeof timeOrLabel === \"number\" && this._labels[offsetOrLabel] == null?timeOrLabel - this.duration():0,appendIfAbsent);}offsetOrLabel = offsetOrLabel || 0;if(typeof timeOrLabel === \"string\" && (isNaN(timeOrLabel) || this._labels[timeOrLabel] != null)){ //if the string is a number like \"1\", check to see if there's a label with that name, otherwise interpret it as a number (absolute value).\ni = timeOrLabel.indexOf(\"=\");if(i === -1){if(this._labels[timeOrLabel] == null){return appendIfAbsent?this._labels[timeOrLabel] = this.duration() + offsetOrLabel:offsetOrLabel;}return this._labels[timeOrLabel] + offsetOrLabel;}offsetOrLabel = parseInt(timeOrLabel.charAt(i - 1) + \"1\",10) * Number(timeOrLabel.substr(i + 1));timeOrLabel = i > 1?this._parseTimeOrLabel(timeOrLabel.substr(0,i - 1),0,appendIfAbsent):this.duration();}else if(timeOrLabel == null){timeOrLabel = this.duration();}return Number(timeOrLabel) + offsetOrLabel;};p.seek = function(position,suppressEvents){return this.totalTime(typeof position === \"number\"?position:this._parseTimeOrLabel(position),suppressEvents !== false);};p.stop = function(){return this.paused(true);};p.gotoAndPlay = function(position,suppressEvents){return this.play(position,suppressEvents);};p.gotoAndStop = function(position,suppressEvents){return this.pause(position,suppressEvents);};p.render = function(time,suppressEvents,force){if(this._gc){this._enabled(true,false);}var totalDur=!this._dirty?this._totalDuration:this.totalDuration(),prevTime=this._time,prevStart=this._startTime,prevTimeScale=this._timeScale,prevPaused=this._paused,tween,isComplete,next,callback,internalForce,pauseTween;if(time >= totalDur){this._totalTime = this._time = totalDur;if(!this._reversed)if(!this._hasPausedChild()){isComplete = true;callback = \"onComplete\";internalForce = !!this._timeline.autoRemoveChildren; //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.\nif(this._duration === 0)if(time === 0 || this._rawPrevTime < 0 || this._rawPrevTime === _tinyNum)if(this._rawPrevTime !== time && this._first){internalForce = true;if(this._rawPrevTime > _tinyNum){callback = \"onReverseComplete\";}}}this._rawPrevTime = this._duration || !suppressEvents || time || this._rawPrevTime === time?time:_tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.\ntime = totalDur + 0.0001; //to avoid occasional floating point rounding errors - sometimes child tweens/timelines were not being fully completed (their progress might be 0.999999999999998 instead of 1 because when _time - tween._startTime is performed, floating point errors would return a value that was SLIGHTLY off). Try (999999999999.7 - 999999999999) * 1 = 0.699951171875 instead of 0.7.\n}else if(time < 0.0000001){ //to work around occasional floating point math artifacts, round super small values to 0.\nthis._totalTime = this._time = 0;if(prevTime !== 0 || this._duration === 0 && this._rawPrevTime !== _tinyNum && (this._rawPrevTime > 0 || time < 0 && this._rawPrevTime >= 0)){callback = \"onReverseComplete\";isComplete = this._reversed;}if(time < 0){this._active = false;if(this._timeline.autoRemoveChildren && this._reversed){ //ensures proper GC if a timeline is resumed after it's finished reversing.\ninternalForce = isComplete = true;callback = \"onReverseComplete\";}else if(this._rawPrevTime >= 0 && this._first){ //when going back beyond the start, force a render so that zero-duration tweens that sit at the very beginning render their start values properly. Otherwise, if the parent timeline's playhead lands exactly at this timeline's startTime, and then moves backwards, the zero-duration tweens at the beginning would still be at their end state.\ninternalForce = true;}this._rawPrevTime = time;}else {this._rawPrevTime = this._duration || !suppressEvents || time || this._rawPrevTime === time?time:_tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.\nif(time === 0 && isComplete){ //if there's a zero-duration tween at the very beginning of a timeline and the playhead lands EXACTLY at time 0, that tween will correctly render its end values, but we need to keep the timeline alive for one more render so that the beginning values render properly as the parent's playhead keeps moving beyond the begining. Imagine obj.x starts at 0 and then we do tl.set(obj, {x:100}).to(obj, 1, {x:200}) and then later we tl.reverse()...the goal is to have obj.x revert to 0. If the playhead happens to land on exactly 0, without this chunk of code, it'd complete the timeline and remove it from the rendering queue (not good).\ntween = this._first;while(tween && tween._startTime === 0) {if(!tween._duration){isComplete = false;}tween = tween._next;}}time = 0; //to avoid occasional floating point rounding errors (could cause problems especially with zero-duration tweens at the very beginning of the timeline)\nif(!this._initted){internalForce = true;}}}else {if(this._hasPause && !this._forcingPlayhead && !suppressEvents){if(time >= prevTime){tween = this._first;while(tween && tween._startTime <= time && !pauseTween) {if(!tween._duration)if(tween.data === \"isPause\" && !tween.ratio && !(tween._startTime === 0 && this._rawPrevTime === 0)){pauseTween = tween;}tween = tween._next;}}else {tween = this._last;while(tween && tween._startTime >= time && !pauseTween) {if(!tween._duration)if(tween.data === \"isPause\" && tween._rawPrevTime > 0){pauseTween = tween;}tween = tween._prev;}}if(pauseTween){this._time = time = pauseTween._startTime;this._totalTime = time + this._cycle * (this._totalDuration + this._repeatDelay);}}this._totalTime = this._time = this._rawPrevTime = time;}if((this._time === prevTime || !this._first) && !force && !internalForce && !pauseTween){return;}else if(!this._initted){this._initted = true;}if(!this._active)if(!this._paused && this._time !== prevTime && time > 0){this._active = true; //so that if the user renders the timeline (as opposed to the parent timeline rendering it), it is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the timeline already finished but the user manually re-renders it as halfway done, for example.\n}if(prevTime === 0)if(this.vars.onStart)if(this._time !== 0)if(!suppressEvents){this._callback(\"onStart\");}if(this._time >= prevTime){tween = this._first;while(tween) {next = tween._next; //record it here because the value could change after rendering...\nif(this._paused && !prevPaused){ //in case a tween pauses the timeline when rendering\nbreak;}else if(tween._active || tween._startTime <= this._time && !tween._paused && !tween._gc){if(pauseTween === tween){this.pause();}if(!tween._reversed){tween.render((time - tween._startTime) * tween._timeScale,suppressEvents,force);}else {tween.render((!tween._dirty?tween._totalDuration:tween.totalDuration()) - (time - tween._startTime) * tween._timeScale,suppressEvents,force);}}tween = next;}}else {tween = this._last;while(tween) {next = tween._prev; //record it here because the value could change after rendering...\nif(this._paused && !prevPaused){ //in case a tween pauses the timeline when rendering\nbreak;}else if(tween._active || tween._startTime <= prevTime && !tween._paused && !tween._gc){if(pauseTween === tween){pauseTween = tween._prev; //the linked list is organized by _startTime, thus it's possible that a tween could start BEFORE the pause and end after it, in which case it would be positioned before the pause tween in the linked list, but we should render it before we pause() the timeline and cease rendering. This is only a concern when going in reverse.\nwhile(pauseTween && pauseTween.endTime() > this._time) {pauseTween.render(pauseTween._reversed?pauseTween.totalDuration() - (time - pauseTween._startTime) * pauseTween._timeScale:(time - pauseTween._startTime) * pauseTween._timeScale,suppressEvents,force);pauseTween = pauseTween._prev;}pauseTween = null;this.pause();}if(!tween._reversed){tween.render((time - tween._startTime) * tween._timeScale,suppressEvents,force);}else {tween.render((!tween._dirty?tween._totalDuration:tween.totalDuration()) - (time - tween._startTime) * tween._timeScale,suppressEvents,force);}}tween = next;}}if(this._onUpdate)if(!suppressEvents){if(_lazyTweens.length){ //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.\n_lazyRender();}this._callback(\"onUpdate\");}if(callback)if(!this._gc)if(prevStart === this._startTime || prevTimeScale !== this._timeScale)if(this._time === 0 || totalDur >= this.totalDuration()){ //if one of the tweens that was rendered altered this timeline's startTime (like if an onComplete reversed the timeline), it probably isn't complete. If it is, don't worry, because whatever call altered the startTime would complete if it was necessary at the new time. The only exception is the timeScale property. Also check _gc because there's a chance that kill() could be called in an onUpdate\nif(isComplete){if(_lazyTweens.length){ //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onComplete on a timeline that reports/checks tweened values.\n_lazyRender();}if(this._timeline.autoRemoveChildren){this._enabled(false,false);}this._active = false;}if(!suppressEvents && this.vars[callback]){this._callback(callback);}}};p._hasPausedChild = function(){var tween=this._first;while(tween) {if(tween._paused || tween instanceof TimelineLite && tween._hasPausedChild()){return true;}tween = tween._next;}return false;};p.getChildren = function(nested,tweens,timelines,ignoreBeforeTime){ignoreBeforeTime = ignoreBeforeTime || -9999999999;var a=[],tween=this._first,cnt=0;while(tween) {if(tween._startTime < ignoreBeforeTime){ //do nothing\n}else if(tween instanceof TweenLite){if(tweens !== false){a[cnt++] = tween;}}else {if(timelines !== false){a[cnt++] = tween;}if(nested !== false){a = a.concat(tween.getChildren(true,tweens,timelines));cnt = a.length;}}tween = tween._next;}return a;};p.getTweensOf = function(target,nested){var disabled=this._gc,a=[],cnt=0,tweens,i;if(disabled){this._enabled(true,true); //getTweensOf() filters out disabled tweens, and we have to mark them as _gc = true when the timeline completes in order to allow clean garbage collection, so temporarily re-enable the timeline here.\n}tweens = TweenLite.getTweensOf(target);i = tweens.length;while(--i > -1) {if(tweens[i].timeline === this || nested && this._contains(tweens[i])){a[cnt++] = tweens[i];}}if(disabled){this._enabled(false,true);}return a;};p.recent = function(){return this._recent;};p._contains = function(tween){var tl=tween.timeline;while(tl) {if(tl === this){return true;}tl = tl.timeline;}return false;};p.shiftChildren = function(amount,adjustLabels,ignoreBeforeTime){ignoreBeforeTime = ignoreBeforeTime || 0;var tween=this._first,labels=this._labels,p;while(tween) {if(tween._startTime >= ignoreBeforeTime){tween._startTime += amount;}tween = tween._next;}if(adjustLabels){for(p in labels) {if(labels[p] >= ignoreBeforeTime){labels[p] += amount;}}}return this._uncache(true);};p._kill = function(vars,target){if(!vars && !target){return this._enabled(false,false);}var tweens=!target?this.getChildren(true,true,false):this.getTweensOf(target),i=tweens.length,changed=false;while(--i > -1) {if(tweens[i]._kill(vars,target)){changed = true;}}return changed;};p.clear = function(labels){var tweens=this.getChildren(false,true,true),i=tweens.length;this._time = this._totalTime = 0;while(--i > -1) {tweens[i]._enabled(false,false);}if(labels !== false){this._labels = {};}return this._uncache(true);};p.invalidate = function(){var tween=this._first;while(tween) {tween.invalidate();tween = tween._next;}return Animation.prototype.invalidate.call(this);;};p._enabled = function(enabled,ignoreTimeline){if(enabled === this._gc){var tween=this._first;while(tween) {tween._enabled(enabled,true);tween = tween._next;}}return SimpleTimeline.prototype._enabled.call(this,enabled,ignoreTimeline);};p.totalTime = function(time,suppressEvents,uncapped){this._forcingPlayhead = true;var val=Animation.prototype.totalTime.apply(this,arguments);this._forcingPlayhead = false;return val;};p.duration = function(value){if(!arguments.length){if(this._dirty){this.totalDuration(); //just triggers recalculation\n}return this._duration;}if(this.duration() !== 0 && value !== 0){this.timeScale(this._duration / value);}return this;};p.totalDuration = function(value){if(!arguments.length){if(this._dirty){var max=0,tween=this._last,prevStart=999999999999,prev,end;while(tween) {prev = tween._prev; //record it here in case the tween changes position in the sequence...\nif(tween._dirty){tween.totalDuration(); //could change the tween._startTime, so make sure the tween's cache is clean before analyzing it.\n}if(tween._startTime > prevStart && this._sortChildren && !tween._paused){ //in case one of the tweens shifted out of order, it needs to be re-inserted into the correct position in the sequence\nthis.add(tween,tween._startTime - tween._delay);}else {prevStart = tween._startTime;}if(tween._startTime < 0 && !tween._paused){ //children aren't allowed to have negative startTimes unless smoothChildTiming is true, so adjust here if one is found.\nmax -= tween._startTime;if(this._timeline.smoothChildTiming){this._startTime += tween._startTime / this._timeScale;}this.shiftChildren(-tween._startTime,false,-9999999999);prevStart = 0;}end = tween._startTime + tween._totalDuration / tween._timeScale;if(end > max){max = end;}tween = prev;}this._duration = this._totalDuration = max;this._dirty = false;}return this._totalDuration;}if(this.totalDuration() !== 0)if(value !== 0){this.timeScale(this._totalDuration / value);}return this;};p.paused = function(value){if(!value){ //if there's a pause directly at the spot from where we're unpausing, skip it.\nvar tween=this._first,time=this._time;while(tween) {if(tween._startTime === time && tween.data === \"isPause\"){tween._rawPrevTime = 0; //remember, _rawPrevTime is how zero-duration tweens/callbacks sense directionality and determine whether or not to fire. If _rawPrevTime is the same as _startTime on the next render, it won't fire.\n}tween = tween._next;}}return Animation.prototype.paused.apply(this,arguments);};p.usesFrames = function(){var tl=this._timeline;while(tl._timeline) {tl = tl._timeline;}return tl === Animation._rootFramesTimeline;};p.rawTime = function(){return this._paused?this._totalTime:(this._timeline.rawTime() - this._startTime) * this._timeScale;};return TimelineLite;},true); /*\n * ----------------------------------------------------------------\n * TimelineMax\n * ----------------------------------------------------------------\n */_gsScope._gsDefine(\"TimelineMax\",[\"TimelineLite\",\"TweenLite\",\"easing.Ease\"],function(TimelineLite,TweenLite,Ease){var TimelineMax=function TimelineMax(vars){TimelineLite.call(this,vars);this._repeat = this.vars.repeat || 0;this._repeatDelay = this.vars.repeatDelay || 0;this._cycle = 0;this._yoyo = this.vars.yoyo === true;this._dirty = true;},_tinyNum=0.0000000001,TweenLiteInternals=TweenLite._internals,_lazyTweens=TweenLiteInternals.lazyTweens,_lazyRender=TweenLiteInternals.lazyRender,_easeNone=new Ease(null,null,1,0),p=TimelineMax.prototype = new TimelineLite();p.constructor = TimelineMax;p.kill()._gc = false;TimelineMax.version = \"1.18.0\";p.invalidate = function(){this._yoyo = this.vars.yoyo === true;this._repeat = this.vars.repeat || 0;this._repeatDelay = this.vars.repeatDelay || 0;this._uncache(true);return TimelineLite.prototype.invalidate.call(this);};p.addCallback = function(callback,position,params,scope){return this.add(TweenLite.delayedCall(0,callback,params,scope),position);};p.removeCallback = function(callback,position){if(callback){if(position == null){this._kill(null,callback);}else {var a=this.getTweensOf(callback,false),i=a.length,time=this._parseTimeOrLabel(position);while(--i > -1) {if(a[i]._startTime === time){a[i]._enabled(false,false);}}}}return this;};p.removePause = function(position){return this.removeCallback(TimelineLite._internals.pauseCallback,position);};p.tweenTo = function(position,vars){vars = vars || {};var copy={ease:_easeNone,useFrames:this.usesFrames(),immediateRender:false},duration,p,t;for(p in vars) {copy[p] = vars[p];}copy.time = this._parseTimeOrLabel(position);duration = Math.abs(Number(copy.time) - this._time) / this._timeScale || 0.001;t = new TweenLite(this,duration,copy);copy.onStart = function(){t.target.paused(true);if(t.vars.time !== t.target.time() && duration === t.duration()){ //don't make the duration zero - if it's supposed to be zero, don't worry because it's already initting the tween and will complete immediately, effectively making the duration zero anyway. If we make duration zero, the tween won't run at all.\nt.duration(Math.abs(t.vars.time - t.target.time()) / t.target._timeScale);}if(vars.onStart){ //in case the user had an onStart in the vars - we don't want to overwrite it.\nt._callback(\"onStart\");}};return t;};p.tweenFromTo = function(fromPosition,toPosition,vars){vars = vars || {};fromPosition = this._parseTimeOrLabel(fromPosition);vars.startAt = {onComplete:this.seek,onCompleteParams:[fromPosition],callbackScope:this};vars.immediateRender = vars.immediateRender !== false;var t=this.tweenTo(toPosition,vars);return t.duration(Math.abs(t.vars.time - fromPosition) / this._timeScale || 0.001);};p.render = function(time,suppressEvents,force){if(this._gc){this._enabled(true,false);}var totalDur=!this._dirty?this._totalDuration:this.totalDuration(),dur=this._duration,prevTime=this._time,prevTotalTime=this._totalTime,prevStart=this._startTime,prevTimeScale=this._timeScale,prevRawPrevTime=this._rawPrevTime,prevPaused=this._paused,prevCycle=this._cycle,tween,isComplete,next,callback,internalForce,cycleDuration,pauseTween;if(time >= totalDur){if(!this._locked){this._totalTime = totalDur;this._cycle = this._repeat;}if(!this._reversed)if(!this._hasPausedChild()){isComplete = true;callback = \"onComplete\";internalForce = !!this._timeline.autoRemoveChildren; //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.\nif(this._duration === 0)if(time === 0 || prevRawPrevTime < 0 || prevRawPrevTime === _tinyNum)if(prevRawPrevTime !== time && this._first){internalForce = true;if(prevRawPrevTime > _tinyNum){callback = \"onReverseComplete\";}}}this._rawPrevTime = this._duration || !suppressEvents || time || this._rawPrevTime === time?time:_tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.\nif(this._yoyo && (this._cycle & 1) !== 0){this._time = time = 0;}else {this._time = dur;time = dur + 0.0001; //to avoid occasional floating point rounding errors - sometimes child tweens/timelines were not being fully completed (their progress might be 0.999999999999998 instead of 1 because when _time - tween._startTime is performed, floating point errors would return a value that was SLIGHTLY off). Try (999999999999.7 - 999999999999) * 1 = 0.699951171875 instead of 0.7. We cannot do less then 0.0001 because the same issue can occur when the duration is extremely large like 999999999999 in which case adding 0.00000001, for example, causes it to act like nothing was added.\n}}else if(time < 0.0000001){ //to work around occasional floating point math artifacts, round super small values to 0.\nif(!this._locked){this._totalTime = this._cycle = 0;}this._time = 0;if(prevTime !== 0 || dur === 0 && prevRawPrevTime !== _tinyNum && (prevRawPrevTime > 0 || time < 0 && prevRawPrevTime >= 0) && !this._locked){ //edge case for checking time < 0 && prevRawPrevTime >= 0: a zero-duration fromTo() tween inside a zero-duration timeline (yeah, very rare)\ncallback = \"onReverseComplete\";isComplete = this._reversed;}if(time < 0){this._active = false;if(this._timeline.autoRemoveChildren && this._reversed){internalForce = isComplete = true;callback = \"onReverseComplete\";}else if(prevRawPrevTime >= 0 && this._first){ //when going back beyond the start, force a render so that zero-duration tweens that sit at the very beginning render their start values properly. Otherwise, if the parent timeline's playhead lands exactly at this timeline's startTime, and then moves backwards, the zero-duration tweens at the beginning would still be at their end state.\ninternalForce = true;}this._rawPrevTime = time;}else {this._rawPrevTime = dur || !suppressEvents || time || this._rawPrevTime === time?time:_tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.\nif(time === 0 && isComplete){ //if there's a zero-duration tween at the very beginning of a timeline and the playhead lands EXACTLY at time 0, that tween will correctly render its end values, but we need to keep the timeline alive for one more render so that the beginning values render properly as the parent's playhead keeps moving beyond the begining. Imagine obj.x starts at 0 and then we do tl.set(obj, {x:100}).to(obj, 1, {x:200}) and then later we tl.reverse()...the goal is to have obj.x revert to 0. If the playhead happens to land on exactly 0, without this chunk of code, it'd complete the timeline and remove it from the rendering queue (not good).\ntween = this._first;while(tween && tween._startTime === 0) {if(!tween._duration){isComplete = false;}tween = tween._next;}}time = 0; //to avoid occasional floating point rounding errors (could cause problems especially with zero-duration tweens at the very beginning of the timeline)\nif(!this._initted){internalForce = true;}}}else {if(dur === 0 && prevRawPrevTime < 0){ //without this, zero-duration repeating timelines (like with a simple callback nested at the very beginning and a repeatDelay) wouldn't render the first time through.\ninternalForce = true;}this._time = this._rawPrevTime = time;if(!this._locked){this._totalTime = time;if(this._repeat !== 0){cycleDuration = dur + this._repeatDelay;this._cycle = this._totalTime / cycleDuration >> 0; //originally _totalTime % cycleDuration but floating point errors caused problems, so I normalized it. (4 % 0.8 should be 0 but it gets reported as 0.79999999!)\nif(this._cycle !== 0)if(this._cycle === this._totalTime / cycleDuration){this._cycle--; //otherwise when rendered exactly at the end time, it will act as though it is repeating (at the beginning)\n}this._time = this._totalTime - this._cycle * cycleDuration;if(this._yoyo)if((this._cycle & 1) !== 0){this._time = dur - this._time;}if(this._time > dur){this._time = dur;time = dur + 0.0001; //to avoid occasional floating point rounding error\n}else if(this._time < 0){this._time = time = 0;}else {time = this._time;}}}if(this._hasPause && !this._forcingPlayhead && !suppressEvents){time = this._time;if(time >= prevTime){tween = this._first;while(tween && tween._startTime <= time && !pauseTween) {if(!tween._duration)if(tween.data === \"isPause\" && !tween.ratio && !(tween._startTime === 0 && this._rawPrevTime === 0)){pauseTween = tween;}tween = tween._next;}}else {tween = this._last;while(tween && tween._startTime >= time && !pauseTween) {if(!tween._duration)if(tween.data === \"isPause\" && tween._rawPrevTime > 0){pauseTween = tween;}tween = tween._prev;}}if(pauseTween){this._time = time = pauseTween._startTime;this._totalTime = time + this._cycle * (this._totalDuration + this._repeatDelay);}}}if(this._cycle !== prevCycle)if(!this._locked){ /*\n\t\t\t\tmake sure children at the end/beginning of the timeline are rendered properly. If, for example,\n\t\t\t\ta 3-second long timeline rendered at 2.9 seconds previously, and now renders at 3.2 seconds (which\n\t\t\t\twould get transated to 2.8 seconds if the timeline yoyos or 0.2 seconds if it just repeats), there\n\t\t\t\tcould be a callback or a short tween that's at 2.95 or 3 seconds in which wouldn't render. So\n\t\t\t\twe need to push the timeline to the end (and/or beginning depending on its yoyo value). Also we must\n\t\t\t\tensure that zero-duration tweens at the very beginning or end of the TimelineMax work.\n\t\t\t\t*/var backwards=this._yoyo && (prevCycle & 1) !== 0,wrap=backwards === (this._yoyo && (this._cycle & 1) !== 0),recTotalTime=this._totalTime,recCycle=this._cycle,recRawPrevTime=this._rawPrevTime,recTime=this._time;this._totalTime = prevCycle * dur;if(this._cycle < prevCycle){backwards = !backwards;}else {this._totalTime += dur;}this._time = prevTime; //temporarily revert _time so that render() renders the children in the correct order. Without this, tweens won't rewind correctly. We could arhictect things in a \"cleaner\" way by splitting out the rendering queue into a separate method but for performance reasons, we kept it all inside this method.\nthis._rawPrevTime = dur === 0?prevRawPrevTime - 0.0001:prevRawPrevTime;this._cycle = prevCycle;this._locked = true; //prevents changes to totalTime and skips repeat/yoyo behavior when we recursively call render()\nprevTime = backwards?0:dur;this.render(prevTime,suppressEvents,dur === 0);if(!suppressEvents)if(!this._gc){if(this.vars.onRepeat){this._callback(\"onRepeat\");}}if(wrap){prevTime = backwards?dur + 0.0001:-0.0001;this.render(prevTime,true,false);}this._locked = false;if(this._paused && !prevPaused){ //if the render() triggered callback that paused this timeline, we should abort (very rare, but possible)\nreturn;}this._time = recTime;this._totalTime = recTotalTime;this._cycle = recCycle;this._rawPrevTime = recRawPrevTime;}if((this._time === prevTime || !this._first) && !force && !internalForce && !pauseTween){if(prevTotalTime !== this._totalTime)if(this._onUpdate)if(!suppressEvents){ //so that onUpdate fires even during the repeatDelay - as long as the totalTime changed, we should trigger onUpdate.\nthis._callback(\"onUpdate\");}return;}else if(!this._initted){this._initted = true;}if(!this._active)if(!this._paused && this._totalTime !== prevTotalTime && time > 0){this._active = true; //so that if the user renders the timeline (as opposed to the parent timeline rendering it), it is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the timeline already finished but the user manually re-renders it as halfway done, for example.\n}if(prevTotalTime === 0)if(this.vars.onStart)if(this._totalTime !== 0)if(!suppressEvents){this._callback(\"onStart\");}if(this._time >= prevTime){tween = this._first;while(tween) {next = tween._next; //record it here because the value could change after rendering...\nif(this._paused && !prevPaused){ //in case a tween pauses the timeline when rendering\nbreak;}else if(tween._active || tween._startTime <= this._time && !tween._paused && !tween._gc){if(pauseTween === tween){this.pause();}if(!tween._reversed){tween.render((time - tween._startTime) * tween._timeScale,suppressEvents,force);}else {tween.render((!tween._dirty?tween._totalDuration:tween.totalDuration()) - (time - tween._startTime) * tween._timeScale,suppressEvents,force);}}tween = next;}}else {tween = this._last;while(tween) {next = tween._prev; //record it here because the value could change after rendering...\nif(this._paused && !prevPaused){ //in case a tween pauses the timeline when rendering\nbreak;}else if(tween._active || tween._startTime <= prevTime && !tween._paused && !tween._gc){if(pauseTween === tween){pauseTween = tween._prev; //the linked list is organized by _startTime, thus it's possible that a tween could start BEFORE the pause and end after it, in which case it would be positioned before the pause tween in the linked list, but we should render it before we pause() the timeline and cease rendering. This is only a concern when going in reverse.\nwhile(pauseTween && pauseTween.endTime() > this._time) {pauseTween.render(pauseTween._reversed?pauseTween.totalDuration() - (time - pauseTween._startTime) * pauseTween._timeScale:(time - pauseTween._startTime) * pauseTween._timeScale,suppressEvents,force);pauseTween = pauseTween._prev;}pauseTween = null;this.pause();}if(!tween._reversed){tween.render((time - tween._startTime) * tween._timeScale,suppressEvents,force);}else {tween.render((!tween._dirty?tween._totalDuration:tween.totalDuration()) - (time - tween._startTime) * tween._timeScale,suppressEvents,force);}}tween = next;}}if(this._onUpdate)if(!suppressEvents){if(_lazyTweens.length){ //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.\n_lazyRender();}this._callback(\"onUpdate\");}if(callback)if(!this._locked)if(!this._gc)if(prevStart === this._startTime || prevTimeScale !== this._timeScale)if(this._time === 0 || totalDur >= this.totalDuration()){ //if one of the tweens that was rendered altered this timeline's startTime (like if an onComplete reversed the timeline), it probably isn't complete. If it is, don't worry, because whatever call altered the startTime would complete if it was necessary at the new time. The only exception is the timeScale property. Also check _gc because there's a chance that kill() could be called in an onUpdate\nif(isComplete){if(_lazyTweens.length){ //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onComplete on a timeline that reports/checks tweened values.\n_lazyRender();}if(this._timeline.autoRemoveChildren){this._enabled(false,false);}this._active = false;}if(!suppressEvents && this.vars[callback]){this._callback(callback);}}};p.getActive = function(nested,tweens,timelines){if(nested == null){nested = true;}if(tweens == null){tweens = true;}if(timelines == null){timelines = false;}var a=[],all=this.getChildren(nested,tweens,timelines),cnt=0,l=all.length,i,tween;for(i = 0;i < l;i++) {tween = all[i];if(tween.isActive()){a[cnt++] = tween;}}return a;};p.getLabelAfter = function(time){if(!time)if(time !== 0){ //faster than isNan()\ntime = this._time;}var labels=this.getLabelsArray(),l=labels.length,i;for(i = 0;i < l;i++) {if(labels[i].time > time){return labels[i].name;}}return null;};p.getLabelBefore = function(time){if(time == null){time = this._time;}var labels=this.getLabelsArray(),i=labels.length;while(--i > -1) {if(labels[i].time < time){return labels[i].name;}}return null;};p.getLabelsArray = function(){var a=[],cnt=0,p;for(p in this._labels) {a[cnt++] = {time:this._labels[p],name:p};}a.sort(function(a,b){return a.time - b.time;});return a;}; //---- GETTERS / SETTERS -------------------------------------------------------------------------------------------------------\np.progress = function(value,suppressEvents){return !arguments.length?this._time / this.duration():this.totalTime(this.duration() * (this._yoyo && (this._cycle & 1) !== 0?1 - value:value) + this._cycle * (this._duration + this._repeatDelay),suppressEvents);};p.totalProgress = function(value,suppressEvents){return !arguments.length?this._totalTime / this.totalDuration():this.totalTime(this.totalDuration() * value,suppressEvents);};p.totalDuration = function(value){if(!arguments.length){if(this._dirty){TimelineLite.prototype.totalDuration.call(this); //just forces refresh\n//Instead of Infinity, we use 999999999999 so that we can accommodate reverses.\nthis._totalDuration = this._repeat === -1?999999999999:this._duration * (this._repeat + 1) + this._repeatDelay * this._repeat;}return this._totalDuration;}return this._repeat === -1?this:this.duration((value - this._repeat * this._repeatDelay) / (this._repeat + 1));};p.time = function(value,suppressEvents){if(!arguments.length){return this._time;}if(this._dirty){this.totalDuration();}if(value > this._duration){value = this._duration;}if(this._yoyo && (this._cycle & 1) !== 0){value = this._duration - value + this._cycle * (this._duration + this._repeatDelay);}else if(this._repeat !== 0){value += this._cycle * (this._duration + this._repeatDelay);}return this.totalTime(value,suppressEvents);};p.repeat = function(value){if(!arguments.length){return this._repeat;}this._repeat = value;return this._uncache(true);};p.repeatDelay = function(value){if(!arguments.length){return this._repeatDelay;}this._repeatDelay = value;return this._uncache(true);};p.yoyo = function(value){if(!arguments.length){return this._yoyo;}this._yoyo = value;return this;};p.currentLabel = function(value){if(!arguments.length){return this.getLabelBefore(this._time + 0.00000001);}return this.seek(value,true);};return TimelineMax;},true); /*\n * ----------------------------------------------------------------\n * BezierPlugin\n * ----------------------------------------------------------------\n */(function(){var _RAD2DEG=180 / Math.PI,_r1=[],_r2=[],_r3=[],_corProps={},_globals=_gsScope._gsDefine.globals,Segment=function Segment(a,b,c,d){this.a = a;this.b = b;this.c = c;this.d = d;this.da = d - a;this.ca = c - a;this.ba = b - a;},_correlate=\",x,y,z,left,top,right,bottom,marginTop,marginLeft,marginRight,marginBottom,paddingLeft,paddingTop,paddingRight,paddingBottom,backgroundPosition,backgroundPosition_y,\",cubicToQuadratic=function cubicToQuadratic(a,b,c,d){var q1={a:a},q2={},q3={},q4={c:d},mab=(a + b) / 2,mbc=(b + c) / 2,mcd=(c + d) / 2,mabc=(mab + mbc) / 2,mbcd=(mbc + mcd) / 2,m8=(mbcd - mabc) / 8;q1.b = mab + (a - mab) / 4;q2.b = mabc + m8;q1.c = q2.a = (q1.b + q2.b) / 2;q2.c = q3.a = (mabc + mbcd) / 2;q3.b = mbcd - m8;q4.b = mcd + (d - mcd) / 4;q3.c = q4.a = (q3.b + q4.b) / 2;return [q1,q2,q3,q4];},_calculateControlPoints=function _calculateControlPoints(a,curviness,quad,basic,correlate){var l=a.length - 1,ii=0,cp1=a[0].a,i,p1,p2,p3,seg,m1,m2,mm,cp2,qb,r1,r2,tl;for(i = 0;i < l;i++) {seg = a[ii];p1 = seg.a;p2 = seg.d;p3 = a[ii + 1].d;if(correlate){r1 = _r1[i];r2 = _r2[i];tl = (r2 + r1) * curviness * 0.25 / (basic?0.5:_r3[i] || 0.5);m1 = p2 - (p2 - p1) * (basic?curviness * 0.5:r1 !== 0?tl / r1:0);m2 = p2 + (p3 - p2) * (basic?curviness * 0.5:r2 !== 0?tl / r2:0);mm = p2 - (m1 + ((m2 - m1) * (r1 * 3 / (r1 + r2) + 0.5) / 4 || 0));}else {m1 = p2 - (p2 - p1) * curviness * 0.5;m2 = p2 + (p3 - p2) * curviness * 0.5;mm = p2 - (m1 + m2) / 2;}m1 += mm;m2 += mm;seg.c = cp2 = m1;if(i !== 0){seg.b = cp1;}else {seg.b = cp1 = seg.a + (seg.c - seg.a) * 0.6; //instead of placing b on a exactly, we move it inline with c so that if the user specifies an ease like Back.easeIn or Elastic.easeIn which goes BEYOND the beginning, it will do so smoothly.\n}seg.da = p2 - p1;seg.ca = cp2 - p1;seg.ba = cp1 - p1;if(quad){qb = cubicToQuadratic(p1,cp1,cp2,p2);a.splice(ii,1,qb[0],qb[1],qb[2],qb[3]);ii += 4;}else {ii++;}cp1 = m2;}seg = a[ii];seg.b = cp1;seg.c = cp1 + (seg.d - cp1) * 0.4; //instead of placing c on d exactly, we move it inline with b so that if the user specifies an ease like Back.easeOut or Elastic.easeOut which goes BEYOND the end, it will do so smoothly.\nseg.da = seg.d - seg.a;seg.ca = seg.c - seg.a;seg.ba = cp1 - seg.a;if(quad){qb = cubicToQuadratic(seg.a,cp1,seg.c,seg.d);a.splice(ii,1,qb[0],qb[1],qb[2],qb[3]);}},_parseAnchors=function _parseAnchors(values,p,correlate,prepend){var a=[],l,i,p1,p2,p3,tmp;if(prepend){values = [prepend].concat(values);i = values.length;while(--i > -1) {if(typeof (tmp = values[i][p]) === \"string\")if(tmp.charAt(1) === \"=\"){values[i][p] = prepend[p] + Number(tmp.charAt(0) + tmp.substr(2)); //accommodate relative values. Do it inline instead of breaking it out into a function for speed reasons\n}}}l = values.length - 2;if(l < 0){a[0] = new Segment(values[0][p],0,0,values[l < -1?0:1][p]);return a;}for(i = 0;i < l;i++) {p1 = values[i][p];p2 = values[i + 1][p];a[i] = new Segment(p1,0,0,p2);if(correlate){p3 = values[i + 2][p];_r1[i] = (_r1[i] || 0) + (p2 - p1) * (p2 - p1);_r2[i] = (_r2[i] || 0) + (p3 - p2) * (p3 - p2);}}a[i] = new Segment(values[i][p],0,0,values[i + 1][p]);return a;},bezierThrough=function bezierThrough(values,curviness,quadratic,basic,correlate,prepend){var obj={},props=[],first=prepend || values[0],i,p,a,j,r,l,seamless,last;correlate = typeof correlate === \"string\"?\",\" + correlate + \",\":_correlate;if(curviness == null){curviness = 1;}for(p in values[0]) {props.push(p);} //check to see if the last and first values are identical (well, within 0.05). If so, make seamless by appending the second element to the very end of the values array and the 2nd-to-last element to the very beginning (we'll remove those segments later)\nif(values.length > 1){last = values[values.length - 1];seamless = true;i = props.length;while(--i > -1) {p = props[i];if(Math.abs(first[p] - last[p]) > 0.05){ //build in a tolerance of +/-0.05 to accommodate rounding errors. For example, if you set an object's position to 4.945, Flash will make it 4.9\nseamless = false;break;}}if(seamless){values = values.concat(); //duplicate the array to avoid contaminating the original which the user may be reusing for other tweens\nif(prepend){values.unshift(prepend);}values.push(values[1]);prepend = values[values.length - 3];}}_r1.length = _r2.length = _r3.length = 0;i = props.length;while(--i > -1) {p = props[i];_corProps[p] = correlate.indexOf(\",\" + p + \",\") !== -1;obj[p] = _parseAnchors(values,p,_corProps[p],prepend);}i = _r1.length;while(--i > -1) {_r1[i] = Math.sqrt(_r1[i]);_r2[i] = Math.sqrt(_r2[i]);}if(!basic){i = props.length;while(--i > -1) {if(_corProps[p]){a = obj[props[i]];l = a.length - 1;for(j = 0;j < l;j++) {r = a[j + 1].da / _r2[j] + a[j].da / _r1[j];_r3[j] = (_r3[j] || 0) + r * r;}}}i = _r3.length;while(--i > -1) {_r3[i] = Math.sqrt(_r3[i]);}}i = props.length;j = quadratic?4:1;while(--i > -1) {p = props[i];a = obj[p];_calculateControlPoints(a,curviness,quadratic,basic,_corProps[p]); //this method requires that _parseAnchors() and _setSegmentRatios() ran first so that _r1, _r2, and _r3 values are populated for all properties\nif(seamless){a.splice(0,j);a.splice(a.length - j,j);}}return obj;},_parseBezierData=function _parseBezierData(values,type,prepend){type = type || \"soft\";var obj={},inc=type === \"cubic\"?3:2,soft=type === \"soft\",props=[],a,b,c,d,cur,i,j,l,p,cnt,tmp;if(soft && prepend){values = [prepend].concat(values);}if(values == null || values.length < inc + 1){throw \"invalid Bezier data\";}for(p in values[0]) {props.push(p);}i = props.length;while(--i > -1) {p = props[i];obj[p] = cur = [];cnt = 0;l = values.length;for(j = 0;j < l;j++) {a = prepend == null?values[j][p]:typeof (tmp = values[j][p]) === \"string\" && tmp.charAt(1) === \"=\"?prepend[p] + Number(tmp.charAt(0) + tmp.substr(2)):Number(tmp);if(soft)if(j > 1)if(j < l - 1){cur[cnt++] = (a + cur[cnt - 2]) / 2;}cur[cnt++] = a;}l = cnt - inc + 1;cnt = 0;for(j = 0;j < l;j += inc) {a = cur[j];b = cur[j + 1];c = cur[j + 2];d = inc === 2?0:cur[j + 3];cur[cnt++] = tmp = inc === 3?new Segment(a,b,c,d):new Segment(a,(2 * b + a) / 3,(2 * b + c) / 3,c);}cur.length = cnt;}return obj;},_addCubicLengths=function _addCubicLengths(a,steps,resolution){var inc=1 / resolution,j=a.length,d,d1,s,da,ca,ba,p,i,inv,bez,index;while(--j > -1) {bez = a[j];s = bez.a;da = bez.d - s;ca = bez.c - s;ba = bez.b - s;d = d1 = 0;for(i = 1;i <= resolution;i++) {p = inc * i;inv = 1 - p;d = d1 - (d1 = (p * p * da + 3 * inv * (p * ca + inv * ba)) * p);index = j * resolution + i - 1;steps[index] = (steps[index] || 0) + d * d;}}},_parseLengthData=function _parseLengthData(obj,resolution){resolution = resolution >> 0 || 6;var a=[],lengths=[],d=0,total=0,threshold=resolution - 1,segments=[],curLS=[], //current length segments array\np,i,l,index;for(p in obj) {_addCubicLengths(obj[p],a,resolution);}l = a.length;for(i = 0;i < l;i++) {d += Math.sqrt(a[i]);index = i % resolution;curLS[index] = d;if(index === threshold){total += d;index = i / resolution >> 0;segments[index] = curLS;lengths[index] = total;d = 0;curLS = [];}}return {length:total,lengths:lengths,segments:segments};},BezierPlugin=_gsScope._gsDefine.plugin({propName:\"bezier\",priority:-1,version:\"1.3.4\",API:2,global:true, //gets called when the tween renders for the first time. This is where initial values should be recorded and any setup routines should run.\ninit:function init(target,vars,tween){this._target = target;if(vars instanceof Array){vars = {values:vars};}this._func = {};this._round = {};this._props = [];this._timeRes = vars.timeResolution == null?6:parseInt(vars.timeResolution,10);var values=vars.values || [],first={},second=values[0],autoRotate=vars.autoRotate || tween.vars.orientToBezier,p,isFunc,i,j,prepend;this._autoRotate = autoRotate?autoRotate instanceof Array?autoRotate:[[\"x\",\"y\",\"rotation\",autoRotate === true?0:Number(autoRotate) || 0]]:null;for(p in second) {this._props.push(p);}i = this._props.length;while(--i > -1) {p = this._props[i];this._overwriteProps.push(p);isFunc = this._func[p] = typeof target[p] === \"function\";first[p] = !isFunc?parseFloat(target[p]):target[p.indexOf(\"set\") || typeof target[\"get\" + p.substr(3)] !== \"function\"?p:\"get\" + p.substr(3)]();if(!prepend)if(first[p] !== values[0][p]){prepend = first;}}this._beziers = vars.type !== \"cubic\" && vars.type !== \"quadratic\" && vars.type !== \"soft\"?bezierThrough(values,isNaN(vars.curviness)?1:vars.curviness,false,vars.type === \"thruBasic\",vars.correlate,prepend):_parseBezierData(values,vars.type,first);this._segCount = this._beziers[p].length;if(this._timeRes){var ld=_parseLengthData(this._beziers,this._timeRes);this._length = ld.length;this._lengths = ld.lengths;this._segments = ld.segments;this._l1 = this._li = this._s1 = this._si = 0;this._l2 = this._lengths[0];this._curSeg = this._segments[0];this._s2 = this._curSeg[0];this._prec = 1 / this._curSeg.length;}if(autoRotate = this._autoRotate){this._initialRotations = [];if(!(autoRotate[0] instanceof Array)){this._autoRotate = autoRotate = [autoRotate];}i = autoRotate.length;while(--i > -1) {for(j = 0;j < 3;j++) {p = autoRotate[i][j];this._func[p] = typeof target[p] === \"function\"?target[p.indexOf(\"set\") || typeof target[\"get\" + p.substr(3)] !== \"function\"?p:\"get\" + p.substr(3)]:false;}p = autoRotate[i][2];this._initialRotations[i] = this._func[p]?this._func[p].call(this._target):this._target[p];}}this._startRatio = tween.vars.runBackwards?1:0; //we determine the starting ratio when the tween inits which is always 0 unless the tween has runBackwards:true (indicating it's a from() tween) in which case it's 1.\nreturn true;}, //called each time the values should be updated, and the ratio gets passed as the only parameter (typically it's a value between 0 and 1, but it can exceed those when using an ease like Elastic.easeOut or Back.easeOut, etc.)\nset:function set(v){var segments=this._segCount,func=this._func,target=this._target,notStart=v !== this._startRatio,curIndex,inv,i,p,b,t,val,l,lengths,curSeg;if(!this._timeRes){curIndex = v < 0?0:v >= 1?segments - 1:segments * v >> 0;t = (v - curIndex * (1 / segments)) * segments;}else {lengths = this._lengths;curSeg = this._curSeg;v *= this._length;i = this._li; //find the appropriate segment (if the currently cached one isn't correct)\nif(v > this._l2 && i < segments - 1){l = segments - 1;while(i < l && (this._l2 = lengths[++i]) <= v) {}this._l1 = lengths[i - 1];this._li = i;this._curSeg = curSeg = this._segments[i];this._s2 = curSeg[this._s1 = this._si = 0];}else if(v < this._l1 && i > 0){while(i > 0 && (this._l1 = lengths[--i]) >= v) {}if(i === 0 && v < this._l1){this._l1 = 0;}else {i++;}this._l2 = lengths[i];this._li = i;this._curSeg = curSeg = this._segments[i];this._s1 = curSeg[(this._si = curSeg.length - 1) - 1] || 0;this._s2 = curSeg[this._si];}curIndex = i; //now find the appropriate sub-segment (we split it into the number of pieces that was defined by \"precision\" and measured each one)\nv -= this._l1;i = this._si;if(v > this._s2 && i < curSeg.length - 1){l = curSeg.length - 1;while(i < l && (this._s2 = curSeg[++i]) <= v) {}this._s1 = curSeg[i - 1];this._si = i;}else if(v < this._s1 && i > 0){while(i > 0 && (this._s1 = curSeg[--i]) >= v) {}if(i === 0 && v < this._s1){this._s1 = 0;}else {i++;}this._s2 = curSeg[i];this._si = i;}t = (i + (v - this._s1) / (this._s2 - this._s1)) * this._prec;}inv = 1 - t;i = this._props.length;while(--i > -1) {p = this._props[i];b = this._beziers[p][curIndex];val = (t * t * b.da + 3 * inv * (t * b.ca + inv * b.ba)) * t + b.a;if(this._round[p]){val = Math.round(val);}if(func[p]){target[p](val);}else {target[p] = val;}}if(this._autoRotate){var ar=this._autoRotate,b2,x1,y1,x2,y2,add,conv;i = ar.length;while(--i > -1) {p = ar[i][2];add = ar[i][3] || 0;conv = ar[i][4] === true?1:_RAD2DEG;b = this._beziers[ar[i][0]];b2 = this._beziers[ar[i][1]];if(b && b2){ //in case one of the properties got overwritten.\nb = b[curIndex];b2 = b2[curIndex];x1 = b.a + (b.b - b.a) * t;x2 = b.b + (b.c - b.b) * t;x1 += (x2 - x1) * t;x2 += (b.c + (b.d - b.c) * t - x2) * t;y1 = b2.a + (b2.b - b2.a) * t;y2 = b2.b + (b2.c - b2.b) * t;y1 += (y2 - y1) * t;y2 += (b2.c + (b2.d - b2.c) * t - y2) * t;val = notStart?Math.atan2(y2 - y1,x2 - x1) * conv + add:this._initialRotations[i];if(func[p]){target[p](val);}else {target[p] = val;}}}}}}),p=BezierPlugin.prototype;BezierPlugin.bezierThrough = bezierThrough;BezierPlugin.cubicToQuadratic = cubicToQuadratic;BezierPlugin._autoCSS = true; //indicates that this plugin can be inserted into the \"css\" object using the autoCSS feature of TweenLite\nBezierPlugin.quadraticToCubic = function(a,b,c){return new Segment(a,(2 * b + a) / 3,(2 * b + c) / 3,c);};BezierPlugin._cssRegister = function(){var CSSPlugin=_globals.CSSPlugin;if(!CSSPlugin){return;}var _internals=CSSPlugin._internals,_parseToProxy=_internals._parseToProxy,_setPluginRatio=_internals._setPluginRatio,CSSPropTween=_internals.CSSPropTween;_internals._registerComplexSpecialProp(\"bezier\",{parser:function parser(t,e,prop,cssp,pt,plugin){if(e instanceof Array){e = {values:e};}plugin = new BezierPlugin();var values=e.values,l=values.length - 1,pluginValues=[],v={},i,p,data;if(l < 0){return pt;}for(i = 0;i <= l;i++) {data = _parseToProxy(t,values[i],cssp,pt,plugin,l !== i);pluginValues[i] = data.end;}for(p in e) {v[p] = e[p]; //duplicate the vars object because we need to alter some things which would cause problems if the user plans to reuse the same vars object for another tween.\n}v.values = pluginValues;pt = new CSSPropTween(t,\"bezier\",0,0,data.pt,2);pt.data = data;pt.plugin = plugin;pt.setRatio = _setPluginRatio;if(v.autoRotate === 0){v.autoRotate = true;}if(v.autoRotate && !(v.autoRotate instanceof Array)){i = v.autoRotate === true?0:Number(v.autoRotate);v.autoRotate = data.end.left != null?[[\"left\",\"top\",\"rotation\",i,false]]:data.end.x != null?[[\"x\",\"y\",\"rotation\",i,false]]:false;}if(v.autoRotate){if(!cssp._transform){cssp._enableTransforms(false);}data.autoRotate = cssp._target._gsTransform;}plugin._onInitTween(data.proxy,v,cssp._tween);return pt;}});};p._roundProps = function(lookup,value){var op=this._overwriteProps,i=op.length;while(--i > -1) {if(lookup[op[i]] || lookup.bezier || lookup.bezierThrough){this._round[op[i]] = value;}}};p._kill = function(lookup){var a=this._props,p,i;for(p in this._beziers) {if(p in lookup){delete this._beziers[p];delete this._func[p];i = a.length;while(--i > -1) {if(a[i] === p){a.splice(i,1);}}}}return this._super._kill.call(this,lookup);};})(); /*\n * ----------------------------------------------------------------\n * CSSPlugin\n * ----------------------------------------------------------------\n */_gsScope._gsDefine(\"plugins.CSSPlugin\",[\"plugins.TweenPlugin\",\"TweenLite\"],function(TweenPlugin,TweenLite){ /** @constructor **/var CSSPlugin=function CSSPlugin(){TweenPlugin.call(this,\"css\");this._overwriteProps.length = 0;this.setRatio = CSSPlugin.prototype.setRatio; //speed optimization (avoid prototype lookup on this \"hot\" method)\n},_globals=_gsScope._gsDefine.globals,_hasPriority, //turns true whenever a CSSPropTween instance is created that has a priority other than 0. This helps us discern whether or not we should spend the time organizing the linked list or not after a CSSPlugin's _onInitTween() method is called.\n_suffixMap, //we set this in _onInitTween() each time as a way to have a persistent variable we can use in other methods like _parse() without having to pass it around as a parameter and we keep _parse() decoupled from a particular CSSPlugin instance\n_cs, //computed style (we store this in a shared variable to conserve memory and make minification tighter\n_overwriteProps, //alias to the currently instantiating CSSPlugin's _overwriteProps array. We use this closure in order to avoid having to pass a reference around from method to method and aid in minification.\n_specialProps={},p=CSSPlugin.prototype = new TweenPlugin(\"css\");p.constructor = CSSPlugin;CSSPlugin.version = \"1.18.0\";CSSPlugin.API = 2;CSSPlugin.defaultTransformPerspective = 0;CSSPlugin.defaultSkewType = \"compensated\";CSSPlugin.defaultSmoothOrigin = true;p = \"px\"; //we'll reuse the \"p\" variable to keep file size down\nCSSPlugin.suffixMap = {top:p,right:p,bottom:p,left:p,width:p,height:p,fontSize:p,padding:p,margin:p,perspective:p,lineHeight:\"\"};var _numExp=/(?:\\d|\\-\\d|\\.\\d|\\-\\.\\d)+/g,_relNumExp=/(?:\\d|\\-\\d|\\.\\d|\\-\\.\\d|\\+=\\d|\\-=\\d|\\+=.\\d|\\-=\\.\\d)+/g,_valuesExp=/(?:\\+=|\\-=|\\-|\\b)[\\d\\-\\.]+[a-zA-Z0-9]*(?:%|\\b)/gi, //finds all the values that begin with numbers or += or -= and then a number. Includes suffixes. We use this to split complex values apart like \"1px 5px 20px rgb(255,102,51)\"\n_NaNExp=/(?![+-]?\\d*\\.?\\d+|[+-]|e[+-]\\d+)[^0-9]/g, //also allows scientific notation and doesn't kill the leading -/+ in -= and +=\n_suffixExp=/(?:\\d|\\-|\\+|=|#|\\.)*/g,_opacityExp=/opacity *= *([^)]*)/i,_opacityValExp=/opacity:([^;]*)/i,_alphaFilterExp=/alpha\\(opacity *=.+?\\)/i,_rgbhslExp=/^(rgb|hsl)/,_capsExp=/([A-Z])/g,_camelExp=/-([a-z])/gi,_urlExp=/(^(?:url\\(\\\"|url\\())|(?:(\\\"\\))$|\\)$)/gi, //for pulling out urls from url(...) or url(\"...\") strings (some browsers wrap urls in quotes, some don't when reporting things like backgroundImage)\n_camelFunc=function _camelFunc(s,g){return g.toUpperCase();},_horizExp=/(?:Left|Right|Width)/i,_ieGetMatrixExp=/(M11|M12|M21|M22)=[\\d\\-\\.e]+/gi,_ieSetMatrixExp=/progid\\:DXImageTransform\\.Microsoft\\.Matrix\\(.+?\\)/i,_commasOutsideParenExp=/,(?=[^\\)]*(?:\\(|$))/gi, //finds any commas that are not within parenthesis\n_DEG2RAD=Math.PI / 180,_RAD2DEG=180 / Math.PI,_forcePT={},_doc=document,_createElement=function _createElement(type){return _doc.createElementNS?_doc.createElementNS(\"http://www.w3.org/1999/xhtml\",type):_doc.createElement(type);},_tempDiv=_createElement(\"div\"),_tempImg=_createElement(\"img\"),_internals=CSSPlugin._internals = {_specialProps:_specialProps}, //provides a hook to a few internal methods that we need to access from inside other plugins\n_agent=navigator.userAgent,_autoRound,_reqSafariFix, //we won't apply the Safari transform fix until we actually come across a tween that affects a transform property (to maintain best performance).\n_isSafari,_isFirefox, //Firefox has a bug that causes 3D transformed elements to randomly disappear unless a repaint is forced after each update on each element.\n_isSafariLT6, //Safari (and Android 4 which uses a flavor of Safari) has a bug that prevents changes to \"top\" and \"left\" properties from rendering properly if changed on the same frame as a transform UNLESS we set the element's WebkitBackfaceVisibility to hidden (weird, I know). Doing this for Android 3 and earlier seems to actually cause other problems, though (fun!)\n_ieVers,_supportsOpacity=(function(){ //we set _isSafari, _ieVers, _isFirefox, and _supportsOpacity all in one function here to reduce file size slightly, especially in the minified version.\nvar i=_agent.indexOf(\"Android\"),a=_createElement(\"a\");_isSafari = _agent.indexOf(\"Safari\") !== -1 && _agent.indexOf(\"Chrome\") === -1 && (i === -1 || Number(_agent.substr(i + 8,1)) > 3);_isSafariLT6 = _isSafari && Number(_agent.substr(_agent.indexOf(\"Version/\") + 8,1)) < 6;_isFirefox = _agent.indexOf(\"Firefox\") !== -1;if(/MSIE ([0-9]{1,}[\\.0-9]{0,})/.exec(_agent) || /Trident\\/.*rv:([0-9]{1,}[\\.0-9]{0,})/.exec(_agent)){_ieVers = parseFloat(RegExp.$1);}if(!a){return false;}a.style.cssText = \"top:1px;opacity:.55;\";return (/^0.55/.test(a.style.opacity));})(),_getIEOpacity=function _getIEOpacity(v){return _opacityExp.test(typeof v === \"string\"?v:(v.currentStyle?v.currentStyle.filter:v.style.filter) || \"\")?parseFloat(RegExp.$1) / 100:1;},_log=function _log(s){ //for logging messages, but in a way that won't throw errors in old versions of IE.\nif(window.console){console.log(s);}},_prefixCSS=\"\", //the non-camelCase vendor prefix like \"-o-\", \"-moz-\", \"-ms-\", or \"-webkit-\"\n_prefix=\"\", //camelCase vendor prefix like \"O\", \"ms\", \"Webkit\", or \"Moz\".\n// @private feed in a camelCase property name like \"transform\" and it will check to see if it is valid as-is or if it needs a vendor prefix. It returns the corrected camelCase property name (i.e. \"WebkitTransform\" or \"MozTransform\" or \"transform\" or null if no such property is found, like if the browser is IE8 or before, \"transform\" won't be found at all)\n_checkPropPrefix=function _checkPropPrefix(p,e){e = e || _tempDiv;var s=e.style,a,i;if(s[p] !== undefined){return p;}p = p.charAt(0).toUpperCase() + p.substr(1);a = [\"O\",\"Moz\",\"ms\",\"Ms\",\"Webkit\"];i = 5;while(--i > -1 && s[a[i] + p] === undefined) {}if(i >= 0){_prefix = i === 3?\"ms\":a[i];_prefixCSS = \"-\" + _prefix.toLowerCase() + \"-\";return _prefix + p;}return null;},_getComputedStyle=_doc.defaultView?_doc.defaultView.getComputedStyle:function(){}, /**\n\t\t\t * @private Returns the css style for a particular property of an element. For example, to get whatever the current \"left\" css value for an element with an ID of \"myElement\", you could do:\n\t\t\t * var currentLeft = CSSPlugin.getStyle( document.getElementById(\"myElement\"), \"left\");\n\t\t\t *\n\t\t\t * @param {!Object} t Target element whose style property you want to query\n\t\t\t * @param {!string} p Property name (like \"left\" or \"top\" or \"marginTop\", etc.)\n\t\t\t * @param {Object=} cs Computed style object. This just provides a way to speed processing if you're going to get several properties on the same element in quick succession - you can reuse the result of the getComputedStyle() call.\n\t\t\t * @param {boolean=} calc If true, the value will not be read directly from the element's \"style\" property (if it exists there), but instead the getComputedStyle() result will be used. This can be useful when you want to ensure that the browser itself is interpreting the value.\n\t\t\t * @param {string=} dflt Default value that should be returned in the place of null, \"none\", \"auto\" or \"auto auto\".\n\t\t\t * @return {?string} The current property value\n\t\t\t */_getStyle=CSSPlugin.getStyle = function(t,p,cs,calc,dflt){var rv;if(!_supportsOpacity)if(p === \"opacity\"){ //several versions of IE don't use the standard \"opacity\" property - they use things like filter:alpha(opacity=50), so we parse that here.\nreturn _getIEOpacity(t);}if(!calc && t.style[p]){rv = t.style[p];}else if(cs = cs || _getComputedStyle(t)){rv = cs[p] || cs.getPropertyValue(p) || cs.getPropertyValue(p.replace(_capsExp,\"-$1\").toLowerCase());}else if(t.currentStyle){rv = t.currentStyle[p];}return dflt != null && (!rv || rv === \"none\" || rv === \"auto\" || rv === \"auto auto\")?dflt:rv;}, /**\n\t\t\t * @private Pass the target element, the property name, the numeric value, and the suffix (like \"%\", \"em\", \"px\", etc.) and it will spit back the equivalent pixel number.\n\t\t\t * @param {!Object} t Target element\n\t\t\t * @param {!string} p Property name (like \"left\", \"top\", \"marginLeft\", etc.)\n\t\t\t * @param {!number} v Value\n\t\t\t * @param {string=} sfx Suffix (like \"px\" or \"%\" or \"em\")\n\t\t\t * @param {boolean=} recurse If true, the call is a recursive one. In some browsers (like IE7/8), occasionally the value isn't accurately reported initially, but if we run the function again it will take effect.\n\t\t\t * @return {number} value in pixels\n\t\t\t */_convertToPixels=_internals.convertToPixels = function(t,p,v,sfx,recurse){if(sfx === \"px\" || !sfx){return v;}if(sfx === \"auto\" || !v){return 0;}var horiz=_horizExp.test(p),node=t,style=_tempDiv.style,neg=v < 0,pix,cache,time;if(neg){v = -v;}if(sfx === \"%\" && p.indexOf(\"border\") !== -1){pix = v / 100 * (horiz?t.clientWidth:t.clientHeight);}else {style.cssText = \"border:0 solid red;position:\" + _getStyle(t,\"position\") + \";line-height:0;\";if(sfx === \"%\" || !node.appendChild || sfx.charAt(0) === \"v\" || sfx === \"rem\"){node = t.parentNode || _doc.body;cache = node._gsCache;time = TweenLite.ticker.frame;if(cache && horiz && cache.time === time){ //performance optimization: we record the width of elements along with the ticker frame so that we can quickly get it again on the same tick (seems relatively safe to assume it wouldn't change on the same tick)\nreturn cache.width * v / 100;}style[horiz?\"width\":\"height\"] = v + sfx;}else {style[horiz?\"borderLeftWidth\":\"borderTopWidth\"] = v + sfx;}node.appendChild(_tempDiv);pix = parseFloat(_tempDiv[horiz?\"offsetWidth\":\"offsetHeight\"]);node.removeChild(_tempDiv);if(horiz && sfx === \"%\" && CSSPlugin.cacheWidths !== false){cache = node._gsCache = node._gsCache || {};cache.time = time;cache.width = pix / v * 100;}if(pix === 0 && !recurse){pix = _convertToPixels(t,p,v,sfx,true);}}return neg?-pix:pix;},_calculateOffset=_internals.calculateOffset = function(t,p,cs){ //for figuring out \"top\" or \"left\" in px when it's \"auto\". We need to factor in margin with the offsetLeft/offsetTop\nif(_getStyle(t,\"position\",cs) !== \"absolute\"){return 0;}var dim=p === \"left\"?\"Left\":\"Top\",v=_getStyle(t,\"margin\" + dim,cs);return t[\"offset\" + dim] - (_convertToPixels(t,p,parseFloat(v),v.replace(_suffixExp,\"\")) || 0);}, // @private returns at object containing ALL of the style properties in camelCase and their associated values.\n_getAllStyles=function _getAllStyles(t,cs){var s={},i,tr,p;if(cs = cs || _getComputedStyle(t,null)){if(i = cs.length){while(--i > -1) {p = cs[i];if(p.indexOf(\"-transform\") === -1 || _transformPropCSS === p){ //Some webkit browsers duplicate transform values, one non-prefixed and one prefixed (\"transform\" and \"WebkitTransform\"), so we must weed out the extra one here.\ns[p.replace(_camelExp,_camelFunc)] = cs.getPropertyValue(p);}}}else { //some browsers behave differently - cs.length is always 0, so we must do a for...in loop.\nfor(i in cs) {if(i.indexOf(\"Transform\") === -1 || _transformProp === i){ //Some webkit browsers duplicate transform values, one non-prefixed and one prefixed (\"transform\" and \"WebkitTransform\"), so we must weed out the extra one here.\ns[i] = cs[i];}}}}else if(cs = t.currentStyle || t.style){for(i in cs) {if(typeof i === \"string\" && s[i] === undefined){s[i.replace(_camelExp,_camelFunc)] = cs[i];}}}if(!_supportsOpacity){s.opacity = _getIEOpacity(t);}tr = _getTransform(t,cs,false);s.rotation = tr.rotation;s.skewX = tr.skewX;s.scaleX = tr.scaleX;s.scaleY = tr.scaleY;s.x = tr.x;s.y = tr.y;if(_supports3D){s.z = tr.z;s.rotationX = tr.rotationX;s.rotationY = tr.rotationY;s.scaleZ = tr.scaleZ;}if(s.filters){delete s.filters;}return s;}, // @private analyzes two style objects (as returned by _getAllStyles()) and only looks for differences between them that contain tweenable values (like a number or color). It returns an object with a \"difs\" property which refers to an object containing only those isolated properties and values for tweening, and a \"firstMPT\" property which refers to the first MiniPropTween instance in a linked list that recorded all the starting values of the different properties so that we can revert to them at the end or beginning of the tween - we don't want the cascading to get messed up. The forceLookup parameter is an optional generic object with properties that should be forced into the results - this is necessary for className tweens that are overwriting others because imagine a scenario where a rollover/rollout adds/removes a class and the user swipes the mouse over the target SUPER fast, thus nothing actually changed yet and the subsequent comparison of the properties would indicate they match (especially when px rounding is taken into consideration), thus no tweening is necessary even though it SHOULD tween and remove those properties after the tween (otherwise the inline styles will contaminate things). See the className SpecialProp code for details.\n_cssDif=function _cssDif(t,s1,s2,vars,forceLookup){var difs={},style=t.style,val,p,mpt;for(p in s2) {if(p !== \"cssText\")if(p !== \"length\")if(isNaN(p))if(s1[p] !== (val = s2[p]) || forceLookup && forceLookup[p])if(p.indexOf(\"Origin\") === -1)if(typeof val === \"number\" || typeof val === \"string\"){difs[p] = val === \"auto\" && (p === \"left\" || p === \"top\")?_calculateOffset(t,p):(val === \"\" || val === \"auto\" || val === \"none\") && typeof s1[p] === \"string\" && s1[p].replace(_NaNExp,\"\") !== \"\"?0:val; //if the ending value is defaulting (\"\" or \"auto\"), we check the starting value and if it can be parsed into a number (a string which could have a suffix too, like 700px), then we swap in 0 for \"\" or \"auto\" so that things actually tween.\nif(style[p] !== undefined){ //for className tweens, we must remember which properties already existed inline - the ones that didn't should be removed when the tween isn't in progress because they were only introduced to facilitate the transition between classes.\nmpt = new MiniPropTween(style,p,style[p],mpt);}}}if(vars){for(p in vars) { //copy properties (except className)\nif(p !== \"className\"){difs[p] = vars[p];}}}return {difs:difs,firstMPT:mpt};},_dimensions={width:[\"Left\",\"Right\"],height:[\"Top\",\"Bottom\"]},_margins=[\"marginLeft\",\"marginRight\",\"marginTop\",\"marginBottom\"], /**\n\t\t\t * @private Gets the width or height of an element\n\t\t\t * @param {!Object} t Target element\n\t\t\t * @param {!string} p Property name (\"width\" or \"height\")\n\t\t\t * @param {Object=} cs Computed style object (if one exists). Just a speed optimization.\n\t\t\t * @return {number} Dimension (in pixels)\n\t\t\t */_getDimension=function _getDimension(t,p,cs){var v=parseFloat(p === \"width\"?t.offsetWidth:t.offsetHeight),a=_dimensions[p],i=a.length;cs = cs || _getComputedStyle(t,null);while(--i > -1) {v -= parseFloat(_getStyle(t,\"padding\" + a[i],cs,true)) || 0;v -= parseFloat(_getStyle(t,\"border\" + a[i] + \"Width\",cs,true)) || 0;}return v;}, // @private Parses position-related complex strings like \"top left\" or \"50px 10px\" or \"70% 20%\", etc. which are used for things like transformOrigin or backgroundPosition. Optionally decorates a supplied object (recObj) with the following properties: \"ox\" (offsetX), \"oy\" (offsetY), \"oxp\" (if true, \"ox\" is a percentage not a pixel value), and \"oxy\" (if true, \"oy\" is a percentage not a pixel value)\n_parsePosition=function _parsePosition(v,recObj){if(v === \"contain\" || v === \"auto\" || v === \"auto auto\"){return v + \" \";}if(v == null || v === \"\"){ //note: Firefox uses \"auto auto\" as default whereas Chrome uses \"auto\".\nv = \"0 0\";}var a=v.split(\" \"),x=v.indexOf(\"left\") !== -1?\"0%\":v.indexOf(\"right\") !== -1?\"100%\":a[0],y=v.indexOf(\"top\") !== -1?\"0%\":v.indexOf(\"bottom\") !== -1?\"100%\":a[1];if(y == null){y = x === \"center\"?\"50%\":\"0\";}else if(y === \"center\"){y = \"50%\";}if(x === \"center\" || isNaN(parseFloat(x)) && (x + \"\").indexOf(\"=\") === -1){ //remember, the user could flip-flop the values and say \"bottom center\" or \"center bottom\", etc. \"center\" is ambiguous because it could be used to describe horizontal or vertical, hence the isNaN(). If there's an \"=\" sign in the value, it's relative.\nx = \"50%\";}v = x + \" \" + y + (a.length > 2?\" \" + a[2]:\"\");if(recObj){recObj.oxp = x.indexOf(\"%\") !== -1;recObj.oyp = y.indexOf(\"%\") !== -1;recObj.oxr = x.charAt(1) === \"=\";recObj.oyr = y.charAt(1) === \"=\";recObj.ox = parseFloat(x.replace(_NaNExp,\"\"));recObj.oy = parseFloat(y.replace(_NaNExp,\"\"));recObj.v = v;}return recObj || v;}, /**\n\t\t\t * @private Takes an ending value (typically a string, but can be a number) and a starting value and returns the change between the two, looking for relative value indicators like += and -= and it also ignores suffixes (but make sure the ending value starts with a number or +=/-= and that the starting value is a NUMBER!)\n\t\t\t * @param {(number|string)} e End value which is typically a string, but could be a number\n\t\t\t * @param {(number|string)} b Beginning value which is typically a string but could be a number\n\t\t\t * @return {number} Amount of change between the beginning and ending values (relative values that have a \"+=\" or \"-=\" are recognized)\n\t\t\t */_parseChange=function _parseChange(e,b){return typeof e === \"string\" && e.charAt(1) === \"=\"?parseInt(e.charAt(0) + \"1\",10) * parseFloat(e.substr(2)):parseFloat(e) - parseFloat(b);}, /**\n\t\t\t * @private Takes a value and a default number, checks if the value is relative, null, or numeric and spits back a normalized number accordingly. Primarily used in the _parseTransform() function.\n\t\t\t * @param {Object} v Value to be parsed\n\t\t\t * @param {!number} d Default value (which is also used for relative calculations if \"+=\" or \"-=\" is found in the first parameter)\n\t\t\t * @return {number} Parsed value\n\t\t\t */_parseVal=function _parseVal(v,d){return v == null?d:typeof v === \"string\" && v.charAt(1) === \"=\"?parseInt(v.charAt(0) + \"1\",10) * parseFloat(v.substr(2)) + d:parseFloat(v);}, /**\n\t\t\t * @private Translates strings like \"40deg\" or \"40\" or 40rad\" or \"+=40deg\" or \"270_short\" or \"-90_cw\" or \"+=45_ccw\" to a numeric radian angle. Of course a starting/default value must be fed in too so that relative values can be calculated properly.\n\t\t\t * @param {Object} v Value to be parsed\n\t\t\t * @param {!number} d Default value (which is also used for relative calculations if \"+=\" or \"-=\" is found in the first parameter)\n\t\t\t * @param {string=} p property name for directionalEnd (optional - only used when the parsed value is directional (\"_short\", \"_cw\", or \"_ccw\" suffix). We need a way to store the uncompensated value so that at the end of the tween, we set it to exactly what was requested with no directional compensation). Property name would be \"rotation\", \"rotationX\", or \"rotationY\"\n\t\t\t * @param {Object=} directionalEnd An object that will store the raw end values for directional angles (\"_short\", \"_cw\", or \"_ccw\" suffix). We need a way to store the uncompensated value so that at the end of the tween, we set it to exactly what was requested with no directional compensation.\n\t\t\t * @return {number} parsed angle in radians\n\t\t\t */_parseAngle=function _parseAngle(v,d,p,directionalEnd){var min=0.000001,cap,split,dif,result,isRelative;if(v == null){result = d;}else if(typeof v === \"number\"){result = v;}else {cap = 360;split = v.split(\"_\");isRelative = v.charAt(1) === \"=\";dif = (isRelative?parseInt(v.charAt(0) + \"1\",10) * parseFloat(split[0].substr(2)):parseFloat(split[0])) * (v.indexOf(\"rad\") === -1?1:_RAD2DEG) - (isRelative?0:d);if(split.length){if(directionalEnd){directionalEnd[p] = d + dif;}if(v.indexOf(\"short\") !== -1){dif = dif % cap;if(dif !== dif % (cap / 2)){dif = dif < 0?dif + cap:dif - cap;}}if(v.indexOf(\"_cw\") !== -1 && dif < 0){dif = (dif + cap * 9999999999) % cap - (dif / cap | 0) * cap;}else if(v.indexOf(\"ccw\") !== -1 && dif > 0){dif = (dif - cap * 9999999999) % cap - (dif / cap | 0) * cap;}}result = d + dif;}if(result < min && result > -min){result = 0;}return result;},_colorLookup={aqua:[0,255,255],lime:[0,255,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,255],navy:[0,0,128],white:[255,255,255],fuchsia:[255,0,255],olive:[128,128,0],yellow:[255,255,0],orange:[255,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[255,0,0],pink:[255,192,203],cyan:[0,255,255],transparent:[255,255,255,0]},_hue=function _hue(h,m1,m2){h = h < 0?h + 1:h > 1?h - 1:h;return (h * 6 < 1?m1 + (m2 - m1) * h * 6:h < 0.5?m2:h * 3 < 2?m1 + (m2 - m1) * (2 / 3 - h) * 6:m1) * 255 + 0.5 | 0;}, /**\n\t\t\t * @private Parses a color (like #9F0, #FF9900, rgb(255,51,153) or hsl(108, 50%, 10%)) into an array with 3 elements for red, green, and blue or if toHSL parameter is true, it will populate the array with hue, saturation, and lightness values. If a relative value is found in an hsl() or hsla() string, it will preserve those relative prefixes and all the values in the array will be strings instead of numbers (in all other cases it will be populated with numbers).\n\t\t\t * @param {(string|number)} v The value the should be parsed which could be a string like #9F0 or rgb(255,102,51) or rgba(255,0,0,0.5) or it could be a number like 0xFF00CC or even a named color like red, blue, purple, etc.\n\t\t\t * @param {(boolean)} toHSL If true, an hsl() or hsla() value will be returned instead of rgb() or rgba()\n\t\t\t * @return {Array.<number>} An array containing red, green, and blue (and optionally alpha) in that order, or if the toHSL parameter was true, the array will contain hue, saturation and lightness (and optionally alpha) in that order. Always numbers unless there's a relative prefix found in an hsl() or hsla() string and toHSL is true.\n\t\t\t */_parseColor=CSSPlugin.parseColor = function(v,toHSL){var a,r,g,b,h,s,l,max,min,d,wasHSL;if(!v){a = _colorLookup.black;}else if(typeof v === \"number\"){a = [v >> 16,v >> 8 & 255,v & 255];}else {if(v.charAt(v.length - 1) === \",\"){ //sometimes a trailing comma is included and we should chop it off (typically from a comma-delimited list of values like a textShadow:\"2px 2px 2px blue, 5px 5px 5px rgb(255,0,0)\" - in this example \"blue,\" has a trailing comma. We could strip it out inside parseComplex() but we'd need to do it to the beginning and ending values plus it wouldn't provide protection from other potential scenarios like if the user passes in a similar value.\nv = v.substr(0,v.length - 1);}if(_colorLookup[v]){a = _colorLookup[v];}else if(v.charAt(0) === \"#\"){if(v.length === 4){ //for shorthand like #9F0\nr = v.charAt(1);g = v.charAt(2);b = v.charAt(3);v = \"#\" + r + r + g + g + b + b;}v = parseInt(v.substr(1),16);a = [v >> 16,v >> 8 & 255,v & 255];}else if(v.substr(0,3) === \"hsl\"){a = wasHSL = v.match(_numExp);if(!toHSL){h = Number(a[0]) % 360 / 360;s = Number(a[1]) / 100;l = Number(a[2]) / 100;g = l <= 0.5?l * (s + 1):l + s - l * s;r = l * 2 - g;if(a.length > 3){a[3] = Number(v[3]);}a[0] = _hue(h + 1 / 3,r,g);a[1] = _hue(h,r,g);a[2] = _hue(h - 1 / 3,r,g);}else if(v.indexOf(\"=\") !== -1){ //if relative values are found, just return the raw strings with the relative prefixes in place.\nreturn v.match(_relNumExp);}}else {a = v.match(_numExp) || _colorLookup.transparent;}a[0] = Number(a[0]);a[1] = Number(a[1]);a[2] = Number(a[2]);if(a.length > 3){a[3] = Number(a[3]);}}if(toHSL && !wasHSL){r = a[0] / 255;g = a[1] / 255;b = a[2] / 255;max = Math.max(r,g,b);min = Math.min(r,g,b);l = (max + min) / 2;if(max === min){h = s = 0;}else {d = max - min;s = l > 0.5?d / (2 - max - min):d / (max + min);h = max === r?(g - b) / d + (g < b?6:0):max === g?(b - r) / d + 2:(r - g) / d + 4;h *= 60;}a[0] = h + 0.5 | 0;a[1] = s * 100 + 0.5 | 0;a[2] = l * 100 + 0.5 | 0;}return a;},_formatColors=function _formatColors(s,toHSL){var colors=s.match(_colorExp) || [],charIndex=0,parsed=colors.length?\"\":s,i,color,temp;for(i = 0;i < colors.length;i++) {color = colors[i];temp = s.substr(charIndex,s.indexOf(color,charIndex) - charIndex);charIndex += temp.length + color.length;color = _parseColor(color,toHSL);if(color.length === 3){color.push(1);}parsed += temp + (toHSL?\"hsla(\" + color[0] + \",\" + color[1] + \"%,\" + color[2] + \"%,\" + color[3]:\"rgba(\" + color.join(\",\")) + \")\";}return parsed;},_colorExp=\"(?:\\\\b(?:(?:rgb|rgba|hsl|hsla)\\\\(.+?\\\\))|\\\\B#.+?\\\\b\"; //we'll dynamically build this Regular Expression to conserve file size. After building it, it will be able to find rgb(), rgba(), # (hexadecimal), and named color values like red, blue, purple, etc.\nfor(p in _colorLookup) {_colorExp += \"|\" + p + \"\\\\b\";}_colorExp = new RegExp(_colorExp + \")\",\"gi\");CSSPlugin.colorStringFilter = function(a){var combined=a[0] + a[1],toHSL;_colorExp.lastIndex = 0;if(_colorExp.test(combined)){toHSL = combined.indexOf(\"hsl(\") !== -1 || combined.indexOf(\"hsla(\") !== -1;a[0] = _formatColors(a[0],toHSL);a[1] = _formatColors(a[1],toHSL);}};if(!TweenLite.defaultStringFilter){TweenLite.defaultStringFilter = CSSPlugin.colorStringFilter;} /**\n\t\t * @private Returns a formatter function that handles taking a string (or number in some cases) and returning a consistently formatted one in terms of delimiters, quantity of values, etc. For example, we may get boxShadow values defined as \"0px red\" or \"0px 0px 10px rgb(255,0,0)\" or \"0px 0px 20px 20px #F00\" and we need to ensure that what we get back is described with 4 numbers and a color. This allows us to feed it into the _parseComplex() method and split the values up appropriately. The neat thing about this _getFormatter() function is that the dflt defines a pattern as well as a default, so for example, _getFormatter(\"0px 0px 0px 0px #777\", true) not only sets the default as 0px for all distances and #777 for the color, but also sets the pattern such that 4 numbers and a color will always get returned.\n\t\t * @param {!string} dflt The default value and pattern to follow. So \"0px 0px 0px 0px #777\" will ensure that 4 numbers and a color will always get returned.\n\t\t * @param {boolean=} clr If true, the values should be searched for color-related data. For example, boxShadow values typically contain a color whereas borderRadius don't.\n\t\t * @param {boolean=} collapsible If true, the value is a top/left/right/bottom style one that acts like margin or padding, where if only one value is received, it's used for all 4; if 2 are received, the first is duplicated for 3rd (bottom) and the 2nd is duplicated for the 4th spot (left), etc.\n\t\t * @return {Function} formatter function\n\t\t */var _getFormatter=function _getFormatter(dflt,clr,collapsible,multi){if(dflt == null){return function(v){return v;};}var dColor=clr?(dflt.match(_colorExp) || [\"\"])[0]:\"\",dVals=dflt.split(dColor).join(\"\").match(_valuesExp) || [],pfx=dflt.substr(0,dflt.indexOf(dVals[0])),sfx=dflt.charAt(dflt.length - 1) === \")\"?\")\":\"\",delim=dflt.indexOf(\" \") !== -1?\" \":\",\",numVals=dVals.length,dSfx=numVals > 0?dVals[0].replace(_numExp,\"\"):\"\",formatter;if(!numVals){return function(v){return v;};}if(clr){formatter = function(v){var color,vals,i,a;if(typeof v === \"number\"){v += dSfx;}else if(multi && _commasOutsideParenExp.test(v)){a = v.replace(_commasOutsideParenExp,\"|\").split(\"|\");for(i = 0;i < a.length;i++) {a[i] = formatter(a[i]);}return a.join(\",\");}color = (v.match(_colorExp) || [dColor])[0];vals = v.split(color).join(\"\").match(_valuesExp) || [];i = vals.length;if(numVals > i--){while(++i < numVals) {vals[i] = collapsible?vals[(i - 1) / 2 | 0]:dVals[i];}}return pfx + vals.join(delim) + delim + color + sfx + (v.indexOf(\"inset\") !== -1?\" inset\":\"\");};return formatter;}formatter = function(v){var vals,a,i;if(typeof v === \"number\"){v += dSfx;}else if(multi && _commasOutsideParenExp.test(v)){a = v.replace(_commasOutsideParenExp,\"|\").split(\"|\");for(i = 0;i < a.length;i++) {a[i] = formatter(a[i]);}return a.join(\",\");}vals = v.match(_valuesExp) || [];i = vals.length;if(numVals > i--){while(++i < numVals) {vals[i] = collapsible?vals[(i - 1) / 2 | 0]:dVals[i];}}return pfx + vals.join(delim) + sfx;};return formatter;}, /**\n\t\t\t * @private returns a formatter function that's used for edge-related values like marginTop, marginLeft, paddingBottom, paddingRight, etc. Just pass a comma-delimited list of property names related to the edges.\n\t\t\t * @param {!string} props a comma-delimited list of property names in order from top to left, like \"marginTop,marginRight,marginBottom,marginLeft\"\n\t\t\t * @return {Function} a formatter function\n\t\t\t */_getEdgeParser=function _getEdgeParser(props){props = props.split(\",\");return function(t,e,p,cssp,pt,plugin,vars){var a=(e + \"\").split(\" \"),i;vars = {};for(i = 0;i < 4;i++) {vars[props[i]] = a[i] = a[i] || a[(i - 1) / 2 >> 0];}return cssp.parse(t,vars,pt,plugin);};}, // @private used when other plugins must tween values first, like BezierPlugin or ThrowPropsPlugin, etc. That plugin's setRatio() gets called first so that the values are updated, and then we loop through the MiniPropTweens  which handle copying the values into their appropriate slots so that they can then be applied correctly in the main CSSPlugin setRatio() method. Remember, we typically create a proxy object that has a bunch of uniquely-named properties that we feed to the sub-plugin and it does its magic normally, and then we must interpret those values and apply them to the css because often numbers must get combined/concatenated, suffixes added, etc. to work with css, like boxShadow could have 4 values plus a color.\n_setPluginRatio=_internals._setPluginRatio = function(v){this.plugin.setRatio(v);var d=this.data,proxy=d.proxy,mpt=d.firstMPT,min=0.000001,val,pt,i,str;while(mpt) {val = proxy[mpt.v];if(mpt.r){val = Math.round(val);}else if(val < min && val > -min){val = 0;}mpt.t[mpt.p] = val;mpt = mpt._next;}if(d.autoRotate){d.autoRotate.rotation = proxy.rotation;} //at the end, we must set the CSSPropTween's \"e\" (end) value dynamically here because that's what is used in the final setRatio() method.\nif(v === 1){mpt = d.firstMPT;while(mpt) {pt = mpt.t;if(!pt.type){pt.e = pt.s + pt.xs0;}else if(pt.type === 1){str = pt.xs0 + pt.s + pt.xs1;for(i = 1;i < pt.l;i++) {str += pt[\"xn\" + i] + pt[\"xs\" + (i + 1)];}pt.e = str;}mpt = mpt._next;}}}, /**\n\t\t\t * @private @constructor Used by a few SpecialProps to hold important values for proxies. For example, _parseToProxy() creates a MiniPropTween instance for each property that must get tweened on the proxy, and we record the original property name as well as the unique one we create for the proxy, plus whether or not the value needs to be rounded plus the original value.\n\t\t\t * @param {!Object} t target object whose property we're tweening (often a CSSPropTween)\n\t\t\t * @param {!string} p property name\n\t\t\t * @param {(number|string|object)} v value\n\t\t\t * @param {MiniPropTween=} next next MiniPropTween in the linked list\n\t\t\t * @param {boolean=} r if true, the tweened value should be rounded to the nearest integer\n\t\t\t */MiniPropTween=function MiniPropTween(t,p,v,next,r){this.t = t;this.p = p;this.v = v;this.r = r;if(next){next._prev = this;this._next = next;}}, /**\n\t\t\t * @private Most other plugins (like BezierPlugin and ThrowPropsPlugin and others) can only tween numeric values, but CSSPlugin must accommodate special values that have a bunch of extra data (like a suffix or strings between numeric values, etc.). For example, boxShadow has values like \"10px 10px 20px 30px rgb(255,0,0)\" which would utterly confuse other plugins. This method allows us to split that data apart and grab only the numeric data and attach it to uniquely-named properties of a generic proxy object ({}) so that we can feed that to virtually any plugin to have the numbers tweened. However, we must also keep track of which properties from the proxy go with which CSSPropTween values and instances. So we create a linked list of MiniPropTweens. Each one records a target (the original CSSPropTween), property (like \"s\" or \"xn1\" or \"xn2\") that we're tweening and the unique property name that was used for the proxy (like \"boxShadow_xn1\" and \"boxShadow_xn2\") and whether or not they need to be rounded. That way, in the _setPluginRatio() method we can simply copy the values over from the proxy to the CSSPropTween instance(s). Then, when the main CSSPlugin setRatio() method runs and applies the CSSPropTween values accordingly, they're updated nicely. So the external plugin tweens the numbers, _setPluginRatio() copies them over, and setRatio() acts normally, applying css-specific values to the element.\n\t\t\t * This method returns an object that has the following properties:\n\t\t\t *  - proxy: a generic object containing the starting values for all the properties that will be tweened by the external plugin.  This is what we feed to the external _onInitTween() as the target\n\t\t\t *  - end: a generic object containing the ending values for all the properties that will be tweened by the external plugin. This is what we feed to the external plugin's _onInitTween() as the destination values\n\t\t\t *  - firstMPT: the first MiniPropTween in the linked list\n\t\t\t *  - pt: the first CSSPropTween in the linked list that was created when parsing. If shallow is true, this linked list will NOT attach to the one passed into the _parseToProxy() as the \"pt\" (4th) parameter.\n\t\t\t * @param {!Object} t target object to be tweened\n\t\t\t * @param {!(Object|string)} vars the object containing the information about the tweening values (typically the end/destination values) that should be parsed\n\t\t\t * @param {!CSSPlugin} cssp The CSSPlugin instance\n\t\t\t * @param {CSSPropTween=} pt the next CSSPropTween in the linked list\n\t\t\t * @param {TweenPlugin=} plugin the external TweenPlugin instance that will be handling tweening the numeric values\n\t\t\t * @param {boolean=} shallow if true, the resulting linked list from the parse will NOT be attached to the CSSPropTween that was passed in as the \"pt\" (4th) parameter.\n\t\t\t * @return An object containing the following properties: proxy, end, firstMPT, and pt (see above for descriptions)\n\t\t\t */_parseToProxy=_internals._parseToProxy = function(t,vars,cssp,pt,plugin,shallow){var bpt=pt,start={},end={},transform=cssp._transform,oldForce=_forcePT,i,p,xp,mpt,firstPT;cssp._transform = null;_forcePT = vars;pt = firstPT = cssp.parse(t,vars,pt,plugin);_forcePT = oldForce; //break off from the linked list so the new ones are isolated.\nif(shallow){cssp._transform = transform;if(bpt){bpt._prev = null;if(bpt._prev){bpt._prev._next = null;}}}while(pt && pt !== bpt) {if(pt.type <= 1){p = pt.p;end[p] = pt.s + pt.c;start[p] = pt.s;if(!shallow){mpt = new MiniPropTween(pt,\"s\",p,mpt,pt.r);pt.c = 0;}if(pt.type === 1){i = pt.l;while(--i > 0) {xp = \"xn\" + i;p = pt.p + \"_\" + xp;end[p] = pt.data[xp];start[p] = pt[xp];if(!shallow){mpt = new MiniPropTween(pt,xp,p,mpt,pt.rxp[xp]);}}}}pt = pt._next;}return {proxy:start,end:end,firstMPT:mpt,pt:firstPT};}, /**\n\t\t\t * @constructor Each property that is tweened has at least one CSSPropTween associated with it. These instances store important information like the target, property, starting value, amount of change, etc. They can also optionally have a number of \"extra\" strings and numeric values named xs1, xn1, xs2, xn2, xs3, xn3, etc. where \"s\" indicates string and \"n\" indicates number. These can be pieced together in a complex-value tween (type:1) that has alternating types of data like a string, number, string, number, etc. For example, boxShadow could be \"5px 5px 8px rgb(102, 102, 51)\". In that value, there are 6 numbers that may need to tween and then pieced back together into a string again with spaces, suffixes, etc. xs0 is special in that it stores the suffix for standard (type:0) tweens, -OR- the first string (prefix) in a complex-value (type:1) CSSPropTween -OR- it can be the non-tweening value in a type:-1 CSSPropTween. We do this to conserve memory.\n\t\t\t * CSSPropTweens have the following optional properties as well (not defined through the constructor):\n\t\t\t *  - l: Length in terms of the number of extra properties that the CSSPropTween has (default: 0). For example, for a boxShadow we may need to tween 5 numbers in which case l would be 5; Keep in mind that the start/end values for the first number that's tweened are always stored in the s and c properties to conserve memory. All additional values thereafter are stored in xn1, xn2, etc.\n\t\t\t *  - xfirst: The first instance of any sub-CSSPropTweens that are tweening properties of this instance. For example, we may split up a boxShadow tween so that there's a main CSSPropTween of type:1 that has various xs* and xn* values associated with the h-shadow, v-shadow, blur, color, etc. Then we spawn a CSSPropTween for each of those that has a higher priority and runs BEFORE the main CSSPropTween so that the values are all set by the time it needs to re-assemble them. The xfirst gives us an easy way to identify the first one in that chain which typically ends at the main one (because they're all prepende to the linked list)\n\t\t\t *  - plugin: The TweenPlugin instance that will handle the tweening of any complex values. For example, sometimes we don't want to use normal subtweens (like xfirst refers to) to tween the values - we might want ThrowPropsPlugin or BezierPlugin some other plugin to do the actual tweening, so we create a plugin instance and store a reference here. We need this reference so that if we get a request to round values or disable a tween, we can pass along that request.\n\t\t\t *  - data: Arbitrary data that needs to be stored with the CSSPropTween. Typically if we're going to have a plugin handle the tweening of a complex-value tween, we create a generic object that stores the END values that we're tweening to and the CSSPropTween's xs1, xs2, etc. have the starting values. We store that object as data. That way, we can simply pass that object to the plugin and use the CSSPropTween as the target.\n\t\t\t *  - setRatio: Only used for type:2 tweens that require custom functionality. In this case, we call the CSSPropTween's setRatio() method and pass the ratio each time the tween updates. This isn't quite as efficient as doing things directly in the CSSPlugin's setRatio() method, but it's very convenient and flexible.\n\t\t\t * @param {!Object} t Target object whose property will be tweened. Often a DOM element, but not always. It could be anything.\n\t\t\t * @param {string} p Property to tween (name). For example, to tween element.width, p would be \"width\".\n\t\t\t * @param {number} s Starting numeric value\n\t\t\t * @param {number} c Change in numeric value over the course of the entire tween. For example, if element.width starts at 5 and should end at 100, c would be 95.\n\t\t\t * @param {CSSPropTween=} next The next CSSPropTween in the linked list. If one is defined, we will define its _prev as the new instance, and the new instance's _next will be pointed at it.\n\t\t\t * @param {number=} type The type of CSSPropTween where -1 = a non-tweening value, 0 = a standard simple tween, 1 = a complex value (like one that has multiple numbers in a comma- or space-delimited string like border:\"1px solid red\"), and 2 = one that uses a custom setRatio function that does all of the work of applying the values on each update.\n\t\t\t * @param {string=} n Name of the property that should be used for overwriting purposes which is typically the same as p but not always. For example, we may need to create a subtween for the 2nd part of a \"clip:rect(...)\" tween in which case \"p\" might be xs1 but \"n\" is still \"clip\"\n\t\t\t * @param {boolean=} r If true, the value(s) should be rounded\n\t\t\t * @param {number=} pr Priority in the linked list order. Higher priority CSSPropTweens will be updated before lower priority ones. The default priority is 0.\n\t\t\t * @param {string=} b Beginning value. We store this to ensure that it is EXACTLY what it was when the tween began without any risk of interpretation issues.\n\t\t\t * @param {string=} e Ending value. We store this to ensure that it is EXACTLY what the user defined at the end of the tween without any risk of interpretation issues.\n\t\t\t */CSSPropTween=_internals.CSSPropTween = function(t,p,s,c,next,type,n,r,pr,b,e){this.t = t; //target\nthis.p = p; //property\nthis.s = s; //starting value\nthis.c = c; //change value\nthis.n = n || p; //name that this CSSPropTween should be associated to (usually the same as p, but not always - n is what overwriting looks at)\nif(!(t instanceof CSSPropTween)){_overwriteProps.push(this.n);}this.r = r; //round (boolean)\nthis.type = type || 0; //0 = normal tween, -1 = non-tweening (in which case xs0 will be applied to the target's property, like tp.t[tp.p] = tp.xs0), 1 = complex-value SpecialProp, 2 = custom setRatio() that does all the work\nif(pr){this.pr = pr;_hasPriority = true;}this.b = b === undefined?s:b;this.e = e === undefined?s + c:e;if(next){this._next = next;next._prev = this;}},_addNonTweeningNumericPT=function _addNonTweeningNumericPT(target,prop,start,end,next,overwriteProp){ //cleans up some code redundancies and helps minification. Just a fast way to add a NUMERIC non-tweening CSSPropTween\nvar pt=new CSSPropTween(target,prop,start,end - start,next,-1,overwriteProp);pt.b = start;pt.e = pt.xs0 = end;return pt;}, /**\n\t\t\t * Takes a target, the beginning value and ending value (as strings) and parses them into a CSSPropTween (possibly with child CSSPropTweens) that accommodates multiple numbers, colors, comma-delimited values, etc. For example:\n\t\t\t * sp.parseComplex(element, \"boxShadow\", \"5px 10px 20px rgb(255,102,51)\", \"0px 0px 0px red\", true, \"0px 0px 0px rgb(0,0,0,0)\", pt);\n\t\t\t * It will walk through the beginning and ending values (which should be in the same format with the same number and type of values) and figure out which parts are numbers, what strings separate the numeric/tweenable values, and then create the CSSPropTweens accordingly. If a plugin is defined, no child CSSPropTweens will be created. Instead, the ending values will be stored in the \"data\" property of the returned CSSPropTween like: {s:-5, xn1:-10, xn2:-20, xn3:255, xn4:0, xn5:0} so that it can be fed to any other plugin and it'll be plain numeric tweens but the recomposition of the complex value will be handled inside CSSPlugin's setRatio().\n\t\t\t * If a setRatio is defined, the type of the CSSPropTween will be set to 2 and recomposition of the values will be the responsibility of that method.\n\t\t\t *\n\t\t\t * @param {!Object} t Target whose property will be tweened\n\t\t\t * @param {!string} p Property that will be tweened (its name, like \"left\" or \"backgroundColor\" or \"boxShadow\")\n\t\t\t * @param {string} b Beginning value\n\t\t\t * @param {string} e Ending value\n\t\t\t * @param {boolean} clrs If true, the value could contain a color value like \"rgb(255,0,0)\" or \"#F00\" or \"red\". The default is false, so no colors will be recognized (a performance optimization)\n\t\t\t * @param {(string|number|Object)} dflt The default beginning value that should be used if no valid beginning value is defined or if the number of values inside the complex beginning and ending values don't match\n\t\t\t * @param {?CSSPropTween} pt CSSPropTween instance that is the current head of the linked list (we'll prepend to this).\n\t\t\t * @param {number=} pr Priority in the linked list order. Higher priority properties will be updated before lower priority ones. The default priority is 0.\n\t\t\t * @param {TweenPlugin=} plugin If a plugin should handle the tweening of extra properties, pass the plugin instance here. If one is defined, then NO subtweens will be created for any extra properties (the properties will be created - just not additional CSSPropTween instances to tween them) because the plugin is expected to do so. However, the end values WILL be populated in the \"data\" property, like {s:100, xn1:50, xn2:300}\n\t\t\t * @param {function(number)=} setRatio If values should be set in a custom function instead of being pieced together in a type:1 (complex-value) CSSPropTween, define that custom function here.\n\t\t\t * @return {CSSPropTween} The first CSSPropTween in the linked list which includes the new one(s) added by the parseComplex() call.\n\t\t\t */_parseComplex=CSSPlugin.parseComplex = function(t,p,b,e,clrs,dflt,pt,pr,plugin,setRatio){ //DEBUG: _log(\"parseComplex: \"+p+\", b: \"+b+\", e: \"+e);\nb = b || dflt || \"\";pt = new CSSPropTween(t,p,0,0,pt,setRatio?2:1,null,false,pr,b,e);e += \"\"; //ensures it's a string\nvar ba=b.split(\", \").join(\",\").split(\" \"), //beginning array\nea=e.split(\", \").join(\",\").split(\" \"), //ending array\nl=ba.length,autoRound=_autoRound !== false,i,xi,ni,bv,ev,bnums,enums,bn,hasAlpha,temp,cv,str,useHSL;if(e.indexOf(\",\") !== -1 || b.indexOf(\",\") !== -1){ba = ba.join(\" \").replace(_commasOutsideParenExp,\", \").split(\" \");ea = ea.join(\" \").replace(_commasOutsideParenExp,\", \").split(\" \");l = ba.length;}if(l !== ea.length){ //DEBUG: _log(\"mismatched formatting detected on \" + p + \" (\" + b + \" vs \" + e + \")\");\nba = (dflt || \"\").split(\" \");l = ba.length;}pt.plugin = plugin;pt.setRatio = setRatio;_colorExp.lastIndex = 0;for(i = 0;i < l;i++) {bv = ba[i];ev = ea[i];bn = parseFloat(bv); //if the value begins with a number (most common). It's fine if it has a suffix like px\nif(bn || bn === 0){pt.appendXtra(\"\",bn,_parseChange(ev,bn),ev.replace(_relNumExp,\"\"),autoRound && ev.indexOf(\"px\") !== -1,true); //if the value is a color\n}else if(clrs && _colorExp.test(bv)){str = ev.charAt(ev.length - 1) === \",\"?\"),\":\")\"; //if there's a comma at the end, retain it.\nuseHSL = ev.indexOf(\"hsl\") !== -1 && _supportsOpacity;bv = _parseColor(bv,useHSL);ev = _parseColor(ev,useHSL);hasAlpha = bv.length + ev.length > 6;if(hasAlpha && !_supportsOpacity && ev[3] === 0){ //older versions of IE don't support rgba(), so if the destination alpha is 0, just use \"transparent\" for the end color\npt[\"xs\" + pt.l] += pt.l?\" transparent\":\"transparent\";pt.e = pt.e.split(ea[i]).join(\"transparent\");}else {if(!_supportsOpacity){ //old versions of IE don't support rgba().\nhasAlpha = false;}if(useHSL){pt.appendXtra(hasAlpha?\"hsla(\":\"hsl(\",bv[0],_parseChange(ev[0],bv[0]),\",\",false,true).appendXtra(\"\",bv[1],_parseChange(ev[1],bv[1]),\"%,\",false).appendXtra(\"\",bv[2],_parseChange(ev[2],bv[2]),hasAlpha?\"%,\":\"%\" + str,false);}else {pt.appendXtra(hasAlpha?\"rgba(\":\"rgb(\",bv[0],ev[0] - bv[0],\",\",true,true).appendXtra(\"\",bv[1],ev[1] - bv[1],\",\",true).appendXtra(\"\",bv[2],ev[2] - bv[2],hasAlpha?\",\":str,true);}if(hasAlpha){bv = bv.length < 4?1:bv[3];pt.appendXtra(\"\",bv,(ev.length < 4?1:ev[3]) - bv,str,false);}}_colorExp.lastIndex = 0; //otherwise the test() on the RegExp could move the lastIndex and taint future results.\n}else {bnums = bv.match(_numExp); //gets each group of numbers in the beginning value string and drops them into an array\n//if no number is found, treat it as a non-tweening value and just append the string to the current xs.\nif(!bnums){pt[\"xs\" + pt.l] += pt.l?\" \" + bv:bv; //loop through all the numbers that are found and construct the extra values on the pt.\n}else {enums = ev.match(_relNumExp); //get each group of numbers in the end value string and drop them into an array. We allow relative values too, like +=50 or -=.5\nif(!enums || enums.length !== bnums.length){ //DEBUG: _log(\"mismatched formatting detected on \" + p + \" (\" + b + \" vs \" + e + \")\");\nreturn pt;}ni = 0;for(xi = 0;xi < bnums.length;xi++) {cv = bnums[xi];temp = bv.indexOf(cv,ni);pt.appendXtra(bv.substr(ni,temp - ni),Number(cv),_parseChange(enums[xi],cv),\"\",autoRound && bv.substr(temp + cv.length,2) === \"px\",xi === 0);ni = temp + cv.length;}pt[\"xs\" + pt.l] += bv.substr(ni);}}} //if there are relative values (\"+=\" or \"-=\" prefix), we need to adjust the ending value to eliminate the prefixes and combine the values properly.\nif(e.indexOf(\"=\") !== -1)if(pt.data){str = pt.xs0 + pt.data.s;for(i = 1;i < pt.l;i++) {str += pt[\"xs\" + i] + pt.data[\"xn\" + i];}pt.e = str + pt[\"xs\" + i];}if(!pt.l){pt.type = -1;pt.xs0 = pt.e;}return pt.xfirst || pt;},i=9;p = CSSPropTween.prototype;p.l = p.pr = 0; //length (number of extra properties like xn1, xn2, xn3, etc.\nwhile(--i > 0) {p[\"xn\" + i] = 0;p[\"xs\" + i] = \"\";}p.xs0 = \"\";p._next = p._prev = p.xfirst = p.data = p.plugin = p.setRatio = p.rxp = null; /**\n\t\t * Appends and extra tweening value to a CSSPropTween and automatically manages any prefix and suffix strings. The first extra value is stored in the s and c of the main CSSPropTween instance, but thereafter any extras are stored in the xn1, xn2, xn3, etc. The prefixes and suffixes are stored in the xs0, xs1, xs2, etc. properties. For example, if I walk through a clip value like \"rect(10px, 5px, 0px, 20px)\", the values would be stored like this:\n\t\t * xs0:\"rect(\", s:10, xs1:\"px, \", xn1:5, xs2:\"px, \", xn2:0, xs3:\"px, \", xn3:20, xn4:\"px)\"\n\t\t * And they'd all get joined together when the CSSPlugin renders (in the setRatio() method).\n\t\t * @param {string=} pfx Prefix (if any)\n\t\t * @param {!number} s Starting value\n\t\t * @param {!number} c Change in numeric value over the course of the entire tween. For example, if the start is 5 and the end is 100, the change would be 95.\n\t\t * @param {string=} sfx Suffix (if any)\n\t\t * @param {boolean=} r Round (if true).\n\t\t * @param {boolean=} pad If true, this extra value should be separated by the previous one by a space. If there is no previous extra and pad is true, it will automatically drop the space.\n\t\t * @return {CSSPropTween} returns itself so that multiple methods can be chained together.\n\t\t */p.appendXtra = function(pfx,s,c,sfx,r,pad){var pt=this,l=pt.l;pt[\"xs\" + l] += pad && l?\" \" + pfx:pfx || \"\";if(!c)if(l !== 0 && !pt.plugin){ //typically we'll combine non-changing values right into the xs to optimize performance, but we don't combine them when there's a plugin that will be tweening the values because it may depend on the values being split apart, like for a bezier, if a value doesn't change between the first and second iteration but then it does on the 3rd, we'll run into trouble because there's no xn slot for that value!\npt[\"xs\" + l] += s + (sfx || \"\");return pt;}pt.l++;pt.type = pt.setRatio?2:1;pt[\"xs\" + pt.l] = sfx || \"\";if(l > 0){pt.data[\"xn\" + l] = s + c;pt.rxp[\"xn\" + l] = r; //round extra property (we need to tap into this in the _parseToProxy() method)\npt[\"xn\" + l] = s;if(!pt.plugin){pt.xfirst = new CSSPropTween(pt,\"xn\" + l,s,c,pt.xfirst || pt,0,pt.n,r,pt.pr);pt.xfirst.xs0 = 0; //just to ensure that the property stays numeric which helps modern browsers speed up processing. Remember, in the setRatio() method, we do pt.t[pt.p] = val + pt.xs0 so if pt.xs0 is \"\" (the default), it'll cast the end value as a string. When a property is a number sometimes and a string sometimes, it prevents the compiler from locking in the data type, slowing things down slightly.\n}return pt;}pt.data = {s:s + c};pt.rxp = {};pt.s = s;pt.c = c;pt.r = r;return pt;}; /**\n\t\t * @constructor A SpecialProp is basically a css property that needs to be treated in a non-standard way, like if it may contain a complex value like boxShadow:\"5px 10px 15px rgb(255, 102, 51)\" or if it is associated with another plugin like ThrowPropsPlugin or BezierPlugin. Every SpecialProp is associated with a particular property name like \"boxShadow\" or \"throwProps\" or \"bezier\" and it will intercept those values in the vars object that's passed to the CSSPlugin and handle them accordingly.\n\t\t * @param {!string} p Property name (like \"boxShadow\" or \"throwProps\")\n\t\t * @param {Object=} options An object containing any of the following configuration options:\n\t\t *                      - defaultValue: the default value\n\t\t *                      - parser: A function that should be called when the associated property name is found in the vars. This function should return a CSSPropTween instance and it should ensure that it is properly inserted into the linked list. It will receive 4 paramters: 1) The target, 2) The value defined in the vars, 3) The CSSPlugin instance (whose _firstPT should be used for the linked list), and 4) A computed style object if one was calculated (this is a speed optimization that allows retrieval of starting values quicker)\n\t\t *                      - formatter: a function that formats any value received for this special property (for example, boxShadow could take \"5px 5px red\" and format it to \"5px 5px 0px 0px red\" so that both the beginning and ending values have a common order and quantity of values.)\n\t\t *                      - prefix: if true, we'll determine whether or not this property requires a vendor prefix (like Webkit or Moz or ms or O)\n\t\t *                      - color: set this to true if the value for this SpecialProp may contain color-related values like rgb(), rgba(), etc.\n\t\t *                      - priority: priority in the linked list order. Higher priority SpecialProps will be updated before lower priority ones. The default priority is 0.\n\t\t *                      - multi: if true, the formatter should accommodate a comma-delimited list of values, like boxShadow could have multiple boxShadows listed out.\n\t\t *                      - collapsible: if true, the formatter should treat the value like it's a top/right/bottom/left value that could be collapsed, like \"5px\" would apply to all, \"5px, 10px\" would use 5px for top/bottom and 10px for right/left, etc.\n\t\t *                      - keyword: a special keyword that can [optionally] be found inside the value (like \"inset\" for boxShadow). This allows us to validate beginning/ending values to make sure they match (if the keyword is found in one, it'll be added to the other for consistency by default).\n\t\t */var SpecialProp=function SpecialProp(p,options){options = options || {};this.p = options.prefix?_checkPropPrefix(p) || p:p;_specialProps[p] = _specialProps[this.p] = this;this.format = options.formatter || _getFormatter(options.defaultValue,options.color,options.collapsible,options.multi);if(options.parser){this.parse = options.parser;}this.clrs = options.color;this.multi = options.multi;this.keyword = options.keyword;this.dflt = options.defaultValue;this.pr = options.priority || 0;}, //shortcut for creating a new SpecialProp that can accept multiple properties as a comma-delimited list (helps minification). dflt can be an array for multiple values (we don't do a comma-delimited list because the default value may contain commas, like rect(0px,0px,0px,0px)). We attach this method to the SpecialProp class/object instead of using a private _createSpecialProp() method so that we can tap into it externally if necessary, like from another plugin.\n_registerComplexSpecialProp=_internals._registerComplexSpecialProp = function(p,options,defaults){if(typeof options !== \"object\"){options = {parser:defaults}; //to make backwards compatible with older versions of BezierPlugin and ThrowPropsPlugin\n}var a=p.split(\",\"),d=options.defaultValue,i,temp;defaults = defaults || [d];for(i = 0;i < a.length;i++) {options.prefix = i === 0 && options.prefix;options.defaultValue = defaults[i] || d;temp = new SpecialProp(a[i],options);}}, //creates a placeholder special prop for a plugin so that the property gets caught the first time a tween of it is attempted, and at that time it makes the plugin register itself, thus taking over for all future tweens of that property. This allows us to not mandate that things load in a particular order and it also allows us to log() an error that informs the user when they attempt to tween an external plugin-related property without loading its .js file.\n_registerPluginProp=function _registerPluginProp(p){if(!_specialProps[p]){var pluginName=p.charAt(0).toUpperCase() + p.substr(1) + \"Plugin\";_registerComplexSpecialProp(p,{parser:function parser(t,e,p,cssp,pt,plugin,vars){var pluginClass=_globals.com.greensock.plugins[pluginName];if(!pluginClass){_log(\"Error: \" + pluginName + \" js file not loaded.\");return pt;}pluginClass._cssRegister();return _specialProps[p].parse(t,e,p,cssp,pt,plugin,vars);}});}};p = SpecialProp.prototype; /**\n\t\t * Alias for _parseComplex() that automatically plugs in certain values for this SpecialProp, like its property name, whether or not colors should be sensed, the default value, and priority. It also looks for any keyword that the SpecialProp defines (like \"inset\" for boxShadow) and ensures that the beginning and ending values have the same number of values for SpecialProps where multi is true (like boxShadow and textShadow can have a comma-delimited list)\n\t\t * @param {!Object} t target element\n\t\t * @param {(string|number|object)} b beginning value\n\t\t * @param {(string|number|object)} e ending (destination) value\n\t\t * @param {CSSPropTween=} pt next CSSPropTween in the linked list\n\t\t * @param {TweenPlugin=} plugin If another plugin will be tweening the complex value, that TweenPlugin instance goes here.\n\t\t * @param {function=} setRatio If a custom setRatio() method should be used to handle this complex value, that goes here.\n\t\t * @return {CSSPropTween=} First CSSPropTween in the linked list\n\t\t */p.parseComplex = function(t,b,e,pt,plugin,setRatio){var kwd=this.keyword,i,ba,ea,l,bi,ei; //if this SpecialProp's value can contain a comma-delimited list of values (like boxShadow or textShadow), we must parse them in a special way, and look for a keyword (like \"inset\" for boxShadow) and ensure that the beginning and ending BOTH have it if the end defines it as such. We also must ensure that there are an equal number of values specified (we can't tween 1 boxShadow to 3 for example)\nif(this.multi)if(_commasOutsideParenExp.test(e) || _commasOutsideParenExp.test(b)){ba = b.replace(_commasOutsideParenExp,\"|\").split(\"|\");ea = e.replace(_commasOutsideParenExp,\"|\").split(\"|\");}else if(kwd){ba = [b];ea = [e];}if(ea){l = ea.length > ba.length?ea.length:ba.length;for(i = 0;i < l;i++) {b = ba[i] = ba[i] || this.dflt;e = ea[i] = ea[i] || this.dflt;if(kwd){bi = b.indexOf(kwd);ei = e.indexOf(kwd);if(bi !== ei){if(ei === -1){ //if the keyword isn't in the end value, remove it from the beginning one.\nba[i] = ba[i].split(kwd).join(\"\");}else if(bi === -1){ //if the keyword isn't in the beginning, add it.\nba[i] += \" \" + kwd;}}}}b = ba.join(\", \");e = ea.join(\", \");}return _parseComplex(t,this.p,b,e,this.clrs,this.dflt,pt,this.pr,plugin,setRatio);}; /**\n\t\t * Accepts a target and end value and spits back a CSSPropTween that has been inserted into the CSSPlugin's linked list and conforms with all the conventions we use internally, like type:-1, 0, 1, or 2, setting up any extra property tweens, priority, etc. For example, if we have a boxShadow SpecialProp and call:\n\t\t * this._firstPT = sp.parse(element, \"5px 10px 20px rgb(2550,102,51)\", \"boxShadow\", this);\n\t\t * It should figure out the starting value of the element's boxShadow, compare it to the provided end value and create all the necessary CSSPropTweens of the appropriate types to tween the boxShadow. The CSSPropTween that gets spit back should already be inserted into the linked list (the 4th parameter is the current head, so prepend to that).\n\t\t * @param {!Object} t Target object whose property is being tweened\n\t\t * @param {Object} e End value as provided in the vars object (typically a string, but not always - like a throwProps would be an object).\n\t\t * @param {!string} p Property name\n\t\t * @param {!CSSPlugin} cssp The CSSPlugin instance that should be associated with this tween.\n\t\t * @param {?CSSPropTween} pt The CSSPropTween that is the current head of the linked list (we'll prepend to it)\n\t\t * @param {TweenPlugin=} plugin If a plugin will be used to tween the parsed value, this is the plugin instance.\n\t\t * @param {Object=} vars Original vars object that contains the data for parsing.\n\t\t * @return {CSSPropTween} The first CSSPropTween in the linked list which includes the new one(s) added by the parse() call.\n\t\t */p.parse = function(t,e,p,cssp,pt,plugin,vars){return this.parseComplex(t.style,this.format(_getStyle(t,this.p,_cs,false,this.dflt)),this.format(e),pt,plugin);}; /**\n\t\t * Registers a special property that should be intercepted from any \"css\" objects defined in tweens. This allows you to handle them however you want without CSSPlugin doing it for you. The 2nd parameter should be a function that accepts 3 parameters:\n\t\t *  1) Target object whose property should be tweened (typically a DOM element)\n\t\t *  2) The end/destination value (could be a string, number, object, or whatever you want)\n\t\t *  3) The tween instance (you probably don't need to worry about this, but it can be useful for looking up information like the duration)\n\t\t *\n\t\t * Then, your function should return a function which will be called each time the tween gets rendered, passing a numeric \"ratio\" parameter to your function that indicates the change factor (usually between 0 and 1). For example:\n\t\t *\n\t\t * CSSPlugin.registerSpecialProp(\"myCustomProp\", function(target, value, tween) {\n\t\t *      var start = target.style.width;\n\t\t *      return function(ratio) {\n\t\t *              target.style.width = (start + value * ratio) + \"px\";\n\t\t *              console.log(\"set width to \" + target.style.width);\n\t\t *          }\n\t\t * }, 0);\n\t\t *\n\t\t * Then, when I do this tween, it will trigger my special property:\n\t\t *\n\t\t * TweenLite.to(element, 1, {css:{myCustomProp:100}});\n\t\t *\n\t\t * In the example, of course, we're just changing the width, but you can do anything you want.\n\t\t *\n\t\t * @param {!string} name Property name (or comma-delimited list of property names) that should be intercepted and handled by your function. For example, if I define \"myCustomProp\", then it would handle that portion of the following tween: TweenLite.to(element, 1, {css:{myCustomProp:100}})\n\t\t * @param {!function(Object, Object, Object, string):function(number)} onInitTween The function that will be called when a tween of this special property is performed. The function will receive 4 parameters: 1) Target object that should be tweened, 2) Value that was passed to the tween, 3) The tween instance itself (rarely used), and 4) The property name that's being tweened. Your function should return a function that should be called on every update of the tween. That function will receive a single parameter that is a \"change factor\" value (typically between 0 and 1) indicating the amount of change as a ratio. You can use this to determine how to set the values appropriately in your function.\n\t\t * @param {number=} priority Priority that helps the engine determine the order in which to set the properties (default: 0). Higher priority properties will be updated before lower priority ones.\n\t\t */CSSPlugin.registerSpecialProp = function(name,onInitTween,priority){_registerComplexSpecialProp(name,{parser:function parser(t,e,p,cssp,pt,plugin,vars){var rv=new CSSPropTween(t,p,0,0,pt,2,p,false,priority);rv.plugin = plugin;rv.setRatio = onInitTween(t,e,cssp._tween,p);return rv;},priority:priority});}; //transform-related methods and properties\nCSSPlugin.useSVGTransformAttr = _isSafari || _isFirefox; //Safari and Firefox both have some rendering bugs when applying CSS transforms to SVG elements, so default to using the \"transform\" attribute instead (users can override this).\nvar _transformProps=\"scaleX,scaleY,scaleZ,x,y,z,skewX,skewY,rotation,rotationX,rotationY,perspective,xPercent,yPercent\".split(\",\"),_transformProp=_checkPropPrefix(\"transform\"), //the Javascript (camelCase) transform property, like msTransform, WebkitTransform, MozTransform, or OTransform.\n_transformPropCSS=_prefixCSS + \"transform\",_transformOriginProp=_checkPropPrefix(\"transformOrigin\"),_supports3D=_checkPropPrefix(\"perspective\") !== null,Transform=_internals.Transform = function(){this.perspective = parseFloat(CSSPlugin.defaultTransformPerspective) || 0;this.force3D = CSSPlugin.defaultForce3D === false || !_supports3D?false:CSSPlugin.defaultForce3D || \"auto\";},_SVGElement=window.SVGElement,_useSVGTransformAttr, //Some browsers (like Firefox and IE) don't honor transform-origin properly in SVG elements, so we need to manually adjust the matrix accordingly. We feature detect here rather than always doing the conversion for certain browsers because they may fix the problem at some point in the future.\n_createSVG=function _createSVG(type,container,attributes){var element=_doc.createElementNS(\"http://www.w3.org/2000/svg\",type),reg=/([a-z])([A-Z])/g,p;for(p in attributes) {element.setAttributeNS(null,p.replace(reg,\"$1-$2\").toLowerCase(),attributes[p]);}container.appendChild(element);return element;},_docElement=_doc.documentElement,_forceSVGTransformAttr=(function(){ //IE and Android stock don't support CSS transforms on SVG elements, so we must write them to the \"transform\" attribute. We populate this variable in the _parseTransform() method, and only if/when we come across an SVG element\nvar force=_ieVers || /Android/i.test(_agent) && !window.chrome,svg,rect,width;if(_doc.createElementNS && !force){ //IE8 and earlier doesn't support SVG anyway\nsvg = _createSVG(\"svg\",_docElement);rect = _createSVG(\"rect\",svg,{width:100,height:50,x:100});width = rect.getBoundingClientRect().width;rect.style[_transformOriginProp] = \"50% 50%\";rect.style[_transformProp] = \"scaleX(0.5)\";force = width === rect.getBoundingClientRect().width && !(_isFirefox && _supports3D); //note: Firefox fails the test even though it does support CSS transforms in 3D. Since we can't push 3D stuff into the transform attribute, we force Firefox to pass the test here (as long as it does truly support 3D).\n_docElement.removeChild(svg);}return force;})(),_parseSVGOrigin=function _parseSVGOrigin(e,local,decoratee,absolute,smoothOrigin){var tm=e._gsTransform,m=_getMatrix(e,true),v,x,y,xOrigin,yOrigin,a,b,c,d,tx,ty,determinant,xOriginOld,yOriginOld;if(tm){xOriginOld = tm.xOrigin; //record the original values before we alter them.\nyOriginOld = tm.yOrigin;}if(!absolute || (v = absolute.split(\" \")).length < 2){b = e.getBBox();local = _parsePosition(local).split(\" \");v = [(local[0].indexOf(\"%\") !== -1?parseFloat(local[0]) / 100 * b.width:parseFloat(local[0])) + b.x,(local[1].indexOf(\"%\") !== -1?parseFloat(local[1]) / 100 * b.height:parseFloat(local[1])) + b.y];}decoratee.xOrigin = xOrigin = parseFloat(v[0]);decoratee.yOrigin = yOrigin = parseFloat(v[1]);if(absolute && m !== _identity2DMatrix){ //if svgOrigin is being set, we must invert the matrix and determine where the absolute point is, factoring in the current transforms. Otherwise, the svgOrigin would be based on the element's non-transformed position on the canvas.\na = m[0];b = m[1];c = m[2];d = m[3];tx = m[4];ty = m[5];determinant = a * d - b * c;x = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + (c * ty - d * tx) / determinant;y = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - (a * ty - b * tx) / determinant;xOrigin = decoratee.xOrigin = v[0] = x;yOrigin = decoratee.yOrigin = v[1] = y;}if(tm){ //avoid jump when transformOrigin is changed - adjust the x/y values accordingly\nif(smoothOrigin || smoothOrigin !== false && CSSPlugin.defaultSmoothOrigin !== false){x = xOrigin - xOriginOld;y = yOrigin - yOriginOld; //originally, we simply adjusted the x and y values, but that would cause problems if, for example, you created a rotational tween part-way through an x/y tween. Managing the offset in a separate variable gives us ultimate flexibility.\n//tm.x -= x - (x * m[0] + y * m[2]);\n//tm.y -= y - (x * m[1] + y * m[3]);\ntm.xOffset += x * m[0] + y * m[2] - x;tm.yOffset += x * m[1] + y * m[3] - y;}else {tm.xOffset = tm.yOffset = 0;}}e.setAttribute(\"data-svg-origin\",v.join(\" \"));},_isSVG=function _isSVG(e){return !!(_SVGElement && typeof e.getBBox === \"function\" && e.getCTM && (!e.parentNode || e.parentNode.getBBox && e.parentNode.getCTM));},_identity2DMatrix=[1,0,0,1,0,0],_getMatrix=function _getMatrix(e,force2D){var tm=e._gsTransform || new Transform(),rnd=100000,isDefault,s,m,n,dec;if(_transformProp){s = _getStyle(e,_transformPropCSS,null,true);}else if(e.currentStyle){ //for older versions of IE, we need to interpret the filter portion that is in the format: progid:DXImageTransform.Microsoft.Matrix(M11=6.123233995736766e-17, M12=-1, M21=1, M22=6.123233995736766e-17, sizingMethod='auto expand') Notice that we need to swap b and c compared to a normal matrix.\ns = e.currentStyle.filter.match(_ieGetMatrixExp);s = s && s.length === 4?[s[0].substr(4),Number(s[2].substr(4)),Number(s[1].substr(4)),s[3].substr(4),tm.x || 0,tm.y || 0].join(\",\"):\"\";}isDefault = !s || s === \"none\" || s === \"matrix(1, 0, 0, 1, 0, 0)\";if(tm.svg || e.getBBox && _isSVG(e)){if(isDefault && (e.style[_transformProp] + \"\").indexOf(\"matrix\") !== -1){ //some browsers (like Chrome 40) don't correctly report transforms that are applied inline on an SVG element (they don't get included in the computed style), so we double-check here and accept matrix values\ns = e.style[_transformProp];isDefault = 0;}m = e.getAttribute(\"transform\");if(isDefault && m){if(m.indexOf(\"matrix\") !== -1){ //just in case there's a \"transform\" value specified as an attribute instead of CSS style. Accept either a matrix() or simple translate() value though.\ns = m;isDefault = 0;}else if(m.indexOf(\"translate\") !== -1){s = \"matrix(1,0,0,1,\" + m.match(/(?:\\-|\\b)[\\d\\-\\.e]+\\b/gi).join(\",\") + \")\";isDefault = 0;}}}if(isDefault){return _identity2DMatrix;} //split the matrix values out into an array (m for matrix)\nm = (s || \"\").match(/(?:\\-|\\b)[\\d\\-\\.e]+\\b/gi) || [];i = m.length;while(--i > -1) {n = Number(m[i]);m[i] = (dec = n - (n |= 0))?(dec * rnd + (dec < 0?-0.5:0.5) | 0) / rnd + n:n; //convert strings to Numbers and round to 5 decimal places to avoid issues with tiny numbers. Roughly 20x faster than Number.toFixed(). We also must make sure to round before dividing so that values like 0.9999999999 become 1 to avoid glitches in browser rendering and interpretation of flipped/rotated 3D matrices. And don't just multiply the number by rnd, floor it, and then divide by rnd because the bitwise operations max out at a 32-bit signed integer, thus it could get clipped at a relatively low value (like 22,000.00000 for example).\n}return force2D && m.length > 6?[m[0],m[1],m[4],m[5],m[12],m[13]]:m;}, /**\n\t\t\t * Parses the transform values for an element, returning an object with x, y, z, scaleX, scaleY, scaleZ, rotation, rotationX, rotationY, skewX, and skewY properties. Note: by default (for performance reasons), all skewing is combined into skewX and rotation but skewY still has a place in the transform object so that we can record how much of the skew is attributed to skewX vs skewY. Remember, a skewY of 10 looks the same as a rotation of 10 and skewX of -10.\n\t\t\t * @param {!Object} t target element\n\t\t\t * @param {Object=} cs computed style object (optional)\n\t\t\t * @param {boolean=} rec if true, the transform values will be recorded to the target element's _gsTransform object, like target._gsTransform = {x:0, y:0, z:0, scaleX:1...}\n\t\t\t * @param {boolean=} parse if true, we'll ignore any _gsTransform values that already exist on the element, and force a reparsing of the css (calculated style)\n\t\t\t * @return {object} object containing all of the transform properties/values like {x:0, y:0, z:0, scaleX:1...}\n\t\t\t */_getTransform=_internals.getTransform = function(t,cs,rec,parse){if(t._gsTransform && rec && !parse){return t._gsTransform; //if the element already has a _gsTransform, use that. Note: some browsers don't accurately return the calculated style for the transform (particularly for SVG), so it's almost always safest to just use the values we've already applied rather than re-parsing things.\n}var tm=rec?t._gsTransform || new Transform():new Transform(),invX=tm.scaleX < 0, //in order to interpret things properly, we need to know if the user applied a negative scaleX previously so that we can adjust the rotation and skewX accordingly. Otherwise, if we always interpret a flipped matrix as affecting scaleY and the user only wants to tween the scaleX on multiple sequential tweens, it would keep the negative scaleY without that being the user's intent.\nmin=0.00002,rnd=100000,zOrigin=_supports3D?parseFloat(_getStyle(t,_transformOriginProp,cs,false,\"0 0 0\").split(\" \")[2]) || tm.zOrigin || 0:0,defaultTransformPerspective=parseFloat(CSSPlugin.defaultTransformPerspective) || 0,m,i,scaleX,scaleY,rotation,skewX;tm.svg = !!(t.getBBox && _isSVG(t));if(tm.svg){_parseSVGOrigin(t,_getStyle(t,_transformOriginProp,_cs,false,\"50% 50%\") + \"\",tm,t.getAttribute(\"data-svg-origin\"));_useSVGTransformAttr = CSSPlugin.useSVGTransformAttr || _forceSVGTransformAttr;}m = _getMatrix(t);if(m !== _identity2DMatrix){if(m.length === 16){ //we'll only look at these position-related 6 variables first because if x/y/z all match, it's relatively safe to assume we don't need to re-parse everything which risks losing important rotational information (like rotationX:180 plus rotationY:180 would look the same as rotation:180 - there's no way to know for sure which direction was taken based solely on the matrix3d() values)\nvar a11=m[0],a21=m[1],a31=m[2],a41=m[3],a12=m[4],a22=m[5],a32=m[6],a42=m[7],a13=m[8],a23=m[9],a33=m[10],a14=m[12],a24=m[13],a34=m[14],a43=m[11],angle=Math.atan2(a32,a33),t1,t2,t3,t4,cos,sin; //we manually compensate for non-zero z component of transformOrigin to work around bugs in Safari\nif(tm.zOrigin){a34 = -tm.zOrigin;a14 = a13 * a34 - m[12];a24 = a23 * a34 - m[13];a34 = a33 * a34 + tm.zOrigin - m[14];}tm.rotationX = angle * _RAD2DEG; //rotationX\nif(angle){cos = Math.cos(-angle);sin = Math.sin(-angle);t1 = a12 * cos + a13 * sin;t2 = a22 * cos + a23 * sin;t3 = a32 * cos + a33 * sin;a13 = a12 * -sin + a13 * cos;a23 = a22 * -sin + a23 * cos;a33 = a32 * -sin + a33 * cos;a43 = a42 * -sin + a43 * cos;a12 = t1;a22 = t2;a32 = t3;} //rotationY\nangle = Math.atan2(a13,a33);tm.rotationY = angle * _RAD2DEG;if(angle){cos = Math.cos(-angle);sin = Math.sin(-angle);t1 = a11 * cos - a13 * sin;t2 = a21 * cos - a23 * sin;t3 = a31 * cos - a33 * sin;a23 = a21 * sin + a23 * cos;a33 = a31 * sin + a33 * cos;a43 = a41 * sin + a43 * cos;a11 = t1;a21 = t2;a31 = t3;} //rotationZ\nangle = Math.atan2(a21,a11);tm.rotation = angle * _RAD2DEG;if(angle){cos = Math.cos(-angle);sin = Math.sin(-angle);a11 = a11 * cos + a12 * sin;t2 = a21 * cos + a22 * sin;a22 = a21 * -sin + a22 * cos;a32 = a31 * -sin + a32 * cos;a21 = t2;}if(tm.rotationX && Math.abs(tm.rotationX) + Math.abs(tm.rotation) > 359.9){ //when rotationY is set, it will often be parsed as 180 degrees different than it should be, and rotationX and rotation both being 180 (it looks the same), so we adjust for that here.\ntm.rotationX = tm.rotation = 0;tm.rotationY += 180;}tm.scaleX = (Math.sqrt(a11 * a11 + a21 * a21) * rnd + 0.5 | 0) / rnd;tm.scaleY = (Math.sqrt(a22 * a22 + a23 * a23) * rnd + 0.5 | 0) / rnd;tm.scaleZ = (Math.sqrt(a32 * a32 + a33 * a33) * rnd + 0.5 | 0) / rnd;tm.skewX = 0;tm.perspective = a43?1 / (a43 < 0?-a43:a43):0;tm.x = a14;tm.y = a24;tm.z = a34;if(tm.svg){tm.x -= tm.xOrigin - (tm.xOrigin * a11 - tm.yOrigin * a12);tm.y -= tm.yOrigin - (tm.yOrigin * a21 - tm.xOrigin * a22);}}else if((!_supports3D || parse || !m.length || tm.x !== m[4] || tm.y !== m[5] || !tm.rotationX && !tm.rotationY) && !(tm.x !== undefined && _getStyle(t,\"display\",cs) === \"none\")){ //sometimes a 6-element matrix is returned even when we performed 3D transforms, like if rotationX and rotationY are 180. In cases like this, we still need to honor the 3D transforms. If we just rely on the 2D info, it could affect how the data is interpreted, like scaleY might get set to -1 or rotation could get offset by 180 degrees. For example, do a TweenLite.to(element, 1, {css:{rotationX:180, rotationY:180}}) and then later, TweenLite.to(element, 1, {css:{rotationX:0}}) and without this conditional logic in place, it'd jump to a state of being unrotated when the 2nd tween starts. Then again, we need to honor the fact that the user COULD alter the transforms outside of CSSPlugin, like by manually applying new css, so we try to sense that by looking at x and y because if those changed, we know the changes were made outside CSSPlugin and we force a reinterpretation of the matrix values. Also, in Webkit browsers, if the element's \"display\" is \"none\", its calculated style value will always return empty, so if we've already recorded the values in the _gsTransform object, we'll just rely on those.\nvar k=m.length >= 6,a=k?m[0]:1,b=m[1] || 0,c=m[2] || 0,d=k?m[3]:1;tm.x = m[4] || 0;tm.y = m[5] || 0;scaleX = Math.sqrt(a * a + b * b);scaleY = Math.sqrt(d * d + c * c);rotation = a || b?Math.atan2(b,a) * _RAD2DEG:tm.rotation || 0; //note: if scaleX is 0, we cannot accurately measure rotation. Same for skewX with a scaleY of 0. Therefore, we default to the previously recorded value (or zero if that doesn't exist).\nskewX = c || d?Math.atan2(c,d) * _RAD2DEG + rotation:tm.skewX || 0;if(Math.abs(skewX) > 90 && Math.abs(skewX) < 270){if(invX){scaleX *= -1;skewX += rotation <= 0?180:-180;rotation += rotation <= 0?180:-180;}else {scaleY *= -1;skewX += skewX <= 0?180:-180;}}tm.scaleX = scaleX;tm.scaleY = scaleY;tm.rotation = rotation;tm.skewX = skewX;if(_supports3D){tm.rotationX = tm.rotationY = tm.z = 0;tm.perspective = defaultTransformPerspective;tm.scaleZ = 1;}if(tm.svg){tm.x -= tm.xOrigin - (tm.xOrigin * a + tm.yOrigin * c);tm.y -= tm.yOrigin - (tm.xOrigin * b + tm.yOrigin * d);}}tm.zOrigin = zOrigin; //some browsers have a hard time with very small values like 2.4492935982947064e-16 (notice the \"e-\" towards the end) and would render the object slightly off. So we round to 0 in these cases. The conditional logic here is faster than calling Math.abs(). Also, browsers tend to render a SLIGHTLY rotated object in a fuzzy way, so we need to snap to exactly 0 when appropriate.\nfor(i in tm) {if(tm[i] < min)if(tm[i] > -min){tm[i] = 0;}}} //DEBUG: _log(\"parsed rotation of \" + t.getAttribute(\"id\")+\": \"+(tm.rotationX)+\", \"+(tm.rotationY)+\", \"+(tm.rotation)+\", scale: \"+tm.scaleX+\", \"+tm.scaleY+\", \"+tm.scaleZ+\", position: \"+tm.x+\", \"+tm.y+\", \"+tm.z+\", perspective: \"+tm.perspective+ \", origin: \"+ tm.xOrigin+ \",\"+ tm.yOrigin);\nif(rec){t._gsTransform = tm; //record to the object's _gsTransform which we use so that tweens can control individual properties independently (we need all the properties to accurately recompose the matrix in the setRatio() method)\nif(tm.svg){ //if we're supposed to apply transforms to the SVG element's \"transform\" attribute, make sure there aren't any CSS transforms applied or they'll override the attribute ones. Also clear the transform attribute if we're using CSS, just to be clean.\nif(_useSVGTransformAttr && t.style[_transformProp]){TweenLite.delayedCall(0.001,function(){ //if we apply this right away (before anything has rendered), we risk there being no transforms for a brief moment and it also interferes with adjusting the transformOrigin in a tween with immediateRender:true (it'd try reading the matrix and it wouldn't have the appropriate data in place because we just removed it).\n_removeProp(t.style,_transformProp);});}else if(!_useSVGTransformAttr && t.getAttribute(\"transform\")){TweenLite.delayedCall(0.001,function(){t.removeAttribute(\"transform\");});}}}return tm;}, //for setting 2D transforms in IE6, IE7, and IE8 (must use a \"filter\" to emulate the behavior of modern day browser transforms)\n_setIETransformRatio=function _setIETransformRatio(v){var t=this.data, //refers to the element's _gsTransform object\nang=-t.rotation * _DEG2RAD,skew=ang + t.skewX * _DEG2RAD,rnd=100000,a=(Math.cos(ang) * t.scaleX * rnd | 0) / rnd,b=(Math.sin(ang) * t.scaleX * rnd | 0) / rnd,c=(Math.sin(skew) * -t.scaleY * rnd | 0) / rnd,d=(Math.cos(skew) * t.scaleY * rnd | 0) / rnd,style=this.t.style,cs=this.t.currentStyle,filters,val;if(!cs){return;}val = b; //just for swapping the variables an inverting them (reused \"val\" to avoid creating another variable in memory). IE's filter matrix uses a non-standard matrix configuration (angle goes the opposite way, and b and c are reversed and inverted)\nb = -c;c = -val;filters = cs.filter;style.filter = \"\"; //remove filters so that we can accurately measure offsetWidth/offsetHeight\nvar w=this.t.offsetWidth,h=this.t.offsetHeight,clip=cs.position !== \"absolute\",m=\"progid:DXImageTransform.Microsoft.Matrix(M11=\" + a + \", M12=\" + b + \", M21=\" + c + \", M22=\" + d,ox=t.x + w * t.xPercent / 100,oy=t.y + h * t.yPercent / 100,dx,dy; //if transformOrigin is being used, adjust the offset x and y\nif(t.ox != null){dx = (t.oxp?w * t.ox * 0.01:t.ox) - w / 2;dy = (t.oyp?h * t.oy * 0.01:t.oy) - h / 2;ox += dx - (dx * a + dy * b);oy += dy - (dx * c + dy * d);}if(!clip){m += \", sizingMethod='auto expand')\";}else {dx = w / 2;dy = h / 2; //translate to ensure that transformations occur around the correct origin (default is center).\nm += \", Dx=\" + (dx - (dx * a + dy * b) + ox) + \", Dy=\" + (dy - (dx * c + dy * d) + oy) + \")\";}if(filters.indexOf(\"DXImageTransform.Microsoft.Matrix(\") !== -1){style.filter = filters.replace(_ieSetMatrixExp,m);}else {style.filter = m + \" \" + filters; //we must always put the transform/matrix FIRST (before alpha(opacity=xx)) to avoid an IE bug that slices part of the object when rotation is applied with alpha.\n} //at the end or beginning of the tween, if the matrix is normal (1, 0, 0, 1) and opacity is 100 (or doesn't exist), remove the filter to improve browser performance.\nif(v === 0 || v === 1)if(a === 1)if(b === 0)if(c === 0)if(d === 1)if(!clip || m.indexOf(\"Dx=0, Dy=0\") !== -1)if(!_opacityExp.test(filters) || parseFloat(RegExp.$1) === 100)if(filters.indexOf(\"gradient(\" && filters.indexOf(\"Alpha\")) === -1){style.removeAttribute(\"filter\");} //we must set the margins AFTER applying the filter in order to avoid some bugs in IE8 that could (in rare scenarios) cause them to be ignored intermittently (vibration).\nif(!clip){var mult=_ieVers < 8?1:-1, //in Internet Explorer 7 and before, the box model is broken, causing the browser to treat the width/height of the actual rotated filtered image as the width/height of the box itself, but Microsoft corrected that in IE8. We must use a negative offset in IE8 on the right/bottom\nmarg,prop,dif;dx = t.ieOffsetX || 0;dy = t.ieOffsetY || 0;t.ieOffsetX = Math.round((w - ((a < 0?-a:a) * w + (b < 0?-b:b) * h)) / 2 + ox);t.ieOffsetY = Math.round((h - ((d < 0?-d:d) * h + (c < 0?-c:c) * w)) / 2 + oy);for(i = 0;i < 4;i++) {prop = _margins[i];marg = cs[prop]; //we need to get the current margin in case it is being tweened separately (we want to respect that tween's changes)\nval = marg.indexOf(\"px\") !== -1?parseFloat(marg):_convertToPixels(this.t,prop,parseFloat(marg),marg.replace(_suffixExp,\"\")) || 0;if(val !== t[prop]){dif = i < 2?-t.ieOffsetX:-t.ieOffsetY; //if another tween is controlling a margin, we cannot only apply the difference in the ieOffsets, so we essentially zero-out the dx and dy here in that case. We record the margin(s) later so that we can keep comparing them, making this code very flexible.\n}else {dif = i < 2?dx - t.ieOffsetX:dy - t.ieOffsetY;}style[prop] = (t[prop] = Math.round(val - dif * (i === 0 || i === 2?1:mult))) + \"px\";}}}, /* translates a super small decimal to a string WITHOUT scientific notation\n\t\t\t_safeDecimal = function(n) {\n\t\t\t\tvar s = (n < 0 ? -n : n) + \"\",\n\t\t\t\t\ta = s.split(\"e-\");\n\t\t\t\treturn (n < 0 ? \"-0.\" : \"0.\") + new Array(parseInt(a[1], 10) || 0).join(\"0\") + a[0].split(\".\").join(\"\");\n\t\t\t},\n\t\t\t*/_setTransformRatio=_internals.set3DTransformRatio = _internals.setTransformRatio = function(v){var t=this.data, //refers to the element's _gsTransform object\nstyle=this.t.style,angle=t.rotation,rotationX=t.rotationX,rotationY=t.rotationY,sx=t.scaleX,sy=t.scaleY,sz=t.scaleZ,x=t.x,y=t.y,z=t.z,isSVG=t.svg,perspective=t.perspective,force3D=t.force3D,a11,a12,a13,a21,a22,a23,a31,a32,a33,a41,a42,a43,zOrigin,min,cos,sin,t1,t2,transform,comma,zero,skew,rnd; //check to see if we should render as 2D (and SVGs must use 2D when _useSVGTransformAttr is true)\nif(((v === 1 || v === 0) && force3D === \"auto\" && (this.tween._totalTime === this.tween._totalDuration || !this.tween._totalTime) || !force3D) && !z && !perspective && !rotationY && !rotationX || _useSVGTransformAttr && isSVG || !_supports3D){ //on the final render (which could be 0 for a from tween), if there are no 3D aspects, render in 2D to free up memory and improve performance especially on mobile devices. Check the tween's totalTime/totalDuration too in order to make sure it doesn't happen between repeats if it's a repeating tween.\n//2D\nif(angle || t.skewX || isSVG){angle *= _DEG2RAD;skew = t.skewX * _DEG2RAD;rnd = 100000;a11 = Math.cos(angle) * sx;a21 = Math.sin(angle) * sx;a12 = Math.sin(angle - skew) * -sy;a22 = Math.cos(angle - skew) * sy;if(skew && t.skewType === \"simple\"){ //by default, we compensate skewing on the other axis to make it look more natural, but you can set the skewType to \"simple\" to use the uncompensated skewing that CSS does\nt1 = Math.tan(skew);t1 = Math.sqrt(1 + t1 * t1);a12 *= t1;a22 *= t1;if(t.skewY){a11 *= t1;a21 *= t1;}}if(isSVG){x += t.xOrigin - (t.xOrigin * a11 + t.yOrigin * a12) + t.xOffset;y += t.yOrigin - (t.xOrigin * a21 + t.yOrigin * a22) + t.yOffset;if(_useSVGTransformAttr && (t.xPercent || t.yPercent)){ //The SVG spec doesn't support percentage-based translation in the \"transform\" attribute, so we merge it into the matrix to simulate it.\nmin = this.t.getBBox();x += t.xPercent * 0.01 * min.width;y += t.yPercent * 0.01 * min.height;}min = 0.000001;if(x < min)if(x > -min){x = 0;}if(y < min)if(y > -min){y = 0;}}transform = (a11 * rnd | 0) / rnd + \",\" + (a21 * rnd | 0) / rnd + \",\" + (a12 * rnd | 0) / rnd + \",\" + (a22 * rnd | 0) / rnd + \",\" + x + \",\" + y + \")\";if(isSVG && _useSVGTransformAttr){this.t.setAttribute(\"transform\",\"matrix(\" + transform);}else { //some browsers have a hard time with very small values like 2.4492935982947064e-16 (notice the \"e-\" towards the end) and would render the object slightly off. So we round to 5 decimal places.\nstyle[_transformProp] = (t.xPercent || t.yPercent?\"translate(\" + t.xPercent + \"%,\" + t.yPercent + \"%) matrix(\":\"matrix(\") + transform;}}else {style[_transformProp] = (t.xPercent || t.yPercent?\"translate(\" + t.xPercent + \"%,\" + t.yPercent + \"%) matrix(\":\"matrix(\") + sx + \",0,0,\" + sy + \",\" + x + \",\" + y + \")\";}return;}if(_isFirefox){ //Firefox has a bug (at least in v25) that causes it to render the transparent part of 32-bit PNG images as black when displayed inside an iframe and the 3D scale is very small and doesn't change sufficiently enough between renders (like if you use a Power4.easeInOut to scale from 0 to 1 where the beginning values only change a tiny amount to begin the tween before accelerating). In this case, we force the scale to be 0.00002 instead which is visually the same but works around the Firefox issue.\nmin = 0.0001;if(sx < min && sx > -min){sx = sz = 0.00002;}if(sy < min && sy > -min){sy = sz = 0.00002;}if(perspective && !t.z && !t.rotationX && !t.rotationY){ //Firefox has a bug that causes elements to have an odd super-thin, broken/dotted black border on elements that have a perspective set but aren't utilizing 3D space (no rotationX, rotationY, or z).\nperspective = 0;}}if(angle || t.skewX){angle *= _DEG2RAD;cos = a11 = Math.cos(angle);sin = a21 = Math.sin(angle);if(t.skewX){angle -= t.skewX * _DEG2RAD;cos = Math.cos(angle);sin = Math.sin(angle);if(t.skewType === \"simple\"){ //by default, we compensate skewing on the other axis to make it look more natural, but you can set the skewType to \"simple\" to use the uncompensated skewing that CSS does\nt1 = Math.tan(t.skewX * _DEG2RAD);t1 = Math.sqrt(1 + t1 * t1);cos *= t1;sin *= t1;if(t.skewY){a11 *= t1;a21 *= t1;}}}a12 = -sin;a22 = cos;}else if(!rotationY && !rotationX && sz === 1 && !perspective && !isSVG){ //if we're only translating and/or 2D scaling, this is faster...\nstyle[_transformProp] = (t.xPercent || t.yPercent?\"translate(\" + t.xPercent + \"%,\" + t.yPercent + \"%) translate3d(\":\"translate3d(\") + x + \"px,\" + y + \"px,\" + z + \"px)\" + (sx !== 1 || sy !== 1?\" scale(\" + sx + \",\" + sy + \")\":\"\");return;}else {a11 = a22 = 1;a12 = a21 = 0;} // KEY  INDEX   AFFECTS\n// a11  0       rotation, rotationY, scaleX\n// a21  1       rotation, rotationY, scaleX\n// a31  2       rotationY, scaleX\n// a41  3       rotationY, scaleX\n// a12  4       rotation, skewX, rotationX, scaleY\n// a22  5       rotation, skewX, rotationX, scaleY\n// a32  6       rotationX, scaleY\n// a42  7       rotationX, scaleY\n// a13  8       rotationY, rotationX, scaleZ\n// a23  9       rotationY, rotationX, scaleZ\n// a33  10      rotationY, rotationX, scaleZ\n// a43  11      rotationY, rotationX, perspective, scaleZ\n// a14  12      x, zOrigin, svgOrigin\n// a24  13      y, zOrigin, svgOrigin\n// a34  14      z, zOrigin\n// a44  15\n// rotation: Math.atan2(a21, a11)\n// rotationY: Math.atan2(a13, a33) (or Math.atan2(a13, a11))\n// rotationX: Math.atan2(a32, a33)\na33 = 1;a13 = a23 = a31 = a32 = a41 = a42 = 0;a43 = perspective?-1 / perspective:0;zOrigin = t.zOrigin;min = 0.000001; //threshold below which browsers use scientific notation which won't work.\ncomma = \",\";zero = \"0\";angle = rotationY * _DEG2RAD;if(angle){cos = Math.cos(angle);sin = Math.sin(angle);a31 = -sin;a41 = a43 * -sin;a13 = a11 * sin;a23 = a21 * sin;a33 = cos;a43 *= cos;a11 *= cos;a21 *= cos;}angle = rotationX * _DEG2RAD;if(angle){cos = Math.cos(angle);sin = Math.sin(angle);t1 = a12 * cos + a13 * sin;t2 = a22 * cos + a23 * sin;a32 = a33 * sin;a42 = a43 * sin;a13 = a12 * -sin + a13 * cos;a23 = a22 * -sin + a23 * cos;a33 = a33 * cos;a43 = a43 * cos;a12 = t1;a22 = t2;}if(sz !== 1){a13 *= sz;a23 *= sz;a33 *= sz;a43 *= sz;}if(sy !== 1){a12 *= sy;a22 *= sy;a32 *= sy;a42 *= sy;}if(sx !== 1){a11 *= sx;a21 *= sx;a31 *= sx;a41 *= sx;}if(zOrigin || isSVG){if(zOrigin){x += a13 * -zOrigin;y += a23 * -zOrigin;z += a33 * -zOrigin + zOrigin;}if(isSVG){ //due to bugs in some browsers, we need to manage the transform-origin of SVG manually\nx += t.xOrigin - (t.xOrigin * a11 + t.yOrigin * a12) + t.xOffset;y += t.yOrigin - (t.xOrigin * a21 + t.yOrigin * a22) + t.yOffset;}if(x < min && x > -min){x = zero;}if(y < min && y > -min){y = zero;}if(z < min && z > -min){z = 0; //don't use string because we calculate perspective later and need the number.\n}} //optimized way of concatenating all the values into a string. If we do it all in one shot, it's slower because of the way browsers have to create temp strings and the way it affects memory. If we do it piece-by-piece with +=, it's a bit slower too. We found that doing it in these sized chunks works best overall:\ntransform = t.xPercent || t.yPercent?\"translate(\" + t.xPercent + \"%,\" + t.yPercent + \"%) matrix3d(\":\"matrix3d(\";transform += (a11 < min && a11 > -min?zero:a11) + comma + (a21 < min && a21 > -min?zero:a21) + comma + (a31 < min && a31 > -min?zero:a31);transform += comma + (a41 < min && a41 > -min?zero:a41) + comma + (a12 < min && a12 > -min?zero:a12) + comma + (a22 < min && a22 > -min?zero:a22);if(rotationX || rotationY){ //performance optimization (often there's no rotationX or rotationY, so we can skip these calculations)\ntransform += comma + (a32 < min && a32 > -min?zero:a32) + comma + (a42 < min && a42 > -min?zero:a42) + comma + (a13 < min && a13 > -min?zero:a13);transform += comma + (a23 < min && a23 > -min?zero:a23) + comma + (a33 < min && a33 > -min?zero:a33) + comma + (a43 < min && a43 > -min?zero:a43) + comma;}else {transform += \",0,0,0,0,1,0,\";}transform += x + comma + y + comma + z + comma + (perspective?1 + -z / perspective:1) + \")\";style[_transformProp] = transform;};p = Transform.prototype;p.x = p.y = p.z = p.skewX = p.skewY = p.rotation = p.rotationX = p.rotationY = p.zOrigin = p.xPercent = p.yPercent = p.xOffset = p.yOffset = 0;p.scaleX = p.scaleY = p.scaleZ = 1;_registerComplexSpecialProp(\"transform,scale,scaleX,scaleY,scaleZ,x,y,z,rotation,rotationX,rotationY,rotationZ,skewX,skewY,shortRotation,shortRotationX,shortRotationY,shortRotationZ,transformOrigin,svgOrigin,transformPerspective,directionalRotation,parseTransform,force3D,skewType,xPercent,yPercent,smoothOrigin\",{parser:function parser(t,e,p,cssp,pt,plugin,vars){if(cssp._lastParsedTransform === vars){return pt;} //only need to parse the transform once, and only if the browser supports it.\ncssp._lastParsedTransform = vars;var originalGSTransform=t._gsTransform,style=t.style,min=0.000001,i=_transformProps.length,v=vars,endRotations={},transformOriginString=\"transformOrigin\",m1,m2,skewY,copy,orig,has3D,hasChange,dr,x,y;if(vars.display){ //if the user is setting display during this tween, it may not be instantiated yet but we must force it here in order to get accurate readings. If display is \"none\", some browsers refuse to report the transform properties correctly.\ncopy = _getStyle(t,\"display\");style.display = \"block\";m1 = _getTransform(t,_cs,true,vars.parseTransform);style.display = copy;}else {m1 = _getTransform(t,_cs,true,vars.parseTransform);}cssp._transform = m1;if(typeof v.transform === \"string\" && _transformProp){ //for values like transform:\"rotate(60deg) scale(0.5, 0.8)\"\ncopy = _tempDiv.style; //don't use the original target because it might be SVG in which case some browsers don't report computed style correctly.\ncopy[_transformProp] = v.transform;copy.display = \"block\"; //if display is \"none\", the browser often refuses to report the transform properties correctly.\ncopy.position = \"absolute\";_doc.body.appendChild(_tempDiv);m2 = _getTransform(_tempDiv,null,false);_doc.body.removeChild(_tempDiv);if(!m2.perspective){m2.perspective = m1.perspective; //tweening to no perspective gives very unintuitive results - just keep the same perspective in that case.\n}if(v.xPercent != null){m2.xPercent = _parseVal(v.xPercent,m1.xPercent);}if(v.yPercent != null){m2.yPercent = _parseVal(v.yPercent,m1.yPercent);}}else if(typeof v === \"object\"){ //for values like scaleX, scaleY, rotation, x, y, skewX, and skewY or transform:{...} (object)\nm2 = {scaleX:_parseVal(v.scaleX != null?v.scaleX:v.scale,m1.scaleX),scaleY:_parseVal(v.scaleY != null?v.scaleY:v.scale,m1.scaleY),scaleZ:_parseVal(v.scaleZ,m1.scaleZ),x:_parseVal(v.x,m1.x),y:_parseVal(v.y,m1.y),z:_parseVal(v.z,m1.z),xPercent:_parseVal(v.xPercent,m1.xPercent),yPercent:_parseVal(v.yPercent,m1.yPercent),perspective:_parseVal(v.transformPerspective,m1.perspective)};dr = v.directionalRotation;if(dr != null){if(typeof dr === \"object\"){for(copy in dr) {v[copy] = dr[copy];}}else {v.rotation = dr;}}if(typeof v.x === \"string\" && v.x.indexOf(\"%\") !== -1){m2.x = 0;m2.xPercent = _parseVal(v.x,m1.xPercent);}if(typeof v.y === \"string\" && v.y.indexOf(\"%\") !== -1){m2.y = 0;m2.yPercent = _parseVal(v.y,m1.yPercent);}m2.rotation = _parseAngle(\"rotation\" in v?v.rotation:\"shortRotation\" in v?v.shortRotation + \"_short\":\"rotationZ\" in v?v.rotationZ:m1.rotation,m1.rotation,\"rotation\",endRotations);if(_supports3D){m2.rotationX = _parseAngle(\"rotationX\" in v?v.rotationX:\"shortRotationX\" in v?v.shortRotationX + \"_short\":m1.rotationX || 0,m1.rotationX,\"rotationX\",endRotations);m2.rotationY = _parseAngle(\"rotationY\" in v?v.rotationY:\"shortRotationY\" in v?v.shortRotationY + \"_short\":m1.rotationY || 0,m1.rotationY,\"rotationY\",endRotations);}m2.skewX = v.skewX == null?m1.skewX:_parseAngle(v.skewX,m1.skewX); //note: for performance reasons, we combine all skewing into the skewX and rotation values, ignoring skewY but we must still record it so that we can discern how much of the overall skew is attributed to skewX vs. skewY. Otherwise, if the skewY would always act relative (tween skewY to 10deg, for example, multiple times and if we always combine things into skewX, we can't remember that skewY was 10 from last time). Remember, a skewY of 10 degrees looks the same as a rotation of 10 degrees plus a skewX of -10 degrees.\nm2.skewY = v.skewY == null?m1.skewY:_parseAngle(v.skewY,m1.skewY);if(skewY = m2.skewY - m1.skewY){m2.skewX += skewY;m2.rotation += skewY;}}if(_supports3D && v.force3D != null){m1.force3D = v.force3D;hasChange = true;}m1.skewType = v.skewType || m1.skewType || CSSPlugin.defaultSkewType;has3D = m1.force3D || m1.z || m1.rotationX || m1.rotationY || m2.z || m2.rotationX || m2.rotationY || m2.perspective;if(!has3D && v.scale != null){m2.scaleZ = 1; //no need to tween scaleZ.\n}while(--i > -1) {p = _transformProps[i];orig = m2[p] - m1[p];if(orig > min || orig < -min || v[p] != null || _forcePT[p] != null){hasChange = true;pt = new CSSPropTween(m1,p,m1[p],orig,pt);if(p in endRotations){pt.e = endRotations[p]; //directional rotations typically have compensated values during the tween, but we need to make sure they end at exactly what the user requested\n}pt.xs0 = 0; //ensures the value stays numeric in setRatio()\npt.plugin = plugin;cssp._overwriteProps.push(pt.n);}}orig = v.transformOrigin;if(m1.svg && (orig || v.svgOrigin)){x = m1.xOffset; //when we change the origin, in order to prevent things from jumping we adjust the x/y so we must record those here so that we can create PropTweens for them and flip them at the same time as the origin\ny = m1.yOffset;_parseSVGOrigin(t,_parsePosition(orig),m2,v.svgOrigin,v.smoothOrigin);pt = _addNonTweeningNumericPT(m1,\"xOrigin\",(originalGSTransform?m1:m2).xOrigin,m2.xOrigin,pt,transformOriginString); //note: if there wasn't a transformOrigin defined yet, just start with the destination one; it's wasteful otherwise, and it causes problems with fromTo() tweens. For example, TweenLite.to(\"#wheel\", 3, {rotation:180, transformOrigin:\"50% 50%\", delay:1}); TweenLite.fromTo(\"#wheel\", 3, {scale:0.5, transformOrigin:\"50% 50%\"}, {scale:1, delay:2}); would cause a jump when the from values revert at the beginning of the 2nd tween.\npt = _addNonTweeningNumericPT(m1,\"yOrigin\",(originalGSTransform?m1:m2).yOrigin,m2.yOrigin,pt,transformOriginString);if(x !== m1.xOffset || y !== m1.yOffset){pt = _addNonTweeningNumericPT(m1,\"xOffset\",originalGSTransform?x:m1.xOffset,m1.xOffset,pt,transformOriginString);pt = _addNonTweeningNumericPT(m1,\"yOffset\",originalGSTransform?y:m1.yOffset,m1.yOffset,pt,transformOriginString);}orig = _useSVGTransformAttr?null:\"0px 0px\"; //certain browsers (like firefox) completely botch transform-origin, so we must remove it to prevent it from contaminating transforms. We manage it ourselves with xOrigin and yOrigin\n}if(orig || _supports3D && has3D && m1.zOrigin){ //if anything 3D is happening and there's a transformOrigin with a z component that's non-zero, we must ensure that the transformOrigin's z-component is set to 0 so that we can manually do those calculations to get around Safari bugs. Even if the user didn't specifically define a \"transformOrigin\" in this particular tween (maybe they did it via css directly).\nif(_transformProp){hasChange = true;p = _transformOriginProp;orig = (orig || _getStyle(t,p,_cs,false,\"50% 50%\")) + \"\"; //cast as string to avoid errors\npt = new CSSPropTween(style,p,0,0,pt,-1,transformOriginString);pt.b = style[p];pt.plugin = plugin;if(_supports3D){copy = m1.zOrigin;orig = orig.split(\" \");m1.zOrigin = (orig.length > 2 && !(copy !== 0 && orig[2] === \"0px\")?parseFloat(orig[2]):copy) || 0; //Safari doesn't handle the z part of transformOrigin correctly, so we'll manually handle it in the _set3DTransformRatio() method.\npt.xs0 = pt.e = orig[0] + \" \" + (orig[1] || \"50%\") + \" 0px\"; //we must define a z value of 0px specifically otherwise iOS 5 Safari will stick with the old one (if one was defined)!\npt = new CSSPropTween(m1,\"zOrigin\",0,0,pt,-1,pt.n); //we must create a CSSPropTween for the _gsTransform.zOrigin so that it gets reset properly at the beginning if the tween runs backward (as opposed to just setting m1.zOrigin here)\npt.b = copy;pt.xs0 = pt.e = m1.zOrigin;}else {pt.xs0 = pt.e = orig;} //for older versions of IE (6-8), we need to manually calculate things inside the setRatio() function. We record origin x and y (ox and oy) and whether or not the values are percentages (oxp and oyp).\n}else {_parsePosition(orig + \"\",m1);}}if(hasChange){cssp._transformType = !(m1.svg && _useSVGTransformAttr) && (has3D || this._transformType === 3)?3:2; //quicker than calling cssp._enableTransforms();\n}return pt;},prefix:true});_registerComplexSpecialProp(\"boxShadow\",{defaultValue:\"0px 0px 0px 0px #999\",prefix:true,color:true,multi:true,keyword:\"inset\"});_registerComplexSpecialProp(\"borderRadius\",{defaultValue:\"0px\",parser:function parser(t,e,p,cssp,pt,plugin){e = this.format(e);var props=[\"borderTopLeftRadius\",\"borderTopRightRadius\",\"borderBottomRightRadius\",\"borderBottomLeftRadius\"],style=t.style,ea1,i,es2,bs2,bs,es,bn,en,w,h,esfx,bsfx,rel,hn,vn,em;w = parseFloat(t.offsetWidth);h = parseFloat(t.offsetHeight);ea1 = e.split(\" \");for(i = 0;i < props.length;i++) { //if we're dealing with percentages, we must convert things separately for the horizontal and vertical axis!\nif(this.p.indexOf(\"border\")){ //older browsers used a prefix\nprops[i] = _checkPropPrefix(props[i]);}bs = bs2 = _getStyle(t,props[i],_cs,false,\"0px\");if(bs.indexOf(\" \") !== -1){bs2 = bs.split(\" \");bs = bs2[0];bs2 = bs2[1];}es = es2 = ea1[i];bn = parseFloat(bs);bsfx = bs.substr((bn + \"\").length);rel = es.charAt(1) === \"=\";if(rel){en = parseInt(es.charAt(0) + \"1\",10);es = es.substr(2);en *= parseFloat(es);esfx = es.substr((en + \"\").length - (en < 0?1:0)) || \"\";}else {en = parseFloat(es);esfx = es.substr((en + \"\").length);}if(esfx === \"\"){esfx = _suffixMap[p] || bsfx;}if(esfx !== bsfx){hn = _convertToPixels(t,\"borderLeft\",bn,bsfx); //horizontal number (we use a bogus \"borderLeft\" property just because the _convertToPixels() method searches for the keywords \"Left\", \"Right\", \"Top\", and \"Bottom\" to determine of it's a horizontal or vertical property, and we need \"border\" in the name so that it knows it should measure relative to the element itself, not its parent.\nvn = _convertToPixels(t,\"borderTop\",bn,bsfx); //vertical number\nif(esfx === \"%\"){bs = hn / w * 100 + \"%\";bs2 = vn / h * 100 + \"%\";}else if(esfx === \"em\"){em = _convertToPixels(t,\"borderLeft\",1,\"em\");bs = hn / em + \"em\";bs2 = vn / em + \"em\";}else {bs = hn + \"px\";bs2 = vn + \"px\";}if(rel){es = parseFloat(bs) + en + esfx;es2 = parseFloat(bs2) + en + esfx;}}pt = _parseComplex(style,props[i],bs + \" \" + bs2,es + \" \" + es2,false,\"0px\",pt);}return pt;},prefix:true,formatter:_getFormatter(\"0px 0px 0px 0px\",false,true)});_registerComplexSpecialProp(\"backgroundPosition\",{defaultValue:\"0 0\",parser:function parser(t,e,p,cssp,pt,plugin){var bp=\"background-position\",cs=_cs || _getComputedStyle(t,null),bs=this.format((cs?_ieVers?cs.getPropertyValue(bp + \"-x\") + \" \" + cs.getPropertyValue(bp + \"-y\"):cs.getPropertyValue(bp):t.currentStyle.backgroundPositionX + \" \" + t.currentStyle.backgroundPositionY) || \"0 0\"), //Internet Explorer doesn't report background-position correctly - we must query background-position-x and background-position-y and combine them (even in IE10). Before IE9, we must do the same with the currentStyle object and use camelCase\nes=this.format(e),ba,ea,i,pct,overlap,src;if(bs.indexOf(\"%\") !== -1 !== (es.indexOf(\"%\") !== -1)){src = _getStyle(t,\"backgroundImage\").replace(_urlExp,\"\");if(src && src !== \"none\"){ba = bs.split(\" \");ea = es.split(\" \");_tempImg.setAttribute(\"src\",src); //set the temp IMG's src to the background-image so that we can measure its width/height\ni = 2;while(--i > -1) {bs = ba[i];pct = bs.indexOf(\"%\") !== -1;if(pct !== (ea[i].indexOf(\"%\") !== -1)){overlap = i === 0?t.offsetWidth - _tempImg.width:t.offsetHeight - _tempImg.height;ba[i] = pct?parseFloat(bs) / 100 * overlap + \"px\":parseFloat(bs) / overlap * 100 + \"%\";}}bs = ba.join(\" \");}}return this.parseComplex(t.style,bs,es,pt,plugin);},formatter:_parsePosition});_registerComplexSpecialProp(\"backgroundSize\",{defaultValue:\"0 0\",formatter:_parsePosition});_registerComplexSpecialProp(\"perspective\",{defaultValue:\"0px\",prefix:true});_registerComplexSpecialProp(\"perspectiveOrigin\",{defaultValue:\"50% 50%\",prefix:true});_registerComplexSpecialProp(\"transformStyle\",{prefix:true});_registerComplexSpecialProp(\"backfaceVisibility\",{prefix:true});_registerComplexSpecialProp(\"userSelect\",{prefix:true});_registerComplexSpecialProp(\"margin\",{parser:_getEdgeParser(\"marginTop,marginRight,marginBottom,marginLeft\")});_registerComplexSpecialProp(\"padding\",{parser:_getEdgeParser(\"paddingTop,paddingRight,paddingBottom,paddingLeft\")});_registerComplexSpecialProp(\"clip\",{defaultValue:\"rect(0px,0px,0px,0px)\",parser:function parser(t,e,p,cssp,pt,plugin){var b,cs,delim;if(_ieVers < 9){ //IE8 and earlier don't report a \"clip\" value in the currentStyle - instead, the values are split apart into clipTop, clipRight, clipBottom, and clipLeft. Also, in IE7 and earlier, the values inside rect() are space-delimited, not comma-delimited.\ncs = t.currentStyle;delim = _ieVers < 8?\" \":\",\";b = \"rect(\" + cs.clipTop + delim + cs.clipRight + delim + cs.clipBottom + delim + cs.clipLeft + \")\";e = this.format(e).split(\",\").join(delim);}else {b = this.format(_getStyle(t,this.p,_cs,false,this.dflt));e = this.format(e);}return this.parseComplex(t.style,b,e,pt,plugin);}});_registerComplexSpecialProp(\"textShadow\",{defaultValue:\"0px 0px 0px #999\",color:true,multi:true});_registerComplexSpecialProp(\"autoRound,strictUnits\",{parser:function parser(t,e,p,cssp,pt){return pt;}}); //just so that we can ignore these properties (not tween them)\n_registerComplexSpecialProp(\"border\",{defaultValue:\"0px solid #000\",parser:function parser(t,e,p,cssp,pt,plugin){return this.parseComplex(t.style,this.format(_getStyle(t,\"borderTopWidth\",_cs,false,\"0px\") + \" \" + _getStyle(t,\"borderTopStyle\",_cs,false,\"solid\") + \" \" + _getStyle(t,\"borderTopColor\",_cs,false,\"#000\")),this.format(e),pt,plugin);},color:true,formatter:function formatter(v){var a=v.split(\" \");return a[0] + \" \" + (a[1] || \"solid\") + \" \" + (v.match(_colorExp) || [\"#000\"])[0];}});_registerComplexSpecialProp(\"borderWidth\",{parser:_getEdgeParser(\"borderTopWidth,borderRightWidth,borderBottomWidth,borderLeftWidth\")}); //Firefox doesn't pick up on borderWidth set in style sheets (only inline).\n_registerComplexSpecialProp(\"float,cssFloat,styleFloat\",{parser:function parser(t,e,p,cssp,pt,plugin){var s=t.style,prop=\"cssFloat\" in s?\"cssFloat\":\"styleFloat\";return new CSSPropTween(s,prop,0,0,pt,-1,p,false,0,s[prop],e);}}); //opacity-related\nvar _setIEOpacityRatio=function _setIEOpacityRatio(v){var t=this.t, //refers to the element's style property\nfilters=t.filter || _getStyle(this.data,\"filter\") || \"\",val=this.s + this.c * v | 0,skip;if(val === 100){ //for older versions of IE that need to use a filter to apply opacity, we should remove the filter if opacity hits 1 in order to improve performance, but make sure there isn't a transform (matrix) or gradient in the filters.\nif(filters.indexOf(\"atrix(\") === -1 && filters.indexOf(\"radient(\") === -1 && filters.indexOf(\"oader(\") === -1){t.removeAttribute(\"filter\");skip = !_getStyle(this.data,\"filter\"); //if a class is applied that has an alpha filter, it will take effect (we don't want that), so re-apply our alpha filter in that case. We must first remove it and then check.\n}else {t.filter = filters.replace(_alphaFilterExp,\"\");skip = true;}}if(!skip){if(this.xn1){t.filter = filters = filters || \"alpha(opacity=\" + val + \")\"; //works around bug in IE7/8 that prevents changes to \"visibility\" from being applied properly if the filter is changed to a different alpha on the same frame.\n}if(filters.indexOf(\"pacity\") === -1){ //only used if browser doesn't support the standard opacity style property (IE 7 and 8). We omit the \"O\" to avoid case-sensitivity issues\nif(val !== 0 || !this.xn1){ //bugs in IE7/8 won't render the filter properly if opacity is ADDED on the same frame/render as \"visibility\" changes (this.xn1 is 1 if this tween is an \"autoAlpha\" tween)\nt.filter = filters + \" alpha(opacity=\" + val + \")\"; //we round the value because otherwise, bugs in IE7/8 can prevent \"visibility\" changes from being applied properly.\n}}else {t.filter = filters.replace(_opacityExp,\"opacity=\" + val);}}};_registerComplexSpecialProp(\"opacity,alpha,autoAlpha\",{defaultValue:\"1\",parser:function parser(t,e,p,cssp,pt,plugin){var b=parseFloat(_getStyle(t,\"opacity\",_cs,false,\"1\")),style=t.style,isAutoAlpha=p === \"autoAlpha\";if(typeof e === \"string\" && e.charAt(1) === \"=\"){e = (e.charAt(0) === \"-\"?-1:1) * parseFloat(e.substr(2)) + b;}if(isAutoAlpha && b === 1 && _getStyle(t,\"visibility\",_cs) === \"hidden\" && e !== 0){ //if visibility is initially set to \"hidden\", we should interpret that as intent to make opacity 0 (a convenience)\nb = 0;}if(_supportsOpacity){pt = new CSSPropTween(style,\"opacity\",b,e - b,pt);}else {pt = new CSSPropTween(style,\"opacity\",b * 100,(e - b) * 100,pt);pt.xn1 = isAutoAlpha?1:0; //we need to record whether or not this is an autoAlpha so that in the setRatio(), we know to duplicate the setting of the alpha in order to work around a bug in IE7 and IE8 that prevents changes to \"visibility\" from taking effect if the filter is changed to a different alpha(opacity) at the same time. Setting it to the SAME value first, then the new value works around the IE7/8 bug.\nstyle.zoom = 1; //helps correct an IE issue.\npt.type = 2;pt.b = \"alpha(opacity=\" + pt.s + \")\";pt.e = \"alpha(opacity=\" + (pt.s + pt.c) + \")\";pt.data = t;pt.plugin = plugin;pt.setRatio = _setIEOpacityRatio;}if(isAutoAlpha){ //we have to create the \"visibility\" PropTween after the opacity one in the linked list so that they run in the order that works properly in IE8 and earlier\npt = new CSSPropTween(style,\"visibility\",0,0,pt,-1,null,false,0,b !== 0?\"inherit\":\"hidden\",e === 0?\"hidden\":\"inherit\");pt.xs0 = \"inherit\";cssp._overwriteProps.push(pt.n);cssp._overwriteProps.push(p);}return pt;}});var _removeProp=function _removeProp(s,p){if(p){if(s.removeProperty){if(p.substr(0,2) === \"ms\" || p.substr(0,6) === \"webkit\"){ //Microsoft and some Webkit browsers don't conform to the standard of capitalizing the first prefix character, so we adjust so that when we prefix the caps with a dash, it's correct (otherwise it'd be \"ms-transform\" instead of \"-ms-transform\" for IE9, for example)\np = \"-\" + p;}s.removeProperty(p.replace(_capsExp,\"-$1\").toLowerCase());}else { //note: old versions of IE use \"removeAttribute()\" instead of \"removeProperty()\"\ns.removeAttribute(p);}}},_setClassNameRatio=function _setClassNameRatio(v){this.t._gsClassPT = this;if(v === 1 || v === 0){this.t.setAttribute(\"class\",v === 0?this.b:this.e);var mpt=this.data, //first MiniPropTween\ns=this.t.style;while(mpt) {if(!mpt.v){_removeProp(s,mpt.p);}else {s[mpt.p] = mpt.v;}mpt = mpt._next;}if(v === 1 && this.t._gsClassPT === this){this.t._gsClassPT = null;}}else if(this.t.getAttribute(\"class\") !== this.e){this.t.setAttribute(\"class\",this.e);}};_registerComplexSpecialProp(\"className\",{parser:function parser(t,e,p,cssp,pt,plugin,vars){var b=t.getAttribute(\"class\") || \"\", //don't use t.className because it doesn't work consistently on SVG elements; getAttribute(\"class\") and setAttribute(\"class\", value\") is more reliable.\ncssText=t.style.cssText,difData,bs,cnpt,cnptLookup,mpt;pt = cssp._classNamePT = new CSSPropTween(t,p,0,0,pt,2);pt.setRatio = _setClassNameRatio;pt.pr = -11;_hasPriority = true;pt.b = b;bs = _getAllStyles(t,_cs); //if there's a className tween already operating on the target, force it to its end so that the necessary inline styles are removed and the class name is applied before we determine the end state (we don't want inline styles interfering that were there just for class-specific values)\ncnpt = t._gsClassPT;if(cnpt){cnptLookup = {};mpt = cnpt.data; //first MiniPropTween which stores the inline styles - we need to force these so that the inline styles don't contaminate things. Otherwise, there's a small chance that a tween could start and the inline values match the destination values and they never get cleaned.\nwhile(mpt) {cnptLookup[mpt.p] = 1;mpt = mpt._next;}cnpt.setRatio(1);}t._gsClassPT = pt;pt.e = e.charAt(1) !== \"=\"?e:b.replace(new RegExp(\"\\\\s*\\\\b\" + e.substr(2) + \"\\\\b\"),\"\") + (e.charAt(0) === \"+\"?\" \" + e.substr(2):\"\");t.setAttribute(\"class\",pt.e);difData = _cssDif(t,bs,_getAllStyles(t),vars,cnptLookup);t.setAttribute(\"class\",b);pt.data = difData.firstMPT;t.style.cssText = cssText; //we recorded cssText before we swapped classes and ran _getAllStyles() because in cases when a className tween is overwritten, we remove all the related tweening properties from that class change (otherwise class-specific stuff can't override properties we've directly set on the target's style object due to specificity).\npt = pt.xfirst = cssp.parse(t,difData.difs,pt,plugin); //we record the CSSPropTween as the xfirst so that we can handle overwriting propertly (if \"className\" gets overwritten, we must kill all the properties associated with the className part of the tween, so we can loop through from xfirst to the pt itself)\nreturn pt;}});var _setClearPropsRatio=function _setClearPropsRatio(v){if(v === 1 || v === 0)if(this.data._totalTime === this.data._totalDuration && this.data.data !== \"isFromStart\"){ //this.data refers to the tween. Only clear at the END of the tween (remember, from() tweens make the ratio go from 1 to 0, so we can't just check that and if the tween is the zero-duration one that's created internally to render the starting values in a from() tween, ignore that because otherwise, for example, from(...{height:100, clearProps:\"height\", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in).\nvar s=this.t.style,transformParse=_specialProps.transform.parse,a,p,i,clearTransform,transform;if(this.e === \"all\"){s.cssText = \"\";clearTransform = true;}else {a = this.e.split(\" \").join(\"\").split(\",\");i = a.length;while(--i > -1) {p = a[i];if(_specialProps[p]){if(_specialProps[p].parse === transformParse){clearTransform = true;}else {p = p === \"transformOrigin\"?_transformOriginProp:_specialProps[p].p; //ensures that special properties use the proper browser-specific property name, like \"scaleX\" might be \"-webkit-transform\" or \"boxShadow\" might be \"-moz-box-shadow\"\n}}_removeProp(s,p);}}if(clearTransform){_removeProp(s,_transformProp);transform = this.t._gsTransform;if(transform){if(transform.svg){this.t.removeAttribute(\"data-svg-origin\");}delete this.t._gsTransform;}}}};_registerComplexSpecialProp(\"clearProps\",{parser:function parser(t,e,p,cssp,pt){pt = new CSSPropTween(t,p,0,0,pt,2);pt.setRatio = _setClearPropsRatio;pt.e = e;pt.pr = -10;pt.data = cssp._tween;_hasPriority = true;return pt;}});p = \"bezier,throwProps,physicsProps,physics2D\".split(\",\");i = p.length;while(i--) {_registerPluginProp(p[i]);}p = CSSPlugin.prototype;p._firstPT = p._lastParsedTransform = p._transform = null; //gets called when the tween renders for the first time. This kicks everything off, recording start/end values, etc.\np._onInitTween = function(target,vars,tween){if(!target.nodeType){ //css is only for dom elements\nreturn false;}this._target = target;this._tween = tween;this._vars = vars;_autoRound = vars.autoRound;_hasPriority = false;_suffixMap = vars.suffixMap || CSSPlugin.suffixMap;_cs = _getComputedStyle(target,\"\");_overwriteProps = this._overwriteProps;var style=target.style,v,pt,pt2,first,last,next,zIndex,tpt,threeD;if(_reqSafariFix)if(style.zIndex === \"\"){v = _getStyle(target,\"zIndex\",_cs);if(v === \"auto\" || v === \"\"){ //corrects a bug in [non-Android] Safari that prevents it from repainting elements in their new positions if they don't have a zIndex set. We also can't just apply this inside _parseTransform() because anything that's moved in any way (like using \"left\" or \"top\" instead of transforms like \"x\" and \"y\") can be affected, so it is best to ensure that anything that's tweening has a z-index. Setting \"WebkitPerspective\" to a non-zero value worked too except that on iOS Safari things would flicker randomly. Plus zIndex is less memory-intensive.\nthis._addLazySet(style,\"zIndex\",0);}}if(typeof vars === \"string\"){first = style.cssText;v = _getAllStyles(target,_cs);style.cssText = first + \";\" + vars;v = _cssDif(target,v,_getAllStyles(target)).difs;if(!_supportsOpacity && _opacityValExp.test(vars)){v.opacity = parseFloat(RegExp.$1);}vars = v;style.cssText = first;}if(vars.className){ //className tweens will combine any differences they find in the css with the vars that are passed in, so {className:\"myClass\", scale:0.5, left:20} would work.\nthis._firstPT = pt = _specialProps.className.parse(target,vars.className,\"className\",this,null,null,vars);}else {this._firstPT = pt = this.parse(target,vars,null);}if(this._transformType){threeD = this._transformType === 3;if(!_transformProp){style.zoom = 1; //helps correct an IE issue.\n}else if(_isSafari){_reqSafariFix = true; //if zIndex isn't set, iOS Safari doesn't repaint things correctly sometimes (seemingly at random).\nif(style.zIndex === \"\"){zIndex = _getStyle(target,\"zIndex\",_cs);if(zIndex === \"auto\" || zIndex === \"\"){this._addLazySet(style,\"zIndex\",0);}} //Setting WebkitBackfaceVisibility corrects 3 bugs:\n// 1) [non-Android] Safari skips rendering changes to \"top\" and \"left\" that are made on the same frame/render as a transform update.\n// 2) iOS Safari sometimes neglects to repaint elements in their new positions. Setting \"WebkitPerspective\" to a non-zero value worked too except that on iOS Safari things would flicker randomly.\n// 3) Safari sometimes displayed odd artifacts when tweening the transform (or WebkitTransform) property, like ghosts of the edges of the element remained. Definitely a browser bug.\n//Note: we allow the user to override the auto-setting by defining WebkitBackfaceVisibility in the vars of the tween.\nif(_isSafariLT6){this._addLazySet(style,\"WebkitBackfaceVisibility\",this._vars.WebkitBackfaceVisibility || (threeD?\"visible\":\"hidden\"));}}pt2 = pt;while(pt2 && pt2._next) {pt2 = pt2._next;}tpt = new CSSPropTween(target,\"transform\",0,0,null,2);this._linkCSSP(tpt,null,pt2);tpt.setRatio = _transformProp?_setTransformRatio:_setIETransformRatio;tpt.data = this._transform || _getTransform(target,_cs,true);tpt.tween = tween;tpt.pr = -1; //ensures that the transforms get applied after the components are updated.\n_overwriteProps.pop(); //we don't want to force the overwrite of all \"transform\" tweens of the target - we only care about individual transform properties like scaleX, rotation, etc. The CSSPropTween constructor automatically adds the property to _overwriteProps which is why we need to pop() here.\n}if(_hasPriority){ //reorders the linked list in order of pr (priority)\nwhile(pt) {next = pt._next;pt2 = first;while(pt2 && pt2.pr > pt.pr) {pt2 = pt2._next;}if(pt._prev = pt2?pt2._prev:last){pt._prev._next = pt;}else {first = pt;}if(pt._next = pt2){pt2._prev = pt;}else {last = pt;}pt = next;}this._firstPT = first;}return true;};p.parse = function(target,vars,pt,plugin){var style=target.style,p,sp,bn,en,bs,es,bsfx,esfx,isStr,rel;for(p in vars) {es = vars[p]; //ending value string\nsp = _specialProps[p]; //SpecialProp lookup.\nif(sp){pt = sp.parse(target,es,p,this,pt,plugin,vars);}else {bs = _getStyle(target,p,_cs) + \"\";isStr = typeof es === \"string\";if(p === \"color\" || p === \"fill\" || p === \"stroke\" || p.indexOf(\"Color\") !== -1 || isStr && _rgbhslExp.test(es)){ //Opera uses background: to define color sometimes in addition to backgroundColor:\nif(!isStr){es = _parseColor(es);es = (es.length > 3?\"rgba(\":\"rgb(\") + es.join(\",\") + \")\";}pt = _parseComplex(style,p,bs,es,true,\"transparent\",pt,0,plugin);}else if(isStr && (es.indexOf(\" \") !== -1 || es.indexOf(\",\") !== -1)){pt = _parseComplex(style,p,bs,es,true,null,pt,0,plugin);}else {bn = parseFloat(bs);bsfx = bn || bn === 0?bs.substr((bn + \"\").length):\"\"; //remember, bs could be non-numeric like \"normal\" for fontWeight, so we should default to a blank suffix in that case.\nif(bs === \"\" || bs === \"auto\"){if(p === \"width\" || p === \"height\"){bn = _getDimension(target,p,_cs);bsfx = \"px\";}else if(p === \"left\" || p === \"top\"){bn = _calculateOffset(target,p,_cs);bsfx = \"px\";}else {bn = p !== \"opacity\"?0:1;bsfx = \"\";}}rel = isStr && es.charAt(1) === \"=\";if(rel){en = parseInt(es.charAt(0) + \"1\",10);es = es.substr(2);en *= parseFloat(es);esfx = es.replace(_suffixExp,\"\");}else {en = parseFloat(es);esfx = isStr?es.replace(_suffixExp,\"\"):\"\";}if(esfx === \"\"){esfx = p in _suffixMap?_suffixMap[p]:bsfx; //populate the end suffix, prioritizing the map, then if none is found, use the beginning suffix.\n}es = en || en === 0?(rel?en + bn:en) + esfx:vars[p]; //ensures that any += or -= prefixes are taken care of. Record the end value before normalizing the suffix because we always want to end the tween on exactly what they intended even if it doesn't match the beginning value's suffix.\n//if the beginning/ending suffixes don't match, normalize them...\nif(bsfx !== esfx)if(esfx !== \"\")if(en || en === 0)if(bn){ //note: if the beginning value (bn) is 0, we don't need to convert units!\nbn = _convertToPixels(target,p,bn,bsfx);if(esfx === \"%\"){bn /= _convertToPixels(target,p,100,\"%\") / 100;if(vars.strictUnits !== true){ //some browsers report only \"px\" values instead of allowing \"%\" with getComputedStyle(), so we assume that if we're tweening to a %, we should start there too unless strictUnits:true is defined. This approach is particularly useful for responsive designs that use from() tweens.\nbs = bn + \"%\";}}else if(esfx === \"em\" || esfx === \"rem\"){bn /= _convertToPixels(target,p,1,esfx); //otherwise convert to pixels.\n}else if(esfx !== \"px\"){en = _convertToPixels(target,p,en,esfx);esfx = \"px\"; //we don't use bsfx after this, so we don't need to set it to px too.\n}if(rel)if(en || en === 0){es = en + bn + esfx; //the changes we made affect relative calculations, so adjust the end value here.\n}}if(rel){en += bn;}if((bn || bn === 0) && (en || en === 0)){ //faster than isNaN(). Also, previously we required en !== bn but that doesn't really gain much performance and it prevents _parseToProxy() from working properly if beginning and ending values match but need to get tweened by an external plugin anyway. For example, a bezier tween where the target starts at left:0 and has these points: [{left:50},{left:0}] wouldn't work properly because when parsing the last point, it'd match the first (current) one and a non-tweening CSSPropTween would be recorded when we actually need a normal tween (type:0) so that things get updated during the tween properly.\npt = new CSSPropTween(style,p,bn,en - bn,pt,0,p,_autoRound !== false && (esfx === \"px\" || p === \"zIndex\"),0,bs,es);pt.xs0 = esfx; //DEBUG: _log(\"tween \"+p+\" from \"+pt.b+\" (\"+bn+esfx+\") to \"+pt.e+\" with suffix: \"+pt.xs0);\n}else if(style[p] === undefined || !es && (es + \"\" === \"NaN\" || es == null)){_log(\"invalid \" + p + \" tween value: \" + vars[p]);}else {pt = new CSSPropTween(style,p,en || bn || 0,0,pt,-1,p,false,0,bs,es);pt.xs0 = es === \"none\" && (p === \"display\" || p.indexOf(\"Style\") !== -1)?bs:es; //intermediate value should typically be set immediately (end value) except for \"display\" or things like borderTopStyle, borderBottomStyle, etc. which should use the beginning value during the tween.\n//DEBUG: _log(\"non-tweening value \"+p+\": \"+pt.xs0);\n}}}if(plugin)if(pt && !pt.plugin){pt.plugin = plugin;}}return pt;}; //gets called every time the tween updates, passing the new ratio (typically a value between 0 and 1, but not always (for example, if an Elastic.easeOut is used, the value can jump above 1 mid-tween). It will always start and 0 and end at 1.\np.setRatio = function(v){var pt=this._firstPT,min=0.000001,val,str,i; //at the end of the tween, we set the values to exactly what we received in order to make sure non-tweening values (like \"position\" or \"float\" or whatever) are set and so that if the beginning/ending suffixes (units) didn't match and we normalized to px, the value that the user passed in is used here. We check to see if the tween is at its beginning in case it's a from() tween in which case the ratio will actually go from 1 to 0 over the course of the tween (backwards).\nif(v === 1 && (this._tween._time === this._tween._duration || this._tween._time === 0)){while(pt) {if(pt.type !== 2){if(pt.r && pt.type !== -1){val = Math.round(pt.s + pt.c);if(!pt.type){pt.t[pt.p] = val + pt.xs0;}else if(pt.type === 1){ //complex value (one that typically has multiple numbers inside a string, like \"rect(5px,10px,20px,25px)\"\ni = pt.l;str = pt.xs0 + val + pt.xs1;for(i = 1;i < pt.l;i++) {str += pt[\"xn\" + i] + pt[\"xs\" + (i + 1)];}pt.t[pt.p] = str;}}else {pt.t[pt.p] = pt.e;}}else {pt.setRatio(v);}pt = pt._next;}}else if(v || !(this._tween._time === this._tween._duration || this._tween._time === 0) || this._tween._rawPrevTime === -0.000001){while(pt) {val = pt.c * v + pt.s;if(pt.r){val = Math.round(val);}else if(val < min)if(val > -min){val = 0;}if(!pt.type){pt.t[pt.p] = val + pt.xs0;}else if(pt.type === 1){ //complex value (one that typically has multiple numbers inside a string, like \"rect(5px,10px,20px,25px)\"\ni = pt.l;if(i === 2){pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2;}else if(i === 3){pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3;}else if(i === 4){pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3 + pt.xn3 + pt.xs4;}else if(i === 5){pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3 + pt.xn3 + pt.xs4 + pt.xn4 + pt.xs5;}else {str = pt.xs0 + val + pt.xs1;for(i = 1;i < pt.l;i++) {str += pt[\"xn\" + i] + pt[\"xs\" + (i + 1)];}pt.t[pt.p] = str;}}else if(pt.type === -1){ //non-tweening value\npt.t[pt.p] = pt.xs0;}else if(pt.setRatio){ //custom setRatio() for things like SpecialProps, external plugins, etc.\npt.setRatio(v);}pt = pt._next;} //if the tween is reversed all the way back to the beginning, we need to restore the original values which may have different units (like % instead of px or em or whatever).\n}else {while(pt) {if(pt.type !== 2){pt.t[pt.p] = pt.b;}else {pt.setRatio(v);}pt = pt._next;}}}; /**\n\t\t * @private\n\t\t * Forces rendering of the target's transforms (rotation, scale, etc.) whenever the CSSPlugin's setRatio() is called.\n\t\t * Basically, this tells the CSSPlugin to create a CSSPropTween (type 2) after instantiation that runs last in the linked\n\t\t * list and calls the appropriate (3D or 2D) rendering function. We separate this into its own method so that we can call\n\t\t * it from other plugins like BezierPlugin if, for example, it needs to apply an autoRotation and this CSSPlugin\n\t\t * doesn't have any transform-related properties of its own. You can call this method as many times as you\n\t\t * want and it won't create duplicate CSSPropTweens.\n\t\t *\n\t\t * @param {boolean} threeD if true, it should apply 3D tweens (otherwise, just 2D ones are fine and typically faster)\n\t\t */p._enableTransforms = function(threeD){this._transform = this._transform || _getTransform(this._target,_cs,true); //ensures that the element has a _gsTransform property with the appropriate values.\nthis._transformType = !(this._transform.svg && _useSVGTransformAttr) && (threeD || this._transformType === 3)?3:2;};var lazySet=function lazySet(v){this.t[this.p] = this.e;this.data._linkCSSP(this,this._next,null,true); //we purposefully keep this._next even though it'd make sense to null it, but this is a performance optimization, as this happens during the while (pt) {} loop in setRatio() at the bottom of which it sets pt = pt._next, so if we null it, the linked list will be broken in that loop.\n}; /** @private Gives us a way to set a value on the first render (and only the first render). **/p._addLazySet = function(t,p,v){var pt=this._firstPT = new CSSPropTween(t,p,0,0,this._firstPT,2);pt.e = v;pt.setRatio = lazySet;pt.data = this;}; /** @private **/p._linkCSSP = function(pt,next,prev,remove){if(pt){if(next){next._prev = pt;}if(pt._next){pt._next._prev = pt._prev;}if(pt._prev){pt._prev._next = pt._next;}else if(this._firstPT === pt){this._firstPT = pt._next;remove = true; //just to prevent resetting this._firstPT 5 lines down in case pt._next is null. (optimized for speed)\n}if(prev){prev._next = pt;}else if(!remove && this._firstPT === null){this._firstPT = pt;}pt._next = next;pt._prev = prev;}return pt;}; //we need to make sure that if alpha or autoAlpha is killed, opacity is too. And autoAlpha affects the \"visibility\" property.\np._kill = function(lookup){var copy=lookup,pt,p,xfirst;if(lookup.autoAlpha || lookup.alpha){copy = {};for(p in lookup) { //copy the lookup so that we're not changing the original which may be passed elsewhere.\ncopy[p] = lookup[p];}copy.opacity = 1;if(copy.autoAlpha){copy.visibility = 1;}}if(lookup.className && (pt = this._classNamePT)){ //for className tweens, we need to kill any associated CSSPropTweens too; a linked list starts at the className's \"xfirst\".\nxfirst = pt.xfirst;if(xfirst && xfirst._prev){this._linkCSSP(xfirst._prev,pt._next,xfirst._prev._prev); //break off the prev\n}else if(xfirst === this._firstPT){this._firstPT = pt._next;}if(pt._next){this._linkCSSP(pt._next,pt._next._next,xfirst._prev);}this._classNamePT = null;}return TweenPlugin.prototype._kill.call(this,copy);}; //used by cascadeTo() for gathering all the style properties of each child element into an array for comparison.\nvar _getChildStyles=function _getChildStyles(e,props,targets){var children,i,child,type;if(e.slice){i = e.length;while(--i > -1) {_getChildStyles(e[i],props,targets);}return;}children = e.childNodes;i = children.length;while(--i > -1) {child = children[i];type = child.type;if(child.style){props.push(_getAllStyles(child));if(targets){targets.push(child);}}if((type === 1 || type === 9 || type === 11) && child.childNodes.length){_getChildStyles(child,props,targets);}}}; /**\n\t\t * Typically only useful for className tweens that may affect child elements, this method creates a TweenLite\n\t\t * and then compares the style properties of all the target's child elements at the tween's start and end, and\n\t\t * if any are different, it also creates tweens for those and returns an array containing ALL of the resulting\n\t\t * tweens (so that you can easily add() them to a TimelineLite, for example). The reason this functionality is\n\t\t * wrapped into a separate static method of CSSPlugin instead of being integrated into all regular className tweens\n\t\t * is because it creates entirely new tweens that may have completely different targets than the original tween,\n\t\t * so if they were all lumped into the original tween instance, it would be inconsistent with the rest of the API\n\t\t * and it would create other problems. For example:\n\t\t *  - If I create a tween of elementA, that tween instance may suddenly change its target to include 50 other elements (unintuitive if I specifically defined the target I wanted)\n\t\t *  - We can't just create new independent tweens because otherwise, what happens if the original/parent tween is reversed or pause or dropped into a TimelineLite for tight control? You'd expect that tween's behavior to affect all the others.\n\t\t *  - Analyzing every style property of every child before and after the tween is an expensive operation when there are many children, so this behavior shouldn't be imposed on all className tweens by default, especially since it's probably rare that this extra functionality is needed.\n\t\t *\n\t\t * @param {Object} target object to be tweened\n\t\t * @param {number} Duration in seconds (or frames for frames-based tweens)\n\t\t * @param {Object} Object containing the end values, like {className:\"newClass\", ease:Linear.easeNone}\n\t\t * @return {Array} An array of TweenLite instances\n\t\t */CSSPlugin.cascadeTo = function(target,duration,vars){var tween=TweenLite.to(target,duration,vars),results=[tween],b=[],e=[],targets=[],_reservedProps=TweenLite._internals.reservedProps,i,difs,p,from;target = tween._targets || tween.target;_getChildStyles(target,b,targets);tween.render(duration,true,true);_getChildStyles(target,e);tween.render(0,true,true);tween._enabled(true);i = targets.length;while(--i > -1) {difs = _cssDif(targets[i],b[i],e[i]);if(difs.firstMPT){difs = difs.difs;for(p in vars) {if(_reservedProps[p]){difs[p] = vars[p];}}from = {};for(p in difs) {from[p] = b[i][p];}results.push(TweenLite.fromTo(targets[i],duration,from,difs));}}return results;};TweenPlugin.activate([CSSPlugin]);return CSSPlugin;},true); /*\n * ----------------------------------------------------------------\n * RoundPropsPlugin\n * ----------------------------------------------------------------\n */(function(){var RoundPropsPlugin=_gsScope._gsDefine.plugin({propName:\"roundProps\",version:\"1.5\",priority:-1,API:2, //called when the tween renders for the first time. This is where initial values should be recorded and any setup routines should run.\ninit:function init(target,value,tween){this._tween = tween;return true;}}),_roundLinkedList=function _roundLinkedList(node){while(node) {if(!node.f && !node.blob){node.r = 1;}node = node._next;}},p=RoundPropsPlugin.prototype;p._onInitAllProps = function(){var tween=this._tween,rp=tween.vars.roundProps.join?tween.vars.roundProps:tween.vars.roundProps.split(\",\"),i=rp.length,lookup={},rpt=tween._propLookup.roundProps,prop,pt,next;while(--i > -1) {lookup[rp[i]] = 1;}i = rp.length;while(--i > -1) {prop = rp[i];pt = tween._firstPT;while(pt) {next = pt._next; //record here, because it may get removed\nif(pt.pg){pt.t._roundProps(lookup,true);}else if(pt.n === prop){if(pt.f === 2 && pt.t){ //a blob (text containing multiple numeric values)\n_roundLinkedList(pt.t._firstPT);}else {this._add(pt.t,prop,pt.s,pt.c); //remove from linked list\nif(next){next._prev = pt._prev;}if(pt._prev){pt._prev._next = next;}else if(tween._firstPT === pt){tween._firstPT = next;}pt._next = pt._prev = null;tween._propLookup[prop] = rpt;}}pt = next;}}return false;};p._add = function(target,p,s,c){this._addTween(target,p,s,s + c,p,true);this._overwriteProps.push(p);};})(); /*\n * ----------------------------------------------------------------\n * AttrPlugin\n * ----------------------------------------------------------------\n */(function(){_gsScope._gsDefine.plugin({propName:\"attr\",API:2,version:\"0.5.0\", //called when the tween renders for the first time. This is where initial values should be recorded and any setup routines should run.\ninit:function init(target,value,tween){var p;if(typeof target.setAttribute !== \"function\"){return false;}for(p in value) {this._addTween(target,\"setAttribute\",target.getAttribute(p) + \"\",value[p] + \"\",p,false,p);this._overwriteProps.push(p);}return true;}});})(); /*\n * ----------------------------------------------------------------\n * DirectionalRotationPlugin\n * ----------------------------------------------------------------\n */_gsScope._gsDefine.plugin({propName:\"directionalRotation\",version:\"0.2.1\",API:2, //called when the tween renders for the first time. This is where initial values should be recorded and any setup routines should run.\ninit:function init(target,value,tween){if(typeof value !== \"object\"){value = {rotation:value};}this.finals = {};var cap=value.useRadians === true?Math.PI * 2:360,min=0.000001,p,v,start,end,dif,split;for(p in value) {if(p !== \"useRadians\"){split = (value[p] + \"\").split(\"_\");v = split[0];start = parseFloat(typeof target[p] !== \"function\"?target[p]:target[p.indexOf(\"set\") || typeof target[\"get\" + p.substr(3)] !== \"function\"?p:\"get\" + p.substr(3)]());end = this.finals[p] = typeof v === \"string\" && v.charAt(1) === \"=\"?start + parseInt(v.charAt(0) + \"1\",10) * Number(v.substr(2)):Number(v) || 0;dif = end - start;if(split.length){v = split.join(\"_\");if(v.indexOf(\"short\") !== -1){dif = dif % cap;if(dif !== dif % (cap / 2)){dif = dif < 0?dif + cap:dif - cap;}}if(v.indexOf(\"_cw\") !== -1 && dif < 0){dif = (dif + cap * 9999999999) % cap - (dif / cap | 0) * cap;}else if(v.indexOf(\"ccw\") !== -1 && dif > 0){dif = (dif - cap * 9999999999) % cap - (dif / cap | 0) * cap;}}if(dif > min || dif < -min){this._addTween(target,p,start,start + dif,p);this._overwriteProps.push(p);}}}return true;}, //called each time the values should be updated, and the ratio gets passed as the only parameter (typically it's a value between 0 and 1, but it can exceed those when using an ease like Elastic.easeOut or Back.easeOut, etc.)\nset:function set(ratio){var pt;if(ratio !== 1){this._super.setRatio.call(this,ratio);}else {pt = this._firstPT;while(pt) {if(pt.f){pt.t[pt.p](this.finals[pt.p]);}else {pt.t[pt.p] = this.finals[pt.p];}pt = pt._next;}}}})._autoCSS = true; /*\n * ----------------------------------------------------------------\n * EasePack\n * ----------------------------------------------------------------\n */_gsScope._gsDefine(\"easing.Back\",[\"easing.Ease\"],function(Ease){var w=_gsScope.GreenSockGlobals || _gsScope,gs=w.com.greensock,_2PI=Math.PI * 2,_HALF_PI=Math.PI / 2,_class=gs._class,_create=function _create(n,f){var C=_class(\"easing.\" + n,function(){},true),p=C.prototype = new Ease();p.constructor = C;p.getRatio = f;return C;},_easeReg=Ease.register || function(){}, //put an empty function in place just as a safety measure in case someone loads an OLD version of TweenLite.js where Ease.register doesn't exist.\n_wrap=function _wrap(name,EaseOut,EaseIn,EaseInOut,aliases){var C=_class(\"easing.\" + name,{easeOut:new EaseOut(),easeIn:new EaseIn(),easeInOut:new EaseInOut()},true);_easeReg(C,name);return C;},EasePoint=function EasePoint(time,value,next){this.t = time;this.v = value;if(next){this.next = next;next.prev = this;this.c = next.v - value;this.gap = next.t - time;}}, //Back\n_createBack=function _createBack(n,f){var C=_class(\"easing.\" + n,function(overshoot){this._p1 = overshoot || overshoot === 0?overshoot:1.70158;this._p2 = this._p1 * 1.525;},true),p=C.prototype = new Ease();p.constructor = C;p.getRatio = f;p.config = function(overshoot){return new C(overshoot);};return C;},Back=_wrap(\"Back\",_createBack(\"BackOut\",function(p){return (p = p - 1) * p * ((this._p1 + 1) * p + this._p1) + 1;}),_createBack(\"BackIn\",function(p){return p * p * ((this._p1 + 1) * p - this._p1);}),_createBack(\"BackInOut\",function(p){return (p *= 2) < 1?0.5 * p * p * ((this._p2 + 1) * p - this._p2):0.5 * ((p -= 2) * p * ((this._p2 + 1) * p + this._p2) + 2);})), //SlowMo\nSlowMo=_class(\"easing.SlowMo\",function(linearRatio,power,yoyoMode){power = power || power === 0?power:0.7;if(linearRatio == null){linearRatio = 0.7;}else if(linearRatio > 1){linearRatio = 1;}this._p = linearRatio !== 1?power:0;this._p1 = (1 - linearRatio) / 2;this._p2 = linearRatio;this._p3 = this._p1 + this._p2;this._calcEnd = yoyoMode === true;},true),p=SlowMo.prototype = new Ease(),SteppedEase,RoughEase,_createElastic;p.constructor = SlowMo;p.getRatio = function(p){var r=p + (0.5 - p) * this._p;if(p < this._p1){return this._calcEnd?1 - (p = 1 - p / this._p1) * p:r - (p = 1 - p / this._p1) * p * p * p * r;}else if(p > this._p3){return this._calcEnd?1 - (p = (p - this._p3) / this._p1) * p:r + (p - r) * (p = (p - this._p3) / this._p1) * p * p * p;}return this._calcEnd?1:r;};SlowMo.ease = new SlowMo(0.7,0.7);p.config = SlowMo.config = function(linearRatio,power,yoyoMode){return new SlowMo(linearRatio,power,yoyoMode);}; //SteppedEase\nSteppedEase = _class(\"easing.SteppedEase\",function(steps){steps = steps || 1;this._p1 = 1 / steps;this._p2 = steps + 1;},true);p = SteppedEase.prototype = new Ease();p.constructor = SteppedEase;p.getRatio = function(p){if(p < 0){p = 0;}else if(p >= 1){p = 0.999999999;}return (this._p2 * p >> 0) * this._p1;};p.config = SteppedEase.config = function(steps){return new SteppedEase(steps);}; //RoughEase\nRoughEase = _class(\"easing.RoughEase\",function(vars){vars = vars || {};var taper=vars.taper || \"none\",a=[],cnt=0,points=(vars.points || 20) | 0,i=points,randomize=vars.randomize !== false,clamp=vars.clamp === true,template=vars.template instanceof Ease?vars.template:null,strength=typeof vars.strength === \"number\"?vars.strength * 0.4:0.4,x,y,bump,invX,obj,pnt;while(--i > -1) {x = randomize?Math.random():1 / points * i;y = template?template.getRatio(x):x;if(taper === \"none\"){bump = strength;}else if(taper === \"out\"){invX = 1 - x;bump = invX * invX * strength;}else if(taper === \"in\"){bump = x * x * strength;}else if(x < 0.5){ //\"both\" (start)\ninvX = x * 2;bump = invX * invX * 0.5 * strength;}else { //\"both\" (end)\ninvX = (1 - x) * 2;bump = invX * invX * 0.5 * strength;}if(randomize){y += Math.random() * bump - bump * 0.5;}else if(i % 2){y += bump * 0.5;}else {y -= bump * 0.5;}if(clamp){if(y > 1){y = 1;}else if(y < 0){y = 0;}}a[cnt++] = {x:x,y:y};}a.sort(function(a,b){return a.x - b.x;});pnt = new EasePoint(1,1,null);i = points;while(--i > -1) {obj = a[i];pnt = new EasePoint(obj.x,obj.y,pnt);}this._prev = new EasePoint(0,0,pnt.t !== 0?pnt:pnt.next);},true);p = RoughEase.prototype = new Ease();p.constructor = RoughEase;p.getRatio = function(p){var pnt=this._prev;if(p > pnt.t){while(pnt.next && p >= pnt.t) {pnt = pnt.next;}pnt = pnt.prev;}else {while(pnt.prev && p <= pnt.t) {pnt = pnt.prev;}}this._prev = pnt;return pnt.v + (p - pnt.t) / pnt.gap * pnt.c;};p.config = function(vars){return new RoughEase(vars);};RoughEase.ease = new RoughEase(); //Bounce\n_wrap(\"Bounce\",_create(\"BounceOut\",function(p){if(p < 1 / 2.75){return 7.5625 * p * p;}else if(p < 2 / 2.75){return 7.5625 * (p -= 1.5 / 2.75) * p + 0.75;}else if(p < 2.5 / 2.75){return 7.5625 * (p -= 2.25 / 2.75) * p + 0.9375;}return 7.5625 * (p -= 2.625 / 2.75) * p + 0.984375;}),_create(\"BounceIn\",function(p){if((p = 1 - p) < 1 / 2.75){return 1 - 7.5625 * p * p;}else if(p < 2 / 2.75){return 1 - (7.5625 * (p -= 1.5 / 2.75) * p + 0.75);}else if(p < 2.5 / 2.75){return 1 - (7.5625 * (p -= 2.25 / 2.75) * p + 0.9375);}return 1 - (7.5625 * (p -= 2.625 / 2.75) * p + 0.984375);}),_create(\"BounceInOut\",function(p){var invert=p < 0.5;if(invert){p = 1 - p * 2;}else {p = p * 2 - 1;}if(p < 1 / 2.75){p = 7.5625 * p * p;}else if(p < 2 / 2.75){p = 7.5625 * (p -= 1.5 / 2.75) * p + 0.75;}else if(p < 2.5 / 2.75){p = 7.5625 * (p -= 2.25 / 2.75) * p + 0.9375;}else {p = 7.5625 * (p -= 2.625 / 2.75) * p + 0.984375;}return invert?(1 - p) * 0.5:p * 0.5 + 0.5;})); //CIRC\n_wrap(\"Circ\",_create(\"CircOut\",function(p){return Math.sqrt(1 - (p = p - 1) * p);}),_create(\"CircIn\",function(p){return -(Math.sqrt(1 - p * p) - 1);}),_create(\"CircInOut\",function(p){return (p *= 2) < 1?-0.5 * (Math.sqrt(1 - p * p) - 1):0.5 * (Math.sqrt(1 - (p -= 2) * p) + 1);})); //Elastic\n_createElastic = function(n,f,def){var C=_class(\"easing.\" + n,function(amplitude,period){this._p1 = amplitude >= 1?amplitude:1; //note: if amplitude is < 1, we simply adjust the period for a more natural feel. Otherwise the math doesn't work right and the curve starts at 1.\nthis._p2 = (period || def) / (amplitude < 1?amplitude:1);this._p3 = this._p2 / _2PI * (Math.asin(1 / this._p1) || 0);this._p2 = _2PI / this._p2; //precalculate to optimize\n},true),p=C.prototype = new Ease();p.constructor = C;p.getRatio = f;p.config = function(amplitude,period){return new C(amplitude,period);};return C;};_wrap(\"Elastic\",_createElastic(\"ElasticOut\",function(p){return this._p1 * Math.pow(2,-10 * p) * Math.sin((p - this._p3) * this._p2) + 1;},0.3),_createElastic(\"ElasticIn\",function(p){return -(this._p1 * Math.pow(2,10 * (p -= 1)) * Math.sin((p - this._p3) * this._p2));},0.3),_createElastic(\"ElasticInOut\",function(p){return (p *= 2) < 1?-0.5 * (this._p1 * Math.pow(2,10 * (p -= 1)) * Math.sin((p - this._p3) * this._p2)):this._p1 * Math.pow(2,-10 * (p -= 1)) * Math.sin((p - this._p3) * this._p2) * 0.5 + 1;},0.45)); //Expo\n_wrap(\"Expo\",_create(\"ExpoOut\",function(p){return 1 - Math.pow(2,-10 * p);}),_create(\"ExpoIn\",function(p){return Math.pow(2,10 * (p - 1)) - 0.001;}),_create(\"ExpoInOut\",function(p){return (p *= 2) < 1?0.5 * Math.pow(2,10 * (p - 1)):0.5 * (2 - Math.pow(2,-10 * (p - 1)));})); //Sine\n_wrap(\"Sine\",_create(\"SineOut\",function(p){return Math.sin(p * _HALF_PI);}),_create(\"SineIn\",function(p){return -Math.cos(p * _HALF_PI) + 1;}),_create(\"SineInOut\",function(p){return -0.5 * (Math.cos(Math.PI * p) - 1);}));_class(\"easing.EaseLookup\",{find:function find(s){return Ease.map[s];}},true); //register the non-standard eases\n_easeReg(w.SlowMo,\"SlowMo\",\"ease,\");_easeReg(RoughEase,\"RoughEase\",\"ease,\");_easeReg(SteppedEase,\"SteppedEase\",\"ease,\");return Back;},true);});if(_gsScope._gsDefine){_gsScope._gsQueue.pop()();} //necessary in case TweenLite was already loaded separately.\n/*\n * ----------------------------------------------------------------\n * Base classes like TweenLite, SimpleTimeline, Ease, Ticker, etc.\n * ----------------------------------------------------------------\n */(function(window,moduleName){\"use strict\";var _globals=window.GreenSockGlobals = window.GreenSockGlobals || window;if(_globals.TweenLite){return; //in case the core set of classes is already loaded, don't instantiate twice.\n}var _namespace=function _namespace(ns){var a=ns.split(\".\"),p=_globals,i;for(i = 0;i < a.length;i++) {p[a[i]] = p = p[a[i]] || {};}return p;},gs=_namespace(\"com.greensock\"),_tinyNum=0.0000000001,_slice=function _slice(a){ //don't use Array.prototype.slice.call(target, 0) because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()\nvar b=[],l=a.length,i;for(i = 0;i !== l;b.push(a[i++])) {}return b;},_emptyFunc=function _emptyFunc(){},_isArray=(function(){ //works around issues in iframe environments where the Array global isn't shared, thus if the object originates in a different window/iframe, \"(obj instanceof Array)\" will evaluate false. We added some speed optimizations to avoid Object.prototype.toString.call() unless it's absolutely necessary because it's VERY slow (like 20x slower)\nvar toString=Object.prototype.toString,array=toString.call([]);return function(obj){return obj != null && (obj instanceof Array || typeof obj === \"object\" && !!obj.push && toString.call(obj) === array);};})(),a,i,p,_ticker,_tickerActive,_defLookup={}, /**\n\t\t\t * @constructor\n\t\t\t * Defines a GreenSock class, optionally with an array of dependencies that must be instantiated first and passed into the definition.\n\t\t\t * This allows users to load GreenSock JS files in any order even if they have interdependencies (like CSSPlugin extends TweenPlugin which is\n\t\t\t * inside TweenLite.js, but if CSSPlugin is loaded first, it should wait to run its code until TweenLite.js loads and instantiates TweenPlugin\n\t\t\t * and then pass TweenPlugin to CSSPlugin's definition). This is all done automatically and internally.\n\t\t\t *\n\t\t\t * Every definition will be added to a \"com.greensock\" global object (typically window, but if a window.GreenSockGlobals object is found,\n\t\t\t * it will go there as of v1.7). For example, TweenLite will be found at window.com.greensock.TweenLite and since it's a global class that should be available anywhere,\n\t\t\t * it is ALSO referenced at window.TweenLite. However some classes aren't considered global, like the base com.greensock.core.Animation class, so\n\t\t\t * those will only be at the package like window.com.greensock.core.Animation. Again, if you define a GreenSockGlobals object on the window, everything\n\t\t\t * gets tucked neatly inside there instead of on the window directly. This allows you to do advanced things like load multiple versions of GreenSock\n\t\t\t * files and put them into distinct objects (imagine a banner ad uses a newer version but the main site uses an older one). In that case, you could\n\t\t\t * sandbox the banner one like:\n\t\t\t *\n\t\t\t * <script>\n\t\t\t *     var gs = window.GreenSockGlobals = {}; //the newer version we're about to load could now be referenced in a \"gs\" object, like gs.TweenLite.to(...). Use whatever alias you want as long as it's unique, \"gs\" or \"banner\" or whatever.\n\t\t\t * </script>\n\t\t\t * <script src=\"js/greensock/v1.7/TweenMax.js\"></script>\n\t\t\t * <script>\n\t\t\t *     window.GreenSockGlobals = window._gsQueue = window._gsDefine = null; //reset it back to null (along with the special _gsQueue variable) so that the next load of TweenMax affects the window and we can reference things directly like TweenLite.to(...)\n\t\t\t * </script>\n\t\t\t * <script src=\"js/greensock/v1.6/TweenMax.js\"></script>\n\t\t\t * <script>\n\t\t\t *     gs.TweenLite.to(...); //would use v1.7\n\t\t\t *     TweenLite.to(...); //would use v1.6\n\t\t\t * </script>\n\t\t\t *\n\t\t\t * @param {!string} ns The namespace of the class definition, leaving off \"com.greensock.\" as that's assumed. For example, \"TweenLite\" or \"plugins.CSSPlugin\" or \"easing.Back\".\n\t\t\t * @param {!Array.<string>} dependencies An array of dependencies (described as their namespaces minus \"com.greensock.\" prefix). For example [\"TweenLite\",\"plugins.TweenPlugin\",\"core.Animation\"]\n\t\t\t * @param {!function():Object} func The function that should be called and passed the resolved dependencies which will return the actual class for this definition.\n\t\t\t * @param {boolean=} global If true, the class will be added to the global scope (typically window unless you define a window.GreenSockGlobals object)\n\t\t\t */Definition=function Definition(ns,dependencies,func,global){this.sc = _defLookup[ns]?_defLookup[ns].sc:[]; //subclasses\n_defLookup[ns] = this;this.gsClass = null;this.func = func;var _classes=[];this.check = function(init){var i=dependencies.length,missing=i,cur,a,n,cl,hasModule;while(--i > -1) {if((cur = _defLookup[dependencies[i]] || new Definition(dependencies[i],[])).gsClass){_classes[i] = cur.gsClass;missing--;}else if(init){cur.sc.push(this);}}if(missing === 0 && func){a = (\"com.greensock.\" + ns).split(\".\");n = a.pop();cl = _namespace(a.join(\".\"))[n] = this.gsClass = func.apply(func,_classes); //exports to multiple environments\nif(global){_globals[n] = cl; //provides a way to avoid global namespace pollution. By default, the main classes like TweenLite, Power1, Strong, etc. are added to window unless a GreenSockGlobals is defined. So if you want to have things added to a custom object instead, just do something like window.GreenSockGlobals = {} before loading any GreenSock files. You can even set up an alias like window.GreenSockGlobals = windows.gs = {} so that you can access everything like gs.TweenLite. Also remember that ALL classes are added to the window.com.greensock object (in their respective packages, like com.greensock.easing.Power1, com.greensock.TweenLite, etc.)\nhasModule = typeof module !== \"undefined\" && module.exports;if(!hasModule && typeof define === \"function\" && define.amd){ //AMD\ndefine((window.GreenSockAMDPath?window.GreenSockAMDPath + \"/\":\"\") + ns.split(\".\").pop(),[],function(){return cl;});}else if(ns === moduleName && hasModule){ //node\nmodule.exports = cl;}}for(i = 0;i < this.sc.length;i++) {this.sc[i].check();}}};this.check(true);}, //used to create Definition instances (which basically registers a class that has dependencies).\n_gsDefine=window._gsDefine = function(ns,dependencies,func,global){return new Definition(ns,dependencies,func,global);}, //a quick way to create a class that doesn't have any dependencies. Returns the class, but first registers it in the GreenSock namespace so that other classes can grab it (other classes might be dependent on the class).\n_class=gs._class = function(ns,func,global){func = func || function(){};_gsDefine(ns,[],function(){return func;},global);return func;};_gsDefine.globals = _globals; /*\n * ----------------------------------------------------------------\n * Ease\n * ----------------------------------------------------------------\n */var _baseParams=[0,0,1,1],_blankArray=[],Ease=_class(\"easing.Ease\",function(func,extraParams,type,power){this._func = func;this._type = type || 0;this._power = power || 0;this._params = extraParams?_baseParams.concat(extraParams):_baseParams;},true),_easeMap=Ease.map = {},_easeReg=Ease.register = function(ease,names,types,create){var na=names.split(\",\"),i=na.length,ta=(types || \"easeIn,easeOut,easeInOut\").split(\",\"),e,name,j,type;while(--i > -1) {name = na[i];e = create?_class(\"easing.\" + name,null,true):gs.easing[name] || {};j = ta.length;while(--j > -1) {type = ta[j];_easeMap[name + \".\" + type] = _easeMap[type + name] = e[type] = ease.getRatio?ease:ease[type] || new ease();}}};p = Ease.prototype;p._calcEnd = false;p.getRatio = function(p){if(this._func){this._params[0] = p;return this._func.apply(null,this._params);}var t=this._type,pw=this._power,r=t === 1?1 - p:t === 2?p:p < 0.5?p * 2:(1 - p) * 2;if(pw === 1){r *= r;}else if(pw === 2){r *= r * r;}else if(pw === 3){r *= r * r * r;}else if(pw === 4){r *= r * r * r * r;}return t === 1?1 - r:t === 2?r:p < 0.5?r / 2:1 - r / 2;}; //create all the standard eases like Linear, Quad, Cubic, Quart, Quint, Strong, Power0, Power1, Power2, Power3, and Power4 (each with easeIn, easeOut, and easeInOut)\na = [\"Linear\",\"Quad\",\"Cubic\",\"Quart\",\"Quint,Strong\"];i = a.length;while(--i > -1) {p = a[i] + \",Power\" + i;_easeReg(new Ease(null,null,1,i),p,\"easeOut\",true);_easeReg(new Ease(null,null,2,i),p,\"easeIn\" + (i === 0?\",easeNone\":\"\"));_easeReg(new Ease(null,null,3,i),p,\"easeInOut\");}_easeMap.linear = gs.easing.Linear.easeIn;_easeMap.swing = gs.easing.Quad.easeInOut; //for jQuery folks\n/*\n * ----------------------------------------------------------------\n * EventDispatcher\n * ----------------------------------------------------------------\n */var EventDispatcher=_class(\"events.EventDispatcher\",function(target){this._listeners = {};this._eventTarget = target || this;});p = EventDispatcher.prototype;p.addEventListener = function(type,callback,scope,useParam,priority){priority = priority || 0;var list=this._listeners[type],index=0,listener,i;if(list == null){this._listeners[type] = list = [];}i = list.length;while(--i > -1) {listener = list[i];if(listener.c === callback && listener.s === scope){list.splice(i,1);}else if(index === 0 && listener.pr < priority){index = i + 1;}}list.splice(index,0,{c:callback,s:scope,up:useParam,pr:priority});if(this === _ticker && !_tickerActive){_ticker.wake();}};p.removeEventListener = function(type,callback){var list=this._listeners[type],i;if(list){i = list.length;while(--i > -1) {if(list[i].c === callback){list.splice(i,1);return;}}}};p.dispatchEvent = function(type){var list=this._listeners[type],i,t,listener;if(list){i = list.length;t = this._eventTarget;while(--i > -1) {listener = list[i];if(listener){if(listener.up){listener.c.call(listener.s || t,{type:type,target:t});}else {listener.c.call(listener.s || t);}}}}}; /*\n * ----------------------------------------------------------------\n * Ticker\n * ----------------------------------------------------------------\n */var _reqAnimFrame=window.requestAnimationFrame,_cancelAnimFrame=window.cancelAnimationFrame,_getTime=Date.now || function(){return new Date().getTime();},_lastUpdate=_getTime(); //now try to determine the requestAnimationFrame and cancelAnimationFrame functions and if none are found, we'll use a setTimeout()/clearTimeout() polyfill.\na = [\"ms\",\"moz\",\"webkit\",\"o\"];i = a.length;while(--i > -1 && !_reqAnimFrame) {_reqAnimFrame = window[a[i] + \"RequestAnimationFrame\"];_cancelAnimFrame = window[a[i] + \"CancelAnimationFrame\"] || window[a[i] + \"CancelRequestAnimationFrame\"];}_class(\"Ticker\",function(fps,useRAF){var _self=this,_startTime=_getTime(),_useRAF=useRAF !== false && _reqAnimFrame,_lagThreshold=500,_adjustedLag=33,_tickWord=\"tick\", //helps reduce gc burden\n_fps,_req,_id,_gap,_nextTime,_tick=function _tick(manual){var elapsed=_getTime() - _lastUpdate,overlap,dispatch;if(elapsed > _lagThreshold){_startTime += elapsed - _adjustedLag;}_lastUpdate += elapsed;_self.time = (_lastUpdate - _startTime) / 1000;overlap = _self.time - _nextTime;if(!_fps || overlap > 0 || manual === true){_self.frame++;_nextTime += overlap + (overlap >= _gap?0.004:_gap - overlap);dispatch = true;}if(manual !== true){ //make sure the request is made before we dispatch the \"tick\" event so that timing is maintained. Otherwise, if processing the \"tick\" requires a bunch of time (like 15ms) and we're using a setTimeout() that's based on 16.7ms, it'd technically take 31.7ms between frames otherwise.\n_id = _req(_tick);}if(dispatch){_self.dispatchEvent(_tickWord);}};EventDispatcher.call(_self);_self.time = _self.frame = 0;_self.tick = function(){_tick(true);};_self.lagSmoothing = function(threshold,adjustedLag){_lagThreshold = threshold || 1 / _tinyNum; //zero should be interpreted as basically unlimited\n_adjustedLag = Math.min(adjustedLag,_lagThreshold,0);};_self.sleep = function(){if(_id == null){return;}if(!_useRAF || !_cancelAnimFrame){clearTimeout(_id);}else {_cancelAnimFrame(_id);}_req = _emptyFunc;_id = null;if(_self === _ticker){_tickerActive = false;}};_self.wake = function(){if(_id !== null){_self.sleep();}else if(_self.frame > 10){ //don't trigger lagSmoothing if we're just waking up, and make sure that at least 10 frames have elapsed because of the iOS bug that we work around below with the 1.5-second setTimout().\n_lastUpdate = _getTime() - _lagThreshold + 5;}_req = _fps === 0?_emptyFunc:!_useRAF || !_reqAnimFrame?function(f){return setTimeout(f,(_nextTime - _self.time) * 1000 + 1 | 0);}:_reqAnimFrame;if(_self === _ticker){_tickerActive = true;}_tick(2);};_self.fps = function(value){if(!arguments.length){return _fps;}_fps = value;_gap = 1 / (_fps || 60);_nextTime = this.time + _gap;_self.wake();};_self.useRAF = function(value){if(!arguments.length){return _useRAF;}_self.sleep();_useRAF = value;_self.fps(_fps);};_self.fps(fps); //a bug in iOS 6 Safari occasionally prevents the requestAnimationFrame from working initially, so we use a 1.5-second timeout that automatically falls back to setTimeout() if it senses this condition.\nsetTimeout(function(){if(_useRAF && _self.frame < 5){_self.useRAF(false);}},1500);});p = gs.Ticker.prototype = new gs.events.EventDispatcher();p.constructor = gs.Ticker; /*\n * ----------------------------------------------------------------\n * Animation\n * ----------------------------------------------------------------\n */var Animation=_class(\"core.Animation\",function(duration,vars){this.vars = vars = vars || {};this._duration = this._totalDuration = duration || 0;this._delay = Number(vars.delay) || 0;this._timeScale = 1;this._active = vars.immediateRender === true;this.data = vars.data;this._reversed = vars.reversed === true;if(!_rootTimeline){return;}if(!_tickerActive){ //some browsers (like iOS 6 Safari) shut down JavaScript execution when the tab is disabled and they [occasionally] neglect to start up requestAnimationFrame again when returning - this code ensures that the engine starts up again properly.\n_ticker.wake();}var tl=this.vars.useFrames?_rootFramesTimeline:_rootTimeline;tl.add(this,tl._time);if(this.vars.paused){this.paused(true);}});_ticker = Animation.ticker = new gs.Ticker();p = Animation.prototype;p._dirty = p._gc = p._initted = p._paused = false;p._totalTime = p._time = 0;p._rawPrevTime = -1;p._next = p._last = p._onUpdate = p._timeline = p.timeline = null;p._paused = false; //some browsers (like iOS) occasionally drop the requestAnimationFrame event when the user switches to a different tab and then comes back again, so we use a 2-second setTimeout() to sense if/when that condition occurs and then wake() the ticker.\nvar _checkTimeout=function _checkTimeout(){if(_tickerActive && _getTime() - _lastUpdate > 2000){_ticker.wake();}setTimeout(_checkTimeout,2000);};_checkTimeout();p.play = function(from,suppressEvents){if(from != null){this.seek(from,suppressEvents);}return this.reversed(false).paused(false);};p.pause = function(atTime,suppressEvents){if(atTime != null){this.seek(atTime,suppressEvents);}return this.paused(true);};p.resume = function(from,suppressEvents){if(from != null){this.seek(from,suppressEvents);}return this.paused(false);};p.seek = function(time,suppressEvents){return this.totalTime(Number(time),suppressEvents !== false);};p.restart = function(includeDelay,suppressEvents){return this.reversed(false).paused(false).totalTime(includeDelay?-this._delay:0,suppressEvents !== false,true);};p.reverse = function(from,suppressEvents){if(from != null){this.seek(from || this.totalDuration(),suppressEvents);}return this.reversed(true).paused(false);};p.render = function(time,suppressEvents,force){ //stub - we override this method in subclasses.\n};p.invalidate = function(){this._time = this._totalTime = 0;this._initted = this._gc = false;this._rawPrevTime = -1;if(this._gc || !this.timeline){this._enabled(true);}return this;};p.isActive = function(){var tl=this._timeline, //the 2 root timelines won't have a _timeline; they're always active.\nstartTime=this._startTime,rawTime;return !tl || !this._gc && !this._paused && tl.isActive() && (rawTime = tl.rawTime()) >= startTime && rawTime < startTime + this.totalDuration() / this._timeScale;};p._enabled = function(enabled,ignoreTimeline){if(!_tickerActive){_ticker.wake();}this._gc = !enabled;this._active = this.isActive();if(ignoreTimeline !== true){if(enabled && !this.timeline){this._timeline.add(this,this._startTime - this._delay);}else if(!enabled && this.timeline){this._timeline._remove(this,true);}}return false;};p._kill = function(vars,target){return this._enabled(false,false);};p.kill = function(vars,target){this._kill(vars,target);return this;};p._uncache = function(includeSelf){var tween=includeSelf?this:this.timeline;while(tween) {tween._dirty = true;tween = tween.timeline;}return this;};p._swapSelfInParams = function(params){var i=params.length,copy=params.concat();while(--i > -1) {if(params[i] === \"{self}\"){copy[i] = this;}}return copy;};p._callback = function(type){var v=this.vars;v[type].apply(v[type + \"Scope\"] || v.callbackScope || this,v[type + \"Params\"] || _blankArray);}; //----Animation getters/setters --------------------------------------------------------\np.eventCallback = function(type,callback,params,scope){if((type || \"\").substr(0,2) === \"on\"){var v=this.vars;if(arguments.length === 1){return v[type];}if(callback == null){delete v[type];}else {v[type] = callback;v[type + \"Params\"] = _isArray(params) && params.join(\"\").indexOf(\"{self}\") !== -1?this._swapSelfInParams(params):params;v[type + \"Scope\"] = scope;}if(type === \"onUpdate\"){this._onUpdate = callback;}}return this;};p.delay = function(value){if(!arguments.length){return this._delay;}if(this._timeline.smoothChildTiming){this.startTime(this._startTime + value - this._delay);}this._delay = value;return this;};p.duration = function(value){if(!arguments.length){this._dirty = false;return this._duration;}this._duration = this._totalDuration = value;this._uncache(true); //true in case it's a TweenMax or TimelineMax that has a repeat - we'll need to refresh the totalDuration.\nif(this._timeline.smoothChildTiming)if(this._time > 0)if(this._time < this._duration)if(value !== 0){this.totalTime(this._totalTime * (value / this._duration),true);}return this;};p.totalDuration = function(value){this._dirty = false;return !arguments.length?this._totalDuration:this.duration(value);};p.time = function(value,suppressEvents){if(!arguments.length){return this._time;}if(this._dirty){this.totalDuration();}return this.totalTime(value > this._duration?this._duration:value,suppressEvents);};p.totalTime = function(time,suppressEvents,uncapped){if(!_tickerActive){_ticker.wake();}if(!arguments.length){return this._totalTime;}if(this._timeline){if(time < 0 && !uncapped){time += this.totalDuration();}if(this._timeline.smoothChildTiming){if(this._dirty){this.totalDuration();}var totalDuration=this._totalDuration,tl=this._timeline;if(time > totalDuration && !uncapped){time = totalDuration;}this._startTime = (this._paused?this._pauseTime:tl._time) - (!this._reversed?time:totalDuration - time) / this._timeScale;if(!tl._dirty){ //for performance improvement. If the parent's cache is already dirty, it already took care of marking the ancestors as dirty too, so skip the function call here.\nthis._uncache(false);} //in case any of the ancestor timelines had completed but should now be enabled, we should reset their totalTime() which will also ensure that they're lined up properly and enabled. Skip for animations that are on the root (wasteful). Example: a TimelineLite.exportRoot() is performed when there's a paused tween on the root, the export will not complete until that tween is unpaused, but imagine a child gets restarted later, after all [unpaused] tweens have completed. The startTime of that child would get pushed out, but one of the ancestors may have completed.\nif(tl._timeline){while(tl._timeline) {if(tl._timeline._time !== (tl._startTime + tl._totalTime) / tl._timeScale){tl.totalTime(tl._totalTime,true);}tl = tl._timeline;}}}if(this._gc){this._enabled(true,false);}if(this._totalTime !== time || this._duration === 0){if(_lazyTweens.length){_lazyRender();}this.render(time,suppressEvents,false);if(_lazyTweens.length){ //in case rendering caused any tweens to lazy-init, we should render them because typically when someone calls seek() or time() or progress(), they expect an immediate render.\n_lazyRender();}}}return this;};p.progress = p.totalProgress = function(value,suppressEvents){var duration=this.duration();return !arguments.length?duration?this._time / duration:this.ratio:this.totalTime(duration * value,suppressEvents);};p.startTime = function(value){if(!arguments.length){return this._startTime;}if(value !== this._startTime){this._startTime = value;if(this.timeline)if(this.timeline._sortChildren){this.timeline.add(this,value - this._delay); //ensures that any necessary re-sequencing of Animations in the timeline occurs to make sure the rendering order is correct.\n}}return this;};p.endTime = function(includeRepeats){return this._startTime + (includeRepeats != false?this.totalDuration():this.duration()) / this._timeScale;};p.timeScale = function(value){if(!arguments.length){return this._timeScale;}value = value || _tinyNum; //can't allow zero because it'll throw the math off\nif(this._timeline && this._timeline.smoothChildTiming){var pauseTime=this._pauseTime,t=pauseTime || pauseTime === 0?pauseTime:this._timeline.totalTime();this._startTime = t - (t - this._startTime) * this._timeScale / value;}this._timeScale = value;return this._uncache(false);};p.reversed = function(value){if(!arguments.length){return this._reversed;}if(value != this._reversed){this._reversed = value;this.totalTime(this._timeline && !this._timeline.smoothChildTiming?this.totalDuration() - this._totalTime:this._totalTime,true);}return this;};p.paused = function(value){if(!arguments.length){return this._paused;}var tl=this._timeline,raw,elapsed;if(value != this._paused)if(tl){if(!_tickerActive && !value){_ticker.wake();}raw = tl.rawTime();elapsed = raw - this._pauseTime;if(!value && tl.smoothChildTiming){this._startTime += elapsed;this._uncache(false);}this._pauseTime = value?raw:null;this._paused = value;this._active = this.isActive();if(!value && elapsed !== 0 && this._initted && this.duration()){raw = tl.smoothChildTiming?this._totalTime:(raw - this._startTime) / this._timeScale;this.render(raw,raw === this._totalTime,true); //in case the target's properties changed via some other tween or manual update by the user, we should force a render.\n}}if(this._gc && !value){this._enabled(true,false);}return this;}; /*\n * ----------------------------------------------------------------\n * SimpleTimeline\n * ----------------------------------------------------------------\n */var SimpleTimeline=_class(\"core.SimpleTimeline\",function(vars){Animation.call(this,0,vars);this.autoRemoveChildren = this.smoothChildTiming = true;});p = SimpleTimeline.prototype = new Animation();p.constructor = SimpleTimeline;p.kill()._gc = false;p._first = p._last = p._recent = null;p._sortChildren = false;p.add = p.insert = function(child,position,align,stagger){var prevTween,st;child._startTime = Number(position || 0) + child._delay;if(child._paused)if(this !== child._timeline){ //we only adjust the _pauseTime if it wasn't in this timeline already. Remember, sometimes a tween will be inserted again into the same timeline when its startTime is changed so that the tweens in the TimelineLite/Max are re-ordered properly in the linked list (so everything renders in the proper order).\nchild._pauseTime = child._startTime + (this.rawTime() - child._startTime) / child._timeScale;}if(child.timeline){child.timeline._remove(child,true); //removes from existing timeline so that it can be properly added to this one.\n}child.timeline = child._timeline = this;if(child._gc){child._enabled(true,true);}prevTween = this._last;if(this._sortChildren){st = child._startTime;while(prevTween && prevTween._startTime > st) {prevTween = prevTween._prev;}}if(prevTween){child._next = prevTween._next;prevTween._next = child;}else {child._next = this._first;this._first = child;}if(child._next){child._next._prev = child;}else {this._last = child;}child._prev = prevTween;this._recent = child;if(this._timeline){this._uncache(true);}return this;};p._remove = function(tween,skipDisable){if(tween.timeline === this){if(!skipDisable){tween._enabled(false,true);}if(tween._prev){tween._prev._next = tween._next;}else if(this._first === tween){this._first = tween._next;}if(tween._next){tween._next._prev = tween._prev;}else if(this._last === tween){this._last = tween._prev;}tween._next = tween._prev = tween.timeline = null;if(tween === this._recent){this._recent = this._last;}if(this._timeline){this._uncache(true);}}return this;};p.render = function(time,suppressEvents,force){var tween=this._first,next;this._totalTime = this._time = this._rawPrevTime = time;while(tween) {next = tween._next; //record it here because the value could change after rendering...\nif(tween._active || time >= tween._startTime && !tween._paused){if(!tween._reversed){tween.render((time - tween._startTime) * tween._timeScale,suppressEvents,force);}else {tween.render((!tween._dirty?tween._totalDuration:tween.totalDuration()) - (time - tween._startTime) * tween._timeScale,suppressEvents,force);}}tween = next;}};p.rawTime = function(){if(!_tickerActive){_ticker.wake();}return this._totalTime;}; /*\n * ----------------------------------------------------------------\n * TweenLite\n * ----------------------------------------------------------------\n */var TweenLite=_class(\"TweenLite\",function(target,duration,vars){Animation.call(this,duration,vars);this.render = TweenLite.prototype.render; //speed optimization (avoid prototype lookup on this \"hot\" method)\nif(target == null){throw \"Cannot tween a null target.\";}this.target = target = typeof target !== \"string\"?target:TweenLite.selector(target) || target;var isSelector=target.jquery || target.length && target !== window && target[0] && (target[0] === window || target[0].nodeType && target[0].style && !target.nodeType),overwrite=this.vars.overwrite,i,targ,targets;this._overwrite = overwrite = overwrite == null?_overwriteLookup[TweenLite.defaultOverwrite]:typeof overwrite === \"number\"?overwrite >> 0:_overwriteLookup[overwrite];if((isSelector || target instanceof Array || target.push && _isArray(target)) && typeof target[0] !== \"number\"){this._targets = targets = _slice(target); //don't use Array.prototype.slice.call(target, 0) because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()\nthis._propLookup = [];this._siblings = [];for(i = 0;i < targets.length;i++) {targ = targets[i];if(!targ){targets.splice(i--,1);continue;}else if(typeof targ === \"string\"){targ = targets[i--] = TweenLite.selector(targ); //in case it's an array of strings\nif(typeof targ === \"string\"){targets.splice(i + 1,1); //to avoid an endless loop (can't imagine why the selector would return a string, but just in case)\n}continue;}else if(targ.length && targ !== window && targ[0] && (targ[0] === window || targ[0].nodeType && targ[0].style && !targ.nodeType)){ //in case the user is passing in an array of selector objects (like jQuery objects), we need to check one more level and pull things out if necessary. Also note that <select> elements pass all the criteria regarding length and the first child having style, so we must also check to ensure the target isn't an HTML node itself.\ntargets.splice(i--,1);this._targets = targets = targets.concat(_slice(targ));continue;}this._siblings[i] = _register(targ,this,false);if(overwrite === 1)if(this._siblings[i].length > 1){_applyOverwrite(targ,this,null,1,this._siblings[i]);}}}else {this._propLookup = {};this._siblings = _register(target,this,false);if(overwrite === 1)if(this._siblings.length > 1){_applyOverwrite(target,this,null,1,this._siblings);}}if(this.vars.immediateRender || duration === 0 && this._delay === 0 && this.vars.immediateRender !== false){this._time = -_tinyNum; //forces a render without having to set the render() \"force\" parameter to true because we want to allow lazying by default (using the \"force\" parameter always forces an immediate full render)\nthis.render(-this._delay);}},true),_isSelector=function _isSelector(v){return v && v.length && v !== window && v[0] && (v[0] === window || v[0].nodeType && v[0].style && !v.nodeType); //we cannot check \"nodeType\" if the target is window from within an iframe, otherwise it will trigger a security error in some browsers like Firefox.\n},_autoCSS=function _autoCSS(vars,target){var css={},p;for(p in vars) {if(!_reservedProps[p] && (!(p in target) || p === \"transform\" || p === \"x\" || p === \"y\" || p === \"width\" || p === \"height\" || p === \"className\" || p === \"border\") && (!_plugins[p] || _plugins[p] && _plugins[p]._autoCSS)){ //note: <img> elements contain read-only \"x\" and \"y\" properties. We should also prioritize editing css width/height rather than the element's properties.\ncss[p] = vars[p];delete vars[p];}}vars.css = css;};p = TweenLite.prototype = new Animation();p.constructor = TweenLite;p.kill()._gc = false; //----TweenLite defaults, overwrite management, and root updates ----------------------------------------------------\np.ratio = 0;p._firstPT = p._targets = p._overwrittenProps = p._startAt = null;p._notifyPluginsOfEnabled = p._lazy = false;TweenLite.version = \"1.18.0\";TweenLite.defaultEase = p._ease = new Ease(null,null,1,1);TweenLite.defaultOverwrite = \"auto\";TweenLite.ticker = _ticker;TweenLite.autoSleep = 120;TweenLite.lagSmoothing = function(threshold,adjustedLag){_ticker.lagSmoothing(threshold,adjustedLag);};TweenLite.selector = window.$ || window.jQuery || function(e){var selector=window.$ || window.jQuery;if(selector){TweenLite.selector = selector;return selector(e);}return typeof document === \"undefined\"?e:document.querySelectorAll?document.querySelectorAll(e):document.getElementById(e.charAt(0) === \"#\"?e.substr(1):e);};var _lazyTweens=[],_lazyLookup={},_numbersExp=/(?:(-|-=|\\+=)?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[0-9]/ig, //_nonNumbersExp = /(?:([\\-+](?!(\\d|=)))|[^\\d\\-+=e]|(e(?![\\-+][\\d])))+/ig,\n_setRatio=function _setRatio(v){var pt=this._firstPT,min=0.000001,val;while(pt) {val = !pt.blob?pt.c * v + pt.s:v?this.join(\"\"):this.start;if(pt.r){val = Math.round(val);}else if(val < min)if(val > -min){ //prevents issues with converting very small numbers to strings in the browser\nval = 0;}if(!pt.f){pt.t[pt.p] = val;}else if(pt.fp){pt.t[pt.p](pt.fp,val);}else {pt.t[pt.p](val);}pt = pt._next;}}, //compares two strings (start/end), finds the numbers that are different and spits back an array representing the whole value but with the changing values isolated as elements. For example, \"rgb(0,0,0)\" and \"rgb(100,50,0)\" would become [\"rgb(\", 0, \",\", 50, \",0)\"]. Notice it merges the parts that are identical (performance optimization). The array also has a linked list of PropTweens attached starting with _firstPT that contain the tweening data (t, p, s, c, f, etc.). It also stores the starting value as a \"start\" property so that we can revert to it if/when necessary, like when a tween rewinds fully. If the quantity of numbers differs between the start and end, it will always prioritize the end value(s). The pt parameter is optional - it's for a PropTween that will be appended to the end of the linked list and is typically for actually setting the value after all of the elements have been updated (with array.join(\"\")).\n_blobDif=function _blobDif(start,end,filter,pt){var a=[start,end],charIndex=0,s=\"\",color=0,startNums,endNums,num,i,l,nonNumbers,currentNum;a.start = start;if(filter){filter(a); //pass an array with the starting and ending values and let the filter do whatever it needs to the values.\nstart = a[0];end = a[1];}a.length = 0;startNums = start.match(_numbersExp) || [];endNums = end.match(_numbersExp) || [];if(pt){pt._next = null;pt.blob = 1;a._firstPT = pt; //apply last in the linked list (which means inserting it first)\n}l = endNums.length;for(i = 0;i < l;i++) {currentNum = endNums[i];nonNumbers = end.substr(charIndex,end.indexOf(currentNum,charIndex) - charIndex);s += nonNumbers || !i?nonNumbers:\",\"; //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.\ncharIndex += nonNumbers.length;if(color){ //sense rgba() values and round them.\ncolor = (color + 1) % 5;}else if(nonNumbers.substr(-5) === \"rgba(\"){color = 1;}if(currentNum === startNums[i] || startNums.length <= i){s += currentNum;}else {if(s){a.push(s);s = \"\";}num = parseFloat(startNums[i]);a.push(num);a._firstPT = {_next:a._firstPT,t:a,p:a.length - 1,s:num,c:(currentNum.charAt(1) === \"=\"?parseInt(currentNum.charAt(0) + \"1\",10) * parseFloat(currentNum.substr(2)):parseFloat(currentNum) - num) || 0,f:0,r:color && color < 4}; //note: we don't set _prev because we'll never need to remove individual PropTweens from this list.\n}charIndex += currentNum.length;}s += end.substr(charIndex);if(s){a.push(s);}a.setRatio = _setRatio;return a;}, //note: \"funcParam\" is only necessary for function-based getters/setters that require an extra parameter like getAttribute(\"width\") and setAttribute(\"width\", value). In this example, funcParam would be \"width\". Used by AttrPlugin for example.\n_addPropTween=function _addPropTween(target,prop,start,end,overwriteProp,round,funcParam,stringFilter){var s=start === \"get\"?target[prop]:start,type=typeof target[prop],isRelative=typeof end === \"string\" && end.charAt(1) === \"=\",pt={t:target,p:prop,s:s,f:type === \"function\",pg:0,n:overwriteProp || prop,r:round,pr:0,c:isRelative?parseInt(end.charAt(0) + \"1\",10) * parseFloat(end.substr(2)):parseFloat(end) - s || 0},blob,getterName;if(type !== \"number\"){if(type === \"function\" && start === \"get\"){getterName = prop.indexOf(\"set\") || typeof target[\"get\" + prop.substr(3)] !== \"function\"?prop:\"get\" + prop.substr(3);pt.s = s = funcParam?target[getterName](funcParam):target[getterName]();}if(typeof s === \"string\" && (funcParam || isNaN(s))){ //a blob (string that has multiple numbers in it)\npt.fp = funcParam;blob = _blobDif(s,end,stringFilter || TweenLite.defaultStringFilter,pt);pt = {t:blob,p:\"setRatio\",s:0,c:1,f:2,pg:0,n:overwriteProp || prop,pr:0}; //\"2\" indicates it's a Blob property tween. Needed for RoundPropsPlugin for example.\n}else if(!isRelative){pt.c = parseFloat(end) - parseFloat(s) || 0;}}if(pt.c){ //only add it to the linked list if there's a change.\nif(pt._next = this._firstPT){pt._next._prev = pt;}this._firstPT = pt;return pt;}},_internals=TweenLite._internals = {isArray:_isArray,isSelector:_isSelector,lazyTweens:_lazyTweens,blobDif:_blobDif}, //gives us a way to expose certain private values to other GreenSock classes without contaminating tha main TweenLite object.\n_plugins=TweenLite._plugins = {},_tweenLookup=_internals.tweenLookup = {},_tweenLookupNum=0,_reservedProps=_internals.reservedProps = {ease:1,delay:1,overwrite:1,onComplete:1,onCompleteParams:1,onCompleteScope:1,useFrames:1,runBackwards:1,startAt:1,onUpdate:1,onUpdateParams:1,onUpdateScope:1,onStart:1,onStartParams:1,onStartScope:1,onReverseComplete:1,onReverseCompleteParams:1,onReverseCompleteScope:1,onRepeat:1,onRepeatParams:1,onRepeatScope:1,easeParams:1,yoyo:1,immediateRender:1,repeat:1,repeatDelay:1,data:1,paused:1,reversed:1,autoCSS:1,lazy:1,onOverwrite:1,callbackScope:1,stringFilter:1},_overwriteLookup={none:0,all:1,auto:2,concurrent:3,allOnStart:4,preexisting:5,\"true\":1,\"false\":0},_rootFramesTimeline=Animation._rootFramesTimeline = new SimpleTimeline(),_rootTimeline=Animation._rootTimeline = new SimpleTimeline(),_nextGCFrame=30,_lazyRender=_internals.lazyRender = function(){var i=_lazyTweens.length,tween;_lazyLookup = {};while(--i > -1) {tween = _lazyTweens[i];if(tween && tween._lazy !== false){tween.render(tween._lazy[0],tween._lazy[1],true);tween._lazy = false;}}_lazyTweens.length = 0;};_rootTimeline._startTime = _ticker.time;_rootFramesTimeline._startTime = _ticker.frame;_rootTimeline._active = _rootFramesTimeline._active = true;setTimeout(_lazyRender,1); //on some mobile devices, there isn't a \"tick\" before code runs which means any lazy renders wouldn't run before the next official \"tick\".\nAnimation._updateRoot = TweenLite.render = function(){var i,a,p;if(_lazyTweens.length){ //if code is run outside of the requestAnimationFrame loop, there may be tweens queued AFTER the engine refreshed, so we need to ensure any pending renders occur before we refresh again.\n_lazyRender();}_rootTimeline.render((_ticker.time - _rootTimeline._startTime) * _rootTimeline._timeScale,false,false);_rootFramesTimeline.render((_ticker.frame - _rootFramesTimeline._startTime) * _rootFramesTimeline._timeScale,false,false);if(_lazyTweens.length){_lazyRender();}if(_ticker.frame >= _nextGCFrame){ //dump garbage every 120 frames or whatever the user sets TweenLite.autoSleep to\n_nextGCFrame = _ticker.frame + (parseInt(TweenLite.autoSleep,10) || 120);for(p in _tweenLookup) {a = _tweenLookup[p].tweens;i = a.length;while(--i > -1) {if(a[i]._gc){a.splice(i,1);}}if(a.length === 0){delete _tweenLookup[p];}} //if there are no more tweens in the root timelines, or if they're all paused, make the _timer sleep to reduce load on the CPU slightly\np = _rootTimeline._first;if(!p || p._paused)if(TweenLite.autoSleep && !_rootFramesTimeline._first && _ticker._listeners.tick.length === 1){while(p && p._paused) {p = p._next;}if(!p){_ticker.sleep();}}}};_ticker.addEventListener(\"tick\",Animation._updateRoot);var _register=function _register(target,tween,scrub){var id=target._gsTweenID,a,i;if(!_tweenLookup[id || (target._gsTweenID = id = \"t\" + _tweenLookupNum++)]){_tweenLookup[id] = {target:target,tweens:[]};}if(tween){a = _tweenLookup[id].tweens;a[i = a.length] = tween;if(scrub){while(--i > -1) {if(a[i] === tween){a.splice(i,1);}}}}return _tweenLookup[id].tweens;},_onOverwrite=function _onOverwrite(overwrittenTween,overwritingTween,target,killedProps){var func=overwrittenTween.vars.onOverwrite,r1,r2;if(func){r1 = func(overwrittenTween,overwritingTween,target,killedProps);}func = TweenLite.onOverwrite;if(func){r2 = func(overwrittenTween,overwritingTween,target,killedProps);}return r1 !== false && r2 !== false;},_applyOverwrite=function _applyOverwrite(target,tween,props,mode,siblings){var i,changed,curTween,l;if(mode === 1 || mode >= 4){l = siblings.length;for(i = 0;i < l;i++) {if((curTween = siblings[i]) !== tween){if(!curTween._gc){if(curTween._kill(null,target,tween)){changed = true;}}}else if(mode === 5){break;}}return changed;} //NOTE: Add 0.0000000001 to overcome floating point errors that can cause the startTime to be VERY slightly off (when a tween's time() is set for example)\nvar startTime=tween._startTime + _tinyNum,overlaps=[],oCount=0,zeroDur=tween._duration === 0,globalStart;i = siblings.length;while(--i > -1) {if((curTween = siblings[i]) === tween || curTween._gc || curTween._paused){ //ignore\n}else if(curTween._timeline !== tween._timeline){globalStart = globalStart || _checkOverlap(tween,0,zeroDur);if(_checkOverlap(curTween,globalStart,zeroDur) === 0){overlaps[oCount++] = curTween;}}else if(curTween._startTime <= startTime)if(curTween._startTime + curTween.totalDuration() / curTween._timeScale > startTime)if(!((zeroDur || !curTween._initted) && startTime - curTween._startTime <= 0.0000000002)){overlaps[oCount++] = curTween;}}i = oCount;while(--i > -1) {curTween = overlaps[i];if(mode === 2)if(curTween._kill(props,target,tween)){changed = true;}if(mode !== 2 || !curTween._firstPT && curTween._initted){if(mode !== 2 && !_onOverwrite(curTween,tween)){continue;}if(curTween._enabled(false,false)){ //if all property tweens have been overwritten, kill the tween.\nchanged = true;}}}return changed;},_checkOverlap=function _checkOverlap(tween,reference,zeroDur){var tl=tween._timeline,ts=tl._timeScale,t=tween._startTime;while(tl._timeline) {t += tl._startTime;ts *= tl._timeScale;if(tl._paused){return -100;}tl = tl._timeline;}t /= ts;return t > reference?t - reference:zeroDur && t === reference || !tween._initted && t - reference < 2 * _tinyNum?_tinyNum:(t += tween.totalDuration() / tween._timeScale / ts) > reference + _tinyNum?0:t - reference - _tinyNum;}; //---- TweenLite instance methods -----------------------------------------------------------------------------\np._init = function(){var v=this.vars,op=this._overwrittenProps,dur=this._duration,immediate=!!v.immediateRender,ease=v.ease,i,initPlugins,pt,p,startVars;if(v.startAt){if(this._startAt){this._startAt.render(-1,true); //if we've run a startAt previously (when the tween instantiated), we should revert it so that the values re-instantiate correctly particularly for relative tweens. Without this, a TweenLite.fromTo(obj, 1, {x:\"+=100\"}, {x:\"-=100\"}), for example, would actually jump to +=200 because the startAt would run twice, doubling the relative change.\nthis._startAt.kill();}startVars = {};for(p in v.startAt) { //copy the properties/values into a new object to avoid collisions, like var to = {x:0}, from = {x:500}; timeline.fromTo(e, 1, from, to).fromTo(e, 1, to, from);\nstartVars[p] = v.startAt[p];}startVars.overwrite = false;startVars.immediateRender = true;startVars.lazy = immediate && v.lazy !== false;startVars.startAt = startVars.delay = null; //no nesting of startAt objects allowed (otherwise it could cause an infinite loop).\nthis._startAt = TweenLite.to(this.target,0,startVars);if(immediate){if(this._time > 0){this._startAt = null; //tweens that render immediately (like most from() and fromTo() tweens) shouldn't revert when their parent timeline's playhead goes backward past the startTime because the initial render could have happened anytime and it shouldn't be directly correlated to this tween's startTime. Imagine setting up a complex animation where the beginning states of various objects are rendered immediately but the tween doesn't happen for quite some time - if we revert to the starting values as soon as the playhead goes backward past the tween's startTime, it will throw things off visually. Reversion should only happen in TimelineLite/Max instances where immediateRender was false (which is the default in the convenience methods like from()).\n}else if(dur !== 0){return; //we skip initialization here so that overwriting doesn't occur until the tween actually begins. Otherwise, if you create several immediateRender:true tweens of the same target/properties to drop into a TimelineLite or TimelineMax, the last one created would overwrite the first ones because they didn't get placed into the timeline yet before the first render occurs and kicks in overwriting.\n}}}else if(v.runBackwards && dur !== 0){ //from() tweens must be handled uniquely: their beginning values must be rendered but we don't want overwriting to occur yet (when time is still 0). Wait until the tween actually begins before doing all the routines like overwriting. At that time, we should render at the END of the tween to ensure that things initialize correctly (remember, from() tweens go backwards)\nif(this._startAt){this._startAt.render(-1,true);this._startAt.kill();this._startAt = null;}else {if(this._time !== 0){ //in rare cases (like if a from() tween runs and then is invalidate()-ed), immediateRender could be true but the initial forced-render gets skipped, so there's no need to force the render in this context when the _time is greater than 0\nimmediate = false;}pt = {};for(p in v) { //copy props into a new object and skip any reserved props, otherwise onComplete or onUpdate or onStart could fire. We should, however, permit autoCSS to go through.\nif(!_reservedProps[p] || p === \"autoCSS\"){pt[p] = v[p];}}pt.overwrite = 0;pt.data = \"isFromStart\"; //we tag the tween with as \"isFromStart\" so that if [inside a plugin] we need to only do something at the very END of a tween, we have a way of identifying this tween as merely the one that's setting the beginning values for a \"from()\" tween. For example, clearProps in CSSPlugin should only get applied at the very END of a tween and without this tag, from(...{height:100, clearProps:\"height\", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in.\npt.lazy = immediate && v.lazy !== false;pt.immediateRender = immediate; //zero-duration tweens render immediately by default, but if we're not specifically instructed to render this tween immediately, we should skip this and merely _init() to record the starting values (rendering them immediately would push them to completion which is wasteful in that case - we'd have to render(-1) immediately after)\nthis._startAt = TweenLite.to(this.target,0,pt);if(!immediate){this._startAt._init(); //ensures that the initial values are recorded\nthis._startAt._enabled(false); //no need to have the tween render on the next cycle. Disable it because we'll always manually control the renders of the _startAt tween.\nif(this.vars.immediateRender){this._startAt = null;}}else if(this._time === 0){return;}}}this._ease = ease = !ease?TweenLite.defaultEase:ease instanceof Ease?ease:typeof ease === \"function\"?new Ease(ease,v.easeParams):_easeMap[ease] || TweenLite.defaultEase;if(v.easeParams instanceof Array && ease.config){this._ease = ease.config.apply(ease,v.easeParams);}this._easeType = this._ease._type;this._easePower = this._ease._power;this._firstPT = null;if(this._targets){i = this._targets.length;while(--i > -1) {if(this._initProps(this._targets[i],this._propLookup[i] = {},this._siblings[i],op?op[i]:null)){initPlugins = true;}}}else {initPlugins = this._initProps(this.target,this._propLookup,this._siblings,op);}if(initPlugins){TweenLite._onPluginEvent(\"_onInitAllProps\",this); //reorders the array in order of priority. Uses a static TweenPlugin method in order to minimize file size in TweenLite\n}if(op)if(!this._firstPT)if(typeof this.target !== \"function\"){ //if all tweening properties have been overwritten, kill the tween. If the target is a function, it's probably a delayedCall so let it live.\nthis._enabled(false,false);}if(v.runBackwards){pt = this._firstPT;while(pt) {pt.s += pt.c;pt.c = -pt.c;pt = pt._next;}}this._onUpdate = v.onUpdate;this._initted = true;};p._initProps = function(target,propLookup,siblings,overwrittenProps){var p,i,initPlugins,plugin,pt,v;if(target == null){return false;}if(_lazyLookup[target._gsTweenID]){_lazyRender(); //if other tweens of the same target have recently initted but haven't rendered yet, we've got to force the render so that the starting values are correct (imagine populating a timeline with a bunch of sequential tweens and then jumping to the end)\n}if(!this.vars.css)if(target.style)if(target !== window && target.nodeType)if(_plugins.css)if(this.vars.autoCSS !== false){ //it's so common to use TweenLite/Max to animate the css of DOM elements, we assume that if the target is a DOM element, that's what is intended (a convenience so that users don't have to wrap things in css:{}, although we still recommend it for a slight performance boost and better specificity). Note: we cannot check \"nodeType\" on the window inside an iframe.\n_autoCSS(this.vars,target);}for(p in this.vars) {v = this.vars[p];if(_reservedProps[p]){if(v)if(v instanceof Array || v.push && _isArray(v))if(v.join(\"\").indexOf(\"{self}\") !== -1){this.vars[p] = v = this._swapSelfInParams(v,this);}}else if(_plugins[p] && (plugin = new _plugins[p]())._onInitTween(target,this.vars[p],this)){ //t - target \t\t[object]\n//p - property \t\t[string]\n//s - start\t\t\t[number]\n//c - change\t\t[number]\n//f - isFunction\t[boolean]\n//n - name\t\t\t[string]\n//pg - isPlugin \t[boolean]\n//pr - priority\t\t[number]\nthis._firstPT = pt = {_next:this._firstPT,t:plugin,p:\"setRatio\",s:0,c:1,f:1,n:p,pg:1,pr:plugin._priority};i = plugin._overwriteProps.length;while(--i > -1) {propLookup[plugin._overwriteProps[i]] = this._firstPT;}if(plugin._priority || plugin._onInitAllProps){initPlugins = true;}if(plugin._onDisable || plugin._onEnable){this._notifyPluginsOfEnabled = true;}if(pt._next){pt._next._prev = pt;}}else {propLookup[p] = _addPropTween.call(this,target,p,\"get\",v,p,0,null,this.vars.stringFilter);}}if(overwrittenProps)if(this._kill(overwrittenProps,target)){ //another tween may have tried to overwrite properties of this tween before init() was called (like if two tweens start at the same time, the one created second will run first)\nreturn this._initProps(target,propLookup,siblings,overwrittenProps);}if(this._overwrite > 1)if(this._firstPT)if(siblings.length > 1)if(_applyOverwrite(target,this,propLookup,this._overwrite,siblings)){this._kill(propLookup,target);return this._initProps(target,propLookup,siblings,overwrittenProps);}if(this._firstPT)if(this.vars.lazy !== false && this._duration || this.vars.lazy && !this._duration){ //zero duration tweens don't lazy render by default; everything else does.\n_lazyLookup[target._gsTweenID] = true;}return initPlugins;};p.render = function(time,suppressEvents,force){var prevTime=this._time,duration=this._duration,prevRawPrevTime=this._rawPrevTime,isComplete,callback,pt,rawPrevTime;if(time >= duration){this._totalTime = this._time = duration;this.ratio = this._ease._calcEnd?this._ease.getRatio(1):1;if(!this._reversed){isComplete = true;callback = \"onComplete\";force = force || this._timeline.autoRemoveChildren; //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.\n}if(duration === 0)if(this._initted || !this.vars.lazy || force){ //zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the \"playhead\" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's \"playhead\" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.\nif(this._startTime === this._timeline._duration){ //if a zero-duration tween is at the VERY end of a timeline and that timeline renders at its end, it will typically add a tiny bit of cushion to the render time to prevent rounding errors from getting in the way of tweens rendering their VERY end. If we then reverse() that timeline, the zero-duration tween will trigger its onReverseComplete even though technically the playhead didn't pass over it again. It's a very specific edge case we must accommodate.\ntime = 0;}if(time === 0 || prevRawPrevTime < 0 || prevRawPrevTime === _tinyNum && this.data !== \"isPause\")if(prevRawPrevTime !== time){ //note: when this.data is \"isPause\", it's a callback added by addPause() on a timeline that we should not be triggered when LEAVING its exact start time. In other words, tl.addPause(1).play(1) shouldn't pause.\nforce = true;if(prevRawPrevTime > _tinyNum){callback = \"onReverseComplete\";}}this._rawPrevTime = rawPrevTime = !suppressEvents || time || prevRawPrevTime === time?time:_tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.\n}}else if(time < 0.0000001){ //to work around occasional floating point math artifacts, round super small values to 0.\nthis._totalTime = this._time = 0;this.ratio = this._ease._calcEnd?this._ease.getRatio(0):0;if(prevTime !== 0 || duration === 0 && prevRawPrevTime > 0){callback = \"onReverseComplete\";isComplete = this._reversed;}if(time < 0){this._active = false;if(duration === 0)if(this._initted || !this.vars.lazy || force){ //zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the \"playhead\" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's \"playhead\" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.\nif(prevRawPrevTime >= 0 && !(prevRawPrevTime === _tinyNum && this.data === \"isPause\")){force = true;}this._rawPrevTime = rawPrevTime = !suppressEvents || time || prevRawPrevTime === time?time:_tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.\n}}if(!this._initted){ //if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately.\nforce = true;}}else {this._totalTime = this._time = time;if(this._easeType){var r=time / duration,type=this._easeType,pow=this._easePower;if(type === 1 || type === 3 && r >= 0.5){r = 1 - r;}if(type === 3){r *= 2;}if(pow === 1){r *= r;}else if(pow === 2){r *= r * r;}else if(pow === 3){r *= r * r * r;}else if(pow === 4){r *= r * r * r * r;}if(type === 1){this.ratio = 1 - r;}else if(type === 2){this.ratio = r;}else if(time / duration < 0.5){this.ratio = r / 2;}else {this.ratio = 1 - r / 2;}}else {this.ratio = this._ease.getRatio(time / duration);}}if(this._time === prevTime && !force){return;}else if(!this._initted){this._init();if(!this._initted || this._gc){ //immediateRender tweens typically won't initialize until the playhead advances (_time is greater than 0) in order to ensure that overwriting occurs properly. Also, if all of the tweening properties have been overwritten (which would cause _gc to be true, as set in _init()), we shouldn't continue otherwise an onStart callback could be called for example.\nreturn;}else if(!force && this._firstPT && (this.vars.lazy !== false && this._duration || this.vars.lazy && !this._duration)){this._time = this._totalTime = prevTime;this._rawPrevTime = prevRawPrevTime;_lazyTweens.push(this);this._lazy = [time,suppressEvents];return;} //_ease is initially set to defaultEase, so now that init() has run, _ease is set properly and we need to recalculate the ratio. Overall this is faster than using conditional logic earlier in the method to avoid having to set ratio twice because we only init() once but renderTime() gets called VERY frequently.\nif(this._time && !isComplete){this.ratio = this._ease.getRatio(this._time / duration);}else if(isComplete && this._ease._calcEnd){this.ratio = this._ease.getRatio(this._time === 0?0:1);}}if(this._lazy !== false){ //in case a lazy render is pending, we should flush it because the new render is occurring now (imagine a lazy tween instantiating and then immediately the user calls tween.seek(tween.duration()), skipping to the end - the end render would be forced, and then if we didn't flush the lazy render, it'd fire AFTER the seek(), rendering it at the wrong time.\nthis._lazy = false;}if(!this._active)if(!this._paused && this._time !== prevTime && time >= 0){this._active = true; //so that if the user renders a tween (as opposed to the timeline rendering it), the timeline is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the tween already finished but the user manually re-renders it as halfway done.\n}if(prevTime === 0){if(this._startAt){if(time >= 0){this._startAt.render(time,suppressEvents,force);}else if(!callback){callback = \"_dummyGS\"; //if no callback is defined, use a dummy value just so that the condition at the end evaluates as true because _startAt should render AFTER the normal render loop when the time is negative. We could handle this in a more intuitive way, of course, but the render loop is the MOST important thing to optimize, so this technique allows us to avoid adding extra conditional logic in a high-frequency area.\n}}if(this.vars.onStart)if(this._time !== 0 || duration === 0)if(!suppressEvents){this._callback(\"onStart\");}}pt = this._firstPT;while(pt) {if(pt.f){pt.t[pt.p](pt.c * this.ratio + pt.s);}else {pt.t[pt.p] = pt.c * this.ratio + pt.s;}pt = pt._next;}if(this._onUpdate){if(time < 0)if(this._startAt && time !== -0.0001){ //if the tween is positioned at the VERY beginning (_startTime 0) of its parent timeline, it's illegal for the playhead to go back further, so we should not render the recorded startAt values.\nthis._startAt.render(time,suppressEvents,force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.\n}if(!suppressEvents)if(this._time !== prevTime || isComplete){this._callback(\"onUpdate\");}}if(callback)if(!this._gc || force){ //check _gc because there's a chance that kill() could be called in an onUpdate\nif(time < 0 && this._startAt && !this._onUpdate && time !== -0.0001){ //-0.0001 is a special value that we use when looping back to the beginning of a repeated TimelineMax, in which case we shouldn't render the _startAt values.\nthis._startAt.render(time,suppressEvents,force);}if(isComplete){if(this._timeline.autoRemoveChildren){this._enabled(false,false);}this._active = false;}if(!suppressEvents && this.vars[callback]){this._callback(callback);}if(duration === 0 && this._rawPrevTime === _tinyNum && rawPrevTime !== _tinyNum){ //the onComplete or onReverseComplete could trigger movement of the playhead and for zero-duration tweens (which must discern direction) that land directly back on their start time, we don't want to fire again on the next render. Think of several addPause()'s in a timeline that forces the playhead to a certain spot, but what if it's already paused and another tween is tweening the \"time\" of the timeline? Each time it moves [forward] past that spot, it would move back, and since suppressEvents is true, it'd reset _rawPrevTime to _tinyNum so that when it begins again, the callback would fire (so ultimately it could bounce back and forth during that tween). Again, this is a very uncommon scenario, but possible nonetheless.\nthis._rawPrevTime = 0;}}};p._kill = function(vars,target,overwritingTween){if(vars === \"all\"){vars = null;}if(vars == null)if(target == null || target === this.target){this._lazy = false;return this._enabled(false,false);}target = typeof target !== \"string\"?target || this._targets || this.target:TweenLite.selector(target) || target;var simultaneousOverwrite=overwritingTween && this._time && overwritingTween._startTime === this._startTime && this._timeline === overwritingTween._timeline,i,overwrittenProps,p,pt,propLookup,changed,killProps,record,killed;if((_isArray(target) || _isSelector(target)) && typeof target[0] !== \"number\"){i = target.length;while(--i > -1) {if(this._kill(vars,target[i],overwritingTween)){changed = true;}}}else {if(this._targets){i = this._targets.length;while(--i > -1) {if(target === this._targets[i]){propLookup = this._propLookup[i] || {};this._overwrittenProps = this._overwrittenProps || [];overwrittenProps = this._overwrittenProps[i] = vars?this._overwrittenProps[i] || {}:\"all\";break;}}}else if(target !== this.target){return false;}else {propLookup = this._propLookup;overwrittenProps = this._overwrittenProps = vars?this._overwrittenProps || {}:\"all\";}if(propLookup){killProps = vars || propLookup;record = vars !== overwrittenProps && overwrittenProps !== \"all\" && vars !== propLookup && (typeof vars !== \"object\" || !vars._tempKill); //_tempKill is a super-secret way to delete a particular tweening property but NOT have it remembered as an official overwritten property (like in BezierPlugin)\nif(overwritingTween && (TweenLite.onOverwrite || this.vars.onOverwrite)){for(p in killProps) {if(propLookup[p]){if(!killed){killed = [];}killed.push(p);}}if((killed || !vars) && !_onOverwrite(this,overwritingTween,target,killed)){ //if the onOverwrite returned false, that means the user wants to override the overwriting (cancel it).\nreturn false;}}for(p in killProps) {if(pt = propLookup[p]){if(simultaneousOverwrite){ //if another tween overwrites this one and they both start at exactly the same time, yet this tween has already rendered once (for example, at 0.001) because it's first in the queue, we should revert the values to where they were at 0 so that the starting values aren't contaminated on the overwriting tween.\nif(pt.f){pt.t[pt.p](pt.s);}else {pt.t[pt.p] = pt.s;}changed = true;}if(pt.pg && pt.t._kill(killProps)){changed = true; //some plugins need to be notified so they can perform cleanup tasks first\n}if(!pt.pg || pt.t._overwriteProps.length === 0){if(pt._prev){pt._prev._next = pt._next;}else if(pt === this._firstPT){this._firstPT = pt._next;}if(pt._next){pt._next._prev = pt._prev;}pt._next = pt._prev = null;}delete propLookup[p];}if(record){overwrittenProps[p] = 1;}}if(!this._firstPT && this._initted){ //if all tweening properties are killed, kill the tween. Without this line, if there's a tween with multiple targets and then you killTweensOf() each target individually, the tween would technically still remain active and fire its onComplete even though there aren't any more properties tweening.\nthis._enabled(false,false);}}}return changed;};p.invalidate = function(){if(this._notifyPluginsOfEnabled){TweenLite._onPluginEvent(\"_onDisable\",this);}this._firstPT = this._overwrittenProps = this._startAt = this._onUpdate = null;this._notifyPluginsOfEnabled = this._active = this._lazy = false;this._propLookup = this._targets?{}:[];Animation.prototype.invalidate.call(this);if(this.vars.immediateRender){this._time = -_tinyNum; //forces a render without having to set the render() \"force\" parameter to true because we want to allow lazying by default (using the \"force\" parameter always forces an immediate full render)\nthis.render(-this._delay);}return this;};p._enabled = function(enabled,ignoreTimeline){if(!_tickerActive){_ticker.wake();}if(enabled && this._gc){var targets=this._targets,i;if(targets){i = targets.length;while(--i > -1) {this._siblings[i] = _register(targets[i],this,true);}}else {this._siblings = _register(this.target,this,true);}}Animation.prototype._enabled.call(this,enabled,ignoreTimeline);if(this._notifyPluginsOfEnabled)if(this._firstPT){return TweenLite._onPluginEvent(enabled?\"_onEnable\":\"_onDisable\",this);}return false;}; //----TweenLite static methods -----------------------------------------------------\nTweenLite.to = function(target,duration,vars){return new TweenLite(target,duration,vars);};TweenLite.from = function(target,duration,vars){vars.runBackwards = true;vars.immediateRender = vars.immediateRender != false;return new TweenLite(target,duration,vars);};TweenLite.fromTo = function(target,duration,fromVars,toVars){toVars.startAt = fromVars;toVars.immediateRender = toVars.immediateRender != false && fromVars.immediateRender != false;return new TweenLite(target,duration,toVars);};TweenLite.delayedCall = function(delay,callback,params,scope,useFrames){return new TweenLite(callback,0,{delay:delay,onComplete:callback,onCompleteParams:params,callbackScope:scope,onReverseComplete:callback,onReverseCompleteParams:params,immediateRender:false,lazy:false,useFrames:useFrames,overwrite:0});};TweenLite.set = function(target,vars){return new TweenLite(target,0,vars);};TweenLite.getTweensOf = function(target,onlyActive){if(target == null){return [];}target = typeof target !== \"string\"?target:TweenLite.selector(target) || target;var i,a,j,t;if((_isArray(target) || _isSelector(target)) && typeof target[0] !== \"number\"){i = target.length;a = [];while(--i > -1) {a = a.concat(TweenLite.getTweensOf(target[i],onlyActive));}i = a.length; //now get rid of any duplicates (tweens of arrays of objects could cause duplicates)\nwhile(--i > -1) {t = a[i];j = i;while(--j > -1) {if(t === a[j]){a.splice(i,1);}}}}else {a = _register(target).concat();i = a.length;while(--i > -1) {if(a[i]._gc || onlyActive && !a[i].isActive()){a.splice(i,1);}}}return a;};TweenLite.killTweensOf = TweenLite.killDelayedCallsTo = function(target,onlyActive,vars){if(typeof onlyActive === \"object\"){vars = onlyActive; //for backwards compatibility (before \"onlyActive\" parameter was inserted)\nonlyActive = false;}var a=TweenLite.getTweensOf(target,onlyActive),i=a.length;while(--i > -1) {a[i]._kill(vars,target);}}; /*\n * ----------------------------------------------------------------\n * TweenPlugin   (could easily be split out as a separate file/class, but included for ease of use (so that people don't need to include another script call before loading plugins which is easy to forget)\n * ----------------------------------------------------------------\n */var TweenPlugin=_class(\"plugins.TweenPlugin\",function(props,priority){this._overwriteProps = (props || \"\").split(\",\");this._propName = this._overwriteProps[0];this._priority = priority || 0;this._super = TweenPlugin.prototype;},true);p = TweenPlugin.prototype;TweenPlugin.version = \"1.18.0\";TweenPlugin.API = 2;p._firstPT = null;p._addTween = _addPropTween;p.setRatio = _setRatio;p._kill = function(lookup){var a=this._overwriteProps,pt=this._firstPT,i;if(lookup[this._propName] != null){this._overwriteProps = [];}else {i = a.length;while(--i > -1) {if(lookup[a[i]] != null){a.splice(i,1);}}}while(pt) {if(lookup[pt.n] != null){if(pt._next){pt._next._prev = pt._prev;}if(pt._prev){pt._prev._next = pt._next;pt._prev = null;}else if(this._firstPT === pt){this._firstPT = pt._next;}}pt = pt._next;}return false;};p._roundProps = function(lookup,value){var pt=this._firstPT;while(pt) {if(lookup[this._propName] || pt.n != null && lookup[pt.n.split(this._propName + \"_\").join(\"\")]){ //some properties that are very plugin-specific add a prefix named after the _propName plus an underscore, so we need to ignore that extra stuff here.\npt.r = value;}pt = pt._next;}};TweenLite._onPluginEvent = function(type,tween){var pt=tween._firstPT,changed,pt2,first,last,next;if(type === \"_onInitAllProps\"){ //sorts the PropTween linked list in order of priority because some plugins need to render earlier/later than others, like MotionBlurPlugin applies its effects after all x/y/alpha tweens have rendered on each frame.\nwhile(pt) {next = pt._next;pt2 = first;while(pt2 && pt2.pr > pt.pr) {pt2 = pt2._next;}if(pt._prev = pt2?pt2._prev:last){pt._prev._next = pt;}else {first = pt;}if(pt._next = pt2){pt2._prev = pt;}else {last = pt;}pt = next;}pt = tween._firstPT = first;}while(pt) {if(pt.pg)if(typeof pt.t[type] === \"function\")if(pt.t[type]()){changed = true;}pt = pt._next;}return changed;};TweenPlugin.activate = function(plugins){var i=plugins.length;while(--i > -1) {if(plugins[i].API === TweenPlugin.API){_plugins[new plugins[i]()._propName] = plugins[i];}}return true;}; //provides a more concise way to define plugins that have no dependencies besides TweenPlugin and TweenLite, wrapping common boilerplate stuff into one function (added in 1.9.0). You don't NEED to use this to define a plugin - the old way still works and can be useful in certain (rare) situations.\n_gsDefine.plugin = function(config){if(!config || !config.propName || !config.init || !config.API){throw \"illegal plugin definition.\";}var propName=config.propName,priority=config.priority || 0,overwriteProps=config.overwriteProps,map={init:\"_onInitTween\",set:\"setRatio\",kill:\"_kill\",round:\"_roundProps\",initAll:\"_onInitAllProps\"},Plugin=_class(\"plugins.\" + propName.charAt(0).toUpperCase() + propName.substr(1) + \"Plugin\",function(){TweenPlugin.call(this,propName,priority);this._overwriteProps = overwriteProps || [];},config.global === true),p=Plugin.prototype = new TweenPlugin(propName),prop;p.constructor = Plugin;Plugin.API = config.API;for(prop in map) {if(typeof config[prop] === \"function\"){p[map[prop]] = config[prop];}}Plugin.version = config.version;TweenPlugin.activate([Plugin]);return Plugin;}; //now run through all the dependencies discovered and if any are missing, log that to the console as a warning. This is why it's best to have TweenLite load last - it can check all the dependencies for you.\na = window._gsQueue;if(a){for(i = 0;i < a.length;i++) {a[i]();}for(p in _defLookup) {if(!_defLookup[p].func){window.console.log(\"GSAP encountered missing dependency: com.greensock.\" + p);}}}_tickerActive = false; //ensures that the first official animation forces a ticker.tick() to update the time when it is instantiated\n})(typeof module !== \"undefined\" && module.exports && typeof global !== \"undefined\"?global:undefined || window,\"TweenMax\");\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9uYW90b25lL1NpdGVzL3N0YXRpYy9uYW90b25lLmNvbS9kZXYvanMvbGlicy9ncmVlbnNvY2svc3JjL3VuY29tcHJlc3NlZC9Ud2Vlbk1heC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O2lCQWFBLElBQUksUUFBUSxDQUFHLEFBQUMsT0FBTyxNQUFNLEFBQUMsS0FBSyxXQUFXLElBQUksTUFBTSxDQUFDLE9BQU8sSUFBSSxPQUFPLE1BQU0sQUFBQyxLQUFLLFdBQVcsQ0FBSSxNQUFNLENBQUcsYUFBUSxNQUFNLENBQUM7QUFDOUgsQ0FBQyxRQUFRLENBQUMsUUFBUSxLQUFLLFFBQVEsQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFBLENBQUMsQ0FBRSxJQUFJLENBQUUsVUFBVyxDQUVoRSxZQUFZLENBQUMsQUFFYixRQUFRLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBRSxDQUFDLGdCQUFnQixDQUFDLHFCQUFxQixDQUFDLFdBQVcsQ0FBQyxDQUFFLFNBQVMsU0FBUyxDQUFFLGNBQWMsQ0FBRSxTQUFTLENBQUUsQ0FFbkksSUFBSSxNQUFNLENBQUcsU0FBVCxNQUFNLENBQVksQ0FBQyxDQUFFO0FBQ3ZCLElBQUksQ0FBQyxDQUFHLEVBQUUsQ0FDVCxDQUFDLENBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FDWixDQUFDLENBQUMsQUFDSCxJQUFLLENBQUMsR0FBRyxDQUFDLENBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQUFDckMsT0FBTyxDQUFDLENBQUMsQ0FDVCxDQUNELFdBQVcsQ0FBRyxTQUFkLFdBQVcsQ0FBWSxJQUFJLENBQUUsT0FBTyxDQUFFLENBQUMsQ0FBRSxDQUN4QyxJQUFJLEdBQUcsQ0FBRyxJQUFJLENBQUMsS0FBSyxDQUNuQixDQUFDLENBQUUsR0FBRyxDQUFDLEFBQ1IsSUFBSyxDQUFDLElBQUksR0FBRyxFQUFF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LGVBQWUsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUM3RCxDQUFDLENBQUMsQUFDSCxHQUFJLGFBQWEsSUFBSSxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFFLENBQzVELElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQUFDdkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxBQUNyQixHQUFJLElBQUksQ0FBQyxHQUFHLENBQUUsQ0FDYixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBRSxLQUFLLENBQUMsQ0FBQyxDQUMzQixLQUFNLENBQ04sSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFFLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0NBQzNELENBQ0QsQUFDRCxJQUFLLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FDZixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUN2QixBQUNELEdBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxTQUFTLENBQUUsQ0FDL0IsR0FBSSxhQUFhLENBQUUsQ0FDbEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsQUFDdEIsR0FBSSxTQUFTLENBQUUsQ0FDZCxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBRSxJQUFJLENBQUUsSUFBSSxDQUFDLENBQUMsQ0FDM0IsQ0FDRCxLQUFNLENBQ04sR0FBSSxJQUFJLENBQUMsR0FBRyxDQUFFLENBQ2IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUUsS0FBSyxDQUFDLENBQUMsQ0FDM0IsQUFDRCxHQUFJLElBQUksQ0FBQyx1QkFBdUIsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFFLENBQ2xELFNBQVMsQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFFLElBQUksQ0FBQyxDQUFDO0NBQzdDLEFBQ0QsR0FB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TSxHQUFHLGFBQWEsQUFBQyxDQUFDLEFBQzdELEdBQUksSUFBSSxDQUFDLEtBQUssQ0FBRSxHQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUEsS0FBTSxDQUFDLENBQUUsQ0FDNUMsSUFBSSxDQUFDLEtBQUssR0FBRyxRQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUNuQyxBQUNELEdBQUksSUFBSSxDQUFDLEtBQUssR0FBRyxRQUFRLENBQUUsQ0FDMUIsSUFBSSxDQUFDLEtBQUssR0FBRyxRQUFRLENBQUMsQ0FDdEIsS0FBTSxHQUFJLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFFLENBQzFCLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQ2YsQ0FDRCxBQUVELEdBQUksSUFBSSxDQUFDLFNBQVMsQ0FBRSxDQUNuQixDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssR0FBRyxRQUFRLENBQUMsQUFDMUIsSUFBSSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQUFDdEIsR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQUFDdEIsR0FBSSxJQUFJLEtBQUssQ0FBQyxJQUFLLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsQUFBQyxDQUFFLENBQzNDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQ1YsQUFDRCxHQUFJLElBQUksS0FBSyxDQUFDLENBQUUsQ0FDZixDQUFDLElBQUksQ0FBQyxDQUFDLENBQ1AsQUFDRCxHQUFJLEdBQUcsS0FBSyxDQUFDLENBQUUsQ0FDZCxDQUFDLElBQUksQ0FBQyxDQUFDLENBQ1AsS0FBTSxHQUFJLEdBQUcsS0FBSyxDQUFDLENBQUUsQ0FDckIsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FDWCxLQUFNLEdBQUksR0FBRyxLQUFLLENBQUMsQ0FBRSxDQUNyQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FDZixLQUFNLEdBQUksR0FBRyxLQUFLLENBQUMs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S0FBSyxDQUFDLE1BQU0sS0FBSyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFLLFlBQVksQUFBQyxJQUFLLE1BQU0sSUFBSSxDQUFDLElBQUksQUFBQyxDQUFFLENBQzdJLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FDcEIsQ0FDRCxDQUNELENBQUMsQUFFRixRQUFRLENBQUMsUUFBUSxHQUFHLFNBQVMsTUFBTSxDQUFFLFlBQVksQ0FBRSxTQUFTLENBQUUsQ0FDN0QsWUFBWSxDQUFDLElBQUksQ0FBRSxNQUFNLENBQUUsWUFBWSxDQUFFLFNBQVMsQ0FBQyxDQUFDLENBQ3BELENBQUMsQUFFRixRQUFRLENBQUMsU0FBUyxHQUFHLFNBQVMsTUFBTSxDQUFFLFlBQVksQ0FBRSxTQUFTLENBQUUsQ0FDOUQsWUFBWSxDQUFDLEtBQUssQ0FBRSxNQUFNLENBQUUsWUFBWSxDQUFFLFNBQVMsQ0FBQyxDQUFDLENBQ3JELENBQUMsQUFFRixRQUFRLENBQUMsZUFBZSxHQUFHLFNBQVMsS0FBSyxDQUFFLENBQzFDLElBQUksRUFBRSxDQUFHLFNBQVMsQ0FBQyxhQUFhLENBQy9CLENBQUMsQ0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxBQUMzQixHQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBRSxDQUN0QixPQUFPLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FDckIsQUFDRCxLQUFLLEdBQUcsS0FBSyxJQUFJLFFBQVEsQ0FBQztBQUMxQixFQUFFLENBQUMsVUFBVSxHQUFHLENBQUMsR0FBSSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFBLEdBQUksRUFBRSxDQUFDLFVBQVUsR0FBRyxLQUFLLEFBQUMsQ0FBQyxBQUNsRSxFQUFFLEdBQUcsU0FBUyxDQUFDLG1CQUFtQixDQUFDLEFBQ25DLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxBQUMzQixFQUFFLENBQUMsVUFBVSxHQUFHLENBQUMsR0FBSSxDQUFDLENBQUMsR0FB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QzNGLEdBQUksVUFBVSxLQUFLLEtBQUssQ0FBRSxDQUN6QixVQUFVLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztBQUN6QixNQUFPLFVBQVUsSUFBSSxVQUFVLENBQUMsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUN2RCxVQUFVLENBQUMsTUFBTSxDQUFHLFVBQVUsQ0FBQyxTQUFTLENBQUcsVUFBVSxDQUFDLGFBQWEsRUFBRSxHQUFJLENBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBQyxVQUFVLENBQUEsR0FBSSxVQUFVLENBQUMsVUFBVSxBQUFDLENBQUcsQ0FBQyxJQUFJLEdBQUcsVUFBVSxDQUFDLFVBQVUsQ0FBQSxHQUFJLFVBQVUsQ0FBQyxVQUFVLENBQUcsY0FBYyxDQUFFLEtBQUssQ0FBQyxDQUFDLEFBQ25OLFVBQVUsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQzlCLEFBQ0QsVUFBVSxHQUFHLElBQUksQ0FBQyxBQUNsQixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FDYixBQUNELEdBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFFLENBQ3JCLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQSxHQUFJLEtBQUssQ0FBQyxVQUFVLENBQUUsY0FBYyxDQUFFLEtBQUssQ0FBQyxDQUFDLENBQ2xGLEtBQU0sQ0FDTixLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQUFBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUksS0FBSyxDQUFDLGNBQWMsQ0FBRyxLQUFLLENBQUMsYUFBYSxFQUFFLENBQUEsR0FBSyxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFBLEdBQUksS0FBSyxDQUFDLFVBQVUsQUFBQyxDQUFFLGNBQWMsQ0FBRSxLQUFLLENBQUMsQ0FBQyxDQUN2SixDQUNELEFBQ0QsS0FBSyxHQUFHLElBQUksQ0FBQyxDQUNiLENBQ0QsQUFFRCxHQUFJLElBQUksQ0FBQyxTQUFTLENBQUUsR0FBSSxDQUFDLGNBQWMsQ0FBRSxDQUN4QyxHQUFJLFdBQVcsQ0FBQyxNQUFNLENBQUU7QUFDdkIsV0FBVyxFQUFFLENBQUMsQ0FDZCxBQUNELElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FDM0IsQUFDRCxHQUFJLFFBQVEsQ0FBRSxHQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBRSxHQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBRSxHQUFJLFNBQVMsS0FBSyxJQUFJLENBQUMsVUFBVSxJQUFJLGFBQWEsS0FBSyxJQUFJLENBQUMsVUFBVSxDQUFFLEdBQUksSUFBSSxDQUFDLEtBQUssS0FBSyxDQUFDLElBQUksUUFBUSxJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBRTtBQUNqTCxHQUFJLFVBQVUsQ0FBRSxDQUNmLEdBQUksV0FBVyxDQUFDLE1BQU0sQ0FBRTtBQUN2QixXQUFXLEVBQUUsQ0FBQyxDQUNkLEFBQ0QsR0FBSSxJQUFJLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFFLENBQ3RDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFFLEtBQUssQ0FBQyxDQUFDLENBQzVCLEFBQ0QsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsQ0FDckIsQUFDRCxHQUFJLENBQUMsY0FBYyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUUsQ0FDM0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUN6QixDQUNELENBQ0QsQ0FBQyxBQUVGLENBQUMsQ0FBQyxTQUFTLEdBQUcsU0FBUyxNQUFNLENBQUUsTUFBTSxDQUFFLFNBQVMsQ0FBRSxDQUNqRCxHQUFJLE1BQU0sSUFBSSxJQUFJLENBQUUsQ0FDbkIsTUFBTSxHQUFHLElBQUksQ0FBQyxDQUNkLEFBQ0QsR0FBSSxNQUFNLElBQUksSUFBSSxDQUFFLENBQ25CLE1BQU0sR0FBRyxJQUFJLENBQUMsQ0FDZCxBQUNELEdBQUksU0FBUyxJQUFJLElBQUksQ0FBRSxDQUN0QixTQUFTLEdBQUcsS0FBSyxDQUFDLENBQ2xCLEFBQ0QsSUFBSSxDQUFDLENBQUcsRUFBRSxDQUNULEdBQUcsQ0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBRSxNQUFNLENBQUUsU0FBUyxDQUFDLENBQ2pELEdBQUcsQ0FBRyxDQUFDLENBQ1AsQ0FBQyxDQUFHLEdBQUcsQ0FBQyxNQUFNLENBQ2QsQ0FBQyxDQUFFLEtBQUssQ0FBQyxBQUNWLElBQUssQ0FBQyxHQUFHLENBQUMsQ0FBRSxDQUFDLEdBQUcsQ0FBQyxDQUFFLENBQUMsRUFBRSxFQUFFLENBQ3ZCLEtBQUssR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFDZixHQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBRSxDQUNyQixDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FDakIsQ0FDRCxBQUNELE9BQU8sQ0FBQyxDQUFDLENBQ1QsQ0FBQyxBQUdGLENBQUMsQ0FBQyxhQUFhLEdBQUcsU0FBUyxJQUFJLENBQUUsQ0FDaEMsR0FBSSxDQUFDLElBQUksQ0FBRSxHQUFJLElBQUksS0FBSyxDQUFDLENBQUU7QUFDMUIsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FDbEIsQUFDRCxJQUFJLE1BQU0sQ0FBRyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQ2pDLENBQUMsQ0FBRyxNQUFNLENBQUMsTUFBTSxDQUNqQixDQUFDLENBQUMsQUFDSCxJQUFLLENBQUMsR0FBRyxDQUFDLENBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBRSxDQUFDLEVBQUUsRUFBRSxDQUN2QixHQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFFLENBQzFCLE9BQU8sTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUN0QixDQUNELEFBQ0QsT0FBTyxJQUFJLENBQUMsQ0FDWixDQUFDLEFBRUYsQ0FBQyxDQUFDLGNBQWMsR0FBRyxTQUFTLElBQUksQ0FBRSxDQUNqQyxHQUFJLElBQUksSUFBSSxJQUFJLENBQUUsQ0FDakIsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FDbEIsQUFDRCxJQUFJLE1BQU0sQ0FBRyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQ2pDLENBQUMsQ0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEFBQ25CLE1BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FDaEIsR0FBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBRSxDQUMxQixPQUFPLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FDdEIsQ0FDRCxBQUNELE9BQU8sSUFBSSxDQUFDLENBQ1osQ0FBQyxBQUVGLENBQUMsQ0FBQyxjQUFjLEdBQUcsVUFBVyxDQUM3QixJQUFJLENBQUMsQ0FBRyxFQUFFLENBQ1QsR0FBRyxDQUFHLENBQUMsQ0FDUCxDQUFDLENBQUMsQUFDSCxJQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQ3ZCLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQzFDLEFBQ0QsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUUsQ0FDcEIsT0FBTyxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FDdkIsQ0FBQyxDQUFDLEFBQ0gsT0FBTyxDQUFDLENBQUMsQ0FDVCxDQUFDO0FBS0YsQ0FBQyxDQUFDLFFBQVEsR0FBRyxTQUFTLEtBQUssQ0FBRSxjQUFjLENBQUUsQ0FDNUMsT0FBTyxBQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBSSxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBRyxJQUFJLENBQUMsU0FBUyxDQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxBQUFDLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQSxLQUFNLENBQUMsQ0FBSSxDQUFDLEdBQUcsS0FBSyxDQUFHLEtBQUssQ0FBQSxBQUFDLEdBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUEsQUFBQyxBQUFDLENBQUUsY0FBYyxDQUFDLENBQUMsQ0FDcE8sQ0FBQyxBQUVGLENBQUMsQ0FBQyxhQUFhLEdBQUcsU0FBUyxLQUFLLENBQUUsY0FBYyxDQUFFLENBQ2pELE9BQU8sQUFBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUksSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBRSxJQUFJLENBQUMsYUFBYSxFQUFFLEdBQUcsS0FBSyxDQUFFLGNBQWMsQ0FBQyxDQUFDLENBQ3BJLENBQUMsQUFFRixDQUFDLENBQUMsYUFBYSxHQUFHLFNBQVMsS0FBSyxDQUFFLENBQ2pDLEdBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFFLENBQ3RCLEdBQUksSUFBSSxDQUFDLE1BQU0sQ0FBRSxDQUNoQixZQUFZLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7O0FBRWhELElBQUksQ0FBQyxjQUFjLEdBQUcsQUFBQyxJQUFJLENBQUMsT0FBTyxLQUFLLENBQUMsQ0FBQyxDQUFJLFlBQVksQ0FBRyxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFBLEFBQUMsR0FBSSxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxPQUFPLEFBQUMsQ0FBQyxDQUN0SSxBQUNELE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUMzQixBQUNELE9BQU8sQUFBQyxJQUFJLENBQUMsT0FBTyxLQUFLLENBQUMsQ0FBQyxDQUFJLElBQUksQ0FBRyxJQUFJLENBQUMsUUFBUSxDQUFFLENBQUMsS0FBSyxHQUFJLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFLLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFBLEFBQUMsQ0FBRSxDQUFDLENBQ3pILENBQUMsQUFFRixDQUFDLENBQUMsSUFBSSxHQUFHLFNBQVMsS0FBSyxDQUFFLGNBQWMsQ0FBRSxDQUN4QyxHQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBRSxDQUN0QixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FDbEIsQUFDRCxHQUFJLElBQUksQ0FBQyxNQUFNLENBQUUsQ0FDaEIsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQ3JCLEFBQ0QsR0FBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBRSxDQUMzQixLQUFLLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUN2QixBQUNELEdBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFBLEtBQU0sQ0FBQyxDQUFFLENBQzFDLEtBQUssR0FBRyxBQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxHQUFLLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFBLEFBQUMsQUFBQyxDQUFDLENBQ3hGLEtBQU0sR0FBSSxJQUFJLENBQUMsT0FBTyxLQUFLLENBQUMsQ0FBRSxDQUM5QixLQUFLLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUEsQUFBQyxDQUFDLENBQzVELEFBQ0QsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBRSxjQUFjLENBQUMsQ0FBQyxDQUM3QyxDQUFDLEFBRUYsQ0FBQyxDQUFDLE1BQU0sR0FBRyxTQUFTLEtBQUssQ0FBRSxDQUMxQixHQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBRSxDQUN0QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FDcEIsQUFDRCxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxBQUNyQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FDM0IsQ0FBQyxBQUVGLENBQUMsQ0FBQyxXQUFXLEdBQUcsU0FBUyxLQUFLLENBQUUsQ0FDL0IsR0FBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUUsQ0FDdEIsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQ3pCLEFBQ0QsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUMsQUFDMUIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQzNCLENBQUMsQUFFRixDQUFDLENBQUMsSUFBSSxHQUFHLFNBQVMsS0FBSyxDQUFFLENBQ3hCLEdBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFFLENBQ3RCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUNsQixBQUNELElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLEFBQ25CLE9BQU8sSUFBSSxDQUFDLENBQ1osQ0FBQyxBQUVGLENBQUMsQ0FBQyxZQUFZLEdBQUcsU0FBUyxLQUFLLENBQUUsQ0FDaEMsR0FBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUUsQ0FDdEIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FDcEQsQUFDRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFFLElBQUksQ0FBQyxDQUFDLENBQzlCLENBQUMsQUFFRixPQUFPLFdBQVcsQ0FBQyxDQUVuQixDQUFFLElBQUksQ0FBQyxDQUFDOzs7O0dBa0JULEFBQUMsQ0FBQSxVQUFXLENBRVgsSUFBSSxRQUFRLENBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQzNCLEdBQUcsQ0FBRyxFQUFFLENBQ1IsR0FBRyxDQUFHLEVBQUUsQ0FDUixHQUFHLENBQUcsRUFBRSxDQUNSLFNBQVMsQ0FBRyxFQUFFLENBQ2QsUUFBUSxDQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUNyQyxPQUFPLENBQUcsU0FBVixPQUFPLENBQVksQ0FBQyxDQUFFLENBQUMsQ0FBRSxDQUFDLENBQUUsQ0FBQyxDQUFFLENBQzlCLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEFBQ1gsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQUFDWCxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxBQUNYLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEFBQ1gsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEFBQ2hCLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxBQUNoQixJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FDaEIsQ0FDRCxVQUFVLENBQUcsdUtBQXVLLENBQ3BMLGdCQUFnQixDQUFHLFNBQW5CLGdCQUFnQixDQUFZLENBQUMsQ0FBRSxDQUFDLENBQUUsQ0FBQyxDQUFFLENBQUMsQ0FBRSxDQUN2QyxJQUFJLEVBQUUsQ0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDYixFQUFFLENBQUcsRUFBRSxDQUNQLEVBQUUsQ0FBRyxFQUFFLENBQ1AsRUFBRSxDQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUNWLEdBQUcsQ0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUEsR0FBSSxDQUFDLENBQ2pCLEdBQUcsQ0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUEsR0FBSSxDQUFDLENBQ2pCLEdBQUcsQ0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUEsR0FBSSxDQUFDLENBQ2pCLElBQUksQ0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUEsR0FBSSxDQUFDLENBQ3RCLElBQUksQ0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUEsR0FBSSxDQUFDLENBQ3RCLEVBQUUsQ0FBRyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUEsR0FBSSxDQUFDLENBQUMsQUFDeEIsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFBLEdBQUksQ0FBQyxDQUFDLEFBQzNCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQyxBQUNqQixFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUEsR0FBSSxDQUFDLENBQUMsQUFDaEMsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQSxHQUFJLENBQUMsQ0FBQyxBQUNoQyxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUMsQUFDakIsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFBLEdBQUksQ0FBQyxDQUFDLEFBQzNCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQSxHQUFJLENBQUMsQ0FBQyxBQUNoQyxPQUFPLENBQUMsRUFBRSxDQUFFLEVBQUUsQ0FBRSxFQUFFLENBQUUsRUFBRSxDQUFDLENBQUMsQ0FDeEIsQ0FDRCx1QkFBdUIsQ0FBRyxTQUExQix1QkFBdUIsQ0FBWSxDQUFDLENBQUUsU0FBUyxDQUFFLElBQUksQ0FBRSxLQUFLLENBQUUsU0FBUyxDQUFFLENBQ3hFLElBQUksQ0FBQyxDQUFHLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUNuQixFQUFFLENBQUcsQ0FBQyxDQUNOLEdBQUcsQ0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUNaLENBQUMsQ0FBRSxFQUFFLENBQUUsRUFBRSxDQUFFLEVBQUUsQ0FBRSxHQUFHLENBQUUsRUFBRSxDQUFFLEVBQUUsQ0FBRSxFQUFFLENBQUUsR0FBRyxDQUFFLEVBQUUsQ0FBRSxFQUFFLENBQUUsRUFBRSxDQUFFLEVBQUUsQ0FBQyxBQUNyRCxJQUFLLENBQUMsR0FBRyxDQUFDLENBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBRSxDQUFDLEVBQUUsRUFBRSxDQUN2QixHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEFBQ1osRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQUFDWCxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxBQUNYLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxBQUVmLEdBQUksU0FBUyxDQUFFLENBQ2QsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxBQUNaLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFDWixFQUFFLEdBQUcsQUFBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUEsR0FBSSxTQUFTLEdBQUcsSUFBSSxJQUFLLEtBQUssQ0FBRyxHQUFHLENBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQSxBQUFDLENBQUMsQUFDcEUsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUEsSUFBSyxLQUFLLENBQUcsU0FBUyxHQUFHLEdBQUcsQ0FBSSxFQUFFLEtBQUssQ0FBQyxDQUFHLEVBQUUsR0FBRyxFQUFFLENBQUcsQ0FBQyxDQUFDLEFBQUMsQ0FBQyxBQUMzRSxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQSxJQUFLLEtBQUssQ0FBRyxTQUFTLEdBQUcsR0FBRyxDQUFJLEVBQUUsS0FBSyxDQUFDLENBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBRyxDQUFDLENBQUMsQUFBQyxDQUFDLEFBQzNFLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLEFBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFBLElBQUssQUFBQyxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUEsQUFBQyxHQUFJLEdBQUcsQ0FBQSxBQUFDLEdBQUcsQ0FBQyxJQUFLLENBQUMsQ0FBQSxDQUFDLEFBQUMsQ0FBQyxDQUN2RSxLQUFNLENBQ04sRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUEsR0FBSSxTQUFTLEdBQUcsR0FBRyxDQUFDLEFBQ3RDLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFBLEdBQUksU0FBUyxHQUFHLEdBQUcsQ0FBQyxBQUN0QyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQSxHQUFJLENBQUMsQ0FBQyxDQUN4QixBQUNELEVBQUUsSUFBSSxFQUFFLENBQUMsQUFDVCxFQUFFLElBQUksRUFBRSxDQUFDLEFBRVQsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLEFBQ2pCLEdBQUksQ0FBQyxLQUFLLENBQUMsQ0FBRSxDQUNaLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQ1osS0FBTSxDQUNOLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUEsR0FBSSxHQUFHLENBQUM7Q0FDNUMsQUFFRCxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQUFDakIsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLEFBQ2xCLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQyxBQUVsQixHQUFJLElBQUksQ0FBRSxDQUNULEVBQUUsR0FBRyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUUsR0FBRyxDQUFFLEdBQUcsQ0FBRSxFQUFFLENBQUMsQ0FBQyxBQUN4QyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBRSxDQUFDLENBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFDNUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUNSLEtBQU0sQ0FDTixFQUFFLEVBQUUsQ0FBQyxDQUNMLEFBRUQsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUNULEFBQ0QsR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxBQUNaLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLEFBQ1osR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQSxHQUFJLEdBQUcsQ0FBQztBQUNsQyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxBQUN2QixHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxBQUN2QixHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEFBQ3JCLEdBQUksSUFBSSxDQUFFLENBQ1QsRUFBRSxHQUFHLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUUsR0FBRyxDQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEFBQ2hELENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFFLENBQUMsQ0FBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUM1QyxDQUNELENBQ0QsYUFBYSxDQUFHLFNBQWhCLGFBQWEsQ0FBWSxNQUFNLENBQUUsQ0FBQyxDQUFFLFNBQVMsQ0FBRSxPQUFPLENBQUUsQ0FDdkQsSUFBSSxDQUFDLENBQUcsRUFBRSxDQUNULENBQUMsQ0FBRSxDQUFDLENBQUUsRUFBRSxDQUFFLEVBQUUsQ0FBRSxFQUFFLENBQUUsR0FBRyxDQUFDLEFBQ3ZCLEdBQUksT0FBTyxDQUFFLENBQ1osTUFBTSxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEFBQ2xDLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEFBQ2xCLE1BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FDaEIsR0FBSSxRQUFTLEdBQUcsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQUFBRyxLQUFLLFFBQVEsQ0FBRSxHQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFFLENBQzNFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ2xFLENBQ0QsQ0FDRCxBQUNELENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxBQUN0QixHQUFJLENBQUMsR0FBRyxDQUFDLENBQUUsQ0FDVixDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFFLENBQUMsQ0FBRSxDQUFDLENBQUUsTUFBTSxDQUFDLEFBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFJLENBQUMsQ0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEFBQ3BFLE9BQU8sQ0FBQyxDQUFDLENBQ1QsQUFDRCxJQUFLLENBQUMsR0FBRyxDQUFDLENBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBRSxDQUFDLEVBQUUsRUFBRSxDQUN2QixFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEFBQ2xCLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEFBQ3BCLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxFQUFFLENBQUUsQ0FBQyxDQUFFLENBQUMsQ0FBRSxFQUFFLENBQUMsQ0FBQyxBQUNqQyxHQUFJLFNBQVMsQ0FBRSxDQUNkLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEFBQ3BCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUEsR0FBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUEsSUFBSyxFQUFFLEdBQUcsRUFBRSxDQUFBLEFBQUMsQ0FBQyxBQUMvQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFBLEdBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFBLElBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQSxBQUFDLENBQUMsQ0FDL0MsQ0FDRCxBQUNELENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUUsQ0FBQyxDQUFFLENBQUMsQ0FBRSxNQUFNLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFDdkQsT0FBTyxDQUFDLENBQUMsQ0FDVCxDQUNELGFBQWEsQ0FBRyxTQUFoQixhQUFhLENBQVksTUFBTSxDQUFFLFNBQVMsQ0FBRSxTQUFTLENBQUUsS0FBSyxDQUFFLFNBQVMsQ0FBRSxPQUFPLENBQUUsQ0FDakYsSUFBSSxHQUFHLENBQUcsRUFBRSxDQUNYLEtBQUssQ0FBRyxFQUFFLENBQ1YsS0FBSyxDQUFHLE9BQU8sSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQzVCLENBQUMsQ0FBRSxDQUFDLENBQUUsQ0FBQyxDQUFFLENBQUMsQ0FBRSxDQUFDLENBQUUsQ0FBQyxDQUFFLFFBQVEsQ0FBRSxJQUFJLENBQUMsQUFDbEMsU0FBUyxHQUFHLEFBQUMsT0FBTyxTQUFTLEFBQUMsS0FBSyxRQUFRLENBQUksR0FBRyxHQUFDLFNBQVMsR0FBQyxHQUFHLENBQUcsVUFBVSxDQUFDLEFBQzlFLEdBQUksU0FBUyxJQUFJLElBQUksQ0FBRSxDQUN0QixTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQ2QsQUFDRCxJQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDcEIsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUNkO0FBRUQsR0FBSSxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBRSxDQUN0QixJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQUFDakMsUUFBUSxHQUFHLElBQUksQ0FBQyxBQUNoQixDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxBQUNqQixNQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQ2hCLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFDYixHQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBRTtBQUN4QyxRQUFRLEdBQUcsS0FBSyxDQUFDLEFBQ2pCLE1BQU0sQ0FDTixDQUNELEFBQ0QsR0FBSSxRQUFRLENBQUUsQ0FDYixNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQ3pCLEdBQUksT0FBTyxDQUFFLENBQ1osTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUN4QixBQUNELE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFDdkIsT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQ3BDLENBQ0QsQUFDRCxHQUFHLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQUFDekMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQUFDakIsTUFBTyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUNoQixDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEFBQ2IsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFJLFNBQVMsQ0FBQyxPQUFPLENBQUMsR0FBRyxHQUFDLENBQUMsR0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQUFBQyxDQUFDLEFBQ3JELEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFFLENBQUMsQ0FBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUUsT0FBTyxDQUFDLENBQUMsQ0FDekQsQUFDRCxDQUFDLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxBQUNmLE1BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FDaEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFDM0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDM0IsQUFDRCxHQUFJLENBQUMsS0FBSyxDQUFFLENBQ1gsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQUFDakIsTUFBTyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUNoQixHQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBRSxDQUNqQixDQUFDLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEFBQ2xCLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxBQUNqQixJQUFLLENBQUMsR0FBRyxDQUFDLENBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBRSxDQUFDLEVBQUUsRUFBRSxDQUN2QixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEFBQzFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUEsR0FBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQy9CLENBQ0QsQ0FDRCxBQUNELENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLEFBQ2YsTUFBTyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUNoQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUMzQixDQUNELEFBQ0QsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQUFDakIsQ0FBQyxHQUFHLFNBQVMsQ0FBRyxDQUFDLENBQUcsQ0FBQyxDQUFDLEFBQ3RCLE1BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FDaEIsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxBQUNiLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFDWCx1QkFBdUIsQ0FBQyxDQUFDLENBQUUsU0FBUyxDQUFFLFNBQVMsQ0FBRSxLQUFLLENBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEUsR0FBSSxRQUFRLENBQUUsQ0FDYixDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBRSxDQUFDLENBQUMsQ0FBQyxBQUNmLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FDMUIsQ0FDRCxBQUNELE9BQU8sR0FBRyxDQUFDLENBQ1gsQ0FDRCxnQkFBZ0IsQ0FBRyxTQUFuQixnQkFBZ0IsQ0FBWSxNQUFNLENBQUUsSUFBSSxDQUFFLE9BQU8sQ0FBRSxDQUNsRCxJQUFJLEdBQUcsSUFBSSxJQUFJLE1BQU0sQ0FBQyxBQUN0QixJQUFJLEdBQUcsQ0FBRyxFQUFFLENBQ1gsR0FBRyxDQUFHLEFBQUMsSUFBSSxLQUFLLE9BQU8sQ0FBSSxDQUFDLENBQUcsQ0FBQyxDQUNoQyxJQUFJLENBQUksSUFBSSxLQUFLLE1BQU0sQUFBQyxDQUN4QixLQUFLLENBQUcsRUFBRSxDQUNWLENBQUMsQ0FBRSxDQUFDLENBQUUsQ0FBQyxDQUFFLENBQUMsQ0FBRSxHQUFHLENBQUUsQ0FBQyxDQUFFLENBQUMsQ0FBRSxDQUFDLENBQUUsQ0FBQyxDQUFFLEdBQUcsQ0FBRSxHQUFHLENBQUMsQUFDdkMsR0FBSSxJQUFJLElBQUksT0FBTyxDQUFFLENBQ3BCLE1BQU0sR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUNsQyxBQUNELEdBQUksTUFBTSxJQUFJLElBQUksSUFBSSxNQUFNLENBQUMsTUFBTSxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUUsQ0FBRSxNQUFNLHFCQUFxQixDQUFDLENBQUUsQUFDL0UsSUFBSyxDQUFDLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQ3BCLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDZCxBQUNELENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLEFBQ2pCLE1BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FDaEIsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxBQUNiLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLEFBQ2xCLEdBQUcsR0FBRyxDQUFDLENBQUMsQUFDUixDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxBQUNsQixJQUFLLENBQUMsR0FBRyxDQUFDLENBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBRSxDQUFDLEVBQUUsRUFBRSxDQUN2QixDQUFDLEdBQUcsQUFBQyxPQUFPLElBQUksSUFBSSxDQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBRyxBQUFDLFFBQVMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxBQUFHLEtBQUssUUFBUSxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEFBQ2pMLEdBQUksSUFBSSxDQUFFLEdBQUksQ0FBQyxHQUFHLENBQUMsQ0FBRSxHQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFFLENBQ25DLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUMsQ0FBQyxDQUFDLENBQUEsR0FBSSxDQUFDLENBQUMsQ0FDbEMsQUFDRCxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FDZixBQUNELENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxBQUNsQixHQUFHLEdBQUcsQ0FBQyxDQUFDLEFBQ1IsSUFBSyxDQUFDLEdBQUcsQ0FBQyxDQUFFLENBQUMsR0FBRyxDQUFDLENBQUUsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUM1QixDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEFBQ1gsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQUFDYixDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxBQUNiLENBQUMsR0FBRyxBQUFDLEdBQUcsS0FBSyxDQUFDLENBQUksQ0FBQyxDQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQUFDL0IsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLEFBQUMsR0FBRyxLQUFLLENBQUMsQ0FBSSxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUUsQ0FBQyxDQUFFLENBQUMsQ0FBRSxDQUFDLENBQUMsQ0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQSxHQUFJLENBQUMsQ0FBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFBLEdBQUksQ0FBQyxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQy9HLEFBQ0QsR0FBRyxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FDakIsQUFDRCxPQUFPLEdBQUcsQ0FBQyxDQUNYLENBQ0QsZ0JBQWdCLENBQUcsU0FBbkIsZ0JBQWdCLENBQVksQ0FBQyxDQUFFLEtBQUssQ0FBRSxVQUFVLENBQUUsQ0FDakQsSUFBSSxHQUFHLENBQUcsQ0FBQyxHQUFHLFVBQVUsQ0FDdkIsQ0FBQyxDQUFHLENBQUMsQ0FBQyxNQUFNLENBQ1osQ0FBQyxDQUFFLEVBQUUsQ0FBRSxDQUFDLENBQUUsRUFBRSxDQUFFLEVBQUUsQ0FBRSxFQUFFLENBQUUsQ0FBQyxDQUFFLENBQUMsQ0FBRSxHQUFHLENBQUUsR0FBRyxDQUFFLEtBQUssQ0FBQyxBQUM3QyxNQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQ2hCLEdB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Q0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQ3BCLEFBRUQsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEFBQ3ZCLE1BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FDaEIsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFFbkIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFDN0IsTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUksT0FBTyxNQUFNLENBQUMsQ0FBQyxDQUFDLEFBQUMsS0FBSyxVQUFVLEFBQUMsQ0FBQyxBQUM1RCxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQUFBQyxDQUFDLE1BQU0sQ0FBSSxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUcsTUFBTSxDQUFHLEFBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxPQUFPLE1BQU0sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxBQUFDLEtBQUssVUFBVSxDQUFJLENBQUMsQ0FBRyxLQUFLLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBRyxFQUFFLENBQUMsQUFDaEssR0FBSSxDQUFDLE9BQU8sQ0FBRSxHQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUUsQ0FDNUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxDQUNoQixDQUNELEFBQ0QsSUFBSSxDQUFDLFFBQVEsR0FBRyxBQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssV0FBVyxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssTUFBTSxDQUFJLGFBQWEsQ0FBQyxNQUFNLENBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBRyxDQUFDLENBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBRSxLQUFLLENBQUcsSUFBSSxDQUFDLElBQUksS0FBSyxXQUFXLENBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBRSxPQUFPLENBQUMsQ0FBRyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUUsSUFBSSxDQUFDLElBQUksQ0FBRSxLQUFLLENBQUMsQ0FBQyxBQUMzUSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEFBRXpDLEdBQUksSUFBSSxDQUFDLFFBQVEsQ0FBRSxDQUNsQixJQUFJLEVBQUUsQ0FBRyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxBQUN4RCxJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsQUFDekIsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLEFBQzNCLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxBQUM3QixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxBQUM5QyxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFDNUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEFBQ2pDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxBQUMzQixJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUNyQyxBQUVELEdBQUssVUFBVSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUcsQ0FDcEMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEVBQUUsQ0FBQyxBQUM1QixHQUFJLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQyxZQUFZLEtBQUssQ0FBQSxBQUFDLENBQUUsQ0FDdEMsSUFBSSxDQUFDLFdBQVcsR0FBRyxVQUFVLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUM3QyxBQUNELENBQUMsR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLEFBQ3RCLE1BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FDaEIsSUFBSyxDQUFDLEdBQUcsQ0FBQyxDQUFFLENBQUMsR0FBRyxDQUFDLENBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FDdkIsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxBQUNyQixJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLEFBQUMsT0FBTyxNQUFNLENBQUMsQ0FBQyxDQUFDLEFBQUMsS0FBSyxVQUFVLENBQUksTUFBTSxDQUFHLEFBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxPQUFPLE1BQU0sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxBQUFDLEtBQUssVUFBVSxDQUFJLENBQUMsQ0FBRyxLQUFLLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBRyxDQUFHLEtBQUssQ0FBQyxDQUM1SyxBQUNELENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFDckIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDL0Ys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QUFHLENBQUMsQ0FBQSxHQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxBQUMzRCxJQUFJLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FDNUIsQUFDRCxRQUFRLEdBQUcsQ0FBQyxDQUFDO0FBRWIsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsQUFDZCxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxBQUNiLEdBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFFLENBQzFDLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxBQUN0QixNQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBLElBQUssQ0FBQyxFQUFFLEVBQUcsQUFDbEQsSUFBSSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLEFBQ3ZCLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQ2IsS0FBTSxHQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUUsQ0FDakMsTUFBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQSxJQUFLLENBQUMsRUFBRSxFQUFHLEFBQ2xELEdBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBRSxDQUM1QixJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUNiLEtBQU0sQ0FDTixDQUFDLEVBQUUsQ0FBQyxDQUNKLEFBQ0QsSUFBSSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFDckIsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FDYixBQUNELENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFBLElBQUssSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFBLEFBQUMsQ0FBQSxHQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FDOUQsQUFDRCxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxBQUVaLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxBQUN2QixNQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQ2hCLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEFBQ25CLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEFBQy9CLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFBLEFBQUMsQ0FBQSxHQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEFBQ25FLEdBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBRSxDQUNuQixHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUN0QixBQUNELEdBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFFLENBQ1osTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQ2YsS0FBTSxDQUNOLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FDaEIsQ0FDRCxBQUVELEdBQUksSUFBSSxDQUFDLFdBQVcsQ0FBRSxDQUNyQixJQUFJLEVBQUUsQ0FBRyxJQUFJLENBQUMsV0FBVyxDQUN4QixFQUFFLENBQUUsRUFBRSxDQUFFLEVBQUUsQ0FBRSxFQUFFLENBQUUsRUFBRSxDQUFFLEdBQUcsQ0FBRSxJQUFJLENBQUMsQUFDL0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsQUFDZCxNQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQ2hCLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFDYixHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxBQUNwQixJQUFJLEdBQUcsQUFBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFJLENBQUMsQ0FBRyxRQUFRLENBQUMsQUFDMUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFDNUIsRUFBRSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFFN0IsR0FBSSxDQUFDLElBQUksRUFBRSxDQUFFO0FBQ1osQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxBQUNoQixFQUFFLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEFBRWxCLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBLEdBQUksQ0FBQyxDQUFDLEFBQzNCLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBLEdBQUksQ0FBQyxDQUFDLEFBQzNCLEVBQUUsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUEsR0FBSSxDQUFDLENBQUMs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UUFBUSxDQUFDLEFBQ3pCLENBQUMsQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxBQUNuQixDQUFDLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsQUFDckIsQ0FBQyxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLEFBQ3JCLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxBQUNYLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxBQUNYLEdBQUksV0FBVyxDQUFFLENBQ2hCLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxBQUNYLENBQUMsQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxBQUMzQixDQUFDLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsQUFDM0IsQ0FBQyxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQ3JCLEFBQ0QsR0FBSSxDQUFDLENBQUMsT0FBTyxDQUFFLENBQ2QsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQ2pCLEFBQ0QsT0FBTyxDQUFDLENBQUMsQ0FDVDtBQUdELE9BQU8sQ0FBRyxTQUFWLE9BQU8sQ0FBWSxDQUFDLENBQUUsRUFBRSxDQUFFLEVBQUUsQ0FBRSxJQUFJLENBQUUsV0FBVyxDQUFFLENBQ2hELElBQUksSUFBSSxDQUFHLEVBQUUsQ0FDWixLQUFLLENBQUcsQ0FBQyxDQUFDLEtBQUssQ0FDZixHQUFHLENBQUUsQ0FBQyxDQUFFLEdBQUcsQ0FBQyxBQUNiLElBQUssQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUNiLEdBQUksQ0FBQyxLQUFLLFNBQVMsQ0FBRSxHQUFJLENBQUMsS0FBSyxRQUFRLENBQUUsR0FBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUUsR0FBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQSxBQUFDLElBQUss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QUFDLEdBQUcsR0FBRyxDQUFDLENBQ2YsQUFDRCxHQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBRTtBQUMxQixDQUFDLEdBQUcsS0FBSyxDQUFDLENBQ1YsQUFDRCxJQUFJLENBQUMsQ0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUNuQixDQUFDLENBQUcsQUFBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFJLElBQUksQ0FBRyxBQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUksTUFBTSxDQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDbkYsQ0FBQyxDQUFHLEFBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBSSxJQUFJLENBQUcsQUFBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFJLE1BQU0sQ0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFDckYsR0FBSSxDQUFDLElBQUksSUFBSSxDQUFFLENBQ2QsQ0FBQyxHQUFHLEFBQUMsQ0FBQyxLQUFLLFFBQVEsQ0FBSSxLQUFLLENBQUcsR0FBRyxDQUFDLENBQ25DLEtBQU0sR0FBSSxDQUFDLEtBQUssUUFBUSxDQUFFLENBQzFCLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FDVixBQUNELEdBQUksQ0FBQyxLQUFLLFFBQVEsSUFBSyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFBLENBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxBQUFDLENBQUU7QUFDN0UsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUNWLEFBQ0QsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxJQUFJLEFBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFD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QUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFFLEVBQUUsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLElBQUssQUFBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFJLENBQUMsQ0FBRyxRQUFRLENBQUEsQUFBQyxJQUFJLFVBQVUsQ0FBRyxDQUFDLENBQUcsQ0FBQyxDQUFBLEFBQUMsQ0FBQyxBQUNqTCxHQUFJLEtBQUssQ0FBQyxNQUFNLENBQUUsQ0FDakIsR0FBSSxjQUFjLENBQUUsQ0FDbkIsY0FBYyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FDNUIsQUFDRCxHQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUUsQ0FDOUIsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsQUFDaEIsR0FBSSxHQUFHLEtBQUssR0FBRyxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUEsQUFBQyxDQUFFLENBQzVCLEdBQUcsR0FBRyxBQUFDLEdBQUcsR0FBRyxDQUFDLENBQUksR0FBRyxHQUFHLEdBQUcsQ0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQ3hDLENBQ0QsQUFDRCxHQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBRSxDQUN2QyxHQUFHLEdBQUcsQUFBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsVUFBVSxDQUFBLEdBQUksR0FBRyxHQUFJLENBQUMsQUFBQyxHQUFHLEdBQUcsR0FBRyxHQUFJLENBQUMsQ0FBQSxHQUFJLEdBQUcsQ0FBQyxDQUNqRSxLQUFNLEdBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFFLENBQzlDLEdBQUcsR0FBRyxBQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxVQUFVLENBQUEsR0FBSSxHQUFHLEdBQUksQ0FBQyxBQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUksQ0FBQyxDQUFBLEdBQUksR0FBRyxDQUFDLENBQ2pFLENBQ0QsQUFDRCxNQUFNLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUNqQixBQUNELEdBQUksTUFBTSxHQUFHLEdBQUcsSUFBSSxNQUFNLEdBQUcsQ0FBQyxHQUFHLENBQUUsQ0FDbEMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUNYLEFBQ0QsT0FBTyxNQUFNLENBQUMsQ0FDZCxDQUVELFlBQVksQ0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQy9CLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQ2QsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FDcEIsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDYixNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUNoQixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUNoQixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUNkLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQ2QsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FDbkIsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FDbkIsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FDakIsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FDbEIsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FDbEIsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FDbEIsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FDbEIsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FDZixHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUNiLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQ2xCLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQ2hCLFdBQVcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBRTdCLElBQUksQ0FBRyxTQUFQLElBQUksQ0FBWSxDQUFDLENBQUUsRUFBRSxDQUFFLEVBQUUsQ0FBRSxDQUMxQixDQUFDLEdBQUcsQUFBQyxDQUFDLEdBQUcsQ0FBQyxDQUFJLENBQUMsR0FBRyxDQUFDLENBQUcsQUFBQyxDQUFDLEdBQUcsQ0FBQyxDQUFJLENBQUMsR0FBRyxDQUFDLENBQUcsQ0FBQyxDQUFDLEFBQzFDLE9BQU8sQUFBQyxBQUFDLENBQUMsQUFBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBSSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFBLEdBQUksQ0FBQyxHQUFHLENBQUMsQ0FBRyxBQUFDLENBQUMsR0FBRyxHQUFHLENBQUksRUFBRSxDQUFHLEFBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUksRUFBRSxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQSxJQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFBLEFBQUMsR0FBRyxDQUFDLENBQUcsRUFBRSxDQUFBLEdBQUksR0FBRyxHQUFJLEdBQUcsR0FBSSxDQUFDLENBQUMsQ0FDekk7Ozs7O01BUUQsV0FBVyxDQUFHLFNBQVMsQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDLENBQUUsS0FBSyxDQUFFLENBQ3ZELElBQUksQ0FBQyxDQUFFLENBQUMsQ0FBRSxDQUFDLENBQUUsQ0FBQyxDQUFFLENBQUMsQ0FBRSxDQUFDLENBQUUsQ0FBQyxDQUFFLEdBQUcsQ0FBRSxHQUFHLENBQUUsQ0FBQyxDQUFFLE1BQU0sQ0FBQyxBQUM3QyxHQUFJLENBQUMsQ0FBQyxDQUFFLENBQ1AsQ0FBQyxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FDdkIsS0FBTSxHQUFJLE9BQU8sQ0FBQyxBQUFDLEtBQUssUUFBUSxDQUFFLENBQ2xDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUUsQUFBQyxDQUFDLElBQUksQ0FBQyxHQUFJLEdBQUcsQ0FBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FDdkMsS0FBTSxDQUNOLEdBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBRTtBQUNuQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUUsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUM5QixBQUNELEdBQUksWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFFLENBQ3BCLENBQUMsR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDcEIsS0FBTSxHQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFFLENBQy9CLEdBQUksQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUU7QUFDbkIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFDaEIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFDaEIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFDaEIsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUNoQyxBQUNELENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBRSxFQUFFLENBQUMsQ0FBQyxBQUM5QixDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFFLEFBQUMsQ0FBQyxJQUFJLENBQUMsR0FBSSxHQUFHLENBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQ3ZDLEtBQU0sR0FBSSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBRSxDQUFDLENBQUMsS0FBSyxLQUFLLENBQUUsQ0FDcEMsQ0FBQyxHQUFHLE1BQU0sR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEFBQzlCLEdBQUksQ0FBQyxLQUFLLENBQUUsQ0FDWCxDQUFDLEdBQUcsQUFBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFJLEdBQUcsQ0FBQyxBQUMvQixDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxBQUN2QixDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxBQUN2QixDQUFDLEdBQUcsQUFBQyxDQUFDLElBQUksR0FBRyxDQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBLEFBQUMsQ0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQUFDN0MsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEFBQ2QsR0FBSSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBRSxDQUNqQixDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQ3BCLEFBQ0QsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBRSxDQUFDLENBQUUsQ0FBQyxDQUFDLENBQUMsQUFDN0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUUsQ0FBQyxDQUFFLENBQUMsQ0FBQyxDQUFDLEFBQ3JCLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUUsQ0FBQyxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQzdCLEtBQU0sR0FBSSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFFO0FBQ2pDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUMzQixDQUNELEtBQU0sQ0FDTixDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxZQUFZLENBQUMsV0FBVyxDQUFDLENBQ2pELEFBQ0QsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxBQUNwQixDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEFBQ3BCLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFDcEIsR0FBSSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBRSxDQUNqQixDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQ3BCLENBQ0QsQUFDRCxHQUFJLEtBQUssSUFBSSxDQUFDLE1BQU0sQ0FBRSxDQUNyQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxBQUNmLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLEFBQ2YsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQUFDZixHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUUsQ0FBQyxDQUFFLENBQUMsQ0FBQyxDQUFDLEFBQ3hCLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBRSxDQUFDLENBQUUsQ0FBQyxDQUFDLENBQUMsQUFDeEIsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQSxHQUFJLENBQUMsQ0FBQyxBQUNwQixHQUFJLEdBQUcsS0FBSyxHQUFHLENBQUUsQ0FDaEIsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FDVixLQUFNLENBQ04sQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsQUFDZCxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUEsQUFBQyxDQUFHLENBQUMsSUFBSSxHQUFHLEdBQUcsR0FBRyxDQUFBLEFBQUMsQ0FBQyxBQUNwRCxDQUFDLEdBQUcsQUFBQyxHQUFHLEtBQUssQ0FBQyxDQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQSxHQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFHLENBQUMsQ0FBRyxDQUFDLENBQUEsQUFBQyxDQUFHLEFBQUMsR0FBRyxLQUFLLENBQUMsQ0FBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUEsR0FBSSxDQUFDLEdBQUcsQ0FBQyxDQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQSxHQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQUFDbEcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUNS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RUFBRSxDQUFFLEVBQUUsQ0FBRSxFQUFFLENBQUUsRUFBRSxDQUFFLEtBQUssQ0FBRSxLQUFLLENBQUUsRUFBRSxDQUFFLFFBQVEsQ0FBRSxJQUFJLENBQUUsRUFBRSxDQUFFLEdBQUcsQ0FBRSxNQUFNLENBQUMsQUFDdEUsR0FBSSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUUsQ0FDbkQsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLHNCQUFzQixDQUFFLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxBQUNuRSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsc0JBQXNCLENBQUUsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEFBQ25FLENBQUMsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQ2QsQUFDRCxHQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFFO0FBRXBCLEVBQUUsR0FBRyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUEsQ0FBRSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQUFDN0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FDZCxBQUNELEVBQUUsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLEFBQ25CLEVBQUUsQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLEFBQ3ZCLFNBQVMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEFBQ3hCLElBQUssQ0FBQyxHQUFHLENBQUMsQ0FBRSxDQUFDLEdBQUcsQ0FBQyxDQUFFLENBQUMsRUFBRSxFQUFFLENBQ3ZCLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFDWCxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxD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QUUsQ0FBQyxDQUFDLENBQUMsQ0FBRSxHQUFHLENBQUUsSUFBSSxDQUFDLENBQy9DLFVBQVUsQ0FBQyxFQUFFLENBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUcsUUFBUSxDQUFHLEdBQUcsQ0FBRyxHQUFHLENBQUcsSUFBSSxDQUFDLENBQUMsQ0FDckUsQUFFRCxHQUFJLFFBQVEsQ0FBRSxDQUNiLEVBQUUsR0FBRyxBQUFDLEVBQUUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFJLENBQUMsQ0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFDakMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUUsRUFBRSxDQUFFLENBQUMsQUFBQyxFQUFFLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBSSxDQUFDLENBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBLEdBQUksRUFBRSxDQUFFLEdBQUcsQ0FBRSxLQUFLLENBQUMsQ0FBQyxDQUN0RSxDQUNELEFBQ0QsU0FBUyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7Q0FFeEIsS0FBTSxDQUNOLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDOztBQUcxQixHQUFJLENBQUMsS0FBSyxDQUFFLENBQ1gsRUFBRSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFHLEVBQUUsQ0FBQztDQUd4QyxLQUFNLENBQ04sS0FBSyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDN0IsR0FBSSxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLEtBQUssQ0FBQyxNQUFNLENBQUU7QUFFNUMsT0FBTyxFQUFFLENBQUMsQ0FDVixBQUNELEVBQUUsR0FBRyxDQUFDLENBQUMsQUFDUCxJQUFLLEVBQUUsR0FBRyxDQUFDLENBQUUsRUFBRSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUUsRUFBRSxFQUFFLEVBQUUsQ0FDckMsRUFBRSxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxBQUNmLElBQUksR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBRSxFQUFFLENBQUMsQ0FBQyxBQUMxQixFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFFLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBRSxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUUsWUFBWSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBRSxFQUFFLENBQUMsQ0FBRSxFQUFFLENBQUcsU0FBUyxJQUFJLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUUsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFJLEVBQUUsS0FBSyxDQUFDLENBQUUsQ0FBQyxBQUN6SixFQUFFLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FDdEIsQUFDRCxFQUFFLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQ2pDLENBQ0QsQ0FDRDtBQUVELEdBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBRSxHQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUUsQ0FDdkMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQUFDekIsSUFBSyxDQUFDLEdBQUcsQ0FBQyxDQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFFLENBQUMsRUFBRSxFQUFFLENBQzFCLEdBQUcsSUFBSSxFQUFFLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQ3hDLEFBQ0QsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUMxQixBQUNELEdBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFFLENBQ1YsRUFBRSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxBQUNiLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUNkLEFBQ0QsT0FBTyxFQUFFLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQyxDQUN2QixDQUNELENBQUMsQ0FBRyxDQUFDLENBQUMsQUFHUCxDQUFDLEdBQUcsWUFBWSxDQUFDLFNBQVMsQ0FBQyxBQUMzQixDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ2YsTUFBTyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FDZixDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxBQUNoQixDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUNqQixBQUNELENBQUMsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEFBQ1gsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUM7Ozs7Ozs7Ozs7O0tBZTdFLENBQUMsQ0FBQyxVQUFVLEdBQUcsU0FBUyxHQUFHLENBQUUsQ0FBQyxDQUFFLENBQUMsQ0FBRSxHQUFHLENBQUUsQ0FBQyxDQUFFLEdBQUcsQ0FBRSxDQUMvQyxJQUFJLEVBQUUsQ0FBRyxJQUFJLENBQ1osQ0FBQyxDQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQUFDVixFQUFFLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxJQUFJLEFBQUMsR0FBRyxJQUFJLENBQUMsQ0FBSSxHQUFHLEdBQUcsR0FBRyxDQUFHLEdBQUcsSUFBSSxFQUFFLENBQUMsQUFDbkQsR0FBSSxDQUFDLENBQUMsQ0FBRSxHQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFFO0FBQ2xDLEVBQUUsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxFQUFFLENBQUEsQUFBQyxDQUFDLEFBQ2hDLE9BQU8sRUFBRSxDQUFDLENBQ1YsQUFDRCxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQUFDUCxFQUFFLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUcsQ0FBQyxDQUFHLENBQUMsQ0FBQyxBQUM5QixFQUFFLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLElBQUksRUFBRSxDQUFDLEFBQzVCLEdBQUksQ0FBQyxHQUFHLENBQUMsQ0FBRSxDQUNWLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQUFDMUIsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3JCLEVBQUUsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEFBQ2pCLEdBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFFLENBQ2YsRUFBRSxDQUFDLE1BQU0sR0FBRyxJQUFJLFlBQVksQ0FBQyxFQUFFLENBQUUsSUFBSSxHQUFHLENBQUMsQ0FBRSxDQUFDLENBQUUsQ0FBQyxDQUFFLEVBQUUsQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFFLENBQUMsQ0FBRSxFQUFFLENBQUMsQ0FBQyxDQUFFLENBQUMsQ0FBRSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQUFDckYsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0NB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QUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQUFDdkQsRUFBRSxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsc0JBQXNCLENBQUUsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQ3ZELEtBQU0sR0FBSSxHQUFHLENBQUUsQ0FDZixFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxBQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQ1QsQUFDRCxHQUFJLEVBQUUsQ0FBRSxDQUNQLENBQUMsR0FBRyxBQUFDLEVBQUUsQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBSSxFQUFFLENBQUMsTUFBTSxDQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsQUFDcEQsSUFBSyxDQUFDLEdBQUcsQ0FBQyxDQUFFLENBQUMsR0FBRyxDQUFDLENBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FDdkIsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxBQUMvQixDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEFBQy9CLEdBQUksR0FBRyxDQUFFLENBQ1IsRUFBRSxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQUFDcEIsRUFBRSxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQUFDcEIsR0FBSSxFQUFFLEtBQUssRUFBRSxDQUFFLENBQ2QsR0FBSSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUU7QUFDZCxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FDbEMsS0FBTSxHQUFJLEVBQUUs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Q0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxHQUFJLENBQUMsQ0FBQyxDQUFDLENBQ3JHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLEdBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQ3ZHLEFBQ0QsU0FBUyxDQUFDLE9BQU8sR0FBRyxPQUFPLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEFBQy9DLFNBQVMsQ0FBQyxPQUFPLEdBQUcsT0FBTyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxBQUMvQyxHQUFJLFFBQVEsSUFBSSxDQUFDLEtBQUssaUJBQWlCLENBQUU7QUFDeEMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxBQUNULENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFDVCxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEFBQ1QsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxBQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFDVixFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEFBQ1YsV0FBVyxHQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQUFBQyxDQUFDLEFBQzlCLENB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QUNmLEdBQUcsR0FBRyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQUFDbEIsR0FBRyxHQUFHLEdBQUcsR0FBQyxHQUFHLEdBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEFBQ3BCLEdBQUcsR0FBRyxHQUFHLEdBQUMsR0FBRyxHQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxBQUNwQixHQUFHLEdBQUcsR0FBRyxHQUFDLEdBQUcsR0FBQyxFQUFFLENBQUMsT0FBTyxHQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUMvQixBQUNELEVBQUUsQ0FBQyxTQUFTLEdBQUcsS0FBSyxHQUFHLFFBQVEsQ0FBQztBQUVoQyxHQUFJLEtBQUssQ0FBRSxDQUNWLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQUFDdkIsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxBQUN2QixFQUFFLEdBQUcsR0FBRyxHQUFDLEdBQUcsR0FBQyxHQUFHLEdBQUMsR0FBRyxDQUFDLEFBQ3JCLEVBQUUsR0FBRyxHQUFHLEdBQUMsR0FBRyxHQUFDLEdBQUcsR0FBQyxHQUFHLENBQUMsQUFDckIsRUFBRSxHQUFHLEdBQUcsR0FBQyxHQUFHLEdBQUMsR0FBRyxHQUFDLEdBQUcsQ0FBQyxBQUNyQixHQUFHLEdBQUcsR0FBRyxHQUFDLENBQUMsR0FBRyxHQUFDLEdBQUcsR0FBQyxHQUFHLENBQUMsQUFDdkIsR0FBRyxHQUFHLEdBQUcsR0FBQyxDQUFDLEdBQUcsR0FBQyxHQUFHLEdBQUMsR0FBRyxDQUFDLEFBQ3ZCLEdBQUcsR0FBRyxHQUFHLEdBQUMsQ0FBQyxHQUFHLEdBQUMsR0FBRyxHQUFDLEdBQUcsQ0FBQyxBQUN2QixHQUFHLEdBQUcsR0FBRyxHQUFDLENBQUMsR0FBRyxHQUFDLEdBQUcsR0FBQyxHQUFHLENBQUMsQUFDdkIsR0FBRyxHQUFHLEVBQUUsQ0FBQyxBQUNULEdBQUcsR0FBRyxFQUFFLENBQUMsQUFDVCxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQ1Q7QUFFRCxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUUsR0FBRyxDQUFDLENBQUMsQUFDN0IsRUFBRSxDQUFDLFNBQVMsR0FBRyxLQUFLLEdBQUcsUUFBUSxDQUFDLEFBQ2hDLEdBQUksS0FBSyxDQUFFLENBQ1YsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxBQUN2QixHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEFBQ3ZCLEVBQUUsR0FBRyxHQUFHLEdBQUMsR0FBRyxHQUFDLEdBQUcsR0FBQyxHQUFHLENBQUMsQUFDckIsRUFBRSxHQUFHLEdBQUcsR0FBQyxHQUFHLEdBQUMsR0FBRyxHQUFDLEdBQUcsQ0FBQyxBQUNyQixFQUFFLEdBQUcsR0FBRyxHQUFDLEdBQUcsR0FBQyxHQUFHLEdBQUMsR0FBRyxDQUFDLEFBQ3JCLEdBQUcsR0FBRyxHQUFHLEdBQUMsR0FBRyxHQUFDLEdBQUcsR0FBQyxHQUFHLENBQUMsQUFDdEIsR0FBRyxHQUFHLEdBQUcsR0FBQyxHQUFHLEdBQUMsR0FBRyxHQUFDLEdBQUcsQ0FBQyxBQUN0QixHQUFHLEdBQUcsR0FBRyxHQUFDLEdBQUcsR0FBQyxHQUFHLEdBQUMsR0FBRyxDQUFDLEFBQ3RCLEdBQUcsR0FBRyxFQUFFLENBQUMsQUFDVCxHQUFHLEdBQUcsRUFBRSxDQUFDLEFBQ1QsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUNUO0FBRUQsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFFLEdBQUcsQ0FBQyxDQUFDLEFBQzdCLEVBQUUsQ0FBQyxRQUFRLEdBQUcsS0FBSyxHQUFHLFFBQVEsQ0FBQyxBQUMvQixHQUFJLEtBQUssQ0FBRSxDQUNWLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQUFDdkIsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxBQUN2QixHQUFHLEdBQUcsR0FBRyxHQUFDLEdBQUcsR0FBQyxHQUFHLEdBQUMsR0FBRyxDQUFDLEFBQ3RCLEVBQUUsR0FBRyxHQUFHLEdBQUMsR0FBRyxHQUFDLEdBQUcsR0FBQyxHQUFHLENBQUMsQUFDckIsR0FBRyxHQUFHLEdBQUcsR0FBQyxDQUFDLEdBQUcsR0FBQyxHQUFHLEdBQUMsR0FBRyxDQUFDLEFBQ3ZCLEdBQUcsR0FBRyxHQUFHLEdBQUMsQ0FBQyxHQUFHLEdBQUMsR0FBRyxHQUFDLEdBQUcsQ0FBQyxBQUN2QixHQUFHLEdBQUcsRUFBRSxDQUFDLENBQ1QsQUFFRCxHQUFJLEVBQUUsQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLEdBQUcsS0FBSyxDQUFFO0FBQzNFLEVBQUUsQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsQUFDL0IsRUFBRSxDQUFDLFNBQVMsSUFBSSxHQUFHLENBQUMsQ0FDcEIsQUFFRCxFQUFFLENBQUMsTUFBTSxHQUFHLENBQUMsQUFBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUksQ0FBQyxDQUFBLEdBQUksR0FBRyxDQUFDLEFBQ3ZFLEVBQUUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxBQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBSSxDQUFDLENBQUEsR0FBSSxHQUFHLENBQUMsQUFDdkUsRUFBRSxDQUFDLE1BQU0sR0FBRyxDQUFDLEFBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFJLENBQUMsQ0FBQSxHQUFJLEdBQUcsQ0FBQyxBQUN2RSxFQUFFLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxBQUNiLEVBQUUsQ0FBQyxXQUFXLEdBQUcsR0FBRyxDQUFHLENBQUMsSUFBSSxBQUFDLEdBQUcsR0FBRyxDQUFDLENBQUksQ0FBQyxHQUFHLENBQUcsR0FBRyxDQUFBLEFBQUMsQ0FBRyxDQUFDLENBQUMsQUFDeEQsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQUFDWCxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxBQUNYLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLEFBQ1gsR0FBSSxFQUFFLENBQUMsR0FBRyxDQUFFLENBQ1gsRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQyxPQUFPLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFBLEFBQUMsQ0FBQyxBQUMzRCxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDLE9BQU8sR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUEsQUFBQyxDQUFDLENBQzNELENBRUQsS0FBTSxHQUFJLENBQUMsQ0FBQyxXQUFXLElBQUksS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSyxDQUFDLEVBQUUsQ0FBQyxTQUFTLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFLLFNBQVMsSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFFLFNBQVMsQ0FBRSxFQUFFLENBQUMsS0FBSyxNQUFNLENBQUEsQUFBQyxDQUFFO0FBQ3pMLElBQUksQ0FBQyxDQUFJLENBQUMsQ0FBQyxNQUFNLElBQUksQ0FBQyxBQUFDLENBQ3RCLENBQUMsQ0FBRyxDQUFDLENBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFHLENBQUMsQ0FDaEIsQ0FBQyxDQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQ2IsQ0FBQyxDQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQ2IsQ0FBQyxDQUFHLENBQUMsQ0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUcsQ0FBQyxDQUFDLEFBQ2xCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxBQUNqQixFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQUFDakIsTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQUFDbEMsTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQUFDbEMsUUFBUSxHQUFHLEFBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBSSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBRSxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUcsRUFBRSxDQUFDLFFBQVEsSUFBSSxDQUFDLENBQUM7QUFDckUsS0FBSyxHQUFHLEFBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBSSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBRSxDQUFDLENBQUMsR0FBRyxRQUFRLEdBQUcsUUFBUSxDQUFHLEVBQUUsQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLEFBQzFFLEdBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUUsQ0FDbEQsR0FBSSxJQUFJ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R0FBRyxRQUFRLEdBQUcsQ0FBQyxDQUNwRyxFQUFFLENBQUcsQ0FBQyxDQUFDLENBQUMsR0FBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsR0FBRyxHQUFHLEFBQUMsQ0FDakMsRUFBRSxDQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLEdBQUcsR0FBRyxBQUFDLENBQ2pDLEVBQUUsQ0FBRSxFQUFFLENBQUM7QUFHUixHQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksSUFBSSxDQUFFLENBQ2pCLEVBQUUsR0FBRyxDQUFDLEFBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQSxHQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQUFDaEQsRUFBRSxHQUFHLENBQUMsQUFBQyxDQUFDLENBQUMsR0FBRyxDQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBRyxDQUFDLENBQUMsRUFBRSxDQUFBLEdBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxBQUNoRCxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQSxBQUFDLENBQUMsQUFDN0IsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUEsQUFBQyxDQUFDLENBQzdCLEFBRUQsR0FBSSxDQUFDLElBQUksQ0FBRSxDQUNWLENBQUMsSUFBSSwrQkFBK0IsQ0FBQyxDQUNyQyxLQUFNLENBQ04sRUFBRSxHQUFJLENBQUMsR0FBRyxDQUFDLEFBQUMsQ0FBQyxBQUNiLEVBQUUsR0FBSSxDQUFDLEdBQUcsQ0FBQyxBQUFDLENBQUM7QUFFYixDQUFDLElBQUksT0FBTyxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUEsQUFBQyxHQUFHLEVBQUUsQ0FBQSxBQUFDLEdBQUcsT0FBTyxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUEsQUFBQyxHQUFHLEVBQUUsQ0FBQSxBQUFDLEdBQUcsR0FBRyxDQUFDLENBQzdGLEFBQ0QsR0FBSSxPQUFPLENBQUMsT0FBTyxDQUFDLG9DQUFvQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUUsQ0FDakUsS0FBSyxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUNuRCxLQUFNLENBQ04sS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLE9BQU8sQ0FBQztDQUNqQztBQUdELEdBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFFLEdBQUksQ0FBQyxLQUFLLENBQUMsQ0FBRSxHQUFJLENBQUMsS0FBSyxDQUFDLENBQUUsR0FBSSxDQUFDLEtBQUssQ0FBQyxDQUFFLEdBQUksQ0FBQyxLQUFLLENBQUMsQ0FBRSxHQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUUsR0FBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxHQUFHLENBQUUsR0FBSSxPQUFPLENBQUMsT0FBTyxDQUFDLFdBQVcsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUUsQ0FDOVAsS0FBSyxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUNoQztBQUdELEdBQUksQ0FBQyxJQUFJLENBQUUsQ0FDVixJQUFJLElBQUksQ0FBRyxBQUFDLE9BQU8sR0FBRyxDQUFDLENBQUksQ0FBQyxDQUFHLENBQUMsQ0FBQztBQUNoQyxJQUFJLENBQUUsSUFBSSxDQUFFLEdBQUcsQ0FBQyxBQUNqQixFQUFFLEdBQUcsQ0FBQyxDQUFDLFNBQVMsSUFBSSxDQUFDLENBQUMsQUFDdEIsRUFBRSxHQUFHLENBQUMsQ0FBQyxTQUFTLElBQUksQ0FBQyxDQUFDLEFBQ3RCLENBQUMsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUcsQ0FBQyxDQUFDLENBQUcsQ0FBQyxDQUFBLEdBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBRyxDQUFDLENBQUMsQ0FBRyxDQUFDLENBQUEsR0FBSSxDQUFDLENBQUEsQ0FBQyxHQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxBQUN2RixDQUFDLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFHLENBQUMsQ0FBQyxDQUFHLENBQUMsQ0FBQSxHQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUcsQ0FBQyxDQUFDLENBQUcsQ0FBQyxDQUFBLEdBQUksQ0FBQyxDQUFBLENBQUMsR0FBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQUFDdkYsSUFBSyxDQUFDLEdBQUcsQ0FBQyxDQUFFLENBQUMsR0FBRyxDQUFDLENBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FDdkIsSUFBSSxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxBQUNuQixJQUFJLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBRWhCLEdBQUcsR0FBRyxBQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUUsSUFBSSxDQUFFLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxBQUMzSSxHQUFJLEdBQUcsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUUsQ0FDcEIsR0FBRyxHQUFHLEFBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUcsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO0NBQzVDLEtBQU0sQ0FDTixHQUFHLEdBQUcsQUFBQyxDQUFDLEdBQUcsQ0FBQyxDQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQ3BELEFBQ0QsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUUsR0FBRyxHQUFHLEdBQUcsSUFBSSxBQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBSSxDQUFDLENBQUcsSUFBSSxDQUFBLEFBQUMsQ0FBRSxDQUFBLEdBQUksSUFBSSxDQUFDLENBQzdGLENBQ0QsQ0FDRDs7Ozs7O0tBVUQsa0JBQWtCLENBQUcsVUFBVSxDQUFDLG1CQUFtQixHQUFHLFVBQVUsQ0FBQyxpQkFBaUIsR0FBRyxTQUFTLENBQUMsQ0FBRSxDQUNoRyxJQUFJLENBQUMsQ0FBRyxJQUFJLENBQUMsSUFBSTtBQUNoQixLQUFLLENBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQ3BCLEtBQUssQ0FBRyxDQUFDLENBQUMsUUFBUSxDQUNsQixTQUFTLENBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FDdkIsU0FBUyxDQUFHLENBQUMsQ0FBQyxTQUFTLENBQ3ZCLEVBQUUsQ0FBRyxDQUFDLENBQUMsTUFBTSxDQUNiLEVBQUUsQ0FBRyxDQUFDLENBQUMsTUFBTSxDQUNiLEVBQUUsQ0FBRyxDQUFDLENBQUMsTUFBTSxDQUNiLENBQUMsQ0FBRyxDQUFDLENBQUMsQ0FBQyxDQUNQLENBQUMsQ0FBRyxDQUFDLENBQUMsQ0FBQyxDQUNQLENBQUMsQ0FBRyxDQUFDLENBQUMsQ0FBQyxDQUNQLEtBQUssQ0FBRyxDQUFDLENBQUMsR0FBRyxDQUNiLFdBQVcsQ0FBRyxDQUFDLENBQUMsV0FBVyxDQUMzQixPQUFPLENBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FDbkIsR0FBRyxDQUFFLEdBQUcsQ0FBRSxHQUFHLENBQUUsR0FBRyxDQUFFLEdBQUcsQ0FBRSxHQUFHLENBQUUsR0FBRyxDQUFFLEdBQUcsQ0FBRSxHQUFHLENBQUUsR0FBRyxDQUFFLEdBQUcsQ0FBRSxHQUFHLENBQzFELE9BQU8sQ0FBRSxHQUFHLENBQUUsR0FBRyxDQUFFLEdBQUcsQ0FBRSxFQUFFLENBQUUsRUFBRSxDQUFFLFNBQVMsQ0FBRSxLQUFLLENBQUUsSUFBSSxDQUFFLElBQUksQ0FBRSxHQUFHLENBQUM7QUFFbkUsR0FBSSxBQUFDLENBQUMsQUFBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQSxJQUFLLE9BQU8sS0FBSyxNQUFNLEtBQUssSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLEtBQUssSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQSxBQUFDLElBQUssQ0FBQyxPQUFPLENBQUEsSUFBSyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLFNBQVMsSUFBTSxvQkFBb0IsSUFBSSxLQUFLLEFBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBRTs7QUFHelAsR0FBSSxLQUFLLElBQUksQ0FBQyxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUUsQ0FDOUIsS0FBSyxJQUFJLFFBQVEsQ0FBQyxBQUNsQixJQUFJLEdBQUcsQ0FBQyxDQUFDLEtBQUssR0FBRyxRQUFRLENBQUMsQUFDMUIsR0FBRyxHQUFHLE1BQU0sQ0FBQyxBQUNiLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxBQUMzQixHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxL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QixHQUFJLENBQUMsQ0FBQyxLQUFLLENBQUUsQ0FDWixLQUFLLElBQUksQ0FBQyxDQUFDLEtBQUssR0FBRyxRQUFRLENBQUMsQUFDNUIsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQUFDdEIsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQUFDdEIsR0FBSSxDQUFDLENBQUMsUUFBUSxLQUFLLFFBQVEsQ0FBRTtBQUM1QixFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxDQUFDLEFBQ2xDLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQUFDNUIsR0FBRyxJQUFJLEVBQUUsQ0FBQyxBQUNWLEdBQUcsSUFBSSxFQUFFLENBQUMsQUFDVixHQUFJLENBQUMsQ0FBQyxLQUFLLENBQUUsQ0FDWixHQUFHLElBQUksRUFBRSxDQUFDLEFBQ1YsR0FBRyxJQUFJLEVBQUUsQ0FBQyxDQUNWLENBQ0QsQ0FDRCxBQUNELEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxBQUNYLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FFVixLQUFNLEdBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxTQUFTLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsSUFBSSxDQUFDLEtBQUssQ0FBRTtBQUMxRSxLQUFLLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxBQUFDLENBQUMsQ0FBQyxRQUFRLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBSSxZQUFZLEdBQUcsQ0FBQyxDQUFDLFFBQVEsR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDLFFBQVEsR0FBRyxpQkFBaUIsQ0FBRyxjQUFjLENBQUEsR0FBSSxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsR0FBRyxLQUFLLEdBQUcsQ0FBQyxHQUFFLEtBQUssSUFBSSxBQUFDLEVBQUUsS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBSSxTQUFTLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxDQUFHLEVBQUUsQ0FBQSxBQUFDLENBQUMsQUFDL08sT0FBTyxDQUNQLEtBQU0sQ0FDTixHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxBQUNkLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQ2Q7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBcUJELEdBQUcsR0FBRyxDQUFDLENBQUMsQUFDUixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQUFDdEMsR0FBRyxHQUFHLEFBQUMsV0FBVyxDQUFJLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBRyxDQUFDLENBQUMsQUFDM0MsT0FBTyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQUFDcEIsR0FBRyxHQUFHLFFBQVEsQ0FBQztBQUNmLEtBQUssR0FBRyxHQUFHLENBQUMsQUFDWixJQUFJLEdBQUcsR0FBRyxDQUFDLEFBQ1gsS0FBSyxHQUFHLFNBQVMsR0FBRyxRQUFRLENBQUMsQUFDN0IsR0FBSSxLQUFLLENBQUUsQ0FDVixHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxBQUN0QixHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxBQUN0QixHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQUFDWCxHQUFHLEdBQUcsR0FBRyxHQUFDLENBQUMsR0FBRyxDQUFDLEFBQ2YsR0FBRyxHQUFHLEdBQUcsR0FBQyxHQUFHLENBQUMsQUFDZCxHQUFHLEdBQUcsR0FBRyxHQUFDLEdBQUcsQ0FBQyxBQUNkLEdBQUcsR0FBRyxHQUFHLENBQUMsQUFDVixHQUFHLElBQUksR0FBRyxDQUFDLEFBQ1gsR0FBRyxJQUFJLEdBQUcsQ0FBQyxBQUNYLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FDWCxBQUNELEtBQUssR0FBRyxTQUFTLEdBQUcsUUFBUSxDQUFDLEFBQzdCLEdBQUksS0FBSyxDQUFFLENBQ1YsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQUFDdEIsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQUFDdEIsRUFBRSxHQUFHLEdBQUcsR0FBQyxHQUFHLEdBQUMsR0FBRyxHQUFDLEdBQUcsQ0FBQyxBQUNyQixFQUFFLEdBQUcsR0FBRyxHQUFDLEdBQUcsR0FBQyxHQUFHLEdBQUMsR0FBRyxDQUFDLEFBQ3JCLEdBQUcsR0FBRyxHQUFHLEdBQUMsR0FBRyxDQUFDLEFBQ2QsR0FBRyxHQUFHLEdBQUcsR0FBQyxHQUFHLENBQUMsQUFDZCxHQUFHLEdBQUcsR0FBRyxHQUFDLENBQUMsR0FBRyxHQUFDLEdBQUcsR0FBQyxHQUFHLENBQUMsQUFDdkIsR0FBRyxHQUFHLEdBQUcsR0FBQyxDQUFDLEdBQUcsR0FBQyxHQUFHLEdBQUMsR0FBRyxDQUFDLEFBQ3ZCLEdBQUcsR0FBRyxHQUFHLEdBQUMsR0FBRyxDQUFDLEFBQ2QsR0FBRyxHQUFHLEdBQUcsR0FBQyxHQUFHLENBQUMsQUFDZCxHQUFHLEdBQUcsRUFBRSxDQUFDLEFBQ1QsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUNULEFBQ0QsR0FBSSxFQUFFLEtBQUssQ0FBQyxDQUFFLENBQ2IsR0FBRyxJQUFFLEVBQUUsQ0FBQyxBQUNSLEdBQUcsSUFBRSxFQUFFLENBQUMsQUFDUixHQUFHLElBQUUsRUFBRSxDQUFDLEFBQ1IsR0FBRyxJQUFFLEVBQUUsQ0FBQyxDQUNSLEFBQ0QsR0FBSSxFQUFFLEtBQUssQ0FBQyxDQUFFLENBQ2IsR0FBRyxJQUFFLEVBQUUsQ0FBQyxBQUNSLEdBQUcsSUFBRSxFQUFFLENBQUMsQUFDUixHQUFHLElBQUUsRUFBRSxDQUFDLEFBQ1IsR0FBRyxJQUFFLEVBQUUsQ0FBQyxDQUNSLEFBQ0QsR0FBSSxFQUFFLEtBQUssQ0FBQyxDQUFFLENBQ2IsR0FBRyxJQUFFLEVBQUUsQ0FBQyxBQUNSLEdBQUcsSUFBRSxFQUFFLENBQUMsQUFDUixHQUFHLElBQUUsRUFBRSxDQUFDLEFBQ1IsR0FBRyxJQUFFLEVBQUUsQ0FBQyxDQUNSLEFBRUQsR0FBSSxPQUFPLElBQUksS0FBSyxDQUFFLENBQ3JCLEdBQUksT0FBTyxDQUFFLENBQ1osQ0FBQyxJQUFJLEdBQUcsR0FBQyxDQUFDLE9BQU8sQ0FBQyxBQUNsQixDQUFDLElBQUksR0FBRyxHQUFDLENBQUMsT0FBTyxDQUFDLEFBQ2xCLENBQUMsSUFBSSxHQUFHLEdBQUMsQ0FBQyxPQUFPLEdBQUMsT0FBTyxDQUFDLENBQzFCLEFBQ0QsR0FBSSxLQUFLLENBQUU7QUFDVixDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUMsT0FBTyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQSxBQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxBQUNqRSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUMsT0FBTyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQSxBQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUNqRSxBQUNELEdBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUUsQ0FDeEIsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUNULEFBQ0QsR0FBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBRSxDQUN4QixDQUFDLEdBQUcsSUFBSSxDQUFDLENBQ1QsQUFDRCxHQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFFLENBQ3hCLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDTixDQUNEO0FBR0QsU0FBUyxHQUFJLEFBQUMsQ0FBQyxDQUFDLFFBQVEsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFJLFlBQVksR0FBRyxDQUFDLENBQUMsUUFBUSxHQUFHLElBQUksR0FBRyxDQUFDLENBQUMsUUFBUSxHQUFHLGNBQWMsQ0FBRyxXQUFXLEFBQUMsQ0FBQyxBQUN4SCxTQUFTLElBQUksQ0FBQyxBQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFJLElBQUksQ0FBRyxHQUFHLENBQUEsR0FBSSxLQUFLLElBQUksQUFBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBSSxJQUFJLENBQUcsR0FBRyxDQUFBLEFBQUMsR0FBRyxLQUFLLElBQUksQUFBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBSSxJQUFJLENBQUcsR0FBRyxDQUFBLEFBQUMsQ0FBQyxBQUM1SixTQUFTLElBQUksS0FBSyxJQUFJLEFBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUksSUFBSSxDQUFHLEdBQUcsQ0FBQSxBQUFDLEdBQUcsS0FBSyxJQUFJLEFBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUksSUFBSSxDQUFHLEdBQUcsQ0FBQSxBQUFDLEdBQUcsS0FBSyxJQUFJLEFBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUksSUFBSSxDQUFHLEdBQUcsQ0FBQSxBQUFDLENBQUMsQUFDcEssR0FBSSxTQUFTLElBQUksU0FBUyxDQUFFO0FBQzNCLFNBQVMsSUFBSSxLQUFLLElBQUksQUFBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBSSxJQUFJLENBQUcsR0FBRyxDQUFBLEFBQUMsR0FBRyxLQUFLLElBQUksQUFBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBSSxJQUFJLENBQUcsR0FBRyxDQUFBLEFBQUMsR0FBRyxLQUFLLElBQUksQUFBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBSSxJQUFJLENBQUcsR0FBRyxDQUFBLEFBQUMsQ0FBQyxBQUNwSyxTQUFTLElBQUksS0FBSyxJQUFJLEFBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUksSUFBSSxDQUFHLEdBQUcsQ0FBQSxBQUFDLEdBQUcsS0FBSyxJQUFJLEFBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUksSUFBSSxDQUFHLEdBQUcsQ0FBQSxBQUFDLEdBQUcsS0FBSyxJQUFJLEFBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUksSUFBSSxDQUFHLEdBQUcsQ0FBQSxBQUFDLEdBQUcsS0FBSyxDQUFDLENBQzVLLEtBQU0sQ0FDTixTQUFTLElBQUksZUFBZSxDQUFDLENBQzdCLEFBQ0QsU0FBUyxJQUFJLENBQUMsR0FBRyxLQUFLLEdBQUcsQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDLEdBQUcsS0FBSyxJQUFJLFdBQVcsQ0FBSSxDQUFDLEdBQUksQ0FBQyxDQUFDLEdBQUcsV0FBVyxBQUFDLENBQUksQ0FBQyxDQUFBLEFBQUMsR0FBRyxHQUFHLENBQUMsQUFFcEcsS0FBSyxDQUFDLGNBQWMsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUNsQyxDQUFDLEFBRUgsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsQUFDeEIsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsQUFDL0ksQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEFBRW5DLDJCQUEyQixDQUFDLDRSQUE0UixDQUFFLENBQUMsTUFBTSxDQUFDLGdCQUFTLENBQUMsQ0FBRSxDQUFDLENBQUUsQ0FBQyxDQUFFLElBQUksQ0FBRSxFQUFFLENBQUUsTUFBTSxDQUFFLElBQUksQ0FBRSxDQUMzVyxHQUFJLElBQUksQ0FBQyxvQkFBb0IsS0FBSyxJQUFJLENBQUUsQ0FBRSxPQUFPLEVBQUUsQ0FBQyxDQUFFO0FBQ3RELElBQUksQ0FBQyxvQkFBb0IsR0FBRyxJQUFJLENBQUMsQUFDakMsSUFBSSxtQkFBbUIsQ0FBRyxDQUFDLENBQUMsWUFBWSxDQUN2QyxLQUFLLENBQUcsQ0FBQyxDQUFDLEtBQUssQ0FDZixHQUFHLENBQUcsUUFBUSxDQUNkLENBQUMsQ0FBRyxlQUFlLENBQUMsTUFBTSxDQUMxQixDQUFDLENBQUcsSUFBSSxDQUNSLFlBQVksQ0FBRyxFQUFFLENBQ2pCLHFCQUFxQixDQUFHLGlCQUFpQixDQUN6QyxFQUFFLENBQUUsRUFBRSxDQUFFLEtBQUssQ0FBRSxJQUFJLENBQUUsSUFBSSxDQUFFLEtBQUssQ0FBRSxTQUFTLENBQUUsRUFBRSxDQUFFLENBQUMsQ0FBRSxDQUFDLENBQUMsQUFDdkQsR0FBSSxJQUFJLENBQUMsT0FBTyxDQUFFO0FBQ2pCLElBQUksR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFFLFNBQVMsQ0FBQyxDQUFDLEFBQy9CLEtBQUssQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLEFBQ3hCLEVBQUUsR0FBRyxhQUFhLENBQUMsQ0FBQyxDQUFFLEdBQUcsQ0FBRSxJQUFJLENBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLEFBQ3RELEtBQUssQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLENBQ3JCLEtBQU0sQ0FDTixFQUFFLEdBQUcsYUFBYSxDQUFDLENBQUMsQ0FBRSxHQUFHLENBQUUsSUFBSSxDQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUN0RCxBQUNELElBQUksQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDLEFBQ3JCLEdBQUksT0FBTyxDQUFDLENBQUMsU0FBUyxBQUFDLEtBQUssUUFBUSxJQUFJLGNBQWMsQ0FBRTtBQUN2RCxJQUFJLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQztBQUN0QixJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxBQUNuQyxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztBQUN2QixJQUFJLENBQUMsUUFBUSxHQUFHLFVBQVUsQ0FBQyxBQUMzQixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxBQUNoQyxFQUFFLEdBQUcsYUFBYSxDQUFDLFFBQVEsQ0FBRSxJQUFJLENBQUUsS0FBSyxDQUFDLENBQUMsQUFDMUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUMsQUFDaEMsR0FBSSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUUsQ0FDcEIsRUFBRSxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDO0NBQ2hDLEFBQ0QsR0FBSSxDQUFDLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBRSxDQUN2QixFQUFFLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUNqRCxBQUNELEdBQUksQ0FBQyxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUUsQ0FDdkIsRUFBRSxDQUFDLFFBQVEsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBRSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FDakQsQ0FDRCxLQUFNLEdBQUksT0FBTyxDQUFDLEFBQUMsS0FBSyxRQUFRLENBQUU7QUFDbEMsRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxBQUFDLENBQUMsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFJLENBQUMsQ0FBQyxNQUFNLENBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBRSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQ3pFLE1BQU0sQ0FBQyxTQUFTLENBQUMsQUFBQyxDQUFDLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBSSxDQUFDLENBQUMsTUFBTSxDQUFHLENBQUMsQ0FBQyxLQUFLLENBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUNwRSxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUNyQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUN0QixDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUN0QixDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUN0QixRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUMzQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUMzQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxvQkFBb0IsQ0FBRSxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxBQUNoRSxFQUFFLEdBQUcsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLEFBQzNCLEdBQUksRUFBRSxJQUFJLElBQUksQ0FBRSxDQUNmLEdBQUksT0FBTyxFQUFFLEFBQUMsS0FBSyxRQUFRLENBQUUsQ0FDNUIsSUFBSyxJQUFJLElBQUksRUFBRSxFQUFFLENBQ2hCLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FDbkIsQ0FDRCxLQUFNLENBQ04sQ0FBQyxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUMsQ0FDaEIsQ0FDRCxBQUNELEdBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxBQUFDLEtBQUssUUFBUSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFFLENBQ3hELEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEFBQ1QsRUFBRSxDQUFDLFFBQVEsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBRSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FDMUMsQUFDRCxHQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsQUFBQyxLQUFLLFFBQVEsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBRSxDQUN4RCxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxBQUNULEVBQUUsQ0FBQyxRQUFRLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQzFDLEFBRUQsRUFBRSxDQUFDLFFBQVEsR0FBRyxXQUFXLENBQUMsQUFBQyxVQUFVLElBQUksQ0FBQyxDQUFJLENBQUMsQ0FBQyxRQUFRLENBQUcsQUFBQyxlQUFlLElBQUksQ0FBQyxDQUFJLENBQUMsQ0FBQyxhQUFhLEdBQUcsUUFBUSxDQUFHLEFBQUMsV0FBVyxJQUFJLENBQUMsQ0FBSSxDQUFDLENBQUMsU0FBUyxDQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBRSxVQUFVLENBQUUsWUFBWSxDQUFDLENBQUMsQUFDeE0sR0FBSSxXQUFXLENBQUUsQ0FDaEIsRUFBRSxDQUFDLFNBQVMsR0FBRyxXQUFXLENBQUMsQUFBQyxXQUFXLElBQUksQ0FBQyxDQUFJLENBQUMsQ0FBQyxTQUFTLENBQUcsQUFBQyxnQkFBZ0IsSUFBSSxDQUFDLENBQUksQ0FBQyxDQUFDLGNBQWMsR0FBRyxRQUFRLENBQUcsRUFBRSxDQUFDLFNBQVMsSUFBSSxDQUFDLENBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBRSxXQUFXLENBQUUsWUFBWSxDQUFDLENBQUMsQUFDbEwsRUFBRSxDQUFDLFNBQVMsR0FBRyxXQUFXLENBQUMsQUFBQyxXQUFXLElBQUksQ0FBQyxDQUFJLENBQUMsQ0FBQyxTQUFTLENBQUcsQUFBQyxnQkFBZ0IsSUFBSSxDQUFDLENBQUksQ0FBQyxDQUFDLGNBQWMsR0FBRyxRQUFRLENBQUcsRUFBRSxDQUFDLFNBQVMsSUFBSSxDQUFDLENBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBRSxXQUFXLENBQUUsWUFBWSxDQUFDLENBQUMsQ0FDbEwsQUFDRCxFQUFFLENBQUMsS0FBSyxHQUFHLEFBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUksRUFBRSxDQUFDLEtBQUssQ0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBRSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7QUFHekUsRUFBRSxDQUFDLEtBQUssR0FBRyxBQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFJLEVBQUUsQ0FBQyxLQUFLLENBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEFBQ3pFLEdBQUssS0FBSyxHQUFHLEVBQUUsQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBRyxDQUNsQyxFQUFFLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxBQUNsQixFQUFFLENBQUMsUUFBUSxJQUFJLEtBQUssQ0FBQyxDQUNyQixDQUNELEFBQ0QsR0FBSSxXQUFXLElBQUksQ0FBQyxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUUsQ0FDckMsRUFBRSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLEFBQ3ZCLFNBQVMsR0FBRyxJQUFJLENBQUMsQ0FDakIsQUFFRCxFQUFFLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDLFFBQVEsSUFBSSxTQUFTLENBQUMsZUFBZSxDQUFDLEFBRXJFLEtBQUssR0FBSSxFQUFFLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLFNBQVMsSUFBSSxFQUFFLENBQUMsU0FBUyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLFNBQVMsSUFBSSxFQUFFLENBQUMsU0FBUyxJQUFJLEVBQUUsQ0FBQyxXQUFXLEFBQUMsQ0FBQyxBQUN2SCxHQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFFLENBQzlCLEVBQUUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0NBQ2QsQUFFRCxNQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQ2hCLENBQUMsR0FBRyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFDdkIsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFDckIsR0FBSSxJQUFJLEdBQUcsR0FBRyxJQUFJLElBQUksR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUUsQ0FDckUsU0FBUyxHQUFHLElBQUksQ0FBQyxBQUNqQixFQUFFLEdBQUcsSUFBSSxZQUFZLENBQUMsRUFBRSxDQUFFLENBQUMsQ0FBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUUsSUFBSSxDQUFFLEVBQUUsQ0FBQyxDQUFDLEFBQzlDLEdBQUksQ0FBQyxJQUFJLFlBQVksQ0FBRSxDQUN0QixFQUFFLENBQUMsQ0FBQyxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUN2QixBQUNELEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0FBQ1gsRUFBRSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsQUFDbkIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQ2hDLENBQ0QsQUFFRCxJQUFJLEdBQUcsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxBQUN6QixHQUFJLEVBQUUsQ0FBQyxHQUFHLEtBQUssSUFBSSxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUEsQUFBQyxDQUFFLENBQ3BDLENBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDO0FBQ2YsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsQUFDZixlQUFlLENBQUMsQ0FBQyxDQUFFLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBRSxFQUFFLENBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBRSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQUFDMUUsRUFBRSxHQUFHLHdCQUF3QixDQUFDLEVBQUUsQ0FBRSxTQUFTLENBQUUsQ0FBQyxtQkFBbUIsQ0FBRyxFQUFFLENBQUcsRUFBRSxDQUFBLENBQUUsT0FBTyxDQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUUsRUFBRSxDQUFFLHFCQUFxQixDQUFDLENBQUM7QUFDN0gsRUFBRSxHQUFHLHdCQUF3QixDQUFDLEVBQUUsQ0FBRSxTQUFTLENBQUUsQ0FBQyxtQkFBbUIsQ0FBRyxFQUFFLENBQUcsRUFBRSxDQUFBLENBQUUsT0FBTyxDQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUUsRUFBRSxDQUFFLHFCQUFxQixDQUFDLENBQUMsQUFDN0gsR0FBSSxDQUFDLEtBQUssRUFBRSxDQUFDLE9BQU8sSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLE9BQU8sQ0FBRSxDQUN6QyxFQUFFLEdBQUcsd0JBQXdCLENBQUMsRUFBRSxDQUFFLFNBQVMsQ0FBRyxtQkFBbUIsQ0FBRyxDQUFDLENBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBRyxFQUFFLENBQUMsT0FBTyxDQUFFLEVBQUUsQ0FBRSxxQkFBcUIsQ0FBQyxDQUFDLEFBQzVILEVBQUUsR0FBRyx3QkFBd0IsQ0FBQyxFQUFFLENBQUUsU0FBUyxDQUFHLG1CQUFtQixDQUFHLENBQUMsQ0FBRyxFQUFFLENBQUMsT0FBTyxDQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUUsRUFBRSxDQUFFLHFCQUFxQixDQUFDLENBQUMsQ0FDNUgsQUFDRCxJQUFJLEdBQUcsb0JBQW9CLENBQUcsSUFBSSxDQUFHLFNBQVMsQ0FBQztDQUMvQyxBQUNELEdBQUksSUFBSSxJQUFLLFdBQVcsSUFBSSxLQUFLLElBQUksRUFBRSxDQUFDLE9BQU8sQUFBQyxDQUFFO0FBQ2pELEdBQUksY0FBYyxDQUFFLENBQ25CLFNBQVMsR0FBRyxJQUFJLENBQUMsQUFDakIsQ0FBQyxHQUFHLG9CQUFvQixDQUFDLEFBQ3pCLElBQUksR0FBRyxDQUFDLElBQUksSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFFLENBQUMsQ0FBRSxHQUFHLENBQUUsS0FBSyxDQUFFLFNBQVMsQ0FBQyxDQUFBLEdBQUksRUFBRSxDQUFDO0FBQzdELEVBQUUsR0FBRyxJQUFJLFlBQVksQ0FBQyxLQUFLLENBQUUsQ0FBQyxDQUFFLENBQUMsQ0FBRSxDQUFDLENBQUUsRUFBRSxDQUFFLENBQUMsQ0FBQyxDQUFFLHFCQUFxQixDQUFDLENBQUMsQUFDckUsRUFBRSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFDaEIsRUFBRSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsQUFDbkIsR0FBSSxXQUFXLENBQUUsQ0FDaEIsSUFBSSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsQUFDbEIsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQUFDdkIsRUFBRSxDQUFDLE9BQU8sR0FBRyxDQUFDLEFBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksRUFBRSxJQUFJLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxLQUFLLENBQUEsQUFBQyxDQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBRyxJQUFJLENBQUEsSUFBSyxDQUFDLENBQUM7QUFDekcsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQSxBQUFDLEdBQUcsTUFBTSxDQUFDO0FBQzVELEVBQUUsR0FBRyxJQUFJLFlBQVksQ0FBQyxFQUFFLENBQUUsU0FBUyxDQUFFLENBQUMsQ0FBRSxDQUFDLENBQUUsRUFBRSxDQUFFLENBQUMsQ0FBQyxDQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN6RCxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxBQUNaLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQzNCLEtBQU0sQ0FDTixFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQ3JCO0NBR0QsS0FBTSxDQUNOLGNBQWMsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFFLEVBQUUsQ0FBQyxDQUFDLENBQzlCLENBQ0QsQUFDRCxHQUFJLFNBQVMsQ0FBRSxDQUNkLElBQUksQ0FBQyxjQUFjLEdBQUcsQUFBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLElBQUksb0JBQW9CLENBQUEsQUFBQyxLQUFLLEtBQUssSUFBSSxJQUFJLENBQUMsY0FBYyxLQUFLLENBQUMsQ0FBQSxBQUFDLENBQUksQ0FBQyxDQUFHLENBQUMsQ0FBQztDQUMxRyxBQUNELE9BQU8sRUFBRSxDQUFDLENBQ1YsQ0FBRSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxBQUVqQiwyQkFBMkIsQ0FBQyxXQUFXLENBQUUsQ0FBQyxZQUFZLENBQUMsc0JBQXNCLENBQUUsTUFBTSxDQUFDLElBQUksQ0FBRSxLQUFLLENBQUMsSUFBSSxDQUFFLEtBQUssQ0FBQyxJQUFJLENBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQUFFdEksMkJBQTJCLENBQUMsY0FBYyxDQUFFLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBRSxNQUFNLENBQUMsZ0JBQVMsQ0FBQyxDQUFFLENBQUMsQ0FBRSxDQUFDLENBQUUsSUFBSSxDQUFFLEVBQUUsQ0FBRSxNQUFNLENBQUUsQ0FDM0csQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFDbkIsSUFBSSxLQUFLLENBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxzQkFBc0IsQ0FBQyx5QkFBeUIsQ0FBQyx3QkFBd0IsQ0FBQyxDQUM1RyxLQUFLLENBQUcsQ0FBQyxDQUFDLEtBQUssQ0FDZixHQUFHLENBQUUsQ0FBQyxDQUFFLEdBQUcsQ0FBRSxHQUFHLENBQUUsRUFBRSxDQUFFLEVBQUUsQ0FBRSxFQUFFLENBQUUsRUFBRSxDQUFFLENBQUMsQ0FBRSxDQUFDLENBQUUsSUFBSSxDQUFFLElBQUksQ0FBRSxHQUFHLENBQUUsRUFBRSxDQUFFLEVBQUUsQ0FBRSxFQUFFLENBQUMsQUFDckUsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQUFDOUIsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQUFDL0IsR0FBRyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQUFDbkIsSUFBSyxDQUFDLEdBQUcsQ0FBQyxDQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFFLENBQUMsRUFBRSxFQUFFO0FBQ2xDLEdBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUU7QUFDN0IsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQ3RDLEFBQ0QsRUFBRSxHQUFHLEdBQUcsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBRSxHQUFHLENBQUUsS0FBSyxDQUFFLEtBQUssQ0FBQyxDQUFDLEFBQ3JELEdBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBRSxDQUMzQixHQUFHLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxBQUNwQixFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEFBQ1osR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUNiLEFBQ0QsRUFBRSxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFDbEIsRUFBRSxHQUFHLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxBQUNwQixJQUFJLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUEsQ0FBRSxNQUFNLENBQUMsQ0FBQyxBQUNuQyxHQUFHLEdBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLEFBQUMsQ0FBQyxBQUM3QixHQUFJLEdBQUcsQ0FBRSxDQUNSLEVBQUUsR0FBRyxRQUFRLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBQyxHQUFHLENBQUUsRUFBRSxDQUFDLENBQUMsQUFDcEMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFDbEIsRUFBRSxJQUFJLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxBQUNyQixJQUFJLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUEsQ0FBRSxNQUFNLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBRyxDQUFDLENBQUcsQ0FBQyxDQUFBLEFBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUM1RCxLQUFNLENBQ04sRUFBRSxHQUFHLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxBQUNwQixJQUFJLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUEsQ0FBRSxNQUFNLENBQUMsQ0FBQyxDQUNuQyxBQUNELEdBQUksSUFBSSxLQUFLLEVBQUUsQ0FBRSxDQUNoQixJ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SyxDQUFDLEtBQUssSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEtBQUssSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFBLEFBQUMsQ0FBRSxDQUN4RixNQUFPLEVBQUUsRUFBRSxDQUNWLEdBQUksRUFBRSxDQUFDLElBQUksS0FBSyxDQUFDLENBQUUsQ0FDbEIsR0FBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUUsQ0FDM0IsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFDOUIsR0FBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUUsQ0FDYixFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUMxQixLQUFNLEdBQUksRUFBRSxDQUFDLElBQUksS0FBSyxDQUFDLENBQUU7QUFDekIsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQUFDVCxHQUFHLEdBQUcsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxBQUM1QixJQUFLLENBQUMsR0FBRyxDQUFDLENBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FDMUIsR0FBRyxJQUFJLEVBQUUsQ0FBQyxJQUFJLEdBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksSUFBRSxDQUFDLEdBQUMsQ0FBQyxDQUFBLEFBQUMsQ0FBQyxDQUFDLENBQ25DLEFBQ0QsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQ2pCLENBQ0QsS0FBTSxDQUNOLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FDbEIsQ0FDRCxLQUFNLENBQ04sRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUNmLEFBQ0QsRUFBRSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FDZCxDQUVELEtBQU0sR0FBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssS0FBSyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUEsQUFBQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxLQUFLLENBQUMsUUFBUSxDQUFFLENBQ3BJLE1BQU8sRUFBRSxFQUFFLENBQ1YsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQUFDdEIsR0FBSSxFQUFFLENBQUMsQ0FBQyxDQUFFLENBQ1QsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FDdEIsS0FBTSxHQUFJLEdBQUcsR0FBRyxHQUFHLENBQUUsR0FBSSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUUsQ0FDckMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUNSLEFBQ0QsR0FBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUUsQ0FDYixFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUMxQixLQUFNLEdBQUksRUFBRSxDQUFDLElBQUksS0FBSyxDQUFDLENBQUU7QUFDekIsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQUFDVCxHQUFJLENBQUMsS0FBSyxDQUFDLENBQUUsQ0FDWixFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUNyRCxLQUFNLEdBQUksQ0FBQyxLQUFLLENBQUMsQ0FBRSxDQUNuQixFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FDdkUsS0FBTSxHQUFJLENBQUMsS0FBSyxDQUFDLENBQUUsQ0FDbkIsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUN6RixLQUFNLEdBQUksQ0FBQyxLQUFLLENBQUMsQ0FBRSxDQUNuQixFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUMzRyxLQUFNLENBQ04sR0FBRyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQUFDNUIsSUFB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QUMsT0FBTyxNQUFNLENBQUMsQ0FBQyxDQUFDLEFBQUMsS0FBSyxVQUFVLENBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFHLE1BQU0sQ0FBRyxBQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFBQyxLQUFLLFVBQVUsQ0FBSSxDQUFDLENBQUcsS0FBSyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUcsRUFBRSxDQUFFLENBQUMsQUFDeEwsR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQUFBQyxPQUFPLENBQUMsQUFBQyxLQUFLLFFBQVEsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBSSxLQUFLLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFFLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxBQUN4SixHQUFHLEdBQUcsR0FBRyxHQUFHLEtBQUssQ0FBQyxBQUNsQixHQUFJLEtBQUssQ0FBQyxNQUFNLENBQUUsQ0FDakIsQ0FBQyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQUFDcEIsR0FBSSxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFFLENBQzlCLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEFBQ2hCLEdBQUksR0FBRyxLQUFLLEdBQUcsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFBLEFBQUMsQ0FBRSxDQUM1QixHQUFHLEdBQUcsQUFBQyxHQUFHLEdBQUcsQ0FBQyxDQUFJLEdBQUcsR0FBRyxHQUFH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QyxBQUN2QixDQUFDLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQyxDQUFFLENBQ3hCLElBQUksQ0FBQyxDQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUEsR0FBSSxJQUFJLENBQUMsRUFBRSxDQUFDLEFBQ2hDLEdBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUUsQ0FDakIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFHLENBQUMsR0FBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLEFBQUMsQ0FBQSxHQUFJLENBQUMsQUFBQyxDQUFHLENBQUMsR0FBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLEFBQUMsQ0FBQSxHQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQUFBQyxDQUFDLENBQzNHLEtBQU0sR0FBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBRSxDQUN4QixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUEsR0FBSSxJQUFJLENBQUMsR0FBRyxDQUFBLEdBQUksQ0FBQyxDQUFHLENBQUMsR0FBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUEsSUFBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQSxHQUFJLElBQUksQ0FBQyxHQUFHLENBQUEsQUFBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxBQUFDLENBQUMsQ0FDN0gsQUFDRCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUcsQ0FBQyxDQUFHLENBQUMsQ0FBQyxDQUM3QixDQUFDLEFBQ0YsTUFBTSxDQUFDLElBQUksR0FBRyxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUUsR0FBRyxDQUFDLENBQUMsQUFFbkMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxNQUFN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QUksQ0FBRSxDQUMxQixDQUFDLEdBQUcsTUFBTSxJQUFJLENBQUMsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFBLEFBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQzdDLEtBQU0sQ0FDTixDQUFDLEdBQUcsTUFBTSxJQUFJLENBQUMsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFBLEFBQUMsR0FBRyxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQ2hELEFBQ0QsT0FBTyxNQUFNLENBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFBLEdBQUksR0FBRyxDQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQzlDLENBQUMsQ0FDRixDQUFDO0FBSUYsS0FBSyxDQUFDLE1BQU0sQ0FDWCxPQUFPLENBQUMsU0FBUyxDQUFFLFNBQVMsQ0FBQyxDQUFFLENBQzlCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQSxHQUFJLENBQUMsQ0FBQyxDQUFDLENBQ3RDLENBQUMsQ0FDRixPQUFPLENBQUMsUUFBUSxDQUFFLFNBQVMsQ0FBQyxDQUFFLENBQzdCLE9BQU8sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBSSxDQUFDLEdBQUcsQ0FBQyxBQUFDLENBQUMsR0FBRyxDQUFDLENBQUEsQUFBQyxDQUFDLENBQ3JDLENBQUMsQ0FDRixPQUFPLENBQUMsV0FBVyxDQUFFLFNBQVMsQ0FBQyxDQUFFLENBQ2hDLE9BQU8sQUFBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUEsR0FBSSxDQUFDLENBQUksQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQSxBQUFDLENBQUcsR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQSxHQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQSxBQUFDLENBQUMsQ0FDbEcsQ0FBQyxDQUNGLENBQUM7QUFJRixjQUFjLEdBQUcsU0FBUyxDQUFDLENBQUUsQ0FBQyxDQUFFLEdBQUcsQ0FBRSxDQUNwQyxJQUFJLENBQUMsQ0FBRyxNQUFNLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBRSxTQUFTLFNBQVMsQ0FBRSxNQUFNLENBQUUsQ0FDeEQsSUFBSSxDQUFDLEdBQUcsR0FBRyxBQUFDLFNBQVMsSUFBSSxDQUFDLENBQUksU0FBUyxDQUFHLENBQUMsQ0FBQztBQUM1QyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxJQUFJLEdBQUcsQ0FBQSxJQUFLLFNBQVMsR0FBRyxDQUFDLENBQUcsU0FBUyxDQUFHLENBQUMsQ0FBQSxBQUFDLENBQUMsQUFDN0QsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFBLEFBQUMsQ0FBQyxBQUM1RCxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO0NBQzNCLENBQUUsSUFBSSxDQUFDLENBQ1IsQ0FBQyxDQUFHLENBQUMsQ0FBQyxTQUFTLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxBQUM5QixDQUFDLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxBQUNsQixDQUFDLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxBQUNmLENBQUMsQ0FBQyxNQUFNLEdBQUcsU0FBUyxTQUFTLENBQUUsTUFBTSxDQUFFLENBQ3RDLE9BQU8sSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFFLE1BQU0sQ0FBQyxDQUFDLENBQ2hDLENBQUMsQUFDRixPQUFPLENBQUMsQ0FBQyxDQUNULENBQUMsQUFDRixLQUFLLENBQUMsU0FBUyxDQUNkLGNBQWMsQ0FBQyxZQUFZLENBQUUsU0FBUyxDQUFDLENBQUUsQ0FDeEMsT0FBTyxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQSxHQUFJLElBQUksQ0FBQyxHQUFHLENBQUUsR0FBRyxDQUFDLENBQUMsQ0FDbkYsQ0FBRSxHQUFHLENBQUMsQ0FDUCxjQUFjLENBQUMsV0FBVyxDQUFFLFNBQVMsQ0FBQyxDQUFFLENBQ3ZDLE9BQU8sRUFBRSxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFFLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBLEFBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQSxHQUFJLElBQUksQ0FBQyxHQUFHLENBQUUsQ0FBQSxBQUFDLENBQUMsQ0FDeEYsQ0FBRSxHQUFHLENBQUMsQ0FDUCxjQUFjLENBQUMsY0FBYyxDQUFFLFNBQVMsQ0FBQyxDQUFFLENBQzFDLE9BQU8sQUFBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUEsR0FBSSxDQUFDLENBQUksQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBRSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQSxBQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUEsR0FBSSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUEsQUFBQyxDQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUUsQ0FBQyxFQUFFLElBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQSxBQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENB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RyxXQUFXLENBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBRyxXQUFXLENBQUMsQ0FDM0UsQ0FBRSxJQUFJLENBQUMsQ0FDUixRQUFRLENBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQ3hCLFFBQVEsQ0FBRyxJQUFJLENBQUMsUUFBUSxHQUFHLFNBQVMsSUFBSSxDQUFFLEtBQUssQ0FBRSxLQUFLLENBQUUsTUFBTSxDQUFFLENBQy9ELElBQUksRUFBRSxDQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQ3hCLENBQUMsQ0FBRyxFQUFFLENBQUMsTUFBTSxDQUNiLEVBQUUsQ0FBRyxDQUFDLEtBQUssSUFBSSwwQkFBMEIsQ0FBQSxDQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FDckQsQ0FBQyxDQUFFLElBQUksQ0FBRSxDQUFDLENBQUUsSUFBSSxDQUFDLEFBQ2xCLE1BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FDaEIsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxBQUNiLENBQUMsR0FBRyxNQUFNLENBQUcsTUFBTSxDQUFDLFNBQVMsR0FBQyxJQUFJLENBQUUsSUFBSSxDQUFFLElBQUksQ0FBQyxDQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLEFBQ3hFLENBQUMsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLEFBQ2QsTUFBTyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUNoQixJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEFBQ2IsUUFBUSxDQUFDLElBQUksR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsUUFBUSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBRyxJQUFJLENBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxFQUFFLENB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R0FBRyxPQUFPLENBQUMsTUFBTSxDQUFFLENBQUMsRUFBRSxFQUFFLENBQ3BDLElBQUksR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFDbEIsR0FBSSxDQUFDLElBQUksQ0FBRSxDQUNWLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUUsQ0FBQyxDQUFDLENBQUMsQUFDdkIsU0FBUyxDQUNULEtBQU0sR0FBSSxPQUFPLElBQUksQUFBQyxLQUFLLFFBQVEsQ0FBRSxDQUNyQyxJQUFJLEdBQUcsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMvQyxHQUFJLE9BQU8sSUFBSSxBQUFDLEtBQUssUUFBUSxDQUFFLENBQzlCLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBRSxDQUFDLENBQUMsQ0FBQztDQUN2QixBQUNELFNBQVMsQ0FDVCxLQUFNLEdBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLEtBQUssTUFBTSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssTUFBTSxJQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQUFBQyxDQUFFO0FBQ3RJLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUUsQ0FBQyxDQUFDLENBQUMsQUFDdkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxBQUN2RCxTQUFTLENBQ1QsQUFDRCxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUUsSUFBSSxDQUFFLEtBQUssQ0FBQyxDQUFDLEFBQ2pELEdBQUksU0FBUyxLQUFL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QUFDLENBQUMsQ0FBRSxDQUFDLENBQUMsYUFBYSxJQUFJLElBQUksQ0FBRSxDQUFDLENBQUMsS0FBSyxDQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUUsRUFBRSxDQUFDLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBRyxBQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUssQ0FBQyxDQUFDLENBQzlNLElBQUksQ0FBRSxVQUFVLENBQUMsQUFDbEIsR0FBSSxJQUFJLEtBQUssUUFBUSxDQUFFLENBQ3RCLEdBQUksSUFBSSxLQUFLLFVBQVUsSUFBSSxLQUFLLEtBQUssS0FBSyxDQUFFLENBQzNDLFVBQVUsR0FBSSxBQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFBQyxLQUFLLFVBQVUsQ0FBSSxJQUFJLENBQUcsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEFBQUMsQ0FBQyxBQUM5SCxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxTQUFTLENBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQzVFLEFBQ0QsR0FBSSxPQUFPLENBQUMsQUFBQyxLQUFLLFFBQVEsS0FBSyxTQUFTLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBLEFBQUMsQ0FBRTtBQUV0RCxFQUFFLENBQUMsRUFBRSxHQUFHLFNBQVMsQ0FBQyxBQUNsQixJQUFJLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBRSxHQUFHLENBQUUsWUFBWSxJQUFJLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBRSxF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LElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO0NBQ3BCLEFBQ0QsR0FBSSxRQUFRLEtBQUssQ0FBQyxDQUFFLENBQ25CLEdBQUksSUFBSSxDQUFDLFFBQVEsQ0FBRSxDQUNsQixHQUFJLElBQUksSUFBSSxDQUFDLENBQUUsQ0FDZCxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUUsY0FBYyxDQUFFLEtBQUssQ0FBQyxDQUFDLENBQ2xELEtBQU0sR0FBSSxDQUFDLFFBQVEsQ0FBRSxDQUNyQixRQUFRLEdBQUcsVUFBVSxDQUFDO0NBQ3RCLENBQ0QsQUFDRCxHQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFFLEdBQUksSUFBSSxDQUFDLEtBQUssS0FBSyxDQUFDLElBQUksUUFBUSxLQUFLLENBQUMsQ0FBRSxHQUFJLENBQUMsY0FBYyxDQUFFLENBQ25GLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FDMUIsQ0FDRCxBQUNELEVBQUUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEFBQ25CLE1BQU8sRUFBRSxFQUFFLENBQ1YsR0FBSSxFQUFFLENBQUMsQ0FBQyxDQUFFLENBQ1QsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUNyQyxLQUFNLENBQ04sRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FDdEMsQUFDRCxFQUFFLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUNkLEFBRUQsR0FBSSxJQUFJLENBQUMsU0FBUyxDQUFFLENBQ25CLEdBQUksSUFBSSxHQUFHLENBQUMsQ0FBRSxHQUFJLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxLQUFLLENB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QUMsQUFDcEIsR0FBSSxDQUFDLENBQUUsQ0FDTixJQUFLLENBQUMsR0FBRyxDQUFDLENBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FDOUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FDUCxBQUNELElBQUssQ0FBQyxJQUFJLFVBQVUsRUFBRSxDQUNyQixHQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBRSxDQUN4QixNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxREFBcUQsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUM5RSxDQUNELENBQ0QsQUFFRCxhQUFhLEdBQUcsS0FBSyxDQUFDO0NBRXZCLENBQUEsQ0FBRSxBQUFDLE9BQU8sTUFBTSxBQUFDLEtBQUssV0FBVyxJQUFJLE1BQU0sQ0FBQyxPQUFPLElBQUksT0FBTyxNQUFNLEFBQUMsS0FBSyxXQUFXLENBQUksTUFBTSxDQUFHLGFBQVEsTUFBTSxDQUFFLFVBQVUsQ0FBQyxDQUFDIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIFZFUlNJT046IDEuMTguMFxuICogREFURTogMjAxNS0wOS0wNVxuICogVVBEQVRFUyBBTkQgRE9DUyBBVDogaHR0cDovL2dyZWVuc29jay5jb21cbiAqIFxuICogSW5jbHVkZXMgYWxsIG9mIHRoZSBmb2xsb3dpbmc6IFR3ZWVuTGl0ZSwgVHdlZW5NYXgsIFRpbWVsaW5lTGl0ZSwgVGltZWxpbmVNYXgsIEVhc2VQYWNrLCBDU1NQbHVnaW4sIFJvdW5kUHJvcHNQbHVnaW4sIEJlemllclBsdWdpbiwgQXR0clBsdWdpbiwgRGlyZWN0aW9uYWxSb3RhdGlvblBsdWdpblxuICpcbiAqIEBsaWNlbnNlIENvcHlyaWdodCAoYykgMjAwOC0yMDE1LCBHcmVlblNvY2suIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIHdvcmsgaXMgc3ViamVjdCB0byB0aGUgdGVybXMgYXQgaHR0cDovL2dyZWVuc29jay5jb20vc3RhbmRhcmQtbGljZW5zZSBvciBmb3JcbiAqIENsdWIgR3JlZW5Tb2NrIG1lbWJlcnMsIHRoZSBzb2Z0d2FyZSBhZ3JlZW1lbnQgdGhhdCB3YXMgaXNzdWVkIHdpdGggeW91ciBtZW1iZXJzaGlwLlxuICogXG4gKiBAYXV0aG9yOiBKYWNrIERveWxlLCBqYWNrQGdyZWVuc29jay5jb21cbiAqKi9cbnZhciBfZ3NTY29wZSA9ICh0eXBlb2YobW9kdWxlKSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBtb2R1bGUuZXhwb3J0cyAmJiB0eXBlb2YoZ2xvYmFsKSAhPT0gXCJ1bmRlZmluZWRcIikgPyBnbG9iYWwgOiB0aGlzIHx8IHdpbmRvdzsgLy9oZWxwcyBlbnN1cmUgY29tcGF0aWJpbGl0eSB3aXRoIEFNRC9SZXF1aXJlSlMgYW5kIENvbW1vbkpTL05vZGVcbihfZ3NTY29wZS5fZ3NRdWV1ZSB8fCAoX2dzU2NvcGUuX2dzUXVldWUgPSBbXSkpLnB1c2goIGZ1bmN0aW9uKCkge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdF9nc1Njb3BlLl9nc0RlZmluZShcIlR3ZWVuTWF4XCIsIFtcImNvcmUuQW5pbWF0aW9uXCIsXCJjb3JlLlNpbXBsZVRpbWVsaW5lXCIsXCJUd2VlbkxpdGVcIl0sIGZ1bmN0aW9uKEFuaW1hdGlvbiwgU2ltcGxlVGltZWxpbmUsIFR3ZWVuTGl0ZSkge1xuXG5cdFx0dmFyIF9zbGljZSA9IGZ1bmN0aW9uKGEpIHsgLy9kb24ndCB1c2UgW10uc2xpY2UgYmVjYXVzZSB0aGF0IGRvZXNuJ3Qgd29yayBpbiBJRTggd2l0aCBhIE5vZGVMaXN0IHRoYXQncyByZXR1cm5lZCBieSBxdWVyeVNlbGVjdG9yQWxsKClcblx0XHRcdFx0dmFyIGIgPSBbXSxcblx0XHRcdFx0XHRsID0gYS5sZW5ndGgsXG5cdFx0XHRcdFx0aTtcblx0XHRcdFx0Zm9yIChpID0gMDsgaSAhPT0gbDsgYi5wdXNoKGFbaSsrXSkpO1xuXHRcdFx0XHRyZXR1cm4gYjtcblx0XHRcdH0sXG5cdFx0XHRfYXBwbHlDeWNsZSA9IGZ1bmN0aW9uKHZhcnMsIHRhcmdldHMsIGkpIHtcblx0XHRcdFx0dmFyIGFsdCA9IHZhcnMuY3ljbGUsXG5cdFx0XHRcdFx0cCwgdmFsO1xuXHRcdFx0XHRmb3IgKHAgaW4gYWx0KSB7XG5cdFx0XHRcdFx0dmFsID0gYWx0W3BdO1xuXHRcdFx0XHRcdHZhcnNbcF0gPSAodHlwZW9mKHZhbCkgPT09IFwiZnVuY3Rpb25cIikgPyB2YWwuY2FsbCh0YXJnZXRzW2ldLCBpKSA6IHZhbFtpICUgdmFsLmxlbmd0aF07XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGVsZXRlIHZhcnMuY3ljbGU7XG5cdFx0XHR9LFxuXHRcdFx0VHdlZW5NYXggPSBmdW5jdGlvbih0YXJnZXQsIGR1cmF0aW9uLCB2YXJzKSB7XG5cdFx0XHRcdFR3ZWVuTGl0ZS5jYWxsKHRoaXMsIHRhcmdldCwgZHVyYXRpb24sIHZhcnMpO1xuXHRcdFx0XHR0aGlzLl9jeWNsZSA9IDA7XG5cdFx0XHRcdHRoaXMuX3lveW8gPSAodGhpcy52YXJzLnlveW8gPT09IHRydWUpO1xuXHRcdFx0XHR0aGlzLl9yZXBlYXQgPSB0aGlzLnZhcnMucmVwZWF0IHx8IDA7XG5cdFx0XHRcdHRoaXMuX3JlcGVhdERlbGF5ID0gdGhpcy52YXJzLnJlcGVhdERlbGF5IHx8IDA7XG5cdFx0XHRcdHRoaXMuX2RpcnR5ID0gdHJ1ZTsgLy9lbnN1cmVzIHRoYXQgaWYgdGhlcmUgaXMgYW55IHJlcGVhdCwgdGhlIHRvdGFsRHVyYXRpb24gd2lsbCBnZXQgcmVjYWxjdWxhdGVkIHRvIGFjY3VyYXRlbHkgcmVwb3J0IGl0LlxuXHRcdFx0XHR0aGlzLnJlbmRlciA9IFR3ZWVuTWF4LnByb3RvdHlwZS5yZW5kZXI7IC8vc3BlZWQgb3B0aW1pemF0aW9uIChhdm9pZCBwcm90b3R5cGUgbG9va3VwIG9uIHRoaXMgXCJob3RcIiBtZXRob2QpXG5cdFx0XHR9LFxuXHRcdFx0X3RpbnlOdW0gPSAwLjAwMDAwMDAwMDEsXG5cdFx0XHRUd2VlbkxpdGVJbnRlcm5hbHMgPSBUd2VlbkxpdGUuX2ludGVybmFscyxcblx0XHRcdF9pc1NlbGVjdG9yID0gVHdlZW5MaXRlSW50ZXJuYWxzLmlzU2VsZWN0b3IsXG5cdFx0XHRfaXNBcnJheSA9IFR3ZWVuTGl0ZUludGVybmFscy5pc0FycmF5LFxuXHRcdFx0cCA9IFR3ZWVuTWF4LnByb3RvdHlwZSA9IFR3ZWVuTGl0ZS50byh7fSwgMC4xLCB7fSksXG5cdFx0XHRfYmxhbmtBcnJheSA9IFtdO1xuXG5cdFx0VHdlZW5NYXgudmVyc2lvbiA9IFwiMS4xOC4wXCI7XG5cdFx0cC5jb25zdHJ1Y3RvciA9IFR3ZWVuTWF4O1xuXHRcdHAua2lsbCgpLl9nYyA9IGZhbHNlO1xuXHRcdFR3ZWVuTWF4LmtpbGxUd2VlbnNPZiA9IFR3ZWVuTWF4LmtpbGxEZWxheWVkQ2FsbHNUbyA9IFR3ZWVuTGl0ZS5raWxsVHdlZW5zT2Y7XG5cdFx0VHdlZW5NYXguZ2V0VHdlZW5zT2YgPSBUd2VlbkxpdGUuZ2V0VHdlZW5zT2Y7XG5cdFx0VHdlZW5NYXgubGFnU21vb3RoaW5nID0gVHdlZW5MaXRlLmxhZ1Ntb290aGluZztcblx0XHRUd2Vlbk1heC50aWNrZXIgPSBUd2VlbkxpdGUudGlja2VyO1xuXHRcdFR3ZWVuTWF4LnJlbmRlciA9IFR3ZWVuTGl0ZS5yZW5kZXI7XG5cblx0XHRwLmludmFsaWRhdGUgPSBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMuX3lveW8gPSAodGhpcy52YXJzLnlveW8gPT09IHRydWUpO1xuXHRcdFx0dGhpcy5fcmVwZWF0ID0gdGhpcy52YXJzLnJlcGVhdCB8fCAwO1xuXHRcdFx0dGhpcy5fcmVwZWF0RGVsYXkgPSB0aGlzLnZhcnMucmVwZWF0RGVsYXkgfHwgMDtcblx0XHRcdHRoaXMuX3VuY2FjaGUodHJ1ZSk7XG5cdFx0XHRyZXR1cm4gVHdlZW5MaXRlLnByb3RvdHlwZS5pbnZhbGlkYXRlLmNhbGwodGhpcyk7XG5cdFx0fTtcblx0XHRcblx0XHRwLnVwZGF0ZVRvID0gZnVuY3Rpb24odmFycywgcmVzZXREdXJhdGlvbikge1xuXHRcdFx0dmFyIGN1clJhdGlvID0gdGhpcy5yYXRpbyxcblx0XHRcdFx0aW1tZWRpYXRlID0gdGhpcy52YXJzLmltbWVkaWF0ZVJlbmRlciB8fCB2YXJzLmltbWVkaWF0ZVJlbmRlcixcblx0XHRcdFx0cDtcblx0XHRcdGlmIChyZXNldER1cmF0aW9uICYmIHRoaXMuX3N0YXJ0VGltZSA8IHRoaXMuX3RpbWVsaW5lLl90aW1lKSB7XG5cdFx0XHRcdHRoaXMuX3N0YXJ0VGltZSA9IHRoaXMuX3RpbWVsaW5lLl90aW1lO1xuXHRcdFx0XHR0aGlzLl91bmNhY2hlKGZhbHNlKTtcblx0XHRcdFx0aWYgKHRoaXMuX2djKSB7XG5cdFx0XHRcdFx0dGhpcy5fZW5hYmxlZCh0cnVlLCBmYWxzZSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5fdGltZWxpbmUuaW5zZXJ0KHRoaXMsIHRoaXMuX3N0YXJ0VGltZSAtIHRoaXMuX2RlbGF5KTsgLy9lbnN1cmVzIHRoYXQgYW55IG5lY2Vzc2FyeSByZS1zZXF1ZW5jaW5nIG9mIEFuaW1hdGlvbnMgaW4gdGhlIHRpbWVsaW5lIG9jY3VycyB0byBtYWtlIHN1cmUgdGhlIHJlbmRlcmluZyBvcmRlciBpcyBjb3JyZWN0LlxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRmb3IgKHAgaW4gdmFycykge1xuXHRcdFx0XHR0aGlzLnZhcnNbcF0gPSB2YXJzW3BdO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHRoaXMuX2luaXR0ZWQgfHwgaW1tZWRpYXRlKSB7XG5cdFx0XHRcdGlmIChyZXNldER1cmF0aW9uKSB7XG5cdFx0XHRcdFx0dGhpcy5faW5pdHRlZCA9IGZhbHNlO1xuXHRcdFx0XHRcdGlmIChpbW1lZGlhdGUpIHtcblx0XHRcdFx0XHRcdHRoaXMucmVuZGVyKDAsIHRydWUsIHRydWUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpZiAodGhpcy5fZ2MpIHtcblx0XHRcdFx0XHRcdHRoaXMuX2VuYWJsZWQodHJ1ZSwgZmFsc2UpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAodGhpcy5fbm90aWZ5UGx1Z2luc09mRW5hYmxlZCAmJiB0aGlzLl9maXJzdFBUKSB7XG5cdFx0XHRcdFx0XHRUd2VlbkxpdGUuX29uUGx1Z2luRXZlbnQoXCJfb25EaXNhYmxlXCIsIHRoaXMpOyAvL2luIGNhc2UgYSBwbHVnaW4gbGlrZSBNb3Rpb25CbHVyIG11c3QgcGVyZm9ybSBzb21lIGNsZWFudXAgdGFza3Ncblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHRoaXMuX3RpbWUgLyB0aGlzLl9kdXJhdGlvbiA+IDAuOTk4KSB7IC8vaWYgdGhlIHR3ZWVuIGhhcyBmaW5pc2hlZCAob3IgY29tZSBleHRyZW1lbHkgY2xvc2UgdG8gZmluaXNoaW5nKSwgd2UganVzdCBuZWVkIHRvIHJld2luZCBpdCB0byAwIGFuZCB0aGVuIHJlbmRlciBpdCBhZ2FpbiBhdCB0aGUgZW5kIHdoaWNoIGZvcmNlcyBpdCB0byByZS1pbml0aWFsaXplIChwYXJzaW5nIHRoZSBuZXcgdmFycykuIFdlIGFsbG93IHR3ZWVucyB0aGF0IGFyZSBjbG9zZSB0byBmaW5pc2hpbmcgKGJ1dCBoYXZlbid0IHF1aXRlIGZpbmlzaGVkKSB0byB3b3JrIHRoaXMgd2F5IHRvbyBiZWNhdXNlIG90aGVyd2lzZSwgdGhlIHZhbHVlcyBhcmUgc28gc21hbGwgd2hlbiBkZXRlcm1pbmluZyB3aGVyZSB0byBwcm9qZWN0IHRoZSBzdGFydGluZyB2YWx1ZXMgdGhhdCBiaW5hcnkgbWF0aCBpc3N1ZXMgY3JlZXAgaW4gYW5kIGNhbiBtYWtlIHRoZSB0d2VlbiBhcHBlYXIgdG8gcmVuZGVyIGluY29ycmVjdGx5IHdoZW4gcnVuIGJhY2t3YXJkcy4gXG5cdFx0XHRcdFx0XHR2YXIgcHJldlRpbWUgPSB0aGlzLl90aW1lO1xuXHRcdFx0XHRcdFx0dGhpcy5yZW5kZXIoMCwgdHJ1ZSwgZmFsc2UpO1xuXHRcdFx0XHRcdFx0dGhpcy5faW5pdHRlZCA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0dGhpcy5yZW5kZXIocHJldlRpbWUsIHRydWUsIGZhbHNlKTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHRoaXMuX3RpbWUgPiAwIHx8IGltbWVkaWF0ZSkge1xuXHRcdFx0XHRcdFx0dGhpcy5faW5pdHRlZCA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0dGhpcy5faW5pdCgpO1xuXHRcdFx0XHRcdFx0dmFyIGludiA9IDEgLyAoMSAtIGN1clJhdGlvKSxcblx0XHRcdFx0XHRcdFx0cHQgPSB0aGlzLl9maXJzdFBULCBlbmRWYWx1ZTtcblx0XHRcdFx0XHRcdHdoaWxlIChwdCkge1xuXHRcdFx0XHRcdFx0XHRlbmRWYWx1ZSA9IHB0LnMgKyBwdC5jOyBcblx0XHRcdFx0XHRcdFx0cHQuYyAqPSBpbnY7XG5cdFx0XHRcdFx0XHRcdHB0LnMgPSBlbmRWYWx1ZSAtIHB0LmM7XG5cdFx0XHRcdFx0XHRcdHB0ID0gcHQuX25leHQ7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9O1xuXHRcdFx0XHRcblx0XHRwLnJlbmRlciA9IGZ1bmN0aW9uKHRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkge1xuXHRcdFx0aWYgKCF0aGlzLl9pbml0dGVkKSBpZiAodGhpcy5fZHVyYXRpb24gPT09IDAgJiYgdGhpcy52YXJzLnJlcGVhdCkgeyAvL3plcm8gZHVyYXRpb24gdHdlZW5zIHRoYXQgcmVuZGVyIGltbWVkaWF0ZWx5IGhhdmUgcmVuZGVyKCkgY2FsbGVkIGZyb20gVHdlZW5MaXRlJ3MgY29uc3RydWN0b3IsIGJlZm9yZSBUd2Vlbk1heCdzIGNvbnN0cnVjdG9yIGhhcyBmaW5pc2hlZCBzZXR0aW5nIF9yZXBlYXQsIF9yZXBlYXREZWxheSwgYW5kIF95b3lvIHdoaWNoIGFyZSBjcml0aWNhbCBpbiBkZXRlcm1pbmluZyB0b3RhbER1cmF0aW9uKCkgc28gd2UgbmVlZCB0byBjYWxsIGludmFsaWRhdGUoKSB3aGljaCBpcyBhIGxvdy1rYiB3YXkgdG8gZ2V0IHRob3NlIHNldCBwcm9wZXJseS5cblx0XHRcdFx0dGhpcy5pbnZhbGlkYXRlKCk7XG5cdFx0XHR9XG5cdFx0XHR2YXIgdG90YWxEdXIgPSAoIXRoaXMuX2RpcnR5KSA/IHRoaXMuX3RvdGFsRHVyYXRpb24gOiB0aGlzLnRvdGFsRHVyYXRpb24oKSxcblx0XHRcdFx0cHJldlRpbWUgPSB0aGlzLl90aW1lLFxuXHRcdFx0XHRwcmV2VG90YWxUaW1lID0gdGhpcy5fdG90YWxUaW1lLCBcblx0XHRcdFx0cHJldkN5Y2xlID0gdGhpcy5fY3ljbGUsXG5cdFx0XHRcdGR1cmF0aW9uID0gdGhpcy5fZHVyYXRpb24sXG5cdFx0XHRcdHByZXZSYXdQcmV2VGltZSA9IHRoaXMuX3Jhd1ByZXZUaW1lLFxuXHRcdFx0XHRpc0NvbXBsZXRlLCBjYWxsYmFjaywgcHQsIGN5Y2xlRHVyYXRpb24sIHIsIHR5cGUsIHBvdywgcmF3UHJldlRpbWU7XG5cdFx0XHRpZiAodGltZSA+PSB0b3RhbER1cikge1xuXHRcdFx0XHR0aGlzLl90b3RhbFRpbWUgPSB0b3RhbER1cjtcblx0XHRcdFx0dGhpcy5fY3ljbGUgPSB0aGlzLl9yZXBlYXQ7XG5cdFx0XHRcdGlmICh0aGlzLl95b3lvICYmICh0aGlzLl9jeWNsZSAmIDEpICE9PSAwKSB7XG5cdFx0XHRcdFx0dGhpcy5fdGltZSA9IDA7XG5cdFx0XHRcdFx0dGhpcy5yYXRpbyA9IHRoaXMuX2Vhc2UuX2NhbGNFbmQgPyB0aGlzLl9lYXNlLmdldFJhdGlvKDApIDogMDtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aGlzLl90aW1lID0gZHVyYXRpb247XG5cdFx0XHRcdFx0dGhpcy5yYXRpbyA9IHRoaXMuX2Vhc2UuX2NhbGNFbmQgPyB0aGlzLl9lYXNlLmdldFJhdGlvKDEpIDogMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIXRoaXMuX3JldmVyc2VkKSB7XG5cdFx0XHRcdFx0aXNDb21wbGV0ZSA9IHRydWU7XG5cdFx0XHRcdFx0Y2FsbGJhY2sgPSBcIm9uQ29tcGxldGVcIjtcblx0XHRcdFx0XHRmb3JjZSA9IChmb3JjZSB8fCB0aGlzLl90aW1lbGluZS5hdXRvUmVtb3ZlQ2hpbGRyZW4pOyAvL290aGVyd2lzZSwgaWYgdGhlIGFuaW1hdGlvbiBpcyB1bnBhdXNlZC9hY3RpdmF0ZWQgYWZ0ZXIgaXQncyBhbHJlYWR5IGZpbmlzaGVkLCBpdCBkb2Vzbid0IGdldCByZW1vdmVkIGZyb20gdGhlIHBhcmVudCB0aW1lbGluZS5cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoZHVyYXRpb24gPT09IDApIGlmICh0aGlzLl9pbml0dGVkIHx8ICF0aGlzLnZhcnMubGF6eSB8fCBmb3JjZSkgeyAvL3plcm8tZHVyYXRpb24gdHdlZW5zIGFyZSB0cmlja3kgYmVjYXVzZSB3ZSBtdXN0IGRpc2Nlcm4gdGhlIG1vbWVudHVtL2RpcmVjdGlvbiBvZiB0aW1lIGluIG9yZGVyIHRvIGRldGVybWluZSB3aGV0aGVyIHRoZSBzdGFydGluZyB2YWx1ZXMgc2hvdWxkIGJlIHJlbmRlcmVkIG9yIHRoZSBlbmRpbmcgdmFsdWVzLiBJZiB0aGUgXCJwbGF5aGVhZFwiIG9mIGl0cyB0aW1lbGluZSBnb2VzIHBhc3QgdGhlIHplcm8tZHVyYXRpb24gdHdlZW4gaW4gdGhlIGZvcndhcmQgZGlyZWN0aW9uIG9yIGxhbmRzIGRpcmVjdGx5IG9uIGl0LCB0aGUgZW5kIHZhbHVlcyBzaG91bGQgYmUgcmVuZGVyZWQsIGJ1dCBpZiB0aGUgdGltZWxpbmUncyBcInBsYXloZWFkXCIgbW92ZXMgcGFzdCBpdCBpbiB0aGUgYmFja3dhcmQgZGlyZWN0aW9uIChmcm9tIGEgcG9zdGl0aXZlIHRpbWUgdG8gYSBuZWdhdGl2ZSB0aW1lKSwgdGhlIHN0YXJ0aW5nIHZhbHVlcyBtdXN0IGJlIHJlbmRlcmVkLlxuXHRcdFx0XHRcdGlmICh0aGlzLl9zdGFydFRpbWUgPT09IHRoaXMuX3RpbWVsaW5lLl9kdXJhdGlvbikgeyAvL2lmIGEgemVyby1kdXJhdGlvbiB0d2VlbiBpcyBhdCB0aGUgVkVSWSBlbmQgb2YgYSB0aW1lbGluZSBhbmQgdGhhdCB0aW1lbGluZSByZW5kZXJzIGF0IGl0cyBlbmQsIGl0IHdpbGwgdHlwaWNhbGx5IGFkZCBhIHRpbnkgYml0IG9mIGN1c2hpb24gdG8gdGhlIHJlbmRlciB0aW1lIHRvIHByZXZlbnQgcm91bmRpbmcgZXJyb3JzIGZyb20gZ2V0dGluZyBpbiB0aGUgd2F5IG9mIHR3ZWVucyByZW5kZXJpbmcgdGhlaXIgVkVSWSBlbmQuIElmIHdlIHRoZW4gcmV2ZXJzZSgpIHRoYXQgdGltZWxpbmUsIHRoZSB6ZXJvLWR1cmF0aW9uIHR3ZWVuIHdpbGwgdHJpZ2dlciBpdHMgb25SZXZlcnNlQ29tcGxldGUgZXZlbiB0aG91Z2ggdGVjaG5pY2FsbHkgdGhlIHBsYXloZWFkIGRpZG4ndCBwYXNzIG92ZXIgaXQgYWdhaW4uIEl0J3MgYSB2ZXJ5IHNwZWNpZmljIGVkZ2UgY2FzZSB3ZSBtdXN0IGFjY29tbW9kYXRlLlxuXHRcdFx0XHRcdFx0dGltZSA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICh0aW1lID09PSAwIHx8IHByZXZSYXdQcmV2VGltZSA8IDAgfHwgcHJldlJhd1ByZXZUaW1lID09PSBfdGlueU51bSkgaWYgKHByZXZSYXdQcmV2VGltZSAhPT0gdGltZSkge1xuXHRcdFx0XHRcdFx0Zm9yY2UgPSB0cnVlO1xuXHRcdFx0XHRcdFx0aWYgKHByZXZSYXdQcmV2VGltZSA+IF90aW55TnVtKSB7XG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrID0gXCJvblJldmVyc2VDb21wbGV0ZVwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0aGlzLl9yYXdQcmV2VGltZSA9IHJhd1ByZXZUaW1lID0gKCFzdXBwcmVzc0V2ZW50cyB8fCB0aW1lIHx8IHByZXZSYXdQcmV2VGltZSA9PT0gdGltZSkgPyB0aW1lIDogX3RpbnlOdW07IC8vd2hlbiB0aGUgcGxheWhlYWQgYXJyaXZlcyBhdCBFWEFDVExZIHRpbWUgMCAocmlnaHQgb24gdG9wKSBvZiBhIHplcm8tZHVyYXRpb24gdHdlZW4sIHdlIG5lZWQgdG8gZGlzY2VybiBpZiBldmVudHMgYXJlIHN1cHByZXNzZWQgc28gdGhhdCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBhZ2FpbiAobmV4dCB0aW1lKSwgaXQnbGwgdHJpZ2dlciB0aGUgY2FsbGJhY2suIElmIGV2ZW50cyBhcmUgTk9UIHN1cHByZXNzZWQsIG9idmlvdXNseSB0aGUgY2FsbGJhY2sgd291bGQgYmUgdHJpZ2dlcmVkIGluIHRoaXMgcmVuZGVyLiBCYXNpY2FsbHksIHRoZSBjYWxsYmFjayBzaG91bGQgZmlyZSBlaXRoZXIgd2hlbiB0aGUgcGxheWhlYWQgQVJSSVZFUyBvciBMRUFWRVMgdGhpcyBleGFjdCBzcG90LCBub3QgYm90aC4gSW1hZ2luZSBkb2luZyBhIHRpbWVsaW5lLnNlZWsoMCkgYW5kIHRoZXJlJ3MgYSBjYWxsYmFjayB0aGF0IHNpdHMgYXQgMC4gU2luY2UgZXZlbnRzIGFyZSBzdXBwcmVzc2VkIG9uIHRoYXQgc2VlaygpIGJ5IGRlZmF1bHQsIG5vdGhpbmcgd2lsbCBmaXJlLCBidXQgd2hlbiB0aGUgcGxheWhlYWQgbW92ZXMgb2ZmIG9mIHRoYXQgcG9zaXRpb24sIHRoZSBjYWxsYmFjayBzaG91bGQgZmlyZS4gVGhpcyBiZWhhdmlvciBpcyB3aGF0IHBlb3BsZSBpbnR1aXRpdmVseSBleHBlY3QuIFdlIHNldCB0aGUgX3Jhd1ByZXZUaW1lIHRvIGJlIGEgcHJlY2lzZSB0aW55IG51bWJlciB0byBpbmRpY2F0ZSB0aGlzIHNjZW5hcmlvIHJhdGhlciB0aGFuIHVzaW5nIGFub3RoZXIgcHJvcGVydHkvdmFyaWFibGUgd2hpY2ggd291bGQgaW5jcmVhc2UgbWVtb3J5IHVzYWdlLiBUaGlzIHRlY2huaXF1ZSBpcyBsZXNzIHJlYWRhYmxlLCBidXQgbW9yZSBlZmZpY2llbnQuXG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHR9IGVsc2UgaWYgKHRpbWUgPCAwLjAwMDAwMDEpIHsgLy90byB3b3JrIGFyb3VuZCBvY2Nhc2lvbmFsIGZsb2F0aW5nIHBvaW50IG1hdGggYXJ0aWZhY3RzLCByb3VuZCBzdXBlciBzbWFsbCB2YWx1ZXMgdG8gMC5cblx0XHRcdFx0dGhpcy5fdG90YWxUaW1lID0gdGhpcy5fdGltZSA9IHRoaXMuX2N5Y2xlID0gMDtcblx0XHRcdFx0dGhpcy5yYXRpbyA9IHRoaXMuX2Vhc2UuX2NhbGNFbmQgPyB0aGlzLl9lYXNlLmdldFJhdGlvKDApIDogMDtcblx0XHRcdFx0aWYgKHByZXZUb3RhbFRpbWUgIT09IDAgfHwgKGR1cmF0aW9uID09PSAwICYmIHByZXZSYXdQcmV2VGltZSA+IDApKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2sgPSBcIm9uUmV2ZXJzZUNvbXBsZXRlXCI7XG5cdFx0XHRcdFx0aXNDb21wbGV0ZSA9IHRoaXMuX3JldmVyc2VkO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh0aW1lIDwgMCkge1xuXHRcdFx0XHRcdHRoaXMuX2FjdGl2ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdGlmIChkdXJhdGlvbiA9PT0gMCkgaWYgKHRoaXMuX2luaXR0ZWQgfHwgIXRoaXMudmFycy5sYXp5IHx8IGZvcmNlKSB7IC8vemVyby1kdXJhdGlvbiB0d2VlbnMgYXJlIHRyaWNreSBiZWNhdXNlIHdlIG11c3QgZGlzY2VybiB0aGUgbW9tZW50dW0vZGlyZWN0aW9uIG9mIHRpbWUgaW4gb3JkZXIgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdGhlIHN0YXJ0aW5nIHZhbHVlcyBzaG91bGQgYmUgcmVuZGVyZWQgb3IgdGhlIGVuZGluZyB2YWx1ZXMuIElmIHRoZSBcInBsYXloZWFkXCIgb2YgaXRzIHRpbWVsaW5lIGdvZXMgcGFzdCB0aGUgemVyby1kdXJhdGlvbiB0d2VlbiBpbiB0aGUgZm9yd2FyZCBkaXJlY3Rpb24gb3IgbGFuZHMgZGlyZWN0bHkgb24gaXQsIHRoZSBlbmQgdmFsdWVzIHNob3VsZCBiZSByZW5kZXJlZCwgYnV0IGlmIHRoZSB0aW1lbGluZSdzIFwicGxheWhlYWRcIiBtb3ZlcyBwYXN0IGl0IGluIHRoZSBiYWNrd2FyZCBkaXJlY3Rpb24gKGZyb20gYSBwb3N0aXRpdmUgdGltZSB0byBhIG5lZ2F0aXZlIHRpbWUpLCB0aGUgc3RhcnRpbmcgdmFsdWVzIG11c3QgYmUgcmVuZGVyZWQuXG5cdFx0XHRcdFx0XHRpZiAocHJldlJhd1ByZXZUaW1lID49IDApIHtcblx0XHRcdFx0XHRcdFx0Zm9yY2UgPSB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0dGhpcy5fcmF3UHJldlRpbWUgPSByYXdQcmV2VGltZSA9ICghc3VwcHJlc3NFdmVudHMgfHwgdGltZSB8fCBwcmV2UmF3UHJldlRpbWUgPT09IHRpbWUpID8gdGltZSA6IF90aW55TnVtOyAvL3doZW4gdGhlIHBsYXloZWFkIGFycml2ZXMgYXQgRVhBQ1RMWSB0aW1lIDAgKHJpZ2h0IG9uIHRvcCkgb2YgYSB6ZXJvLWR1cmF0aW9uIHR3ZWVuLCB3ZSBuZWVkIHRvIGRpc2Nlcm4gaWYgZXZlbnRzIGFyZSBzdXBwcmVzc2VkIHNvIHRoYXQgd2hlbiB0aGUgcGxheWhlYWQgbW92ZXMgYWdhaW4gKG5leHQgdGltZSksIGl0J2xsIHRyaWdnZXIgdGhlIGNhbGxiYWNrLiBJZiBldmVudHMgYXJlIE5PVCBzdXBwcmVzc2VkLCBvYnZpb3VzbHkgdGhlIGNhbGxiYWNrIHdvdWxkIGJlIHRyaWdnZXJlZCBpbiB0aGlzIHJlbmRlci4gQmFzaWNhbGx5LCB0aGUgY2FsbGJhY2sgc2hvdWxkIGZpcmUgZWl0aGVyIHdoZW4gdGhlIHBsYXloZWFkIEFSUklWRVMgb3IgTEVBVkVTIHRoaXMgZXhhY3Qgc3BvdCwgbm90IGJvdGguIEltYWdpbmUgZG9pbmcgYSB0aW1lbGluZS5zZWVrKDApIGFuZCB0aGVyZSdzIGEgY2FsbGJhY2sgdGhhdCBzaXRzIGF0IDAuIFNpbmNlIGV2ZW50cyBhcmUgc3VwcHJlc3NlZCBvbiB0aGF0IHNlZWsoKSBieSBkZWZhdWx0LCBub3RoaW5nIHdpbGwgZmlyZSwgYnV0IHdoZW4gdGhlIHBsYXloZWFkIG1vdmVzIG9mZiBvZiB0aGF0IHBvc2l0aW9uLCB0aGUgY2FsbGJhY2sgc2hvdWxkIGZpcmUuIFRoaXMgYmVoYXZpb3IgaXMgd2hhdCBwZW9wbGUgaW50dWl0aXZlbHkgZXhwZWN0LiBXZSBzZXQgdGhlIF9yYXdQcmV2VGltZSB0byBiZSBhIHByZWNpc2UgdGlueSBudW1iZXIgdG8gaW5kaWNhdGUgdGhpcyBzY2VuYXJpbyByYXRoZXIgdGhhbiB1c2luZyBhbm90aGVyIHByb3BlcnR5L3ZhcmlhYmxlIHdoaWNoIHdvdWxkIGluY3JlYXNlIG1lbW9yeSB1c2FnZS4gVGhpcyB0ZWNobmlxdWUgaXMgbGVzcyByZWFkYWJsZSwgYnV0IG1vcmUgZWZmaWNpZW50LlxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIXRoaXMuX2luaXR0ZWQpIHsgLy9pZiB3ZSByZW5kZXIgdGhlIHZlcnkgYmVnaW5uaW5nICh0aW1lID09IDApIG9mIGEgZnJvbVRvKCksIHdlIG11c3QgZm9yY2UgdGhlIHJlbmRlciAobm9ybWFsIHR3ZWVucyB3b3VsZG4ndCBuZWVkIHRvIHJlbmRlciBhdCBhIHRpbWUgb2YgMCB3aGVuIHRoZSBwcmV2VGltZSB3YXMgYWxzbyAwKS4gVGhpcyBpcyBhbHNvIG1hbmRhdG9yeSB0byBtYWtlIHN1cmUgb3ZlcndyaXRpbmcga2lja3MgaW4gaW1tZWRpYXRlbHkuXG5cdFx0XHRcdFx0Zm9yY2UgPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLl90b3RhbFRpbWUgPSB0aGlzLl90aW1lID0gdGltZTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmICh0aGlzLl9yZXBlYXQgIT09IDApIHtcblx0XHRcdFx0XHRjeWNsZUR1cmF0aW9uID0gZHVyYXRpb24gKyB0aGlzLl9yZXBlYXREZWxheTtcblx0XHRcdFx0XHR0aGlzLl9jeWNsZSA9ICh0aGlzLl90b3RhbFRpbWUgLyBjeWNsZUR1cmF0aW9uKSA+PiAwOyAvL29yaWdpbmFsbHkgX3RvdGFsVGltZSAlIGN5Y2xlRHVyYXRpb24gYnV0IGZsb2F0aW5nIHBvaW50IGVycm9ycyBjYXVzZWQgcHJvYmxlbXMsIHNvIEkgbm9ybWFsaXplZCBpdC4gKDQgJSAwLjggc2hvdWxkIGJlIDAgYnV0IEZsYXNoIHJlcG9ydHMgaXQgYXMgMC43OTk5OTk5OSEpXG5cdFx0XHRcdFx0aWYgKHRoaXMuX2N5Y2xlICE9PSAwKSBpZiAodGhpcy5fY3ljbGUgPT09IHRoaXMuX3RvdGFsVGltZSAvIGN5Y2xlRHVyYXRpb24pIHtcblx0XHRcdFx0XHRcdHRoaXMuX2N5Y2xlLS07IC8vb3RoZXJ3aXNlIHdoZW4gcmVuZGVyZWQgZXhhY3RseSBhdCB0aGUgZW5kIHRpbWUsIGl0IHdpbGwgYWN0IGFzIHRob3VnaCBpdCBpcyByZXBlYXRpbmcgKGF0IHRoZSBiZWdpbm5pbmcpXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRoaXMuX3RpbWUgPSB0aGlzLl90b3RhbFRpbWUgLSAodGhpcy5fY3ljbGUgKiBjeWNsZUR1cmF0aW9uKTtcblx0XHRcdFx0XHRpZiAodGhpcy5feW95bykgaWYgKCh0aGlzLl9jeWNsZSAmIDEpICE9PSAwKSB7XG5cdFx0XHRcdFx0XHR0aGlzLl90aW1lID0gZHVyYXRpb24gLSB0aGlzLl90aW1lO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAodGhpcy5fdGltZSA+IGR1cmF0aW9uKSB7XG5cdFx0XHRcdFx0XHR0aGlzLl90aW1lID0gZHVyYXRpb247XG5cdFx0XHRcdFx0fSBlbHNlIGlmICh0aGlzLl90aW1lIDwgMCkge1xuXHRcdFx0XHRcdFx0dGhpcy5fdGltZSA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHRoaXMuX2Vhc2VUeXBlKSB7XG5cdFx0XHRcdFx0ciA9IHRoaXMuX3RpbWUgLyBkdXJhdGlvbjtcblx0XHRcdFx0XHR0eXBlID0gdGhpcy5fZWFzZVR5cGU7XG5cdFx0XHRcdFx0cG93ID0gdGhpcy5fZWFzZVBvd2VyO1xuXHRcdFx0XHRcdGlmICh0eXBlID09PSAxIHx8ICh0eXBlID09PSAzICYmIHIgPj0gMC41KSkge1xuXHRcdFx0XHRcdFx0ciA9IDEgLSByO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAodHlwZSA9PT0gMykge1xuXHRcdFx0XHRcdFx0ciAqPSAyO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAocG93ID09PSAxKSB7XG5cdFx0XHRcdFx0XHRyICo9IHI7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChwb3cgPT09IDIpIHtcblx0XHRcdFx0XHRcdHIgKj0gciAqIHI7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChwb3cgPT09IDMpIHtcblx0XHRcdFx0XHRcdHIgKj0gciAqIHIgKiByO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAocG93ID09PSA0KSB7XG5cdFx0XHRcdFx0XHRyICo9IHIgKiByICogciAqIHI7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKHR5cGUgPT09IDEpIHtcblx0XHRcdFx0XHRcdHRoaXMucmF0aW8gPSAxIC0gcjtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHR5cGUgPT09IDIpIHtcblx0XHRcdFx0XHRcdHRoaXMucmF0aW8gPSByO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAodGhpcy5fdGltZSAvIGR1cmF0aW9uIDwgMC41KSB7XG5cdFx0XHRcdFx0XHR0aGlzLnJhdGlvID0gciAvIDI7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRoaXMucmF0aW8gPSAxIC0gKHIgLyAyKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aGlzLnJhdGlvID0gdGhpcy5fZWFzZS5nZXRSYXRpbyh0aGlzLl90aW1lIC8gZHVyYXRpb24pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdGlmIChwcmV2VGltZSA9PT0gdGhpcy5fdGltZSAmJiAhZm9yY2UgJiYgcHJldkN5Y2xlID09PSB0aGlzLl9jeWNsZSkge1xuXHRcdFx0XHRpZiAocHJldlRvdGFsVGltZSAhPT0gdGhpcy5fdG90YWxUaW1lKSBpZiAodGhpcy5fb25VcGRhdGUpIGlmICghc3VwcHJlc3NFdmVudHMpIHsgLy9zbyB0aGF0IG9uVXBkYXRlIGZpcmVzIGV2ZW4gZHVyaW5nIHRoZSByZXBlYXREZWxheSAtIGFzIGxvbmcgYXMgdGhlIHRvdGFsVGltZSBjaGFuZ2VkLCB3ZSBzaG91bGQgdHJpZ2dlciBvblVwZGF0ZS5cblx0XHRcdFx0XHR0aGlzLl9jYWxsYmFjayhcIm9uVXBkYXRlXCIpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH0gZWxzZSBpZiAoIXRoaXMuX2luaXR0ZWQpIHtcblx0XHRcdFx0dGhpcy5faW5pdCgpO1xuXHRcdFx0XHRpZiAoIXRoaXMuX2luaXR0ZWQgfHwgdGhpcy5fZ2MpIHsgLy9pbW1lZGlhdGVSZW5kZXIgdHdlZW5zIHR5cGljYWxseSB3b24ndCBpbml0aWFsaXplIHVudGlsIHRoZSBwbGF5aGVhZCBhZHZhbmNlcyAoX3RpbWUgaXMgZ3JlYXRlciB0aGFuIDApIGluIG9yZGVyIHRvIGVuc3VyZSB0aGF0IG92ZXJ3cml0aW5nIG9jY3VycyBwcm9wZXJseS4gQWxzbywgaWYgYWxsIG9mIHRoZSB0d2VlbmluZyBwcm9wZXJ0aWVzIGhhdmUgYmVlbiBvdmVyd3JpdHRlbiAod2hpY2ggd291bGQgY2F1c2UgX2djIHRvIGJlIHRydWUsIGFzIHNldCBpbiBfaW5pdCgpKSwgd2Ugc2hvdWxkbid0IGNvbnRpbnVlIG90aGVyd2lzZSBhbiBvblN0YXJ0IGNhbGxiYWNrIGNvdWxkIGJlIGNhbGxlZCBmb3IgZXhhbXBsZS5cblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH0gZWxzZSBpZiAoIWZvcmNlICYmIHRoaXMuX2ZpcnN0UFQgJiYgKCh0aGlzLnZhcnMubGF6eSAhPT0gZmFsc2UgJiYgdGhpcy5fZHVyYXRpb24pIHx8ICh0aGlzLnZhcnMubGF6eSAmJiAhdGhpcy5fZHVyYXRpb24pKSkgeyAvL3dlIHN0aWNrIGl0IGluIHRoZSBxdWV1ZSBmb3IgcmVuZGVyaW5nIGF0IHRoZSB2ZXJ5IGVuZCBvZiB0aGUgdGljayAtIHRoaXMgaXMgYSBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24gYmVjYXVzZSBicm93c2VycyBpbnZhbGlkYXRlIHN0eWxlcyBhbmQgZm9yY2UgYSByZWNhbGN1bGF0aW9uIGlmIHlvdSByZWFkLCB3cml0ZSwgYW5kIHRoZW4gcmVhZCBzdHlsZSBkYXRhIChzbyBpdCdzIGJldHRlciB0byByZWFkL3JlYWQvcmVhZC93cml0ZS93cml0ZS93cml0ZSB0aGFuIHJlYWQvd3JpdGUvcmVhZC93cml0ZS9yZWFkL3dyaXRlKS4gVGhlIGRvd24gc2lkZSwgb2YgY291cnNlLCBpcyB0aGF0IHVzdWFsbHkgeW91IFdBTlQgdGhpbmdzIHRvIHJlbmRlciBpbW1lZGlhdGVseSBiZWNhdXNlIHlvdSBtYXkgaGF2ZSBjb2RlIHJ1bm5pbmcgcmlnaHQgYWZ0ZXIgdGhhdCB3aGljaCBkZXBlbmRzIG9uIHRoZSBjaGFuZ2UuIExpa2UgaW1hZ2luZSBydW5uaW5nIFR3ZWVuTGl0ZS5zZXQoLi4uKSBhbmQgdGhlbiBpbW1lZGlhdGVseSBhZnRlciB0aGF0LCBjcmVhdGluZyBhIG5vdGhlciB0d2VlbiB0aGF0IGFuaW1hdGVzIHRoZSBzYW1lIHByb3BlcnR5IHRvIGFub3RoZXIgdmFsdWU7IHRoZSBzdGFydGluZyB2YWx1ZXMgb2YgdGhhdCAybmQgdHdlZW4gd291bGRuJ3QgYmUgYWNjdXJhdGUgaWYgbGF6eSBpcyB0cnVlLlxuXHRcdFx0XHRcdHRoaXMuX3RpbWUgPSBwcmV2VGltZTtcblx0XHRcdFx0XHR0aGlzLl90b3RhbFRpbWUgPSBwcmV2VG90YWxUaW1lO1xuXHRcdFx0XHRcdHRoaXMuX3Jhd1ByZXZUaW1lID0gcHJldlJhd1ByZXZUaW1lO1xuXHRcdFx0XHRcdHRoaXMuX2N5Y2xlID0gcHJldkN5Y2xlO1xuXHRcdFx0XHRcdFR3ZWVuTGl0ZUludGVybmFscy5sYXp5VHdlZW5zLnB1c2godGhpcyk7XG5cdFx0XHRcdFx0dGhpcy5fbGF6eSA9IFt0aW1lLCBzdXBwcmVzc0V2ZW50c107XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vX2Vhc2UgaXMgaW5pdGlhbGx5IHNldCB0byBkZWZhdWx0RWFzZSwgc28gbm93IHRoYXQgaW5pdCgpIGhhcyBydW4sIF9lYXNlIGlzIHNldCBwcm9wZXJseSBhbmQgd2UgbmVlZCB0byByZWNhbGN1bGF0ZSB0aGUgcmF0aW8uIE92ZXJhbGwgdGhpcyBpcyBmYXN0ZXIgdGhhbiB1c2luZyBjb25kaXRpb25hbCBsb2dpYyBlYXJsaWVyIGluIHRoZSBtZXRob2QgdG8gYXZvaWQgaGF2aW5nIHRvIHNldCByYXRpbyB0d2ljZSBiZWNhdXNlIHdlIG9ubHkgaW5pdCgpIG9uY2UgYnV0IHJlbmRlclRpbWUoKSBnZXRzIGNhbGxlZCBWRVJZIGZyZXF1ZW50bHkuXG5cdFx0XHRcdGlmICh0aGlzLl90aW1lICYmICFpc0NvbXBsZXRlKSB7XG5cdFx0XHRcdFx0dGhpcy5yYXRpbyA9IHRoaXMuX2Vhc2UuZ2V0UmF0aW8odGhpcy5fdGltZSAvIGR1cmF0aW9uKTtcblx0XHRcdFx0fSBlbHNlIGlmIChpc0NvbXBsZXRlICYmIHRoaXMuX2Vhc2UuX2NhbGNFbmQpIHtcblx0XHRcdFx0XHR0aGlzLnJhdGlvID0gdGhpcy5fZWFzZS5nZXRSYXRpbygodGhpcy5fdGltZSA9PT0gMCkgPyAwIDogMSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICh0aGlzLl9sYXp5ICE9PSBmYWxzZSkge1xuXHRcdFx0XHR0aGlzLl9sYXp5ID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGlmICghdGhpcy5fYWN0aXZlKSBpZiAoIXRoaXMuX3BhdXNlZCAmJiB0aGlzLl90aW1lICE9PSBwcmV2VGltZSAmJiB0aW1lID49IDApIHtcblx0XHRcdFx0dGhpcy5fYWN0aXZlID0gdHJ1ZTsgLy9zbyB0aGF0IGlmIHRoZSB1c2VyIHJlbmRlcnMgYSB0d2VlbiAoYXMgb3Bwb3NlZCB0byB0aGUgdGltZWxpbmUgcmVuZGVyaW5nIGl0KSwgdGhlIHRpbWVsaW5lIGlzIGZvcmNlZCB0byByZS1yZW5kZXIgYW5kIGFsaWduIGl0IHdpdGggdGhlIHByb3BlciB0aW1lL2ZyYW1lIG9uIHRoZSBuZXh0IHJlbmRlcmluZyBjeWNsZS4gTWF5YmUgdGhlIHR3ZWVuIGFscmVhZHkgZmluaXNoZWQgYnV0IHRoZSB1c2VyIG1hbnVhbGx5IHJlLXJlbmRlcnMgaXQgYXMgaGFsZndheSBkb25lLlxuXHRcdFx0fVxuXHRcdFx0aWYgKHByZXZUb3RhbFRpbWUgPT09IDApIHtcblx0XHRcdFx0aWYgKHRoaXMuX2luaXR0ZWQgPT09IDIgJiYgdGltZSA+IDApIHtcblx0XHRcdFx0XHQvL3RoaXMuaW52YWxpZGF0ZSgpO1xuXHRcdFx0XHRcdHRoaXMuX2luaXQoKTsgLy93aWxsIGp1c3QgYXBwbHkgb3ZlcndyaXRpbmcgc2luY2UgX2luaXR0ZWQgb2YgKDIpIG1lYW5zIGl0IHdhcyBhIGZyb20oKSB0d2VlbiB0aGF0IGhhZCBpbW1lZGlhdGVSZW5kZXI6dHJ1ZVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh0aGlzLl9zdGFydEF0KSB7XG5cdFx0XHRcdFx0aWYgKHRpbWUgPj0gMCkge1xuXHRcdFx0XHRcdFx0dGhpcy5fc3RhcnRBdC5yZW5kZXIodGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCFjYWxsYmFjaykge1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBcIl9kdW1teUdTXCI7IC8vaWYgbm8gY2FsbGJhY2sgaXMgZGVmaW5lZCwgdXNlIGEgZHVtbXkgdmFsdWUganVzdCBzbyB0aGF0IHRoZSBjb25kaXRpb24gYXQgdGhlIGVuZCBldmFsdWF0ZXMgYXMgdHJ1ZSBiZWNhdXNlIF9zdGFydEF0IHNob3VsZCByZW5kZXIgQUZURVIgdGhlIG5vcm1hbCByZW5kZXIgbG9vcCB3aGVuIHRoZSB0aW1lIGlzIG5lZ2F0aXZlLiBXZSBjb3VsZCBoYW5kbGUgdGhpcyBpbiBhIG1vcmUgaW50dWl0aXZlIHdheSwgb2YgY291cnNlLCBidXQgdGhlIHJlbmRlciBsb29wIGlzIHRoZSBNT1NUIGltcG9ydGFudCB0aGluZyB0byBvcHRpbWl6ZSwgc28gdGhpcyB0ZWNobmlxdWUgYWxsb3dzIHVzIHRvIGF2b2lkIGFkZGluZyBleHRyYSBjb25kaXRpb25hbCBsb2dpYyBpbiBhIGhpZ2gtZnJlcXVlbmN5IGFyZWEuXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh0aGlzLnZhcnMub25TdGFydCkgaWYgKHRoaXMuX3RvdGFsVGltZSAhPT0gMCB8fCBkdXJhdGlvbiA9PT0gMCkgaWYgKCFzdXBwcmVzc0V2ZW50cykge1xuXHRcdFx0XHRcdHRoaXMuX2NhbGxiYWNrKFwib25TdGFydFwiKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRwdCA9IHRoaXMuX2ZpcnN0UFQ7XG5cdFx0XHR3aGlsZSAocHQpIHtcblx0XHRcdFx0aWYgKHB0LmYpIHtcblx0XHRcdFx0XHRwdC50W3B0LnBdKHB0LmMgKiB0aGlzLnJhdGlvICsgcHQucyk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cHQudFtwdC5wXSA9IHB0LmMgKiB0aGlzLnJhdGlvICsgcHQucztcblx0XHRcdFx0fVxuXHRcdFx0XHRwdCA9IHB0Ll9uZXh0O1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZiAodGhpcy5fb25VcGRhdGUpIHtcblx0XHRcdFx0aWYgKHRpbWUgPCAwKSBpZiAodGhpcy5fc3RhcnRBdCAmJiB0aGlzLl9zdGFydFRpbWUpIHsgLy9pZiB0aGUgdHdlZW4gaXMgcG9zaXRpb25lZCBhdCB0aGUgVkVSWSBiZWdpbm5pbmcgKF9zdGFydFRpbWUgMCkgb2YgaXRzIHBhcmVudCB0aW1lbGluZSwgaXQncyBpbGxlZ2FsIGZvciB0aGUgcGxheWhlYWQgdG8gZ28gYmFjayBmdXJ0aGVyLCBzbyB3ZSBzaG91bGQgbm90IHJlbmRlciB0aGUgcmVjb3JkZWQgc3RhcnRBdCB2YWx1ZXMuXG5cdFx0XHRcdFx0dGhpcy5fc3RhcnRBdC5yZW5kZXIodGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTsgLy9ub3RlOiBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucywgd2UgdHVjayB0aGlzIGNvbmRpdGlvbmFsIGxvZ2ljIGluc2lkZSBsZXNzIHRyYXZlbGVkIGFyZWFzIChtb3N0IHR3ZWVucyBkb24ndCBoYXZlIGFuIG9uVXBkYXRlKS4gV2UnZCBqdXN0IGhhdmUgaXQgYXQgdGhlIGVuZCBiZWZvcmUgdGhlIG9uQ29tcGxldGUsIGJ1dCB0aGUgdmFsdWVzIHNob3VsZCBiZSB1cGRhdGVkIGJlZm9yZSBhbnkgb25VcGRhdGUgaXMgY2FsbGVkLCBzbyB3ZSBBTFNPIHB1dCBpdCBoZXJlIGFuZCB0aGVuIGlmIGl0J3Mgbm90IGNhbGxlZCwgd2UgZG8gc28gbGF0ZXIgbmVhciB0aGUgb25Db21wbGV0ZS5cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIXN1cHByZXNzRXZlbnRzKSBpZiAodGhpcy5fdG90YWxUaW1lICE9PSBwcmV2VG90YWxUaW1lIHx8IGlzQ29tcGxldGUpIHtcblx0XHRcdFx0XHR0aGlzLl9jYWxsYmFjayhcIm9uVXBkYXRlXCIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAodGhpcy5fY3ljbGUgIT09IHByZXZDeWNsZSkgaWYgKCFzdXBwcmVzc0V2ZW50cykgaWYgKCF0aGlzLl9nYykgaWYgKHRoaXMudmFycy5vblJlcGVhdCkge1xuXHRcdFx0XHR0aGlzLl9jYWxsYmFjayhcIm9uUmVwZWF0XCIpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGNhbGxiYWNrKSBpZiAoIXRoaXMuX2djIHx8IGZvcmNlKSB7IC8vY2hlY2sgZ2MgYmVjYXVzZSB0aGVyZSdzIGEgY2hhbmNlIHRoYXQga2lsbCgpIGNvdWxkIGJlIGNhbGxlZCBpbiBhbiBvblVwZGF0ZVxuXHRcdFx0XHRpZiAodGltZSA8IDAgJiYgdGhpcy5fc3RhcnRBdCAmJiAhdGhpcy5fb25VcGRhdGUgJiYgdGhpcy5fc3RhcnRUaW1lKSB7IC8vaWYgdGhlIHR3ZWVuIGlzIHBvc2l0aW9uZWQgYXQgdGhlIFZFUlkgYmVnaW5uaW5nIChfc3RhcnRUaW1lIDApIG9mIGl0cyBwYXJlbnQgdGltZWxpbmUsIGl0J3MgaWxsZWdhbCBmb3IgdGhlIHBsYXloZWFkIHRvIGdvIGJhY2sgZnVydGhlciwgc28gd2Ugc2hvdWxkIG5vdCByZW5kZXIgdGhlIHJlY29yZGVkIHN0YXJ0QXQgdmFsdWVzLlxuXHRcdFx0XHRcdHRoaXMuX3N0YXJ0QXQucmVuZGVyKHRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGlzQ29tcGxldGUpIHtcblx0XHRcdFx0XHRpZiAodGhpcy5fdGltZWxpbmUuYXV0b1JlbW92ZUNoaWxkcmVuKSB7XG5cdFx0XHRcdFx0XHR0aGlzLl9lbmFibGVkKGZhbHNlLCBmYWxzZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRoaXMuX2FjdGl2ZSA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICghc3VwcHJlc3NFdmVudHMgJiYgdGhpcy52YXJzW2NhbGxiYWNrXSkge1xuXHRcdFx0XHRcdHRoaXMuX2NhbGxiYWNrKGNhbGxiYWNrKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoZHVyYXRpb24gPT09IDAgJiYgdGhpcy5fcmF3UHJldlRpbWUgPT09IF90aW55TnVtICYmIHJhd1ByZXZUaW1lICE9PSBfdGlueU51bSkgeyAvL3RoZSBvbkNvbXBsZXRlIG9yIG9uUmV2ZXJzZUNvbXBsZXRlIGNvdWxkIHRyaWdnZXIgbW92ZW1lbnQgb2YgdGhlIHBsYXloZWFkIGFuZCBmb3IgemVyby1kdXJhdGlvbiB0d2VlbnMgKHdoaWNoIG11c3QgZGlzY2VybiBkaXJlY3Rpb24pIHRoYXQgbGFuZCBkaXJlY3RseSBiYWNrIG9uIHRoZWlyIHN0YXJ0IHRpbWUsIHdlIGRvbid0IHdhbnQgdG8gZmlyZSBhZ2FpbiBvbiB0aGUgbmV4dCByZW5kZXIuIFRoaW5rIG9mIHNldmVyYWwgYWRkUGF1c2UoKSdzIGluIGEgdGltZWxpbmUgdGhhdCBmb3JjZXMgdGhlIHBsYXloZWFkIHRvIGEgY2VydGFpbiBzcG90LCBidXQgd2hhdCBpZiBpdCdzIGFscmVhZHkgcGF1c2VkIGFuZCBhbm90aGVyIHR3ZWVuIGlzIHR3ZWVuaW5nIHRoZSBcInRpbWVcIiBvZiB0aGUgdGltZWxpbmU/IEVhY2ggdGltZSBpdCBtb3ZlcyBbZm9yd2FyZF0gcGFzdCB0aGF0IHNwb3QsIGl0IHdvdWxkIG1vdmUgYmFjaywgYW5kIHNpbmNlIHN1cHByZXNzRXZlbnRzIGlzIHRydWUsIGl0J2QgcmVzZXQgX3Jhd1ByZXZUaW1lIHRvIF90aW55TnVtIHNvIHRoYXQgd2hlbiBpdCBiZWdpbnMgYWdhaW4sIHRoZSBjYWxsYmFjayB3b3VsZCBmaXJlIChzbyB1bHRpbWF0ZWx5IGl0IGNvdWxkIGJvdW5jZSBiYWNrIGFuZCBmb3J0aCBkdXJpbmcgdGhhdCB0d2VlbikuIEFnYWluLCB0aGlzIGlzIGEgdmVyeSB1bmNvbW1vbiBzY2VuYXJpbywgYnV0IHBvc3NpYmxlIG5vbmV0aGVsZXNzLlxuXHRcdFx0XHRcdHRoaXMuX3Jhd1ByZXZUaW1lID0gMDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdFx0XG4vLy0tLS0gU1RBVElDIEZVTkNUSU9OUyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHRcdFxuXHRcdFR3ZWVuTWF4LnRvID0gZnVuY3Rpb24odGFyZ2V0LCBkdXJhdGlvbiwgdmFycykge1xuXHRcdFx0cmV0dXJuIG5ldyBUd2Vlbk1heCh0YXJnZXQsIGR1cmF0aW9uLCB2YXJzKTtcblx0XHR9O1xuXHRcdFxuXHRcdFR3ZWVuTWF4LmZyb20gPSBmdW5jdGlvbih0YXJnZXQsIGR1cmF0aW9uLCB2YXJzKSB7XG5cdFx0XHR2YXJzLnJ1bkJhY2t3YXJkcyA9IHRydWU7XG5cdFx0XHR2YXJzLmltbWVkaWF0ZVJlbmRlciA9ICh2YXJzLmltbWVkaWF0ZVJlbmRlciAhPSBmYWxzZSk7XG5cdFx0XHRyZXR1cm4gbmV3IFR3ZWVuTWF4KHRhcmdldCwgZHVyYXRpb24sIHZhcnMpO1xuXHRcdH07XG5cdFx0XG5cdFx0VHdlZW5NYXguZnJvbVRvID0gZnVuY3Rpb24odGFyZ2V0LCBkdXJhdGlvbiwgZnJvbVZhcnMsIHRvVmFycykge1xuXHRcdFx0dG9WYXJzLnN0YXJ0QXQgPSBmcm9tVmFycztcblx0XHRcdHRvVmFycy5pbW1lZGlhdGVSZW5kZXIgPSAodG9WYXJzLmltbWVkaWF0ZVJlbmRlciAhPSBmYWxzZSAmJiBmcm9tVmFycy5pbW1lZGlhdGVSZW5kZXIgIT0gZmFsc2UpO1xuXHRcdFx0cmV0dXJuIG5ldyBUd2Vlbk1heCh0YXJnZXQsIGR1cmF0aW9uLCB0b1ZhcnMpO1xuXHRcdH07XG5cdFx0XG5cdFx0VHdlZW5NYXguc3RhZ2dlclRvID0gVHdlZW5NYXguYWxsVG8gPSBmdW5jdGlvbih0YXJnZXRzLCBkdXJhdGlvbiwgdmFycywgc3RhZ2dlciwgb25Db21wbGV0ZUFsbCwgb25Db21wbGV0ZUFsbFBhcmFtcywgb25Db21wbGV0ZUFsbFNjb3BlKSB7XG5cdFx0XHRzdGFnZ2VyID0gc3RhZ2dlciB8fCAwO1xuXHRcdFx0dmFyIGRlbGF5ID0gdmFycy5kZWxheSB8fCAwLFxuXHRcdFx0XHRhID0gW10sXG5cdFx0XHRcdGZpbmFsQ29tcGxldGUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAodmFycy5vbkNvbXBsZXRlKSB7XG5cdFx0XHRcdFx0XHR2YXJzLm9uQ29tcGxldGUuYXBwbHkodmFycy5vbkNvbXBsZXRlU2NvcGUgfHwgdGhpcywgYXJndW1lbnRzKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0b25Db21wbGV0ZUFsbC5hcHBseShvbkNvbXBsZXRlQWxsU2NvcGUgfHwgdmFycy5jYWxsYmFja1Njb3BlIHx8IHRoaXMsIG9uQ29tcGxldGVBbGxQYXJhbXMgfHwgX2JsYW5rQXJyYXkpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRjeWNsZSA9IHZhcnMuY3ljbGUsXG5cdFx0XHRcdGZyb21DeWNsZSA9ICh2YXJzLnN0YXJ0QXQgJiYgdmFycy5zdGFydEF0LmN5Y2xlKSxcblx0XHRcdFx0bCwgY29weSwgaSwgcDtcblx0XHRcdGlmICghX2lzQXJyYXkodGFyZ2V0cykpIHtcblx0XHRcdFx0aWYgKHR5cGVvZih0YXJnZXRzKSA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0XHRcdHRhcmdldHMgPSBUd2VlbkxpdGUuc2VsZWN0b3IodGFyZ2V0cykgfHwgdGFyZ2V0cztcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoX2lzU2VsZWN0b3IodGFyZ2V0cykpIHtcblx0XHRcdFx0XHR0YXJnZXRzID0gX3NsaWNlKHRhcmdldHMpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHR0YXJnZXRzID0gdGFyZ2V0cyB8fCBbXTtcblx0XHRcdGlmIChzdGFnZ2VyIDwgMCkge1xuXHRcdFx0XHR0YXJnZXRzID0gX3NsaWNlKHRhcmdldHMpO1xuXHRcdFx0XHR0YXJnZXRzLnJldmVyc2UoKTtcblx0XHRcdFx0c3RhZ2dlciAqPSAtMTtcblx0XHRcdH1cblx0XHRcdGwgPSB0YXJnZXRzLmxlbmd0aCAtIDE7XG5cdFx0XHRmb3IgKGkgPSAwOyBpIDw9IGw7IGkrKykge1xuXHRcdFx0XHRjb3B5ID0ge307XG5cdFx0XHRcdGZvciAocCBpbiB2YXJzKSB7XG5cdFx0XHRcdFx0Y29weVtwXSA9IHZhcnNbcF07XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGN5Y2xlKSB7XG5cdFx0XHRcdFx0X2FwcGx5Q3ljbGUoY29weSwgdGFyZ2V0cywgaSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGZyb21DeWNsZSkge1xuXHRcdFx0XHRcdGZyb21DeWNsZSA9IGNvcHkuc3RhcnRBdCA9IHt9O1xuXHRcdFx0XHRcdGZvciAocCBpbiB2YXJzLnN0YXJ0QXQpIHtcblx0XHRcdFx0XHRcdGZyb21DeWNsZVtwXSA9IHZhcnMuc3RhcnRBdFtwXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0X2FwcGx5Q3ljbGUoY29weS5zdGFydEF0LCB0YXJnZXRzLCBpKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb3B5LmRlbGF5ID0gZGVsYXk7XG5cdFx0XHRcdGlmIChpID09PSBsICYmIG9uQ29tcGxldGVBbGwpIHtcblx0XHRcdFx0XHRjb3B5Lm9uQ29tcGxldGUgPSBmaW5hbENvbXBsZXRlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGFbaV0gPSBuZXcgVHdlZW5NYXgodGFyZ2V0c1tpXSwgZHVyYXRpb24sIGNvcHkpO1xuXHRcdFx0XHRkZWxheSArPSBzdGFnZ2VyO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGE7XG5cdFx0fTtcblx0XHRcblx0XHRUd2Vlbk1heC5zdGFnZ2VyRnJvbSA9IFR3ZWVuTWF4LmFsbEZyb20gPSBmdW5jdGlvbih0YXJnZXRzLCBkdXJhdGlvbiwgdmFycywgc3RhZ2dlciwgb25Db21wbGV0ZUFsbCwgb25Db21wbGV0ZUFsbFBhcmFtcywgb25Db21wbGV0ZUFsbFNjb3BlKSB7XG5cdFx0XHR2YXJzLnJ1bkJhY2t3YXJkcyA9IHRydWU7XG5cdFx0XHR2YXJzLmltbWVkaWF0ZVJlbmRlciA9ICh2YXJzLmltbWVkaWF0ZVJlbmRlciAhPSBmYWxzZSk7XG5cdFx0XHRyZXR1cm4gVHdlZW5NYXguc3RhZ2dlclRvKHRhcmdldHMsIGR1cmF0aW9uLCB2YXJzLCBzdGFnZ2VyLCBvbkNvbXBsZXRlQWxsLCBvbkNvbXBsZXRlQWxsUGFyYW1zLCBvbkNvbXBsZXRlQWxsU2NvcGUpO1xuXHRcdH07XG5cdFx0XG5cdFx0VHdlZW5NYXguc3RhZ2dlckZyb21UbyA9IFR3ZWVuTWF4LmFsbEZyb21UbyA9IGZ1bmN0aW9uKHRhcmdldHMsIGR1cmF0aW9uLCBmcm9tVmFycywgdG9WYXJzLCBzdGFnZ2VyLCBvbkNvbXBsZXRlQWxsLCBvbkNvbXBsZXRlQWxsUGFyYW1zLCBvbkNvbXBsZXRlQWxsU2NvcGUpIHtcblx0XHRcdHRvVmFycy5zdGFydEF0ID0gZnJvbVZhcnM7XG5cdFx0XHR0b1ZhcnMuaW1tZWRpYXRlUmVuZGVyID0gKHRvVmFycy5pbW1lZGlhdGVSZW5kZXIgIT0gZmFsc2UgJiYgZnJvbVZhcnMuaW1tZWRpYXRlUmVuZGVyICE9IGZhbHNlKTtcblx0XHRcdHJldHVybiBUd2Vlbk1heC5zdGFnZ2VyVG8odGFyZ2V0cywgZHVyYXRpb24sIHRvVmFycywgc3RhZ2dlciwgb25Db21wbGV0ZUFsbCwgb25Db21wbGV0ZUFsbFBhcmFtcywgb25Db21wbGV0ZUFsbFNjb3BlKTtcblx0XHR9O1xuXHRcdFx0XHRcblx0XHRUd2Vlbk1heC5kZWxheWVkQ2FsbCA9IGZ1bmN0aW9uKGRlbGF5LCBjYWxsYmFjaywgcGFyYW1zLCBzY29wZSwgdXNlRnJhbWVzKSB7XG5cdFx0XHRyZXR1cm4gbmV3IFR3ZWVuTWF4KGNhbGxiYWNrLCAwLCB7ZGVsYXk6ZGVsYXksIG9uQ29tcGxldGU6Y2FsbGJhY2ssIG9uQ29tcGxldGVQYXJhbXM6cGFyYW1zLCBjYWxsYmFja1Njb3BlOnNjb3BlLCBvblJldmVyc2VDb21wbGV0ZTpjYWxsYmFjaywgb25SZXZlcnNlQ29tcGxldGVQYXJhbXM6cGFyYW1zLCBpbW1lZGlhdGVSZW5kZXI6ZmFsc2UsIHVzZUZyYW1lczp1c2VGcmFtZXMsIG92ZXJ3cml0ZTowfSk7XG5cdFx0fTtcblx0XHRcblx0XHRUd2Vlbk1heC5zZXQgPSBmdW5jdGlvbih0YXJnZXQsIHZhcnMpIHtcblx0XHRcdHJldHVybiBuZXcgVHdlZW5NYXgodGFyZ2V0LCAwLCB2YXJzKTtcblx0XHR9O1xuXHRcdFxuXHRcdFR3ZWVuTWF4LmlzVHdlZW5pbmcgPSBmdW5jdGlvbih0YXJnZXQpIHtcblx0XHRcdHJldHVybiAoVHdlZW5MaXRlLmdldFR3ZWVuc09mKHRhcmdldCwgdHJ1ZSkubGVuZ3RoID4gMCk7XG5cdFx0fTtcblx0XHRcblx0XHR2YXIgX2dldENoaWxkcmVuT2YgPSBmdW5jdGlvbih0aW1lbGluZSwgaW5jbHVkZVRpbWVsaW5lcykge1xuXHRcdFx0XHR2YXIgYSA9IFtdLFxuXHRcdFx0XHRcdGNudCA9IDAsXG5cdFx0XHRcdFx0dHdlZW4gPSB0aW1lbGluZS5fZmlyc3Q7XG5cdFx0XHRcdHdoaWxlICh0d2Vlbikge1xuXHRcdFx0XHRcdGlmICh0d2VlbiBpbnN0YW5jZW9mIFR3ZWVuTGl0ZSkge1xuXHRcdFx0XHRcdFx0YVtjbnQrK10gPSB0d2Vlbjtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0aWYgKGluY2x1ZGVUaW1lbGluZXMpIHtcblx0XHRcdFx0XHRcdFx0YVtjbnQrK10gPSB0d2Vlbjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGEgPSBhLmNvbmNhdChfZ2V0Q2hpbGRyZW5PZih0d2VlbiwgaW5jbHVkZVRpbWVsaW5lcykpO1xuXHRcdFx0XHRcdFx0Y250ID0gYS5sZW5ndGg7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHR3ZWVuID0gdHdlZW4uX25leHQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGE7XG5cdFx0XHR9LCBcblx0XHRcdGdldEFsbFR3ZWVucyA9IFR3ZWVuTWF4LmdldEFsbFR3ZWVucyA9IGZ1bmN0aW9uKGluY2x1ZGVUaW1lbGluZXMpIHtcblx0XHRcdFx0cmV0dXJuIF9nZXRDaGlsZHJlbk9mKEFuaW1hdGlvbi5fcm9vdFRpbWVsaW5lLCBpbmNsdWRlVGltZWxpbmVzKS5jb25jYXQoIF9nZXRDaGlsZHJlbk9mKEFuaW1hdGlvbi5fcm9vdEZyYW1lc1RpbWVsaW5lLCBpbmNsdWRlVGltZWxpbmVzKSApO1xuXHRcdFx0fTtcblx0XHRcblx0XHRUd2Vlbk1heC5raWxsQWxsID0gZnVuY3Rpb24oY29tcGxldGUsIHR3ZWVucywgZGVsYXllZENhbGxzLCB0aW1lbGluZXMpIHtcblx0XHRcdGlmICh0d2VlbnMgPT0gbnVsbCkge1xuXHRcdFx0XHR0d2VlbnMgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGRlbGF5ZWRDYWxscyA9PSBudWxsKSB7XG5cdFx0XHRcdGRlbGF5ZWRDYWxscyA9IHRydWU7XG5cdFx0XHR9XG5cdFx0XHR2YXIgYSA9IGdldEFsbFR3ZWVucygodGltZWxpbmVzICE9IGZhbHNlKSksXG5cdFx0XHRcdGwgPSBhLmxlbmd0aCxcblx0XHRcdFx0YWxsVHJ1ZSA9ICh0d2VlbnMgJiYgZGVsYXllZENhbGxzICYmIHRpbWVsaW5lcyksXG5cdFx0XHRcdGlzREMsIHR3ZWVuLCBpO1xuXHRcdFx0Zm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuXHRcdFx0XHR0d2VlbiA9IGFbaV07XG5cdFx0XHRcdGlmIChhbGxUcnVlIHx8ICh0d2VlbiBpbnN0YW5jZW9mIFNpbXBsZVRpbWVsaW5lKSB8fCAoKGlzREMgPSAodHdlZW4udGFyZ2V0ID09PSB0d2Vlbi52YXJzLm9uQ29tcGxldGUpKSAmJiBkZWxheWVkQ2FsbHMpIHx8ICh0d2VlbnMgJiYgIWlzREMpKSB7XG5cdFx0XHRcdFx0aWYgKGNvbXBsZXRlKSB7XG5cdFx0XHRcdFx0XHR0d2Vlbi50b3RhbFRpbWUodHdlZW4uX3JldmVyc2VkID8gMCA6IHR3ZWVuLnRvdGFsRHVyYXRpb24oKSk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHR3ZWVuLl9lbmFibGVkKGZhbHNlLCBmYWxzZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0XHRcblx0XHRUd2Vlbk1heC5raWxsQ2hpbGRUd2VlbnNPZiA9IGZ1bmN0aW9uKHBhcmVudCwgY29tcGxldGUpIHtcblx0XHRcdGlmIChwYXJlbnQgPT0gbnVsbCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHR2YXIgdGwgPSBUd2VlbkxpdGVJbnRlcm5hbHMudHdlZW5Mb29rdXAsXG5cdFx0XHRcdGEsIGN1clBhcmVudCwgcCwgaSwgbDtcblx0XHRcdGlmICh0eXBlb2YocGFyZW50KSA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0XHRwYXJlbnQgPSBUd2VlbkxpdGUuc2VsZWN0b3IocGFyZW50KSB8fCBwYXJlbnQ7XG5cdFx0XHR9XG5cdFx0XHRpZiAoX2lzU2VsZWN0b3IocGFyZW50KSkge1xuXHRcdFx0XHRwYXJlbnQgPSBfc2xpY2UocGFyZW50KTtcblx0XHRcdH1cblx0XHRcdGlmIChfaXNBcnJheShwYXJlbnQpKSB7XG5cdFx0XHRcdGkgPSBwYXJlbnQubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRUd2Vlbk1heC5raWxsQ2hpbGRUd2VlbnNPZihwYXJlbnRbaV0sIGNvbXBsZXRlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRhID0gW107XG5cdFx0XHRmb3IgKHAgaW4gdGwpIHtcblx0XHRcdFx0Y3VyUGFyZW50ID0gdGxbcF0udGFyZ2V0LnBhcmVudE5vZGU7XG5cdFx0XHRcdHdoaWxlIChjdXJQYXJlbnQpIHtcblx0XHRcdFx0XHRpZiAoY3VyUGFyZW50ID09PSBwYXJlbnQpIHtcblx0XHRcdFx0XHRcdGEgPSBhLmNvbmNhdCh0bFtwXS50d2VlbnMpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjdXJQYXJlbnQgPSBjdXJQYXJlbnQucGFyZW50Tm9kZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0bCA9IGEubGVuZ3RoO1xuXHRcdFx0Zm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuXHRcdFx0XHRpZiAoY29tcGxldGUpIHtcblx0XHRcdFx0XHRhW2ldLnRvdGFsVGltZShhW2ldLnRvdGFsRHVyYXRpb24oKSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0YVtpXS5fZW5hYmxlZChmYWxzZSwgZmFsc2UpO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHR2YXIgX2NoYW5nZVBhdXNlID0gZnVuY3Rpb24ocGF1c2UsIHR3ZWVucywgZGVsYXllZENhbGxzLCB0aW1lbGluZXMpIHtcblx0XHRcdHR3ZWVucyA9ICh0d2VlbnMgIT09IGZhbHNlKTtcblx0XHRcdGRlbGF5ZWRDYWxscyA9IChkZWxheWVkQ2FsbHMgIT09IGZhbHNlKTtcblx0XHRcdHRpbWVsaW5lcyA9ICh0aW1lbGluZXMgIT09IGZhbHNlKTtcblx0XHRcdHZhciBhID0gZ2V0QWxsVHdlZW5zKHRpbWVsaW5lcyksXG5cdFx0XHRcdGFsbFRydWUgPSAodHdlZW5zICYmIGRlbGF5ZWRDYWxscyAmJiB0aW1lbGluZXMpLFxuXHRcdFx0XHRpID0gYS5sZW5ndGgsXG5cdFx0XHRcdGlzREMsIHR3ZWVuO1xuXHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdHR3ZWVuID0gYVtpXTtcblx0XHRcdFx0aWYgKGFsbFRydWUgfHwgKHR3ZWVuIGluc3RhbmNlb2YgU2ltcGxlVGltZWxpbmUpIHx8ICgoaXNEQyA9ICh0d2Vlbi50YXJnZXQgPT09IHR3ZWVuLnZhcnMub25Db21wbGV0ZSkpICYmIGRlbGF5ZWRDYWxscykgfHwgKHR3ZWVucyAmJiAhaXNEQykpIHtcblx0XHRcdFx0XHR0d2Vlbi5wYXVzZWQocGF1c2UpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0XHRcblx0XHRUd2Vlbk1heC5wYXVzZUFsbCA9IGZ1bmN0aW9uKHR3ZWVucywgZGVsYXllZENhbGxzLCB0aW1lbGluZXMpIHtcblx0XHRcdF9jaGFuZ2VQYXVzZSh0cnVlLCB0d2VlbnMsIGRlbGF5ZWRDYWxscywgdGltZWxpbmVzKTtcblx0XHR9O1xuXHRcdFxuXHRcdFR3ZWVuTWF4LnJlc3VtZUFsbCA9IGZ1bmN0aW9uKHR3ZWVucywgZGVsYXllZENhbGxzLCB0aW1lbGluZXMpIHtcblx0XHRcdF9jaGFuZ2VQYXVzZShmYWxzZSwgdHdlZW5zLCBkZWxheWVkQ2FsbHMsIHRpbWVsaW5lcyk7XG5cdFx0fTtcblxuXHRcdFR3ZWVuTWF4Lmdsb2JhbFRpbWVTY2FsZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHR2YXIgdGwgPSBBbmltYXRpb24uX3Jvb3RUaW1lbGluZSxcblx0XHRcdFx0dCA9IFR3ZWVuTGl0ZS50aWNrZXIudGltZTtcblx0XHRcdGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuXHRcdFx0XHRyZXR1cm4gdGwuX3RpbWVTY2FsZTtcblx0XHRcdH1cblx0XHRcdHZhbHVlID0gdmFsdWUgfHwgX3RpbnlOdW07IC8vY2FuJ3QgYWxsb3cgemVybyBiZWNhdXNlIGl0J2xsIHRocm93IHRoZSBtYXRoIG9mZlxuXHRcdFx0dGwuX3N0YXJ0VGltZSA9IHQgLSAoKHQgLSB0bC5fc3RhcnRUaW1lKSAqIHRsLl90aW1lU2NhbGUgLyB2YWx1ZSk7XG5cdFx0XHR0bCA9IEFuaW1hdGlvbi5fcm9vdEZyYW1lc1RpbWVsaW5lO1xuXHRcdFx0dCA9IFR3ZWVuTGl0ZS50aWNrZXIuZnJhbWU7XG5cdFx0XHR0bC5fc3RhcnRUaW1lID0gdCAtICgodCAtIHRsLl9zdGFydFRpbWUpICogdGwuX3RpbWVTY2FsZSAvIHZhbHVlKTtcblx0XHRcdHRsLl90aW1lU2NhbGUgPSBBbmltYXRpb24uX3Jvb3RUaW1lbGluZS5fdGltZVNjYWxlID0gdmFsdWU7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fTtcblx0XHRcblx0XG4vLy0tLS0gR0VUVEVSUyAvIFNFVFRFUlMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHRcdFxuXHRcdHAucHJvZ3Jlc3MgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0cmV0dXJuICghYXJndW1lbnRzLmxlbmd0aCkgPyB0aGlzLl90aW1lIC8gdGhpcy5kdXJhdGlvbigpIDogdGhpcy50b3RhbFRpbWUoIHRoaXMuZHVyYXRpb24oKSAqICgodGhpcy5feW95byAmJiAodGhpcy5fY3ljbGUgJiAxKSAhPT0gMCkgPyAxIC0gdmFsdWUgOiB2YWx1ZSkgKyAodGhpcy5fY3ljbGUgKiAodGhpcy5fZHVyYXRpb24gKyB0aGlzLl9yZXBlYXREZWxheSkpLCBmYWxzZSk7XG5cdFx0fTtcblx0XHRcblx0XHRwLnRvdGFsUHJvZ3Jlc3MgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0cmV0dXJuICghYXJndW1lbnRzLmxlbmd0aCkgPyB0aGlzLl90b3RhbFRpbWUgLyB0aGlzLnRvdGFsRHVyYXRpb24oKSA6IHRoaXMudG90YWxUaW1lKCB0aGlzLnRvdGFsRHVyYXRpb24oKSAqIHZhbHVlLCBmYWxzZSk7XG5cdFx0fTtcblx0XHRcblx0XHRwLnRpbWUgPSBmdW5jdGlvbih2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIHtcblx0XHRcdGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5fdGltZTtcblx0XHRcdH1cblx0XHRcdGlmICh0aGlzLl9kaXJ0eSkge1xuXHRcdFx0XHR0aGlzLnRvdGFsRHVyYXRpb24oKTtcblx0XHRcdH1cblx0XHRcdGlmICh2YWx1ZSA+IHRoaXMuX2R1cmF0aW9uKSB7XG5cdFx0XHRcdHZhbHVlID0gdGhpcy5fZHVyYXRpb247XG5cdFx0XHR9XG5cdFx0XHRpZiAodGhpcy5feW95byAmJiAodGhpcy5fY3ljbGUgJiAxKSAhPT0gMCkge1xuXHRcdFx0XHR2YWx1ZSA9ICh0aGlzLl9kdXJhdGlvbiAtIHZhbHVlKSArICh0aGlzLl9jeWNsZSAqICh0aGlzLl9kdXJhdGlvbiArIHRoaXMuX3JlcGVhdERlbGF5KSk7XG5cdFx0XHR9IGVsc2UgaWYgKHRoaXMuX3JlcGVhdCAhPT0gMCkge1xuXHRcdFx0XHR2YWx1ZSArPSB0aGlzLl9jeWNsZSAqICh0aGlzLl9kdXJhdGlvbiArIHRoaXMuX3JlcGVhdERlbGF5KTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzLnRvdGFsVGltZSh2YWx1ZSwgc3VwcHJlc3NFdmVudHMpO1xuXHRcdH07XG5cblx0XHRwLmR1cmF0aW9uID0gZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5fZHVyYXRpb247IC8vZG9uJ3Qgc2V0IF9kaXJ0eSA9IGZhbHNlIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgcmVwZWF0cyB0aGF0IGhhdmVuJ3QgYmVlbiBmYWN0b3JlZCBpbnRvIHRoZSBfdG90YWxEdXJhdGlvbiB5ZXQuIE90aGVyd2lzZSwgaWYgeW91IGNyZWF0ZSBhIHJlcGVhdGVkIFR3ZWVuTWF4IGFuZCB0aGVuIGltbWVkaWF0ZWx5IGNoZWNrIGl0cyBkdXJhdGlvbigpLCBpdCB3b3VsZCBjYWNoZSB0aGUgdmFsdWUgYW5kIHRoZSB0b3RhbER1cmF0aW9uIHdvdWxkIG5vdCBiZSBjb3JyZWN0LCB0aHVzIHJlcGVhdHMgd291bGRuJ3QgdGFrZSBlZmZlY3QuXG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gQW5pbWF0aW9uLnByb3RvdHlwZS5kdXJhdGlvbi5jYWxsKHRoaXMsIHZhbHVlKTtcblx0XHR9O1xuXG5cdFx0cC50b3RhbER1cmF0aW9uID0gZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuXHRcdFx0XHRpZiAodGhpcy5fZGlydHkpIHtcblx0XHRcdFx0XHQvL2luc3RlYWQgb2YgSW5maW5pdHksIHdlIHVzZSA5OTk5OTk5OTk5OTkgc28gdGhhdCB3ZSBjYW4gYWNjb21tb2RhdGUgcmV2ZXJzZXNcblx0XHRcdFx0XHR0aGlzLl90b3RhbER1cmF0aW9uID0gKHRoaXMuX3JlcGVhdCA9PT0gLTEpID8gOTk5OTk5OTk5OTk5IDogdGhpcy5fZHVyYXRpb24gKiAodGhpcy5fcmVwZWF0ICsgMSkgKyAodGhpcy5fcmVwZWF0RGVsYXkgKiB0aGlzLl9yZXBlYXQpO1xuXHRcdFx0XHRcdHRoaXMuX2RpcnR5ID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXMuX3RvdGFsRHVyYXRpb247XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gKHRoaXMuX3JlcGVhdCA9PT0gLTEpID8gdGhpcyA6IHRoaXMuZHVyYXRpb24oICh2YWx1ZSAtICh0aGlzLl9yZXBlYXQgKiB0aGlzLl9yZXBlYXREZWxheSkpIC8gKHRoaXMuX3JlcGVhdCArIDEpICk7XG5cdFx0fTtcblx0XHRcblx0XHRwLnJlcGVhdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHRpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX3JlcGVhdDtcblx0XHRcdH1cblx0XHRcdHRoaXMuX3JlcGVhdCA9IHZhbHVlO1xuXHRcdFx0cmV0dXJuIHRoaXMuX3VuY2FjaGUodHJ1ZSk7XG5cdFx0fTtcblx0XHRcblx0XHRwLnJlcGVhdERlbGF5ID0gZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5fcmVwZWF0RGVsYXk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9yZXBlYXREZWxheSA9IHZhbHVlO1xuXHRcdFx0cmV0dXJuIHRoaXMuX3VuY2FjaGUodHJ1ZSk7XG5cdFx0fTtcblx0XHRcblx0XHRwLnlveW8gPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLl95b3lvO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5feW95byA9IHZhbHVlO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fTtcblx0XHRcblx0XHRcblx0XHRyZXR1cm4gVHdlZW5NYXg7XG5cdFx0XG5cdH0sIHRydWUpO1xuXG5cblxuXG5cblxuXG5cbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBUaW1lbGluZUxpdGVcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXHRfZ3NTY29wZS5fZ3NEZWZpbmUoXCJUaW1lbGluZUxpdGVcIiwgW1wiY29yZS5BbmltYXRpb25cIixcImNvcmUuU2ltcGxlVGltZWxpbmVcIixcIlR3ZWVuTGl0ZVwiXSwgZnVuY3Rpb24oQW5pbWF0aW9uLCBTaW1wbGVUaW1lbGluZSwgVHdlZW5MaXRlKSB7XG5cblx0XHR2YXIgVGltZWxpbmVMaXRlID0gZnVuY3Rpb24odmFycykge1xuXHRcdFx0XHRTaW1wbGVUaW1lbGluZS5jYWxsKHRoaXMsIHZhcnMpO1xuXHRcdFx0XHR0aGlzLl9sYWJlbHMgPSB7fTtcblx0XHRcdFx0dGhpcy5hdXRvUmVtb3ZlQ2hpbGRyZW4gPSAodGhpcy52YXJzLmF1dG9SZW1vdmVDaGlsZHJlbiA9PT0gdHJ1ZSk7XG5cdFx0XHRcdHRoaXMuc21vb3RoQ2hpbGRUaW1pbmcgPSAodGhpcy52YXJzLnNtb290aENoaWxkVGltaW5nID09PSB0cnVlKTtcblx0XHRcdFx0dGhpcy5fc29ydENoaWxkcmVuID0gdHJ1ZTtcblx0XHRcdFx0dGhpcy5fb25VcGRhdGUgPSB0aGlzLnZhcnMub25VcGRhdGU7XG5cdFx0XHRcdHZhciB2ID0gdGhpcy52YXJzLFxuXHRcdFx0XHRcdHZhbCwgcDtcblx0XHRcdFx0Zm9yIChwIGluIHYpIHtcblx0XHRcdFx0XHR2YWwgPSB2W3BdO1xuXHRcdFx0XHRcdGlmIChfaXNBcnJheSh2YWwpKSBpZiAodmFsLmpvaW4oXCJcIikuaW5kZXhPZihcIntzZWxmfVwiKSAhPT0gLTEpIHtcblx0XHRcdFx0XHRcdHZbcF0gPSB0aGlzLl9zd2FwU2VsZkluUGFyYW1zKHZhbCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChfaXNBcnJheSh2LnR3ZWVucykpIHtcblx0XHRcdFx0XHR0aGlzLmFkZCh2LnR3ZWVucywgMCwgdi5hbGlnbiwgdi5zdGFnZ2VyKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdF90aW55TnVtID0gMC4wMDAwMDAwMDAxLFxuXHRcdFx0VHdlZW5MaXRlSW50ZXJuYWxzID0gVHdlZW5MaXRlLl9pbnRlcm5hbHMsXG5cdFx0XHRfaW50ZXJuYWxzID0gVGltZWxpbmVMaXRlLl9pbnRlcm5hbHMgPSB7fSxcblx0XHRcdF9pc1NlbGVjdG9yID0gVHdlZW5MaXRlSW50ZXJuYWxzLmlzU2VsZWN0b3IsXG5cdFx0XHRfaXNBcnJheSA9IFR3ZWVuTGl0ZUludGVybmFscy5pc0FycmF5LFxuXHRcdFx0X2xhenlUd2VlbnMgPSBUd2VlbkxpdGVJbnRlcm5hbHMubGF6eVR3ZWVucyxcblx0XHRcdF9sYXp5UmVuZGVyID0gVHdlZW5MaXRlSW50ZXJuYWxzLmxhenlSZW5kZXIsXG5cdFx0XHRfZ2xvYmFscyA9IF9nc1Njb3BlLl9nc0RlZmluZS5nbG9iYWxzLFxuXHRcdFx0X2NvcHkgPSBmdW5jdGlvbih2YXJzKSB7XG5cdFx0XHRcdHZhciBjb3B5ID0ge30sIHA7XG5cdFx0XHRcdGZvciAocCBpbiB2YXJzKSB7XG5cdFx0XHRcdFx0Y29weVtwXSA9IHZhcnNbcF07XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGNvcHk7XG5cdFx0XHR9LFxuXHRcdFx0X2FwcGx5Q3ljbGUgPSBmdW5jdGlvbih2YXJzLCB0YXJnZXRzLCBpKSB7XG5cdFx0XHRcdHZhciBhbHQgPSB2YXJzLmN5Y2xlLFxuXHRcdFx0XHRcdHAsIHZhbDtcblx0XHRcdFx0Zm9yIChwIGluIGFsdCkge1xuXHRcdFx0XHRcdHZhbCA9IGFsdFtwXTtcblx0XHRcdFx0XHR2YXJzW3BdID0gKHR5cGVvZih2YWwpID09PSBcImZ1bmN0aW9uXCIpID8gdmFsLmNhbGwodGFyZ2V0c1tpXSwgaSkgOiB2YWxbaSAlIHZhbC5sZW5ndGhdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRlbGV0ZSB2YXJzLmN5Y2xlO1xuXHRcdFx0fSxcblx0XHRcdF9wYXVzZUNhbGxiYWNrID0gX2ludGVybmFscy5wYXVzZUNhbGxiYWNrID0gZnVuY3Rpb24oKSB7fSxcblx0XHRcdF9zbGljZSA9IGZ1bmN0aW9uKGEpIHsgLy9kb24ndCB1c2UgW10uc2xpY2UgYmVjYXVzZSB0aGF0IGRvZXNuJ3Qgd29yayBpbiBJRTggd2l0aCBhIE5vZGVMaXN0IHRoYXQncyByZXR1cm5lZCBieSBxdWVyeVNlbGVjdG9yQWxsKClcblx0XHRcdFx0dmFyIGIgPSBbXSxcblx0XHRcdFx0XHRsID0gYS5sZW5ndGgsXG5cdFx0XHRcdFx0aTtcblx0XHRcdFx0Zm9yIChpID0gMDsgaSAhPT0gbDsgYi5wdXNoKGFbaSsrXSkpO1xuXHRcdFx0XHRyZXR1cm4gYjtcblx0XHRcdH0sXG5cdFx0XHRwID0gVGltZWxpbmVMaXRlLnByb3RvdHlwZSA9IG5ldyBTaW1wbGVUaW1lbGluZSgpO1xuXG5cdFx0VGltZWxpbmVMaXRlLnZlcnNpb24gPSBcIjEuMTguMFwiO1xuXHRcdHAuY29uc3RydWN0b3IgPSBUaW1lbGluZUxpdGU7XG5cdFx0cC5raWxsKCkuX2djID0gcC5fZm9yY2luZ1BsYXloZWFkID0gcC5faGFzUGF1c2UgPSBmYWxzZTtcblxuXHRcdC8qIG1pZ2h0IHVzZSBsYXRlci4uLlxuXHRcdC8vdHJhbnNsYXRlcyBhIGxvY2FsIHRpbWUgaW5zaWRlIGFuIGFuaW1hdGlvbiB0byB0aGUgY29ycmVzcG9uZGluZyB0aW1lIG9uIHRoZSByb290L2dsb2JhbCB0aW1lbGluZSwgZmFjdG9yaW5nIGluIGFsbCBuZXN0aW5nIGFuZCB0aW1lU2NhbGVzLlxuXHRcdGZ1bmN0aW9uIGxvY2FsVG9HbG9iYWwodGltZSwgYW5pbWF0aW9uKSB7XG5cdFx0XHR3aGlsZSAoYW5pbWF0aW9uKSB7XG5cdFx0XHRcdHRpbWUgPSAodGltZSAvIGFuaW1hdGlvbi5fdGltZVNjYWxlKSArIGFuaW1hdGlvbi5fc3RhcnRUaW1lO1xuXHRcdFx0XHRhbmltYXRpb24gPSBhbmltYXRpb24udGltZWxpbmU7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGltZTtcblx0XHR9XG5cblx0XHQvL3RyYW5zbGF0ZXMgdGhlIHN1cHBsaWVkIHRpbWUgb24gdGhlIHJvb3QvZ2xvYmFsIHRpbWVsaW5lIGludG8gdGhlIGNvcnJlc3BvbmRpbmcgbG9jYWwgdGltZSBpbnNpZGUgYSBwYXJ0aWN1bGFyIGFuaW1hdGlvbiwgZmFjdG9yaW5nIGluIGFsbCBuZXN0aW5nIGFuZCB0aW1lU2NhbGVzXG5cdFx0ZnVuY3Rpb24gZ2xvYmFsVG9Mb2NhbCh0aW1lLCBhbmltYXRpb24pIHtcblx0XHRcdHZhciBzY2FsZSA9IDE7XG5cdFx0XHR0aW1lIC09IGxvY2FsVG9HbG9iYWwoMCwgYW5pbWF0aW9uKTtcblx0XHRcdHdoaWxlIChhbmltYXRpb24pIHtcblx0XHRcdFx0c2NhbGUgKj0gYW5pbWF0aW9uLl90aW1lU2NhbGU7XG5cdFx0XHRcdGFuaW1hdGlvbiA9IGFuaW1hdGlvbi50aW1lbGluZTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aW1lICogc2NhbGU7XG5cdFx0fVxuXHRcdCovXG5cblx0XHRwLnRvID0gZnVuY3Rpb24odGFyZ2V0LCBkdXJhdGlvbiwgdmFycywgcG9zaXRpb24pIHtcblx0XHRcdHZhciBFbmdpbmUgPSAodmFycy5yZXBlYXQgJiYgX2dsb2JhbHMuVHdlZW5NYXgpIHx8IFR3ZWVuTGl0ZTtcblx0XHRcdHJldHVybiBkdXJhdGlvbiA/IHRoaXMuYWRkKCBuZXcgRW5naW5lKHRhcmdldCwgZHVyYXRpb24sIHZhcnMpLCBwb3NpdGlvbikgOiB0aGlzLnNldCh0YXJnZXQsIHZhcnMsIHBvc2l0aW9uKTtcblx0XHR9O1xuXG5cdFx0cC5mcm9tID0gZnVuY3Rpb24odGFyZ2V0LCBkdXJhdGlvbiwgdmFycywgcG9zaXRpb24pIHtcblx0XHRcdHJldHVybiB0aGlzLmFkZCggKCh2YXJzLnJlcGVhdCAmJiBfZ2xvYmFscy5Ud2Vlbk1heCkgfHwgVHdlZW5MaXRlKS5mcm9tKHRhcmdldCwgZHVyYXRpb24sIHZhcnMpLCBwb3NpdGlvbik7XG5cdFx0fTtcblxuXHRcdHAuZnJvbVRvID0gZnVuY3Rpb24odGFyZ2V0LCBkdXJhdGlvbiwgZnJvbVZhcnMsIHRvVmFycywgcG9zaXRpb24pIHtcblx0XHRcdHZhciBFbmdpbmUgPSAodG9WYXJzLnJlcGVhdCAmJiBfZ2xvYmFscy5Ud2Vlbk1heCkgfHwgVHdlZW5MaXRlO1xuXHRcdFx0cmV0dXJuIGR1cmF0aW9uID8gdGhpcy5hZGQoIEVuZ2luZS5mcm9tVG8odGFyZ2V0LCBkdXJhdGlvbiwgZnJvbVZhcnMsIHRvVmFycyksIHBvc2l0aW9uKSA6IHRoaXMuc2V0KHRhcmdldCwgdG9WYXJzLCBwb3NpdGlvbik7XG5cdFx0fTtcblxuXHRcdHAuc3RhZ2dlclRvID0gZnVuY3Rpb24odGFyZ2V0cywgZHVyYXRpb24sIHZhcnMsIHN0YWdnZXIsIHBvc2l0aW9uLCBvbkNvbXBsZXRlQWxsLCBvbkNvbXBsZXRlQWxsUGFyYW1zLCBvbkNvbXBsZXRlQWxsU2NvcGUpIHtcblx0XHRcdHZhciB0bCA9IG5ldyBUaW1lbGluZUxpdGUoe29uQ29tcGxldGU6b25Db21wbGV0ZUFsbCwgb25Db21wbGV0ZVBhcmFtczpvbkNvbXBsZXRlQWxsUGFyYW1zLCBjYWxsYmFja1Njb3BlOm9uQ29tcGxldGVBbGxTY29wZSwgc21vb3RoQ2hpbGRUaW1pbmc6dGhpcy5zbW9vdGhDaGlsZFRpbWluZ30pLFxuXHRcdFx0XHRjeWNsZSA9IHZhcnMuY3ljbGUsXG5cdFx0XHRcdGNvcHksIGk7XG5cdFx0XHRpZiAodHlwZW9mKHRhcmdldHMpID09PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRcdHRhcmdldHMgPSBUd2VlbkxpdGUuc2VsZWN0b3IodGFyZ2V0cykgfHwgdGFyZ2V0cztcblx0XHRcdH1cblx0XHRcdHRhcmdldHMgPSB0YXJnZXRzIHx8IFtdO1xuXHRcdFx0aWYgKF9pc1NlbGVjdG9yKHRhcmdldHMpKSB7IC8vc2Vuc2VzIGlmIHRoZSB0YXJnZXRzIG9iamVjdCBpcyBhIHNlbGVjdG9yLiBJZiBpdCBpcywgd2Ugc2hvdWxkIHRyYW5zbGF0ZSBpdCBpbnRvIGFuIGFycmF5LlxuXHRcdFx0XHR0YXJnZXRzID0gX3NsaWNlKHRhcmdldHMpO1xuXHRcdFx0fVxuXHRcdFx0c3RhZ2dlciA9IHN0YWdnZXIgfHwgMDtcblx0XHRcdGlmIChzdGFnZ2VyIDwgMCkge1xuXHRcdFx0XHR0YXJnZXRzID0gX3NsaWNlKHRhcmdldHMpO1xuXHRcdFx0XHR0YXJnZXRzLnJldmVyc2UoKTtcblx0XHRcdFx0c3RhZ2dlciAqPSAtMTtcblx0XHRcdH1cblx0XHRcdGZvciAoaSA9IDA7IGkgPCB0YXJnZXRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGNvcHkgPSBfY29weSh2YXJzKTtcblx0XHRcdFx0aWYgKGNvcHkuc3RhcnRBdCkge1xuXHRcdFx0XHRcdGNvcHkuc3RhcnRBdCA9IF9jb3B5KGNvcHkuc3RhcnRBdCk7XG5cdFx0XHRcdFx0aWYgKGNvcHkuc3RhcnRBdC5jeWNsZSkge1xuXHRcdFx0XHRcdFx0X2FwcGx5Q3ljbGUoY29weS5zdGFydEF0LCB0YXJnZXRzLCBpKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGN5Y2xlKSB7XG5cdFx0XHRcdFx0X2FwcGx5Q3ljbGUoY29weSwgdGFyZ2V0cywgaSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGwudG8odGFyZ2V0c1tpXSwgZHVyYXRpb24sIGNvcHksIGkgKiBzdGFnZ2VyKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzLmFkZCh0bCwgcG9zaXRpb24pO1xuXHRcdH07XG5cblx0XHRwLnN0YWdnZXJGcm9tID0gZnVuY3Rpb24odGFyZ2V0cywgZHVyYXRpb24sIHZhcnMsIHN0YWdnZXIsIHBvc2l0aW9uLCBvbkNvbXBsZXRlQWxsLCBvbkNvbXBsZXRlQWxsUGFyYW1zLCBvbkNvbXBsZXRlQWxsU2NvcGUpIHtcblx0XHRcdHZhcnMuaW1tZWRpYXRlUmVuZGVyID0gKHZhcnMuaW1tZWRpYXRlUmVuZGVyICE9IGZhbHNlKTtcblx0XHRcdHZhcnMucnVuQmFja3dhcmRzID0gdHJ1ZTtcblx0XHRcdHJldHVybiB0aGlzLnN0YWdnZXJUbyh0YXJnZXRzLCBkdXJhdGlvbiwgdmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMsIG9uQ29tcGxldGVBbGxTY29wZSk7XG5cdFx0fTtcblxuXHRcdHAuc3RhZ2dlckZyb21UbyA9IGZ1bmN0aW9uKHRhcmdldHMsIGR1cmF0aW9uLCBmcm9tVmFycywgdG9WYXJzLCBzdGFnZ2VyLCBwb3NpdGlvbiwgb25Db21wbGV0ZUFsbCwgb25Db21wbGV0ZUFsbFBhcmFtcywgb25Db21wbGV0ZUFsbFNjb3BlKSB7XG5cdFx0XHR0b1ZhcnMuc3RhcnRBdCA9IGZyb21WYXJzO1xuXHRcdFx0dG9WYXJzLmltbWVkaWF0ZVJlbmRlciA9ICh0b1ZhcnMuaW1tZWRpYXRlUmVuZGVyICE9IGZhbHNlICYmIGZyb21WYXJzLmltbWVkaWF0ZVJlbmRlciAhPSBmYWxzZSk7XG5cdFx0XHRyZXR1cm4gdGhpcy5zdGFnZ2VyVG8odGFyZ2V0cywgZHVyYXRpb24sIHRvVmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMsIG9uQ29tcGxldGVBbGxTY29wZSk7XG5cdFx0fTtcblxuXHRcdHAuY2FsbCA9IGZ1bmN0aW9uKGNhbGxiYWNrLCBwYXJhbXMsIHNjb3BlLCBwb3NpdGlvbikge1xuXHRcdFx0cmV0dXJuIHRoaXMuYWRkKCBUd2VlbkxpdGUuZGVsYXllZENhbGwoMCwgY2FsbGJhY2ssIHBhcmFtcywgc2NvcGUpLCBwb3NpdGlvbik7XG5cdFx0fTtcblxuXHRcdHAuc2V0ID0gZnVuY3Rpb24odGFyZ2V0LCB2YXJzLCBwb3NpdGlvbikge1xuXHRcdFx0cG9zaXRpb24gPSB0aGlzLl9wYXJzZVRpbWVPckxhYmVsKHBvc2l0aW9uLCAwLCB0cnVlKTtcblx0XHRcdGlmICh2YXJzLmltbWVkaWF0ZVJlbmRlciA9PSBudWxsKSB7XG5cdFx0XHRcdHZhcnMuaW1tZWRpYXRlUmVuZGVyID0gKHBvc2l0aW9uID09PSB0aGlzLl90aW1lICYmICF0aGlzLl9wYXVzZWQpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXMuYWRkKCBuZXcgVHdlZW5MaXRlKHRhcmdldCwgMCwgdmFycyksIHBvc2l0aW9uKTtcblx0XHR9O1xuXG5cdFx0VGltZWxpbmVMaXRlLmV4cG9ydFJvb3QgPSBmdW5jdGlvbih2YXJzLCBpZ25vcmVEZWxheWVkQ2FsbHMpIHtcblx0XHRcdHZhcnMgPSB2YXJzIHx8IHt9O1xuXHRcdFx0aWYgKHZhcnMuc21vb3RoQ2hpbGRUaW1pbmcgPT0gbnVsbCkge1xuXHRcdFx0XHR2YXJzLnNtb290aENoaWxkVGltaW5nID0gdHJ1ZTtcblx0XHRcdH1cblx0XHRcdHZhciB0bCA9IG5ldyBUaW1lbGluZUxpdGUodmFycyksXG5cdFx0XHRcdHJvb3QgPSB0bC5fdGltZWxpbmUsXG5cdFx0XHRcdHR3ZWVuLCBuZXh0O1xuXHRcdFx0aWYgKGlnbm9yZURlbGF5ZWRDYWxscyA9PSBudWxsKSB7XG5cdFx0XHRcdGlnbm9yZURlbGF5ZWRDYWxscyA9IHRydWU7XG5cdFx0XHR9XG5cdFx0XHRyb290Ll9yZW1vdmUodGwsIHRydWUpO1xuXHRcdFx0dGwuX3N0YXJ0VGltZSA9IDA7XG5cdFx0XHR0bC5fcmF3UHJldlRpbWUgPSB0bC5fdGltZSA9IHRsLl90b3RhbFRpbWUgPSByb290Ll90aW1lO1xuXHRcdFx0dHdlZW4gPSByb290Ll9maXJzdDtcblx0XHRcdHdoaWxlICh0d2Vlbikge1xuXHRcdFx0XHRuZXh0ID0gdHdlZW4uX25leHQ7XG5cdFx0XHRcdGlmICghaWdub3JlRGVsYXllZENhbGxzIHx8ICEodHdlZW4gaW5zdGFuY2VvZiBUd2VlbkxpdGUgJiYgdHdlZW4udGFyZ2V0ID09PSB0d2Vlbi52YXJzLm9uQ29tcGxldGUpKSB7XG5cdFx0XHRcdFx0dGwuYWRkKHR3ZWVuLCB0d2Vlbi5fc3RhcnRUaW1lIC0gdHdlZW4uX2RlbGF5KTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0d2VlbiA9IG5leHQ7XG5cdFx0XHR9XG5cdFx0XHRyb290LmFkZCh0bCwgMCk7XG5cdFx0XHRyZXR1cm4gdGw7XG5cdFx0fTtcblxuXHRcdHAuYWRkID0gZnVuY3Rpb24odmFsdWUsIHBvc2l0aW9uLCBhbGlnbiwgc3RhZ2dlcikge1xuXHRcdFx0dmFyIGN1clRpbWUsIGwsIGksIGNoaWxkLCB0bCwgYmVmb3JlUmF3VGltZTtcblx0XHRcdGlmICh0eXBlb2YocG9zaXRpb24pICE9PSBcIm51bWJlclwiKSB7XG5cdFx0XHRcdHBvc2l0aW9uID0gdGhpcy5fcGFyc2VUaW1lT3JMYWJlbChwb3NpdGlvbiwgMCwgdHJ1ZSwgdmFsdWUpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCEodmFsdWUgaW5zdGFuY2VvZiBBbmltYXRpb24pKSB7XG5cdFx0XHRcdGlmICgodmFsdWUgaW5zdGFuY2VvZiBBcnJheSkgfHwgKHZhbHVlICYmIHZhbHVlLnB1c2ggJiYgX2lzQXJyYXkodmFsdWUpKSkge1xuXHRcdFx0XHRcdGFsaWduID0gYWxpZ24gfHwgXCJub3JtYWxcIjtcblx0XHRcdFx0XHRzdGFnZ2VyID0gc3RhZ2dlciB8fCAwO1xuXHRcdFx0XHRcdGN1clRpbWUgPSBwb3NpdGlvbjtcblx0XHRcdFx0XHRsID0gdmFsdWUubGVuZ3RoO1xuXHRcdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcblx0XHRcdFx0XHRcdGlmIChfaXNBcnJheShjaGlsZCA9IHZhbHVlW2ldKSkge1xuXHRcdFx0XHRcdFx0XHRjaGlsZCA9IG5ldyBUaW1lbGluZUxpdGUoe3R3ZWVuczpjaGlsZH0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0dGhpcy5hZGQoY2hpbGQsIGN1clRpbWUpO1xuXHRcdFx0XHRcdFx0aWYgKHR5cGVvZihjaGlsZCkgIT09IFwic3RyaW5nXCIgJiYgdHlwZW9mKGNoaWxkKSAhPT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRcdFx0XHRcdGlmIChhbGlnbiA9PT0gXCJzZXF1ZW5jZVwiKSB7XG5cdFx0XHRcdFx0XHRcdFx0Y3VyVGltZSA9IGNoaWxkLl9zdGFydFRpbWUgKyAoY2hpbGQudG90YWxEdXJhdGlvbigpIC8gY2hpbGQuX3RpbWVTY2FsZSk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoYWxpZ24gPT09IFwic3RhcnRcIikge1xuXHRcdFx0XHRcdFx0XHRcdGNoaWxkLl9zdGFydFRpbWUgLT0gY2hpbGQuZGVsYXkoKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Y3VyVGltZSArPSBzdGFnZ2VyO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5fdW5jYWNoZSh0cnVlKTtcblx0XHRcdFx0fSBlbHNlIGlmICh0eXBlb2YodmFsdWUpID09PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuYWRkTGFiZWwodmFsdWUsIHBvc2l0aW9uKTtcblx0XHRcdFx0fSBlbHNlIGlmICh0eXBlb2YodmFsdWUpID09PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdFx0XHR2YWx1ZSA9IFR3ZWVuTGl0ZS5kZWxheWVkQ2FsbCgwLCB2YWx1ZSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhyb3coXCJDYW5ub3QgYWRkIFwiICsgdmFsdWUgKyBcIiBpbnRvIHRoZSB0aW1lbGluZTsgaXQgaXMgbm90IGEgdHdlZW4sIHRpbWVsaW5lLCBmdW5jdGlvbiwgb3Igc3RyaW5nLlwiKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRTaW1wbGVUaW1lbGluZS5wcm90b3R5cGUuYWRkLmNhbGwodGhpcywgdmFsdWUsIHBvc2l0aW9uKTtcblxuXHRcdFx0Ly9pZiB0aGUgdGltZWxpbmUgaGFzIGFscmVhZHkgZW5kZWQgYnV0IHRoZSBpbnNlcnRlZCB0d2Vlbi90aW1lbGluZSBleHRlbmRzIHRoZSBkdXJhdGlvbiwgd2Ugc2hvdWxkIGVuYWJsZSB0aGlzIHRpbWVsaW5lIGFnYWluIHNvIHRoYXQgaXQgcmVuZGVycyBwcm9wZXJseS4gV2Ugc2hvdWxkIGFsc28gYWxpZ24gdGhlIHBsYXloZWFkIHdpdGggdGhlIHBhcmVudCB0aW1lbGluZSdzIHdoZW4gYXBwcm9wcmlhdGUuXG5cdFx0XHRpZiAodGhpcy5fZ2MgfHwgdGhpcy5fdGltZSA9PT0gdGhpcy5fZHVyYXRpb24pIGlmICghdGhpcy5fcGF1c2VkKSBpZiAodGhpcy5fZHVyYXRpb24gPCB0aGlzLmR1cmF0aW9uKCkpIHtcblx0XHRcdFx0Ly9pbiBjYXNlIGFueSBvZiB0aGUgYW5jZXN0b3JzIGhhZCBjb21wbGV0ZWQgYnV0IHNob3VsZCBub3cgYmUgZW5hYmxlZC4uLlxuXHRcdFx0XHR0bCA9IHRoaXM7XG5cdFx0XHRcdGJlZm9yZVJhd1RpbWUgPSAodGwucmF3VGltZSgpID4gdmFsdWUuX3N0YXJ0VGltZSk7IC8vaWYgdGhlIHR3ZWVuIGlzIHBsYWNlZCBvbiB0aGUgdGltZWxpbmUgc28gdGhhdCBpdCBzdGFydHMgQkVGT1JFIHRoZSBjdXJyZW50IHJhd1RpbWUsIHdlIHNob3VsZCBhbGlnbiB0aGUgcGxheWhlYWQgKG1vdmUgdGhlIHRpbWVsaW5lKS4gVGhpcyBpcyBiZWNhdXNlIHNvbWV0aW1lcyB1c2VycyB3aWxsIGNyZWF0ZSBhIHRpbWVsaW5lLCBsZXQgaXQgZmluaXNoLCBhbmQgbXVjaCBsYXRlciBhcHBlbmQgYSB0d2VlbiBhbmQgZXhwZWN0IGl0IHRvIHJ1biBpbnN0ZWFkIG9mIGp1bXBpbmcgdG8gaXRzIGVuZCBzdGF0ZS4gV2hpbGUgdGVjaG5pY2FsbHkgb25lIGNvdWxkIGFyZ3VlIHRoYXQgaXQgc2hvdWxkIGp1bXAgdG8gaXRzIGVuZCBzdGF0ZSwgdGhhdCdzIG5vdCB3aGF0IHVzZXJzIGludHVpdGl2ZWx5IGV4cGVjdC5cblx0XHRcdFx0d2hpbGUgKHRsLl90aW1lbGluZSkge1xuXHRcdFx0XHRcdGlmIChiZWZvcmVSYXdUaW1lICYmIHRsLl90aW1lbGluZS5zbW9vdGhDaGlsZFRpbWluZykge1xuXHRcdFx0XHRcdFx0dGwudG90YWxUaW1lKHRsLl90b3RhbFRpbWUsIHRydWUpOyAvL21vdmVzIHRoZSB0aW1lbGluZSAoc2hpZnRzIGl0cyBzdGFydFRpbWUpIGlmIG5lY2Vzc2FyeSwgYW5kIGFsc28gZW5hYmxlcyBpdC5cblx0XHRcdFx0XHR9IGVsc2UgaWYgKHRsLl9nYykge1xuXHRcdFx0XHRcdFx0dGwuX2VuYWJsZWQodHJ1ZSwgZmFsc2UpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0bCA9IHRsLl90aW1lbGluZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9O1xuXG5cdFx0cC5yZW1vdmUgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0aWYgKHZhbHVlIGluc3RhbmNlb2YgQW5pbWF0aW9uKSB7XG5cdFx0XHRcdHRoaXMuX3JlbW92ZSh2YWx1ZSwgZmFsc2UpO1xuXHRcdFx0XHR2YXIgdGwgPSB2YWx1ZS5fdGltZWxpbmUgPSB2YWx1ZS52YXJzLnVzZUZyYW1lcyA/IEFuaW1hdGlvbi5fcm9vdEZyYW1lc1RpbWVsaW5lIDogQW5pbWF0aW9uLl9yb290VGltZWxpbmU7IC8vbm93IHRoYXQgaXQncyByZW1vdmVkLCBkZWZhdWx0IGl0IHRvIHRoZSByb290IHRpbWVsaW5lIHNvIHRoYXQgaWYgaXQgZ2V0cyBwbGF5ZWQgYWdhaW4sIGl0IGRvZXNuJ3QganVtcCBiYWNrIGludG8gdGhpcyB0aW1lbGluZS5cblx0XHRcdFx0dmFsdWUuX3N0YXJ0VGltZSA9ICh2YWx1ZS5fcGF1c2VkID8gdmFsdWUuX3BhdXNlVGltZSA6IHRsLl90aW1lKSAtICgoIXZhbHVlLl9yZXZlcnNlZCA/IHZhbHVlLl90b3RhbFRpbWUgOiB2YWx1ZS50b3RhbER1cmF0aW9uKCkgLSB2YWx1ZS5fdG90YWxUaW1lKSAvIHZhbHVlLl90aW1lU2NhbGUpOyAvL2Vuc3VyZSB0aGF0IGlmIGl0IGdldHMgcGxheWVkIGFnYWluLCB0aGUgdGltaW5nIGlzIGNvcnJlY3QuXG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFycmF5IHx8ICh2YWx1ZSAmJiB2YWx1ZS5wdXNoICYmIF9pc0FycmF5KHZhbHVlKSkpIHtcblx0XHRcdFx0dmFyIGkgPSB2YWx1ZS5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdHRoaXMucmVtb3ZlKHZhbHVlW2ldKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0gZWxzZSBpZiAodHlwZW9mKHZhbHVlKSA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5yZW1vdmVMYWJlbCh2YWx1ZSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcy5raWxsKG51bGwsIHZhbHVlKTtcblx0XHR9O1xuXG5cdFx0cC5fcmVtb3ZlID0gZnVuY3Rpb24odHdlZW4sIHNraXBEaXNhYmxlKSB7XG5cdFx0XHRTaW1wbGVUaW1lbGluZS5wcm90b3R5cGUuX3JlbW92ZS5jYWxsKHRoaXMsIHR3ZWVuLCBza2lwRGlzYWJsZSk7XG5cdFx0XHR2YXIgbGFzdCA9IHRoaXMuX2xhc3Q7XG5cdFx0XHRpZiAoIWxhc3QpIHtcblx0XHRcdFx0dGhpcy5fdGltZSA9IHRoaXMuX3RvdGFsVGltZSA9IHRoaXMuX2R1cmF0aW9uID0gdGhpcy5fdG90YWxEdXJhdGlvbiA9IDA7XG5cdFx0XHR9IGVsc2UgaWYgKHRoaXMuX3RpbWUgPiBsYXN0Ll9zdGFydFRpbWUgKyBsYXN0Ll90b3RhbER1cmF0aW9uIC8gbGFzdC5fdGltZVNjYWxlKSB7XG5cdFx0XHRcdHRoaXMuX3RpbWUgPSB0aGlzLmR1cmF0aW9uKCk7XG5cdFx0XHRcdHRoaXMuX3RvdGFsVGltZSA9IHRoaXMuX3RvdGFsRHVyYXRpb247XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9O1xuXG5cdFx0cC5hcHBlbmQgPSBmdW5jdGlvbih2YWx1ZSwgb2Zmc2V0T3JMYWJlbCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuYWRkKHZhbHVlLCB0aGlzLl9wYXJzZVRpbWVPckxhYmVsKG51bGwsIG9mZnNldE9yTGFiZWwsIHRydWUsIHZhbHVlKSk7XG5cdFx0fTtcblxuXHRcdHAuaW5zZXJ0ID0gcC5pbnNlcnRNdWx0aXBsZSA9IGZ1bmN0aW9uKHZhbHVlLCBwb3NpdGlvbiwgYWxpZ24sIHN0YWdnZXIpIHtcblx0XHRcdHJldHVybiB0aGlzLmFkZCh2YWx1ZSwgcG9zaXRpb24gfHwgMCwgYWxpZ24sIHN0YWdnZXIpO1xuXHRcdH07XG5cblx0XHRwLmFwcGVuZE11bHRpcGxlID0gZnVuY3Rpb24odHdlZW5zLCBvZmZzZXRPckxhYmVsLCBhbGlnbiwgc3RhZ2dlcikge1xuXHRcdFx0cmV0dXJuIHRoaXMuYWRkKHR3ZWVucywgdGhpcy5fcGFyc2VUaW1lT3JMYWJlbChudWxsLCBvZmZzZXRPckxhYmVsLCB0cnVlLCB0d2VlbnMpLCBhbGlnbiwgc3RhZ2dlcik7XG5cdFx0fTtcblxuXHRcdHAuYWRkTGFiZWwgPSBmdW5jdGlvbihsYWJlbCwgcG9zaXRpb24pIHtcblx0XHRcdHRoaXMuX2xhYmVsc1tsYWJlbF0gPSB0aGlzLl9wYXJzZVRpbWVPckxhYmVsKHBvc2l0aW9uKTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH07XG5cblx0XHRwLmFkZFBhdXNlID0gZnVuY3Rpb24ocG9zaXRpb24sIGNhbGxiYWNrLCBwYXJhbXMsIHNjb3BlKSB7XG5cdFx0XHR2YXIgdCA9IFR3ZWVuTGl0ZS5kZWxheWVkQ2FsbCgwLCBfcGF1c2VDYWxsYmFjaywgcGFyYW1zLCBzY29wZSB8fCB0aGlzKTtcblx0XHRcdHQudmFycy5vbkNvbXBsZXRlID0gdC52YXJzLm9uUmV2ZXJzZUNvbXBsZXRlID0gY2FsbGJhY2s7XG5cdFx0XHR0LmRhdGEgPSBcImlzUGF1c2VcIjtcblx0XHRcdHRoaXMuX2hhc1BhdXNlID0gdHJ1ZTtcblx0XHRcdHJldHVybiB0aGlzLmFkZCh0LCBwb3NpdGlvbik7XG5cdFx0fTtcblxuXHRcdHAucmVtb3ZlTGFiZWwgPSBmdW5jdGlvbihsYWJlbCkge1xuXHRcdFx0ZGVsZXRlIHRoaXMuX2xhYmVsc1tsYWJlbF07XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9O1xuXG5cdFx0cC5nZXRMYWJlbFRpbWUgPSBmdW5jdGlvbihsYWJlbCkge1xuXHRcdFx0cmV0dXJuICh0aGlzLl9sYWJlbHNbbGFiZWxdICE9IG51bGwpID8gdGhpcy5fbGFiZWxzW2xhYmVsXSA6IC0xO1xuXHRcdH07XG5cblx0XHRwLl9wYXJzZVRpbWVPckxhYmVsID0gZnVuY3Rpb24odGltZU9yTGFiZWwsIG9mZnNldE9yTGFiZWwsIGFwcGVuZElmQWJzZW50LCBpZ25vcmUpIHtcblx0XHRcdHZhciBpO1xuXHRcdFx0Ly9pZiB3ZSdyZSBhYm91dCB0byBhZGQgYSB0d2Vlbi90aW1lbGluZSAob3IgYW4gYXJyYXkgb2YgdGhlbSkgdGhhdCdzIGFscmVhZHkgYSBjaGlsZCBvZiB0aGlzIHRpbWVsaW5lLCB3ZSBzaG91bGQgcmVtb3ZlIGl0IGZpcnN0IHNvIHRoYXQgaXQgZG9lc24ndCBjb250YW1pbmF0ZSB0aGUgZHVyYXRpb24oKS5cblx0XHRcdGlmIChpZ25vcmUgaW5zdGFuY2VvZiBBbmltYXRpb24gJiYgaWdub3JlLnRpbWVsaW5lID09PSB0aGlzKSB7XG5cdFx0XHRcdHRoaXMucmVtb3ZlKGlnbm9yZSk7XG5cdFx0XHR9IGVsc2UgaWYgKGlnbm9yZSAmJiAoKGlnbm9yZSBpbnN0YW5jZW9mIEFycmF5KSB8fCAoaWdub3JlLnB1c2ggJiYgX2lzQXJyYXkoaWdub3JlKSkpKSB7XG5cdFx0XHRcdGkgPSBpZ25vcmUubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRpZiAoaWdub3JlW2ldIGluc3RhbmNlb2YgQW5pbWF0aW9uICYmIGlnbm9yZVtpXS50aW1lbGluZSA9PT0gdGhpcykge1xuXHRcdFx0XHRcdFx0dGhpcy5yZW1vdmUoaWdub3JlW2ldKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICh0eXBlb2Yob2Zmc2V0T3JMYWJlbCkgPT09IFwic3RyaW5nXCIpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX3BhcnNlVGltZU9yTGFiZWwob2Zmc2V0T3JMYWJlbCwgKGFwcGVuZElmQWJzZW50ICYmIHR5cGVvZih0aW1lT3JMYWJlbCkgPT09IFwibnVtYmVyXCIgJiYgdGhpcy5fbGFiZWxzW29mZnNldE9yTGFiZWxdID09IG51bGwpID8gdGltZU9yTGFiZWwgLSB0aGlzLmR1cmF0aW9uKCkgOiAwLCBhcHBlbmRJZkFic2VudCk7XG5cdFx0XHR9XG5cdFx0XHRvZmZzZXRPckxhYmVsID0gb2Zmc2V0T3JMYWJlbCB8fCAwO1xuXHRcdFx0aWYgKHR5cGVvZih0aW1lT3JMYWJlbCkgPT09IFwic3RyaW5nXCIgJiYgKGlzTmFOKHRpbWVPckxhYmVsKSB8fCB0aGlzLl9sYWJlbHNbdGltZU9yTGFiZWxdICE9IG51bGwpKSB7IC8vaWYgdGhlIHN0cmluZyBpcyBhIG51bWJlciBsaWtlIFwiMVwiLCBjaGVjayB0byBzZWUgaWYgdGhlcmUncyBhIGxhYmVsIHdpdGggdGhhdCBuYW1lLCBvdGhlcndpc2UgaW50ZXJwcmV0IGl0IGFzIGEgbnVtYmVyIChhYnNvbHV0ZSB2YWx1ZSkuXG5cdFx0XHRcdGkgPSB0aW1lT3JMYWJlbC5pbmRleE9mKFwiPVwiKTtcblx0XHRcdFx0aWYgKGkgPT09IC0xKSB7XG5cdFx0XHRcdFx0aWYgKHRoaXMuX2xhYmVsc1t0aW1lT3JMYWJlbF0gPT0gbnVsbCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGFwcGVuZElmQWJzZW50ID8gKHRoaXMuX2xhYmVsc1t0aW1lT3JMYWJlbF0gPSB0aGlzLmR1cmF0aW9uKCkgKyBvZmZzZXRPckxhYmVsKSA6IG9mZnNldE9yTGFiZWw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzLl9sYWJlbHNbdGltZU9yTGFiZWxdICsgb2Zmc2V0T3JMYWJlbDtcblx0XHRcdFx0fVxuXHRcdFx0XHRvZmZzZXRPckxhYmVsID0gcGFyc2VJbnQodGltZU9yTGFiZWwuY2hhckF0KGktMSkgKyBcIjFcIiwgMTApICogTnVtYmVyKHRpbWVPckxhYmVsLnN1YnN0cihpKzEpKTtcblx0XHRcdFx0dGltZU9yTGFiZWwgPSAoaSA+IDEpID8gdGhpcy5fcGFyc2VUaW1lT3JMYWJlbCh0aW1lT3JMYWJlbC5zdWJzdHIoMCwgaS0xKSwgMCwgYXBwZW5kSWZBYnNlbnQpIDogdGhpcy5kdXJhdGlvbigpO1xuXHRcdFx0fSBlbHNlIGlmICh0aW1lT3JMYWJlbCA9PSBudWxsKSB7XG5cdFx0XHRcdHRpbWVPckxhYmVsID0gdGhpcy5kdXJhdGlvbigpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIE51bWJlcih0aW1lT3JMYWJlbCkgKyBvZmZzZXRPckxhYmVsO1xuXHRcdH07XG5cblx0XHRwLnNlZWsgPSBmdW5jdGlvbihwb3NpdGlvbiwgc3VwcHJlc3NFdmVudHMpIHtcblx0XHRcdHJldHVybiB0aGlzLnRvdGFsVGltZSgodHlwZW9mKHBvc2l0aW9uKSA9PT0gXCJudW1iZXJcIikgPyBwb3NpdGlvbiA6IHRoaXMuX3BhcnNlVGltZU9yTGFiZWwocG9zaXRpb24pLCAoc3VwcHJlc3NFdmVudHMgIT09IGZhbHNlKSk7XG5cdFx0fTtcblxuXHRcdHAuc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMucGF1c2VkKHRydWUpO1xuXHRcdH07XG5cblx0XHRwLmdvdG9BbmRQbGF5ID0gZnVuY3Rpb24ocG9zaXRpb24sIHN1cHByZXNzRXZlbnRzKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wbGF5KHBvc2l0aW9uLCBzdXBwcmVzc0V2ZW50cyk7XG5cdFx0fTtcblxuXHRcdHAuZ290b0FuZFN0b3AgPSBmdW5jdGlvbihwb3NpdGlvbiwgc3VwcHJlc3NFdmVudHMpIHtcblx0XHRcdHJldHVybiB0aGlzLnBhdXNlKHBvc2l0aW9uLCBzdXBwcmVzc0V2ZW50cyk7XG5cdFx0fTtcblxuXHRcdHAucmVuZGVyID0gZnVuY3Rpb24odGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB7XG5cdFx0XHRpZiAodGhpcy5fZ2MpIHtcblx0XHRcdFx0dGhpcy5fZW5hYmxlZCh0cnVlLCBmYWxzZSk7XG5cdFx0XHR9XG5cdFx0XHR2YXIgdG90YWxEdXIgPSAoIXRoaXMuX2RpcnR5KSA/IHRoaXMuX3RvdGFsRHVyYXRpb24gOiB0aGlzLnRvdGFsRHVyYXRpb24oKSxcblx0XHRcdFx0cHJldlRpbWUgPSB0aGlzLl90aW1lLFxuXHRcdFx0XHRwcmV2U3RhcnQgPSB0aGlzLl9zdGFydFRpbWUsXG5cdFx0XHRcdHByZXZUaW1lU2NhbGUgPSB0aGlzLl90aW1lU2NhbGUsXG5cdFx0XHRcdHByZXZQYXVzZWQgPSB0aGlzLl9wYXVzZWQsXG5cdFx0XHRcdHR3ZWVuLCBpc0NvbXBsZXRlLCBuZXh0LCBjYWxsYmFjaywgaW50ZXJuYWxGb3JjZSwgcGF1c2VUd2Vlbjtcblx0XHRcdGlmICh0aW1lID49IHRvdGFsRHVyKSB7XG5cdFx0XHRcdHRoaXMuX3RvdGFsVGltZSA9IHRoaXMuX3RpbWUgPSB0b3RhbER1cjtcblx0XHRcdFx0aWYgKCF0aGlzLl9yZXZlcnNlZCkgaWYgKCF0aGlzLl9oYXNQYXVzZWRDaGlsZCgpKSB7XG5cdFx0XHRcdFx0aXNDb21wbGV0ZSA9IHRydWU7XG5cdFx0XHRcdFx0Y2FsbGJhY2sgPSBcIm9uQ29tcGxldGVcIjtcblx0XHRcdFx0XHRpbnRlcm5hbEZvcmNlID0gISF0aGlzLl90aW1lbGluZS5hdXRvUmVtb3ZlQ2hpbGRyZW47IC8vb3RoZXJ3aXNlLCBpZiB0aGUgYW5pbWF0aW9uIGlzIHVucGF1c2VkL2FjdGl2YXRlZCBhZnRlciBpdCdzIGFscmVhZHkgZmluaXNoZWQsIGl0IGRvZXNuJ3QgZ2V0IHJlbW92ZWQgZnJvbSB0aGUgcGFyZW50IHRpbWVsaW5lLlxuXHRcdFx0XHRcdGlmICh0aGlzLl9kdXJhdGlvbiA9PT0gMCkgaWYgKHRpbWUgPT09IDAgfHwgdGhpcy5fcmF3UHJldlRpbWUgPCAwIHx8IHRoaXMuX3Jhd1ByZXZUaW1lID09PSBfdGlueU51bSkgaWYgKHRoaXMuX3Jhd1ByZXZUaW1lICE9PSB0aW1lICYmIHRoaXMuX2ZpcnN0KSB7XG5cdFx0XHRcdFx0XHRpbnRlcm5hbEZvcmNlID0gdHJ1ZTtcblx0XHRcdFx0XHRcdGlmICh0aGlzLl9yYXdQcmV2VGltZSA+IF90aW55TnVtKSB7XG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrID0gXCJvblJldmVyc2VDb21wbGV0ZVwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLl9yYXdQcmV2VGltZSA9ICh0aGlzLl9kdXJhdGlvbiB8fCAhc3VwcHJlc3NFdmVudHMgfHwgdGltZSB8fCB0aGlzLl9yYXdQcmV2VGltZSA9PT0gdGltZSkgPyB0aW1lIDogX3RpbnlOdW07IC8vd2hlbiB0aGUgcGxheWhlYWQgYXJyaXZlcyBhdCBFWEFDVExZIHRpbWUgMCAocmlnaHQgb24gdG9wKSBvZiBhIHplcm8tZHVyYXRpb24gdGltZWxpbmUgb3IgdHdlZW4sIHdlIG5lZWQgdG8gZGlzY2VybiBpZiBldmVudHMgYXJlIHN1cHByZXNzZWQgc28gdGhhdCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBhZ2FpbiAobmV4dCB0aW1lKSwgaXQnbGwgdHJpZ2dlciB0aGUgY2FsbGJhY2suIElmIGV2ZW50cyBhcmUgTk9UIHN1cHByZXNzZWQsIG9idmlvdXNseSB0aGUgY2FsbGJhY2sgd291bGQgYmUgdHJpZ2dlcmVkIGluIHRoaXMgcmVuZGVyLiBCYXNpY2FsbHksIHRoZSBjYWxsYmFjayBzaG91bGQgZmlyZSBlaXRoZXIgd2hlbiB0aGUgcGxheWhlYWQgQVJSSVZFUyBvciBMRUFWRVMgdGhpcyBleGFjdCBzcG90LCBub3QgYm90aC4gSW1hZ2luZSBkb2luZyBhIHRpbWVsaW5lLnNlZWsoMCkgYW5kIHRoZXJlJ3MgYSBjYWxsYmFjayB0aGF0IHNpdHMgYXQgMC4gU2luY2UgZXZlbnRzIGFyZSBzdXBwcmVzc2VkIG9uIHRoYXQgc2VlaygpIGJ5IGRlZmF1bHQsIG5vdGhpbmcgd2lsbCBmaXJlLCBidXQgd2hlbiB0aGUgcGxheWhlYWQgbW92ZXMgb2ZmIG9mIHRoYXQgcG9zaXRpb24sIHRoZSBjYWxsYmFjayBzaG91bGQgZmlyZS4gVGhpcyBiZWhhdmlvciBpcyB3aGF0IHBlb3BsZSBpbnR1aXRpdmVseSBleHBlY3QuIFdlIHNldCB0aGUgX3Jhd1ByZXZUaW1lIHRvIGJlIGEgcHJlY2lzZSB0aW55IG51bWJlciB0byBpbmRpY2F0ZSB0aGlzIHNjZW5hcmlvIHJhdGhlciB0aGFuIHVzaW5nIGFub3RoZXIgcHJvcGVydHkvdmFyaWFibGUgd2hpY2ggd291bGQgaW5jcmVhc2UgbWVtb3J5IHVzYWdlLiBUaGlzIHRlY2huaXF1ZSBpcyBsZXNzIHJlYWRhYmxlLCBidXQgbW9yZSBlZmZpY2llbnQuXG5cdFx0XHRcdHRpbWUgPSB0b3RhbER1ciArIDAuMDAwMTsgLy90byBhdm9pZCBvY2Nhc2lvbmFsIGZsb2F0aW5nIHBvaW50IHJvdW5kaW5nIGVycm9ycyAtIHNvbWV0aW1lcyBjaGlsZCB0d2VlbnMvdGltZWxpbmVzIHdlcmUgbm90IGJlaW5nIGZ1bGx5IGNvbXBsZXRlZCAodGhlaXIgcHJvZ3Jlc3MgbWlnaHQgYmUgMC45OTk5OTk5OTk5OTk5OTggaW5zdGVhZCBvZiAxIGJlY2F1c2Ugd2hlbiBfdGltZSAtIHR3ZWVuLl9zdGFydFRpbWUgaXMgcGVyZm9ybWVkLCBmbG9hdGluZyBwb2ludCBlcnJvcnMgd291bGQgcmV0dXJuIGEgdmFsdWUgdGhhdCB3YXMgU0xJR0hUTFkgb2ZmKS4gVHJ5ICg5OTk5OTk5OTk5OTkuNyAtIDk5OTk5OTk5OTk5OSkgKiAxID0gMC42OTk5NTExNzE4NzUgaW5zdGVhZCBvZiAwLjcuXG5cblx0XHRcdH0gZWxzZSBpZiAodGltZSA8IDAuMDAwMDAwMSkgeyAvL3RvIHdvcmsgYXJvdW5kIG9jY2FzaW9uYWwgZmxvYXRpbmcgcG9pbnQgbWF0aCBhcnRpZmFjdHMsIHJvdW5kIHN1cGVyIHNtYWxsIHZhbHVlcyB0byAwLlxuXHRcdFx0XHR0aGlzLl90b3RhbFRpbWUgPSB0aGlzLl90aW1lID0gMDtcblx0XHRcdFx0aWYgKHByZXZUaW1lICE9PSAwIHx8ICh0aGlzLl9kdXJhdGlvbiA9PT0gMCAmJiB0aGlzLl9yYXdQcmV2VGltZSAhPT0gX3RpbnlOdW0gJiYgKHRoaXMuX3Jhd1ByZXZUaW1lID4gMCB8fCAodGltZSA8IDAgJiYgdGhpcy5fcmF3UHJldlRpbWUgPj0gMCkpKSkge1xuXHRcdFx0XHRcdGNhbGxiYWNrID0gXCJvblJldmVyc2VDb21wbGV0ZVwiO1xuXHRcdFx0XHRcdGlzQ29tcGxldGUgPSB0aGlzLl9yZXZlcnNlZDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodGltZSA8IDApIHtcblx0XHRcdFx0XHR0aGlzLl9hY3RpdmUgPSBmYWxzZTtcblx0XHRcdFx0XHRpZiAodGhpcy5fdGltZWxpbmUuYXV0b1JlbW92ZUNoaWxkcmVuICYmIHRoaXMuX3JldmVyc2VkKSB7IC8vZW5zdXJlcyBwcm9wZXIgR0MgaWYgYSB0aW1lbGluZSBpcyByZXN1bWVkIGFmdGVyIGl0J3MgZmluaXNoZWQgcmV2ZXJzaW5nLlxuXHRcdFx0XHRcdFx0aW50ZXJuYWxGb3JjZSA9IGlzQ29tcGxldGUgPSB0cnVlO1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBcIm9uUmV2ZXJzZUNvbXBsZXRlXCI7XG5cdFx0XHRcdFx0fSBlbHNlIGlmICh0aGlzLl9yYXdQcmV2VGltZSA+PSAwICYmIHRoaXMuX2ZpcnN0KSB7IC8vd2hlbiBnb2luZyBiYWNrIGJleW9uZCB0aGUgc3RhcnQsIGZvcmNlIGEgcmVuZGVyIHNvIHRoYXQgemVyby1kdXJhdGlvbiB0d2VlbnMgdGhhdCBzaXQgYXQgdGhlIHZlcnkgYmVnaW5uaW5nIHJlbmRlciB0aGVpciBzdGFydCB2YWx1ZXMgcHJvcGVybHkuIE90aGVyd2lzZSwgaWYgdGhlIHBhcmVudCB0aW1lbGluZSdzIHBsYXloZWFkIGxhbmRzIGV4YWN0bHkgYXQgdGhpcyB0aW1lbGluZSdzIHN0YXJ0VGltZSwgYW5kIHRoZW4gbW92ZXMgYmFja3dhcmRzLCB0aGUgemVyby1kdXJhdGlvbiB0d2VlbnMgYXQgdGhlIGJlZ2lubmluZyB3b3VsZCBzdGlsbCBiZSBhdCB0aGVpciBlbmQgc3RhdGUuXG5cdFx0XHRcdFx0XHRpbnRlcm5hbEZvcmNlID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGhpcy5fcmF3UHJldlRpbWUgPSB0aW1lO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRoaXMuX3Jhd1ByZXZUaW1lID0gKHRoaXMuX2R1cmF0aW9uIHx8ICFzdXBwcmVzc0V2ZW50cyB8fCB0aW1lIHx8IHRoaXMuX3Jhd1ByZXZUaW1lID09PSB0aW1lKSA/IHRpbWUgOiBfdGlueU51bTsgLy93aGVuIHRoZSBwbGF5aGVhZCBhcnJpdmVzIGF0IEVYQUNUTFkgdGltZSAwIChyaWdodCBvbiB0b3ApIG9mIGEgemVyby1kdXJhdGlvbiB0aW1lbGluZSBvciB0d2Vlbiwgd2UgbmVlZCB0byBkaXNjZXJuIGlmIGV2ZW50cyBhcmUgc3VwcHJlc3NlZCBzbyB0aGF0IHdoZW4gdGhlIHBsYXloZWFkIG1vdmVzIGFnYWluIChuZXh0IHRpbWUpLCBpdCdsbCB0cmlnZ2VyIHRoZSBjYWxsYmFjay4gSWYgZXZlbnRzIGFyZSBOT1Qgc3VwcHJlc3NlZCwgb2J2aW91c2x5IHRoZSBjYWxsYmFjayB3b3VsZCBiZSB0cmlnZ2VyZWQgaW4gdGhpcyByZW5kZXIuIEJhc2ljYWxseSwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlIGVpdGhlciB3aGVuIHRoZSBwbGF5aGVhZCBBUlJJVkVTIG9yIExFQVZFUyB0aGlzIGV4YWN0IHNwb3QsIG5vdCBib3RoLiBJbWFnaW5lIGRvaW5nIGEgdGltZWxpbmUuc2VlaygwKSBhbmQgdGhlcmUncyBhIGNhbGxiYWNrIHRoYXQgc2l0cyBhdCAwLiBTaW5jZSBldmVudHMgYXJlIHN1cHByZXNzZWQgb24gdGhhdCBzZWVrKCkgYnkgZGVmYXVsdCwgbm90aGluZyB3aWxsIGZpcmUsIGJ1dCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBvZmYgb2YgdGhhdCBwb3NpdGlvbiwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlLiBUaGlzIGJlaGF2aW9yIGlzIHdoYXQgcGVvcGxlIGludHVpdGl2ZWx5IGV4cGVjdC4gV2Ugc2V0IHRoZSBfcmF3UHJldlRpbWUgdG8gYmUgYSBwcmVjaXNlIHRpbnkgbnVtYmVyIHRvIGluZGljYXRlIHRoaXMgc2NlbmFyaW8gcmF0aGVyIHRoYW4gdXNpbmcgYW5vdGhlciBwcm9wZXJ0eS92YXJpYWJsZSB3aGljaCB3b3VsZCBpbmNyZWFzZSBtZW1vcnkgdXNhZ2UuIFRoaXMgdGVjaG5pcXVlIGlzIGxlc3MgcmVhZGFibGUsIGJ1dCBtb3JlIGVmZmljaWVudC5cblx0XHRcdFx0XHRpZiAodGltZSA9PT0gMCAmJiBpc0NvbXBsZXRlKSB7IC8vaWYgdGhlcmUncyBhIHplcm8tZHVyYXRpb24gdHdlZW4gYXQgdGhlIHZlcnkgYmVnaW5uaW5nIG9mIGEgdGltZWxpbmUgYW5kIHRoZSBwbGF5aGVhZCBsYW5kcyBFWEFDVExZIGF0IHRpbWUgMCwgdGhhdCB0d2VlbiB3aWxsIGNvcnJlY3RseSByZW5kZXIgaXRzIGVuZCB2YWx1ZXMsIGJ1dCB3ZSBuZWVkIHRvIGtlZXAgdGhlIHRpbWVsaW5lIGFsaXZlIGZvciBvbmUgbW9yZSByZW5kZXIgc28gdGhhdCB0aGUgYmVnaW5uaW5nIHZhbHVlcyByZW5kZXIgcHJvcGVybHkgYXMgdGhlIHBhcmVudCdzIHBsYXloZWFkIGtlZXBzIG1vdmluZyBiZXlvbmQgdGhlIGJlZ2luaW5nLiBJbWFnaW5lIG9iai54IHN0YXJ0cyBhdCAwIGFuZCB0aGVuIHdlIGRvIHRsLnNldChvYmosIHt4OjEwMH0pLnRvKG9iaiwgMSwge3g6MjAwfSkgYW5kIHRoZW4gbGF0ZXIgd2UgdGwucmV2ZXJzZSgpLi4udGhlIGdvYWwgaXMgdG8gaGF2ZSBvYmoueCByZXZlcnQgdG8gMC4gSWYgdGhlIHBsYXloZWFkIGhhcHBlbnMgdG8gbGFuZCBvbiBleGFjdGx5IDAsIHdpdGhvdXQgdGhpcyBjaHVuayBvZiBjb2RlLCBpdCdkIGNvbXBsZXRlIHRoZSB0aW1lbGluZSBhbmQgcmVtb3ZlIGl0IGZyb20gdGhlIHJlbmRlcmluZyBxdWV1ZSAobm90IGdvb2QpLlxuXHRcdFx0XHRcdFx0dHdlZW4gPSB0aGlzLl9maXJzdDtcblx0XHRcdFx0XHRcdHdoaWxlICh0d2VlbiAmJiB0d2Vlbi5fc3RhcnRUaW1lID09PSAwKSB7XG5cdFx0XHRcdFx0XHRcdGlmICghdHdlZW4uX2R1cmF0aW9uKSB7XG5cdFx0XHRcdFx0XHRcdFx0aXNDb21wbGV0ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHR3ZWVuID0gdHdlZW4uX25leHQ7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRpbWUgPSAwOyAvL3RvIGF2b2lkIG9jY2FzaW9uYWwgZmxvYXRpbmcgcG9pbnQgcm91bmRpbmcgZXJyb3JzIChjb3VsZCBjYXVzZSBwcm9ibGVtcyBlc3BlY2lhbGx5IHdpdGggemVyby1kdXJhdGlvbiB0d2VlbnMgYXQgdGhlIHZlcnkgYmVnaW5uaW5nIG9mIHRoZSB0aW1lbGluZSlcblx0XHRcdFx0XHRpZiAoIXRoaXMuX2luaXR0ZWQpIHtcblx0XHRcdFx0XHRcdGludGVybmFsRm9yY2UgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGlmICh0aGlzLl9oYXNQYXVzZSAmJiAhdGhpcy5fZm9yY2luZ1BsYXloZWFkICYmICFzdXBwcmVzc0V2ZW50cykge1xuXHRcdFx0XHRcdGlmICh0aW1lID49IHByZXZUaW1lKSB7XG5cdFx0XHRcdFx0XHR0d2VlbiA9IHRoaXMuX2ZpcnN0O1xuXHRcdFx0XHRcdFx0d2hpbGUgKHR3ZWVuICYmIHR3ZWVuLl9zdGFydFRpbWUgPD0gdGltZSAmJiAhcGF1c2VUd2Vlbikge1xuXHRcdFx0XHRcdFx0XHRpZiAoIXR3ZWVuLl9kdXJhdGlvbikgaWYgKHR3ZWVuLmRhdGEgPT09IFwiaXNQYXVzZVwiICYmICF0d2Vlbi5yYXRpbyAmJiAhKHR3ZWVuLl9zdGFydFRpbWUgPT09IDAgJiYgdGhpcy5fcmF3UHJldlRpbWUgPT09IDApKSB7XG5cdFx0XHRcdFx0XHRcdFx0cGF1c2VUd2VlbiA9IHR3ZWVuO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHR3ZWVuID0gdHdlZW4uX25leHQ7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHR3ZWVuID0gdGhpcy5fbGFzdDtcblx0XHRcdFx0XHRcdHdoaWxlICh0d2VlbiAmJiB0d2Vlbi5fc3RhcnRUaW1lID49IHRpbWUgJiYgIXBhdXNlVHdlZW4pIHtcblx0XHRcdFx0XHRcdFx0aWYgKCF0d2Vlbi5fZHVyYXRpb24pIGlmICh0d2Vlbi5kYXRhID09PSBcImlzUGF1c2VcIiAmJiB0d2Vlbi5fcmF3UHJldlRpbWUgPiAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0cGF1c2VUd2VlbiA9IHR3ZWVuO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHR3ZWVuID0gdHdlZW4uX3ByZXY7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChwYXVzZVR3ZWVuKSB7XG5cdFx0XHRcdFx0XHR0aGlzLl90aW1lID0gdGltZSA9IHBhdXNlVHdlZW4uX3N0YXJ0VGltZTtcblx0XHRcdFx0XHRcdHRoaXMuX3RvdGFsVGltZSA9IHRpbWUgKyAodGhpcy5fY3ljbGUgKiAodGhpcy5fdG90YWxEdXJhdGlvbiArIHRoaXMuX3JlcGVhdERlbGF5KSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGhpcy5fdG90YWxUaW1lID0gdGhpcy5fdGltZSA9IHRoaXMuX3Jhd1ByZXZUaW1lID0gdGltZTtcblx0XHRcdH1cblx0XHRcdGlmICgodGhpcy5fdGltZSA9PT0gcHJldlRpbWUgfHwgIXRoaXMuX2ZpcnN0KSAmJiAhZm9yY2UgJiYgIWludGVybmFsRm9yY2UgJiYgIXBhdXNlVHdlZW4pIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fSBlbHNlIGlmICghdGhpcy5faW5pdHRlZCkge1xuXHRcdFx0XHR0aGlzLl9pbml0dGVkID0gdHJ1ZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCF0aGlzLl9hY3RpdmUpIGlmICghdGhpcy5fcGF1c2VkICYmIHRoaXMuX3RpbWUgIT09IHByZXZUaW1lICYmIHRpbWUgPiAwKSB7XG5cdFx0XHRcdHRoaXMuX2FjdGl2ZSA9IHRydWU7ICAvL3NvIHRoYXQgaWYgdGhlIHVzZXIgcmVuZGVycyB0aGUgdGltZWxpbmUgKGFzIG9wcG9zZWQgdG8gdGhlIHBhcmVudCB0aW1lbGluZSByZW5kZXJpbmcgaXQpLCBpdCBpcyBmb3JjZWQgdG8gcmUtcmVuZGVyIGFuZCBhbGlnbiBpdCB3aXRoIHRoZSBwcm9wZXIgdGltZS9mcmFtZSBvbiB0aGUgbmV4dCByZW5kZXJpbmcgY3ljbGUuIE1heWJlIHRoZSB0aW1lbGluZSBhbHJlYWR5IGZpbmlzaGVkIGJ1dCB0aGUgdXNlciBtYW51YWxseSByZS1yZW5kZXJzIGl0IGFzIGhhbGZ3YXkgZG9uZSwgZm9yIGV4YW1wbGUuXG5cdFx0XHR9XG5cblx0XHRcdGlmIChwcmV2VGltZSA9PT0gMCkgaWYgKHRoaXMudmFycy5vblN0YXJ0KSBpZiAodGhpcy5fdGltZSAhPT0gMCkgaWYgKCFzdXBwcmVzc0V2ZW50cykge1xuXHRcdFx0XHR0aGlzLl9jYWxsYmFjayhcIm9uU3RhcnRcIik7XG5cdFx0XHR9XG5cblx0XHRcdGlmICh0aGlzLl90aW1lID49IHByZXZUaW1lKSB7XG5cdFx0XHRcdHR3ZWVuID0gdGhpcy5fZmlyc3Q7XG5cdFx0XHRcdHdoaWxlICh0d2Vlbikge1xuXHRcdFx0XHRcdG5leHQgPSB0d2Vlbi5fbmV4dDsgLy9yZWNvcmQgaXQgaGVyZSBiZWNhdXNlIHRoZSB2YWx1ZSBjb3VsZCBjaGFuZ2UgYWZ0ZXIgcmVuZGVyaW5nLi4uXG5cdFx0XHRcdFx0aWYgKHRoaXMuX3BhdXNlZCAmJiAhcHJldlBhdXNlZCkgeyAvL2luIGNhc2UgYSB0d2VlbiBwYXVzZXMgdGhlIHRpbWVsaW5lIHdoZW4gcmVuZGVyaW5nXG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHR3ZWVuLl9hY3RpdmUgfHwgKHR3ZWVuLl9zdGFydFRpbWUgPD0gdGhpcy5fdGltZSAmJiAhdHdlZW4uX3BhdXNlZCAmJiAhdHdlZW4uX2djKSkge1xuXHRcdFx0XHRcdFx0aWYgKHBhdXNlVHdlZW4gPT09IHR3ZWVuKSB7XG5cdFx0XHRcdFx0XHRcdHRoaXMucGF1c2UoKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICghdHdlZW4uX3JldmVyc2VkKSB7XG5cdFx0XHRcdFx0XHRcdHR3ZWVuLnJlbmRlcigodGltZSAtIHR3ZWVuLl9zdGFydFRpbWUpICogdHdlZW4uX3RpbWVTY2FsZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHR3ZWVuLnJlbmRlcigoKCF0d2Vlbi5fZGlydHkpID8gdHdlZW4uX3RvdGFsRHVyYXRpb24gOiB0d2Vlbi50b3RhbER1cmF0aW9uKCkpIC0gKCh0aW1lIC0gdHdlZW4uX3N0YXJ0VGltZSkgKiB0d2Vlbi5fdGltZVNjYWxlKSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dHdlZW4gPSBuZXh0O1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0d2VlbiA9IHRoaXMuX2xhc3Q7XG5cdFx0XHRcdHdoaWxlICh0d2Vlbikge1xuXHRcdFx0XHRcdG5leHQgPSB0d2Vlbi5fcHJldjsgLy9yZWNvcmQgaXQgaGVyZSBiZWNhdXNlIHRoZSB2YWx1ZSBjb3VsZCBjaGFuZ2UgYWZ0ZXIgcmVuZGVyaW5nLi4uXG5cdFx0XHRcdFx0aWYgKHRoaXMuX3BhdXNlZCAmJiAhcHJldlBhdXNlZCkgeyAvL2luIGNhc2UgYSB0d2VlbiBwYXVzZXMgdGhlIHRpbWVsaW5lIHdoZW4gcmVuZGVyaW5nXG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHR3ZWVuLl9hY3RpdmUgfHwgKHR3ZWVuLl9zdGFydFRpbWUgPD0gcHJldlRpbWUgJiYgIXR3ZWVuLl9wYXVzZWQgJiYgIXR3ZWVuLl9nYykpIHtcblx0XHRcdFx0XHRcdGlmIChwYXVzZVR3ZWVuID09PSB0d2Vlbikge1xuXHRcdFx0XHRcdFx0XHRwYXVzZVR3ZWVuID0gdHdlZW4uX3ByZXY7IC8vdGhlIGxpbmtlZCBsaXN0IGlzIG9yZ2FuaXplZCBieSBfc3RhcnRUaW1lLCB0aHVzIGl0J3MgcG9zc2libGUgdGhhdCBhIHR3ZWVuIGNvdWxkIHN0YXJ0IEJFRk9SRSB0aGUgcGF1c2UgYW5kIGVuZCBhZnRlciBpdCwgaW4gd2hpY2ggY2FzZSBpdCB3b3VsZCBiZSBwb3NpdGlvbmVkIGJlZm9yZSB0aGUgcGF1c2UgdHdlZW4gaW4gdGhlIGxpbmtlZCBsaXN0LCBidXQgd2Ugc2hvdWxkIHJlbmRlciBpdCBiZWZvcmUgd2UgcGF1c2UoKSB0aGUgdGltZWxpbmUgYW5kIGNlYXNlIHJlbmRlcmluZy4gVGhpcyBpcyBvbmx5IGEgY29uY2VybiB3aGVuIGdvaW5nIGluIHJldmVyc2UuXG5cdFx0XHRcdFx0XHRcdHdoaWxlIChwYXVzZVR3ZWVuICYmIHBhdXNlVHdlZW4uZW5kVGltZSgpID4gdGhpcy5fdGltZSkge1xuXHRcdFx0XHRcdFx0XHRcdHBhdXNlVHdlZW4ucmVuZGVyKCAocGF1c2VUd2Vlbi5fcmV2ZXJzZWQgPyBwYXVzZVR3ZWVuLnRvdGFsRHVyYXRpb24oKSAtICgodGltZSAtIHBhdXNlVHdlZW4uX3N0YXJ0VGltZSkgKiBwYXVzZVR3ZWVuLl90aW1lU2NhbGUpIDogKHRpbWUgLSBwYXVzZVR3ZWVuLl9zdGFydFRpbWUpICogcGF1c2VUd2Vlbi5fdGltZVNjYWxlKSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcblx0XHRcdFx0XHRcdFx0XHRwYXVzZVR3ZWVuID0gcGF1c2VUd2Vlbi5fcHJldjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRwYXVzZVR3ZWVuID0gbnVsbDtcblx0XHRcdFx0XHRcdFx0dGhpcy5wYXVzZSgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCF0d2Vlbi5fcmV2ZXJzZWQpIHtcblx0XHRcdFx0XHRcdFx0dHdlZW4ucmVuZGVyKCh0aW1lIC0gdHdlZW4uX3N0YXJ0VGltZSkgKiB0d2Vlbi5fdGltZVNjYWxlLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0dHdlZW4ucmVuZGVyKCgoIXR3ZWVuLl9kaXJ0eSkgPyB0d2Vlbi5fdG90YWxEdXJhdGlvbiA6IHR3ZWVuLnRvdGFsRHVyYXRpb24oKSkgLSAoKHRpbWUgLSB0d2Vlbi5fc3RhcnRUaW1lKSAqIHR3ZWVuLl90aW1lU2NhbGUpLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0d2VlbiA9IG5leHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKHRoaXMuX29uVXBkYXRlKSBpZiAoIXN1cHByZXNzRXZlbnRzKSB7XG5cdFx0XHRcdGlmIChfbGF6eVR3ZWVucy5sZW5ndGgpIHsgLy9pbiBjYXNlIHJlbmRlcmluZyBjYXVzZWQgYW55IHR3ZWVucyB0byBsYXp5LWluaXQsIHdlIHNob3VsZCByZW5kZXIgdGhlbSBiZWNhdXNlIHR5cGljYWxseSB3aGVuIGEgdGltZWxpbmUgZmluaXNoZXMsIHVzZXJzIGV4cGVjdCB0aGluZ3MgdG8gaGF2ZSByZW5kZXJlZCBmdWxseS4gSW1hZ2luZSBhbiBvblVwZGF0ZSBvbiBhIHRpbWVsaW5lIHRoYXQgcmVwb3J0cy9jaGVja3MgdHdlZW5lZCB2YWx1ZXMuXG5cdFx0XHRcdFx0X2xhenlSZW5kZXIoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLl9jYWxsYmFjayhcIm9uVXBkYXRlXCIpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoY2FsbGJhY2spIGlmICghdGhpcy5fZ2MpIGlmIChwcmV2U3RhcnQgPT09IHRoaXMuX3N0YXJ0VGltZSB8fCBwcmV2VGltZVNjYWxlICE9PSB0aGlzLl90aW1lU2NhbGUpIGlmICh0aGlzLl90aW1lID09PSAwIHx8IHRvdGFsRHVyID49IHRoaXMudG90YWxEdXJhdGlvbigpKSB7IC8vaWYgb25lIG9mIHRoZSB0d2VlbnMgdGhhdCB3YXMgcmVuZGVyZWQgYWx0ZXJlZCB0aGlzIHRpbWVsaW5lJ3Mgc3RhcnRUaW1lIChsaWtlIGlmIGFuIG9uQ29tcGxldGUgcmV2ZXJzZWQgdGhlIHRpbWVsaW5lKSwgaXQgcHJvYmFibHkgaXNuJ3QgY29tcGxldGUuIElmIGl0IGlzLCBkb24ndCB3b3JyeSwgYmVjYXVzZSB3aGF0ZXZlciBjYWxsIGFsdGVyZWQgdGhlIHN0YXJ0VGltZSB3b3VsZCBjb21wbGV0ZSBpZiBpdCB3YXMgbmVjZXNzYXJ5IGF0IHRoZSBuZXcgdGltZS4gVGhlIG9ubHkgZXhjZXB0aW9uIGlzIHRoZSB0aW1lU2NhbGUgcHJvcGVydHkuIEFsc28gY2hlY2sgX2djIGJlY2F1c2UgdGhlcmUncyBhIGNoYW5jZSB0aGF0IGtpbGwoKSBjb3VsZCBiZSBjYWxsZWQgaW4gYW4gb25VcGRhdGVcblx0XHRcdFx0aWYgKGlzQ29tcGxldGUpIHtcblx0XHRcdFx0XHRpZiAoX2xhenlUd2VlbnMubGVuZ3RoKSB7IC8vaW4gY2FzZSByZW5kZXJpbmcgY2F1c2VkIGFueSB0d2VlbnMgdG8gbGF6eS1pbml0LCB3ZSBzaG91bGQgcmVuZGVyIHRoZW0gYmVjYXVzZSB0eXBpY2FsbHkgd2hlbiBhIHRpbWVsaW5lIGZpbmlzaGVzLCB1c2VycyBleHBlY3QgdGhpbmdzIHRvIGhhdmUgcmVuZGVyZWQgZnVsbHkuIEltYWdpbmUgYW4gb25Db21wbGV0ZSBvbiBhIHRpbWVsaW5lIHRoYXQgcmVwb3J0cy9jaGVja3MgdHdlZW5lZCB2YWx1ZXMuXG5cdFx0XHRcdFx0XHRfbGF6eVJlbmRlcigpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAodGhpcy5fdGltZWxpbmUuYXV0b1JlbW92ZUNoaWxkcmVuKSB7XG5cdFx0XHRcdFx0XHR0aGlzLl9lbmFibGVkKGZhbHNlLCBmYWxzZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRoaXMuX2FjdGl2ZSA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICghc3VwcHJlc3NFdmVudHMgJiYgdGhpcy52YXJzW2NhbGxiYWNrXSkge1xuXHRcdFx0XHRcdHRoaXMuX2NhbGxiYWNrKGNhbGxiYWNrKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRwLl9oYXNQYXVzZWRDaGlsZCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5fZmlyc3Q7XG5cdFx0XHR3aGlsZSAodHdlZW4pIHtcblx0XHRcdFx0aWYgKHR3ZWVuLl9wYXVzZWQgfHwgKCh0d2VlbiBpbnN0YW5jZW9mIFRpbWVsaW5lTGl0ZSkgJiYgdHdlZW4uX2hhc1BhdXNlZENoaWxkKCkpKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0dHdlZW4gPSB0d2Vlbi5fbmV4dDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXG5cdFx0cC5nZXRDaGlsZHJlbiA9IGZ1bmN0aW9uKG5lc3RlZCwgdHdlZW5zLCB0aW1lbGluZXMsIGlnbm9yZUJlZm9yZVRpbWUpIHtcblx0XHRcdGlnbm9yZUJlZm9yZVRpbWUgPSBpZ25vcmVCZWZvcmVUaW1lIHx8IC05OTk5OTk5OTk5O1xuXHRcdFx0dmFyIGEgPSBbXSxcblx0XHRcdFx0dHdlZW4gPSB0aGlzLl9maXJzdCxcblx0XHRcdFx0Y250ID0gMDtcblx0XHRcdHdoaWxlICh0d2Vlbikge1xuXHRcdFx0XHRpZiAodHdlZW4uX3N0YXJ0VGltZSA8IGlnbm9yZUJlZm9yZVRpbWUpIHtcblx0XHRcdFx0XHQvL2RvIG5vdGhpbmdcblx0XHRcdFx0fSBlbHNlIGlmICh0d2VlbiBpbnN0YW5jZW9mIFR3ZWVuTGl0ZSkge1xuXHRcdFx0XHRcdGlmICh0d2VlbnMgIT09IGZhbHNlKSB7XG5cdFx0XHRcdFx0XHRhW2NudCsrXSA9IHR3ZWVuO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpZiAodGltZWxpbmVzICE9PSBmYWxzZSkge1xuXHRcdFx0XHRcdFx0YVtjbnQrK10gPSB0d2Vlbjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKG5lc3RlZCAhPT0gZmFsc2UpIHtcblx0XHRcdFx0XHRcdGEgPSBhLmNvbmNhdCh0d2Vlbi5nZXRDaGlsZHJlbih0cnVlLCB0d2VlbnMsIHRpbWVsaW5lcykpO1xuXHRcdFx0XHRcdFx0Y250ID0gYS5sZW5ndGg7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHR3ZWVuID0gdHdlZW4uX25leHQ7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gYTtcblx0XHR9O1xuXG5cdFx0cC5nZXRUd2VlbnNPZiA9IGZ1bmN0aW9uKHRhcmdldCwgbmVzdGVkKSB7XG5cdFx0XHR2YXIgZGlzYWJsZWQgPSB0aGlzLl9nYyxcblx0XHRcdFx0YSA9IFtdLFxuXHRcdFx0XHRjbnQgPSAwLFxuXHRcdFx0XHR0d2VlbnMsIGk7XG5cdFx0XHRpZiAoZGlzYWJsZWQpIHtcblx0XHRcdFx0dGhpcy5fZW5hYmxlZCh0cnVlLCB0cnVlKTsgLy9nZXRUd2VlbnNPZigpIGZpbHRlcnMgb3V0IGRpc2FibGVkIHR3ZWVucywgYW5kIHdlIGhhdmUgdG8gbWFyayB0aGVtIGFzIF9nYyA9IHRydWUgd2hlbiB0aGUgdGltZWxpbmUgY29tcGxldGVzIGluIG9yZGVyIHRvIGFsbG93IGNsZWFuIGdhcmJhZ2UgY29sbGVjdGlvbiwgc28gdGVtcG9yYXJpbHkgcmUtZW5hYmxlIHRoZSB0aW1lbGluZSBoZXJlLlxuXHRcdFx0fVxuXHRcdFx0dHdlZW5zID0gVHdlZW5MaXRlLmdldFR3ZWVuc09mKHRhcmdldCk7XG5cdFx0XHRpID0gdHdlZW5zLmxlbmd0aDtcblx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRpZiAodHdlZW5zW2ldLnRpbWVsaW5lID09PSB0aGlzIHx8IChuZXN0ZWQgJiYgdGhpcy5fY29udGFpbnModHdlZW5zW2ldKSkpIHtcblx0XHRcdFx0XHRhW2NudCsrXSA9IHR3ZWVuc1tpXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKGRpc2FibGVkKSB7XG5cdFx0XHRcdHRoaXMuX2VuYWJsZWQoZmFsc2UsIHRydWUpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGE7XG5cdFx0fTtcblxuXHRcdHAucmVjZW50ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5fcmVjZW50O1xuXHRcdH07XG5cblx0XHRwLl9jb250YWlucyA9IGZ1bmN0aW9uKHR3ZWVuKSB7XG5cdFx0XHR2YXIgdGwgPSB0d2Vlbi50aW1lbGluZTtcblx0XHRcdHdoaWxlICh0bCkge1xuXHRcdFx0XHRpZiAodGwgPT09IHRoaXMpIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0bCA9IHRsLnRpbWVsaW5lO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG5cblx0XHRwLnNoaWZ0Q2hpbGRyZW4gPSBmdW5jdGlvbihhbW91bnQsIGFkanVzdExhYmVscywgaWdub3JlQmVmb3JlVGltZSkge1xuXHRcdFx0aWdub3JlQmVmb3JlVGltZSA9IGlnbm9yZUJlZm9yZVRpbWUgfHwgMDtcblx0XHRcdHZhciB0d2VlbiA9IHRoaXMuX2ZpcnN0LFxuXHRcdFx0XHRsYWJlbHMgPSB0aGlzLl9sYWJlbHMsXG5cdFx0XHRcdHA7XG5cdFx0XHR3aGlsZSAodHdlZW4pIHtcblx0XHRcdFx0aWYgKHR3ZWVuLl9zdGFydFRpbWUgPj0gaWdub3JlQmVmb3JlVGltZSkge1xuXHRcdFx0XHRcdHR3ZWVuLl9zdGFydFRpbWUgKz0gYW1vdW50O1xuXHRcdFx0XHR9XG5cdFx0XHRcdHR3ZWVuID0gdHdlZW4uX25leHQ7XG5cdFx0XHR9XG5cdFx0XHRpZiAoYWRqdXN0TGFiZWxzKSB7XG5cdFx0XHRcdGZvciAocCBpbiBsYWJlbHMpIHtcblx0XHRcdFx0XHRpZiAobGFiZWxzW3BdID49IGlnbm9yZUJlZm9yZVRpbWUpIHtcblx0XHRcdFx0XHRcdGxhYmVsc1twXSArPSBhbW91bnQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcy5fdW5jYWNoZSh0cnVlKTtcblx0XHR9O1xuXG5cdFx0cC5fa2lsbCA9IGZ1bmN0aW9uKHZhcnMsIHRhcmdldCkge1xuXHRcdFx0aWYgKCF2YXJzICYmICF0YXJnZXQpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX2VuYWJsZWQoZmFsc2UsIGZhbHNlKTtcblx0XHRcdH1cblx0XHRcdHZhciB0d2VlbnMgPSAoIXRhcmdldCkgPyB0aGlzLmdldENoaWxkcmVuKHRydWUsIHRydWUsIGZhbHNlKSA6IHRoaXMuZ2V0VHdlZW5zT2YodGFyZ2V0KSxcblx0XHRcdFx0aSA9IHR3ZWVucy5sZW5ndGgsXG5cdFx0XHRcdGNoYW5nZWQgPSBmYWxzZTtcblx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRpZiAodHdlZW5zW2ldLl9raWxsKHZhcnMsIHRhcmdldCkpIHtcblx0XHRcdFx0XHRjaGFuZ2VkID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGNoYW5nZWQ7XG5cdFx0fTtcblxuXHRcdHAuY2xlYXIgPSBmdW5jdGlvbihsYWJlbHMpIHtcblx0XHRcdHZhciB0d2VlbnMgPSB0aGlzLmdldENoaWxkcmVuKGZhbHNlLCB0cnVlLCB0cnVlKSxcblx0XHRcdFx0aSA9IHR3ZWVucy5sZW5ndGg7XG5cdFx0XHR0aGlzLl90aW1lID0gdGhpcy5fdG90YWxUaW1lID0gMDtcblx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHR0d2VlbnNbaV0uX2VuYWJsZWQoZmFsc2UsIGZhbHNlKTtcblx0XHRcdH1cblx0XHRcdGlmIChsYWJlbHMgIT09IGZhbHNlKSB7XG5cdFx0XHRcdHRoaXMuX2xhYmVscyA9IHt9O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXMuX3VuY2FjaGUodHJ1ZSk7XG5cdFx0fTtcblxuXHRcdHAuaW52YWxpZGF0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5fZmlyc3Q7XG5cdFx0XHR3aGlsZSAodHdlZW4pIHtcblx0XHRcdFx0dHdlZW4uaW52YWxpZGF0ZSgpO1xuXHRcdFx0XHR0d2VlbiA9IHR3ZWVuLl9uZXh0O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIEFuaW1hdGlvbi5wcm90b3R5cGUuaW52YWxpZGF0ZS5jYWxsKHRoaXMpOztcblx0XHR9O1xuXG5cdFx0cC5fZW5hYmxlZCA9IGZ1bmN0aW9uKGVuYWJsZWQsIGlnbm9yZVRpbWVsaW5lKSB7XG5cdFx0XHRpZiAoZW5hYmxlZCA9PT0gdGhpcy5fZ2MpIHtcblx0XHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5fZmlyc3Q7XG5cdFx0XHRcdHdoaWxlICh0d2Vlbikge1xuXHRcdFx0XHRcdHR3ZWVuLl9lbmFibGVkKGVuYWJsZWQsIHRydWUpO1xuXHRcdFx0XHRcdHR3ZWVuID0gdHdlZW4uX25leHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBTaW1wbGVUaW1lbGluZS5wcm90b3R5cGUuX2VuYWJsZWQuY2FsbCh0aGlzLCBlbmFibGVkLCBpZ25vcmVUaW1lbGluZSk7XG5cdFx0fTtcblxuXHRcdHAudG90YWxUaW1lID0gZnVuY3Rpb24odGltZSwgc3VwcHJlc3NFdmVudHMsIHVuY2FwcGVkKSB7XG5cdFx0XHR0aGlzLl9mb3JjaW5nUGxheWhlYWQgPSB0cnVlO1xuXHRcdFx0dmFyIHZhbCA9IEFuaW1hdGlvbi5wcm90b3R5cGUudG90YWxUaW1lLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0XHR0aGlzLl9mb3JjaW5nUGxheWhlYWQgPSBmYWxzZTtcblx0XHRcdHJldHVybiB2YWw7XG5cdFx0fTtcblxuXHRcdHAuZHVyYXRpb24gPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0XHRcdGlmICh0aGlzLl9kaXJ0eSkge1xuXHRcdFx0XHRcdHRoaXMudG90YWxEdXJhdGlvbigpOyAvL2p1c3QgdHJpZ2dlcnMgcmVjYWxjdWxhdGlvblxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzLl9kdXJhdGlvbjtcblx0XHRcdH1cblx0XHRcdGlmICh0aGlzLmR1cmF0aW9uKCkgIT09IDAgJiYgdmFsdWUgIT09IDApIHtcblx0XHRcdFx0dGhpcy50aW1lU2NhbGUodGhpcy5fZHVyYXRpb24gLyB2YWx1ZSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9O1xuXG5cdFx0cC50b3RhbER1cmF0aW9uID0gZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuXHRcdFx0XHRpZiAodGhpcy5fZGlydHkpIHtcblx0XHRcdFx0XHR2YXIgbWF4ID0gMCxcblx0XHRcdFx0XHRcdHR3ZWVuID0gdGhpcy5fbGFzdCxcblx0XHRcdFx0XHRcdHByZXZTdGFydCA9IDk5OTk5OTk5OTk5OSxcblx0XHRcdFx0XHRcdHByZXYsIGVuZDtcblx0XHRcdFx0XHR3aGlsZSAodHdlZW4pIHtcblx0XHRcdFx0XHRcdHByZXYgPSB0d2Vlbi5fcHJldjsgLy9yZWNvcmQgaXQgaGVyZSBpbiBjYXNlIHRoZSB0d2VlbiBjaGFuZ2VzIHBvc2l0aW9uIGluIHRoZSBzZXF1ZW5jZS4uLlxuXHRcdFx0XHRcdFx0aWYgKHR3ZWVuLl9kaXJ0eSkge1xuXHRcdFx0XHRcdFx0XHR0d2Vlbi50b3RhbER1cmF0aW9uKCk7IC8vY291bGQgY2hhbmdlIHRoZSB0d2Vlbi5fc3RhcnRUaW1lLCBzbyBtYWtlIHN1cmUgdGhlIHR3ZWVuJ3MgY2FjaGUgaXMgY2xlYW4gYmVmb3JlIGFuYWx5emluZyBpdC5cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICh0d2Vlbi5fc3RhcnRUaW1lID4gcHJldlN0YXJ0ICYmIHRoaXMuX3NvcnRDaGlsZHJlbiAmJiAhdHdlZW4uX3BhdXNlZCkgeyAvL2luIGNhc2Ugb25lIG9mIHRoZSB0d2VlbnMgc2hpZnRlZCBvdXQgb2Ygb3JkZXIsIGl0IG5lZWRzIHRvIGJlIHJlLWluc2VydGVkIGludG8gdGhlIGNvcnJlY3QgcG9zaXRpb24gaW4gdGhlIHNlcXVlbmNlXG5cdFx0XHRcdFx0XHRcdHRoaXMuYWRkKHR3ZWVuLCB0d2Vlbi5fc3RhcnRUaW1lIC0gdHdlZW4uX2RlbGF5KTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHByZXZTdGFydCA9IHR3ZWVuLl9zdGFydFRpbWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAodHdlZW4uX3N0YXJ0VGltZSA8IDAgJiYgIXR3ZWVuLl9wYXVzZWQpIHsgLy9jaGlsZHJlbiBhcmVuJ3QgYWxsb3dlZCB0byBoYXZlIG5lZ2F0aXZlIHN0YXJ0VGltZXMgdW5sZXNzIHNtb290aENoaWxkVGltaW5nIGlzIHRydWUsIHNvIGFkanVzdCBoZXJlIGlmIG9uZSBpcyBmb3VuZC5cblx0XHRcdFx0XHRcdFx0bWF4IC09IHR3ZWVuLl9zdGFydFRpbWU7XG5cdFx0XHRcdFx0XHRcdGlmICh0aGlzLl90aW1lbGluZS5zbW9vdGhDaGlsZFRpbWluZykge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuX3N0YXJ0VGltZSArPSB0d2Vlbi5fc3RhcnRUaW1lIC8gdGhpcy5fdGltZVNjYWxlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHRoaXMuc2hpZnRDaGlsZHJlbigtdHdlZW4uX3N0YXJ0VGltZSwgZmFsc2UsIC05OTk5OTk5OTk5KTtcblx0XHRcdFx0XHRcdFx0cHJldlN0YXJ0ID0gMDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGVuZCA9IHR3ZWVuLl9zdGFydFRpbWUgKyAodHdlZW4uX3RvdGFsRHVyYXRpb24gLyB0d2Vlbi5fdGltZVNjYWxlKTtcblx0XHRcdFx0XHRcdGlmIChlbmQgPiBtYXgpIHtcblx0XHRcdFx0XHRcdFx0bWF4ID0gZW5kO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0dHdlZW4gPSBwcmV2O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0aGlzLl9kdXJhdGlvbiA9IHRoaXMuX3RvdGFsRHVyYXRpb24gPSBtYXg7XG5cdFx0XHRcdFx0dGhpcy5fZGlydHkgPSBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcy5fdG90YWxEdXJhdGlvbjtcblx0XHRcdH1cblx0XHRcdGlmICh0aGlzLnRvdGFsRHVyYXRpb24oKSAhPT0gMCkgaWYgKHZhbHVlICE9PSAwKSB7XG5cdFx0XHRcdHRoaXMudGltZVNjYWxlKHRoaXMuX3RvdGFsRHVyYXRpb24gLyB2YWx1ZSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9O1xuXG5cdFx0cC5wYXVzZWQgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0aWYgKCF2YWx1ZSkgeyAvL2lmIHRoZXJlJ3MgYSBwYXVzZSBkaXJlY3RseSBhdCB0aGUgc3BvdCBmcm9tIHdoZXJlIHdlJ3JlIHVucGF1c2luZywgc2tpcCBpdC5cblx0XHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5fZmlyc3QsXG5cdFx0XHRcdFx0dGltZSA9IHRoaXMuX3RpbWU7XG5cdFx0XHRcdHdoaWxlICh0d2Vlbikge1xuXHRcdFx0XHRcdGlmICh0d2Vlbi5fc3RhcnRUaW1lID09PSB0aW1lICYmIHR3ZWVuLmRhdGEgPT09IFwiaXNQYXVzZVwiKSB7XG5cdFx0XHRcdFx0XHR0d2Vlbi5fcmF3UHJldlRpbWUgPSAwOyAvL3JlbWVtYmVyLCBfcmF3UHJldlRpbWUgaXMgaG93IHplcm8tZHVyYXRpb24gdHdlZW5zL2NhbGxiYWNrcyBzZW5zZSBkaXJlY3Rpb25hbGl0eSBhbmQgZGV0ZXJtaW5lIHdoZXRoZXIgb3Igbm90IHRvIGZpcmUuIElmIF9yYXdQcmV2VGltZSBpcyB0aGUgc2FtZSBhcyBfc3RhcnRUaW1lIG9uIHRoZSBuZXh0IHJlbmRlciwgaXQgd29uJ3QgZmlyZS5cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dHdlZW4gPSB0d2Vlbi5fbmV4dDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIEFuaW1hdGlvbi5wcm90b3R5cGUucGF1c2VkLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0fTtcblxuXHRcdHAudXNlc0ZyYW1lcyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHRsID0gdGhpcy5fdGltZWxpbmU7XG5cdFx0XHR3aGlsZSAodGwuX3RpbWVsaW5lKSB7XG5cdFx0XHRcdHRsID0gdGwuX3RpbWVsaW5lO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuICh0bCA9PT0gQW5pbWF0aW9uLl9yb290RnJhbWVzVGltZWxpbmUpO1xuXHRcdH07XG5cblx0XHRwLnJhd1RpbWUgPSBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB0aGlzLl9wYXVzZWQgPyB0aGlzLl90b3RhbFRpbWUgOiAodGhpcy5fdGltZWxpbmUucmF3VGltZSgpIC0gdGhpcy5fc3RhcnRUaW1lKSAqIHRoaXMuX3RpbWVTY2FsZTtcblx0XHR9O1xuXG5cdFx0cmV0dXJuIFRpbWVsaW5lTGl0ZTtcblxuXHR9LCB0cnVlKTtcblx0XG5cblxuXG5cblxuXG5cblx0XG5cdFxuXHRcblx0XG5cdFxuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFRpbWVsaW5lTWF4XG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblx0X2dzU2NvcGUuX2dzRGVmaW5lKFwiVGltZWxpbmVNYXhcIiwgW1wiVGltZWxpbmVMaXRlXCIsXCJUd2VlbkxpdGVcIixcImVhc2luZy5FYXNlXCJdLCBmdW5jdGlvbihUaW1lbGluZUxpdGUsIFR3ZWVuTGl0ZSwgRWFzZSkge1xuXG5cdFx0dmFyIFRpbWVsaW5lTWF4ID0gZnVuY3Rpb24odmFycykge1xuXHRcdFx0XHRUaW1lbGluZUxpdGUuY2FsbCh0aGlzLCB2YXJzKTtcblx0XHRcdFx0dGhpcy5fcmVwZWF0ID0gdGhpcy52YXJzLnJlcGVhdCB8fCAwO1xuXHRcdFx0XHR0aGlzLl9yZXBlYXREZWxheSA9IHRoaXMudmFycy5yZXBlYXREZWxheSB8fCAwO1xuXHRcdFx0XHR0aGlzLl9jeWNsZSA9IDA7XG5cdFx0XHRcdHRoaXMuX3lveW8gPSAodGhpcy52YXJzLnlveW8gPT09IHRydWUpO1xuXHRcdFx0XHR0aGlzLl9kaXJ0eSA9IHRydWU7XG5cdFx0XHR9LFxuXHRcdFx0X3RpbnlOdW0gPSAwLjAwMDAwMDAwMDEsXG5cdFx0XHRUd2VlbkxpdGVJbnRlcm5hbHMgPSBUd2VlbkxpdGUuX2ludGVybmFscyxcblx0XHRcdF9sYXp5VHdlZW5zID0gVHdlZW5MaXRlSW50ZXJuYWxzLmxhenlUd2VlbnMsXG5cdFx0XHRfbGF6eVJlbmRlciA9IFR3ZWVuTGl0ZUludGVybmFscy5sYXp5UmVuZGVyLFxuXHRcdFx0X2Vhc2VOb25lID0gbmV3IEVhc2UobnVsbCwgbnVsbCwgMSwgMCksXG5cdFx0XHRwID0gVGltZWxpbmVNYXgucHJvdG90eXBlID0gbmV3IFRpbWVsaW5lTGl0ZSgpO1xuXG5cdFx0cC5jb25zdHJ1Y3RvciA9IFRpbWVsaW5lTWF4O1xuXHRcdHAua2lsbCgpLl9nYyA9IGZhbHNlO1xuXHRcdFRpbWVsaW5lTWF4LnZlcnNpb24gPSBcIjEuMTguMFwiO1xuXG5cdFx0cC5pbnZhbGlkYXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLl95b3lvID0gKHRoaXMudmFycy55b3lvID09PSB0cnVlKTtcblx0XHRcdHRoaXMuX3JlcGVhdCA9IHRoaXMudmFycy5yZXBlYXQgfHwgMDtcblx0XHRcdHRoaXMuX3JlcGVhdERlbGF5ID0gdGhpcy52YXJzLnJlcGVhdERlbGF5IHx8IDA7XG5cdFx0XHR0aGlzLl91bmNhY2hlKHRydWUpO1xuXHRcdFx0cmV0dXJuIFRpbWVsaW5lTGl0ZS5wcm90b3R5cGUuaW52YWxpZGF0ZS5jYWxsKHRoaXMpO1xuXHRcdH07XG5cblx0XHRwLmFkZENhbGxiYWNrID0gZnVuY3Rpb24oY2FsbGJhY2ssIHBvc2l0aW9uLCBwYXJhbXMsIHNjb3BlKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5hZGQoIFR3ZWVuTGl0ZS5kZWxheWVkQ2FsbCgwLCBjYWxsYmFjaywgcGFyYW1zLCBzY29wZSksIHBvc2l0aW9uKTtcblx0XHR9O1xuXG5cdFx0cC5yZW1vdmVDYWxsYmFjayA9IGZ1bmN0aW9uKGNhbGxiYWNrLCBwb3NpdGlvbikge1xuXHRcdFx0aWYgKGNhbGxiYWNrKSB7XG5cdFx0XHRcdGlmIChwb3NpdGlvbiA9PSBudWxsKSB7XG5cdFx0XHRcdFx0dGhpcy5fa2lsbChudWxsLCBjYWxsYmFjayk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dmFyIGEgPSB0aGlzLmdldFR3ZWVuc09mKGNhbGxiYWNrLCBmYWxzZSksXG5cdFx0XHRcdFx0XHRpID0gYS5sZW5ndGgsXG5cdFx0XHRcdFx0XHR0aW1lID0gdGhpcy5fcGFyc2VUaW1lT3JMYWJlbChwb3NpdGlvbik7XG5cdFx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0XHRpZiAoYVtpXS5fc3RhcnRUaW1lID09PSB0aW1lKSB7XG5cdFx0XHRcdFx0XHRcdGFbaV0uX2VuYWJsZWQoZmFsc2UsIGZhbHNlKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH07XG5cblx0XHRwLnJlbW92ZVBhdXNlID0gZnVuY3Rpb24ocG9zaXRpb24pIHtcblx0XHRcdHJldHVybiB0aGlzLnJlbW92ZUNhbGxiYWNrKFRpbWVsaW5lTGl0ZS5faW50ZXJuYWxzLnBhdXNlQ2FsbGJhY2ssIHBvc2l0aW9uKTtcblx0XHR9O1xuXG5cdFx0cC50d2VlblRvID0gZnVuY3Rpb24ocG9zaXRpb24sIHZhcnMpIHtcblx0XHRcdHZhcnMgPSB2YXJzIHx8IHt9O1xuXHRcdFx0dmFyIGNvcHkgPSB7ZWFzZTpfZWFzZU5vbmUsIHVzZUZyYW1lczp0aGlzLnVzZXNGcmFtZXMoKSwgaW1tZWRpYXRlUmVuZGVyOmZhbHNlfSxcblx0XHRcdFx0ZHVyYXRpb24sIHAsIHQ7XG5cdFx0XHRmb3IgKHAgaW4gdmFycykge1xuXHRcdFx0XHRjb3B5W3BdID0gdmFyc1twXTtcblx0XHRcdH1cblx0XHRcdGNvcHkudGltZSA9IHRoaXMuX3BhcnNlVGltZU9yTGFiZWwocG9zaXRpb24pO1xuXHRcdFx0ZHVyYXRpb24gPSAoTWF0aC5hYnMoTnVtYmVyKGNvcHkudGltZSkgLSB0aGlzLl90aW1lKSAvIHRoaXMuX3RpbWVTY2FsZSkgfHwgMC4wMDE7XG5cdFx0XHR0ID0gbmV3IFR3ZWVuTGl0ZSh0aGlzLCBkdXJhdGlvbiwgY29weSk7XG5cdFx0XHRjb3B5Lm9uU3RhcnQgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0dC50YXJnZXQucGF1c2VkKHRydWUpO1xuXHRcdFx0XHRpZiAodC52YXJzLnRpbWUgIT09IHQudGFyZ2V0LnRpbWUoKSAmJiBkdXJhdGlvbiA9PT0gdC5kdXJhdGlvbigpKSB7IC8vZG9uJ3QgbWFrZSB0aGUgZHVyYXRpb24gemVybyAtIGlmIGl0J3Mgc3VwcG9zZWQgdG8gYmUgemVybywgZG9uJ3Qgd29ycnkgYmVjYXVzZSBpdCdzIGFscmVhZHkgaW5pdHRpbmcgdGhlIHR3ZWVuIGFuZCB3aWxsIGNvbXBsZXRlIGltbWVkaWF0ZWx5LCBlZmZlY3RpdmVseSBtYWtpbmcgdGhlIGR1cmF0aW9uIHplcm8gYW55d2F5LiBJZiB3ZSBtYWtlIGR1cmF0aW9uIHplcm8sIHRoZSB0d2VlbiB3b24ndCBydW4gYXQgYWxsLlxuXHRcdFx0XHRcdHQuZHVyYXRpb24oIE1hdGguYWJzKCB0LnZhcnMudGltZSAtIHQudGFyZ2V0LnRpbWUoKSkgLyB0LnRhcmdldC5fdGltZVNjYWxlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHZhcnMub25TdGFydCkgeyAvL2luIGNhc2UgdGhlIHVzZXIgaGFkIGFuIG9uU3RhcnQgaW4gdGhlIHZhcnMgLSB3ZSBkb24ndCB3YW50IHRvIG92ZXJ3cml0ZSBpdC5cblx0XHRcdFx0XHR0Ll9jYWxsYmFjayhcIm9uU3RhcnRcIik7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHRyZXR1cm4gdDtcblx0XHR9O1xuXG5cdFx0cC50d2VlbkZyb21UbyA9IGZ1bmN0aW9uKGZyb21Qb3NpdGlvbiwgdG9Qb3NpdGlvbiwgdmFycykge1xuXHRcdFx0dmFycyA9IHZhcnMgfHwge307XG5cdFx0XHRmcm9tUG9zaXRpb24gPSB0aGlzLl9wYXJzZVRpbWVPckxhYmVsKGZyb21Qb3NpdGlvbik7XG5cdFx0XHR2YXJzLnN0YXJ0QXQgPSB7b25Db21wbGV0ZTp0aGlzLnNlZWssIG9uQ29tcGxldGVQYXJhbXM6W2Zyb21Qb3NpdGlvbl0sIGNhbGxiYWNrU2NvcGU6dGhpc307XG5cdFx0XHR2YXJzLmltbWVkaWF0ZVJlbmRlciA9ICh2YXJzLmltbWVkaWF0ZVJlbmRlciAhPT0gZmFsc2UpO1xuXHRcdFx0dmFyIHQgPSB0aGlzLnR3ZWVuVG8odG9Qb3NpdGlvbiwgdmFycyk7XG5cdFx0XHRyZXR1cm4gdC5kdXJhdGlvbigoTWF0aC5hYnMoIHQudmFycy50aW1lIC0gZnJvbVBvc2l0aW9uKSAvIHRoaXMuX3RpbWVTY2FsZSkgfHwgMC4wMDEpO1xuXHRcdH07XG5cblx0XHRwLnJlbmRlciA9IGZ1bmN0aW9uKHRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkge1xuXHRcdFx0aWYgKHRoaXMuX2djKSB7XG5cdFx0XHRcdHRoaXMuX2VuYWJsZWQodHJ1ZSwgZmFsc2UpO1xuXHRcdFx0fVxuXHRcdFx0dmFyIHRvdGFsRHVyID0gKCF0aGlzLl9kaXJ0eSkgPyB0aGlzLl90b3RhbER1cmF0aW9uIDogdGhpcy50b3RhbER1cmF0aW9uKCksXG5cdFx0XHRcdGR1ciA9IHRoaXMuX2R1cmF0aW9uLFxuXHRcdFx0XHRwcmV2VGltZSA9IHRoaXMuX3RpbWUsXG5cdFx0XHRcdHByZXZUb3RhbFRpbWUgPSB0aGlzLl90b3RhbFRpbWUsXG5cdFx0XHRcdHByZXZTdGFydCA9IHRoaXMuX3N0YXJ0VGltZSxcblx0XHRcdFx0cHJldlRpbWVTY2FsZSA9IHRoaXMuX3RpbWVTY2FsZSxcblx0XHRcdFx0cHJldlJhd1ByZXZUaW1lID0gdGhpcy5fcmF3UHJldlRpbWUsXG5cdFx0XHRcdHByZXZQYXVzZWQgPSB0aGlzLl9wYXVzZWQsXG5cdFx0XHRcdHByZXZDeWNsZSA9IHRoaXMuX2N5Y2xlLFxuXHRcdFx0XHR0d2VlbiwgaXNDb21wbGV0ZSwgbmV4dCwgY2FsbGJhY2ssIGludGVybmFsRm9yY2UsIGN5Y2xlRHVyYXRpb24sIHBhdXNlVHdlZW47XG5cdFx0XHRpZiAodGltZSA+PSB0b3RhbER1cikge1xuXHRcdFx0XHRpZiAoIXRoaXMuX2xvY2tlZCkge1xuXHRcdFx0XHRcdHRoaXMuX3RvdGFsVGltZSA9IHRvdGFsRHVyO1xuXHRcdFx0XHRcdHRoaXMuX2N5Y2xlID0gdGhpcy5fcmVwZWF0O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICghdGhpcy5fcmV2ZXJzZWQpIGlmICghdGhpcy5faGFzUGF1c2VkQ2hpbGQoKSkge1xuXHRcdFx0XHRcdGlzQ29tcGxldGUgPSB0cnVlO1xuXHRcdFx0XHRcdGNhbGxiYWNrID0gXCJvbkNvbXBsZXRlXCI7XG5cdFx0XHRcdFx0aW50ZXJuYWxGb3JjZSA9ICEhdGhpcy5fdGltZWxpbmUuYXV0b1JlbW92ZUNoaWxkcmVuOyAvL290aGVyd2lzZSwgaWYgdGhlIGFuaW1hdGlvbiBpcyB1bnBhdXNlZC9hY3RpdmF0ZWQgYWZ0ZXIgaXQncyBhbHJlYWR5IGZpbmlzaGVkLCBpdCBkb2Vzbid0IGdldCByZW1vdmVkIGZyb20gdGhlIHBhcmVudCB0aW1lbGluZS5cblx0XHRcdFx0XHRpZiAodGhpcy5fZHVyYXRpb24gPT09IDApIGlmICh0aW1lID09PSAwIHx8IHByZXZSYXdQcmV2VGltZSA8IDAgfHwgcHJldlJhd1ByZXZUaW1lID09PSBfdGlueU51bSkgaWYgKHByZXZSYXdQcmV2VGltZSAhPT0gdGltZSAmJiB0aGlzLl9maXJzdCkge1xuXHRcdFx0XHRcdFx0aW50ZXJuYWxGb3JjZSA9IHRydWU7XG5cdFx0XHRcdFx0XHRpZiAocHJldlJhd1ByZXZUaW1lID4gX3RpbnlOdW0pIHtcblx0XHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBcIm9uUmV2ZXJzZUNvbXBsZXRlXCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuX3Jhd1ByZXZUaW1lID0gKHRoaXMuX2R1cmF0aW9uIHx8ICFzdXBwcmVzc0V2ZW50cyB8fCB0aW1lIHx8IHRoaXMuX3Jhd1ByZXZUaW1lID09PSB0aW1lKSA/IHRpbWUgOiBfdGlueU51bTsgLy93aGVuIHRoZSBwbGF5aGVhZCBhcnJpdmVzIGF0IEVYQUNUTFkgdGltZSAwIChyaWdodCBvbiB0b3ApIG9mIGEgemVyby1kdXJhdGlvbiB0aW1lbGluZSBvciB0d2Vlbiwgd2UgbmVlZCB0byBkaXNjZXJuIGlmIGV2ZW50cyBhcmUgc3VwcHJlc3NlZCBzbyB0aGF0IHdoZW4gdGhlIHBsYXloZWFkIG1vdmVzIGFnYWluIChuZXh0IHRpbWUpLCBpdCdsbCB0cmlnZ2VyIHRoZSBjYWxsYmFjay4gSWYgZXZlbnRzIGFyZSBOT1Qgc3VwcHJlc3NlZCwgb2J2aW91c2x5IHRoZSBjYWxsYmFjayB3b3VsZCBiZSB0cmlnZ2VyZWQgaW4gdGhpcyByZW5kZXIuIEJhc2ljYWxseSwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlIGVpdGhlciB3aGVuIHRoZSBwbGF5aGVhZCBBUlJJVkVTIG9yIExFQVZFUyB0aGlzIGV4YWN0IHNwb3QsIG5vdCBib3RoLiBJbWFnaW5lIGRvaW5nIGEgdGltZWxpbmUuc2VlaygwKSBhbmQgdGhlcmUncyBhIGNhbGxiYWNrIHRoYXQgc2l0cyBhdCAwLiBTaW5jZSBldmVudHMgYXJlIHN1cHByZXNzZWQgb24gdGhhdCBzZWVrKCkgYnkgZGVmYXVsdCwgbm90aGluZyB3aWxsIGZpcmUsIGJ1dCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBvZmYgb2YgdGhhdCBwb3NpdGlvbiwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlLiBUaGlzIGJlaGF2aW9yIGlzIHdoYXQgcGVvcGxlIGludHVpdGl2ZWx5IGV4cGVjdC4gV2Ugc2V0IHRoZSBfcmF3UHJldlRpbWUgdG8gYmUgYSBwcmVjaXNlIHRpbnkgbnVtYmVyIHRvIGluZGljYXRlIHRoaXMgc2NlbmFyaW8gcmF0aGVyIHRoYW4gdXNpbmcgYW5vdGhlciBwcm9wZXJ0eS92YXJpYWJsZSB3aGljaCB3b3VsZCBpbmNyZWFzZSBtZW1vcnkgdXNhZ2UuIFRoaXMgdGVjaG5pcXVlIGlzIGxlc3MgcmVhZGFibGUsIGJ1dCBtb3JlIGVmZmljaWVudC5cblx0XHRcdFx0aWYgKHRoaXMuX3lveW8gJiYgKHRoaXMuX2N5Y2xlICYgMSkgIT09IDApIHtcblx0XHRcdFx0XHR0aGlzLl90aW1lID0gdGltZSA9IDA7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5fdGltZSA9IGR1cjtcblx0XHRcdFx0XHR0aW1lID0gZHVyICsgMC4wMDAxOyAvL3RvIGF2b2lkIG9jY2FzaW9uYWwgZmxvYXRpbmcgcG9pbnQgcm91bmRpbmcgZXJyb3JzIC0gc29tZXRpbWVzIGNoaWxkIHR3ZWVucy90aW1lbGluZXMgd2VyZSBub3QgYmVpbmcgZnVsbHkgY29tcGxldGVkICh0aGVpciBwcm9ncmVzcyBtaWdodCBiZSAwLjk5OTk5OTk5OTk5OTk5OCBpbnN0ZWFkIG9mIDEgYmVjYXVzZSB3aGVuIF90aW1lIC0gdHdlZW4uX3N0YXJ0VGltZSBpcyBwZXJmb3JtZWQsIGZsb2F0aW5nIHBvaW50IGVycm9ycyB3b3VsZCByZXR1cm4gYSB2YWx1ZSB0aGF0IHdhcyBTTElHSFRMWSBvZmYpLiBUcnkgKDk5OTk5OTk5OTk5OS43IC0gOTk5OTk5OTk5OTk5KSAqIDEgPSAwLjY5OTk1MTE3MTg3NSBpbnN0ZWFkIG9mIDAuNy4gV2UgY2Fubm90IGRvIGxlc3MgdGhlbiAwLjAwMDEgYmVjYXVzZSB0aGUgc2FtZSBpc3N1ZSBjYW4gb2NjdXIgd2hlbiB0aGUgZHVyYXRpb24gaXMgZXh0cmVtZWx5IGxhcmdlIGxpa2UgOTk5OTk5OTk5OTk5IGluIHdoaWNoIGNhc2UgYWRkaW5nIDAuMDAwMDAwMDEsIGZvciBleGFtcGxlLCBjYXVzZXMgaXQgdG8gYWN0IGxpa2Ugbm90aGluZyB3YXMgYWRkZWQuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICh0aW1lIDwgMC4wMDAwMDAxKSB7IC8vdG8gd29yayBhcm91bmQgb2NjYXNpb25hbCBmbG9hdGluZyBwb2ludCBtYXRoIGFydGlmYWN0cywgcm91bmQgc3VwZXIgc21hbGwgdmFsdWVzIHRvIDAuXG5cdFx0XHRcdGlmICghdGhpcy5fbG9ja2VkKSB7XG5cdFx0XHRcdFx0dGhpcy5fdG90YWxUaW1lID0gdGhpcy5fY3ljbGUgPSAwO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuX3RpbWUgPSAwO1xuXHRcdFx0XHRpZiAocHJldlRpbWUgIT09IDAgfHwgKGR1ciA9PT0gMCAmJiBwcmV2UmF3UHJldlRpbWUgIT09IF90aW55TnVtICYmIChwcmV2UmF3UHJldlRpbWUgPiAwIHx8ICh0aW1lIDwgMCAmJiBwcmV2UmF3UHJldlRpbWUgPj0gMCkpICYmICF0aGlzLl9sb2NrZWQpKSB7IC8vZWRnZSBjYXNlIGZvciBjaGVja2luZyB0aW1lIDwgMCAmJiBwcmV2UmF3UHJldlRpbWUgPj0gMDogYSB6ZXJvLWR1cmF0aW9uIGZyb21UbygpIHR3ZWVuIGluc2lkZSBhIHplcm8tZHVyYXRpb24gdGltZWxpbmUgKHllYWgsIHZlcnkgcmFyZSlcblx0XHRcdFx0XHRjYWxsYmFjayA9IFwib25SZXZlcnNlQ29tcGxldGVcIjtcblx0XHRcdFx0XHRpc0NvbXBsZXRlID0gdGhpcy5fcmV2ZXJzZWQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHRpbWUgPCAwKSB7XG5cdFx0XHRcdFx0dGhpcy5fYWN0aXZlID0gZmFsc2U7XG5cdFx0XHRcdFx0aWYgKHRoaXMuX3RpbWVsaW5lLmF1dG9SZW1vdmVDaGlsZHJlbiAmJiB0aGlzLl9yZXZlcnNlZCkge1xuXHRcdFx0XHRcdFx0aW50ZXJuYWxGb3JjZSA9IGlzQ29tcGxldGUgPSB0cnVlO1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBcIm9uUmV2ZXJzZUNvbXBsZXRlXCI7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChwcmV2UmF3UHJldlRpbWUgPj0gMCAmJiB0aGlzLl9maXJzdCkgeyAvL3doZW4gZ29pbmcgYmFjayBiZXlvbmQgdGhlIHN0YXJ0LCBmb3JjZSBhIHJlbmRlciBzbyB0aGF0IHplcm8tZHVyYXRpb24gdHdlZW5zIHRoYXQgc2l0IGF0IHRoZSB2ZXJ5IGJlZ2lubmluZyByZW5kZXIgdGhlaXIgc3RhcnQgdmFsdWVzIHByb3Blcmx5LiBPdGhlcndpc2UsIGlmIHRoZSBwYXJlbnQgdGltZWxpbmUncyBwbGF5aGVhZCBsYW5kcyBleGFjdGx5IGF0IHRoaXMgdGltZWxpbmUncyBzdGFydFRpbWUsIGFuZCB0aGVuIG1vdmVzIGJhY2t3YXJkcywgdGhlIHplcm8tZHVyYXRpb24gdHdlZW5zIGF0IHRoZSBiZWdpbm5pbmcgd291bGQgc3RpbGwgYmUgYXQgdGhlaXIgZW5kIHN0YXRlLlxuXHRcdFx0XHRcdFx0aW50ZXJuYWxGb3JjZSA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRoaXMuX3Jhd1ByZXZUaW1lID0gdGltZTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aGlzLl9yYXdQcmV2VGltZSA9IChkdXIgfHwgIXN1cHByZXNzRXZlbnRzIHx8IHRpbWUgfHwgdGhpcy5fcmF3UHJldlRpbWUgPT09IHRpbWUpID8gdGltZSA6IF90aW55TnVtOyAvL3doZW4gdGhlIHBsYXloZWFkIGFycml2ZXMgYXQgRVhBQ1RMWSB0aW1lIDAgKHJpZ2h0IG9uIHRvcCkgb2YgYSB6ZXJvLWR1cmF0aW9uIHRpbWVsaW5lIG9yIHR3ZWVuLCB3ZSBuZWVkIHRvIGRpc2Nlcm4gaWYgZXZlbnRzIGFyZSBzdXBwcmVzc2VkIHNvIHRoYXQgd2hlbiB0aGUgcGxheWhlYWQgbW92ZXMgYWdhaW4gKG5leHQgdGltZSksIGl0J2xsIHRyaWdnZXIgdGhlIGNhbGxiYWNrLiBJZiBldmVudHMgYXJlIE5PVCBzdXBwcmVzc2VkLCBvYnZpb3VzbHkgdGhlIGNhbGxiYWNrIHdvdWxkIGJlIHRyaWdnZXJlZCBpbiB0aGlzIHJlbmRlci4gQmFzaWNhbGx5LCB0aGUgY2FsbGJhY2sgc2hvdWxkIGZpcmUgZWl0aGVyIHdoZW4gdGhlIHBsYXloZWFkIEFSUklWRVMgb3IgTEVBVkVTIHRoaXMgZXhhY3Qgc3BvdCwgbm90IGJvdGguIEltYWdpbmUgZG9pbmcgYSB0aW1lbGluZS5zZWVrKDApIGFuZCB0aGVyZSdzIGEgY2FsbGJhY2sgdGhhdCBzaXRzIGF0IDAuIFNpbmNlIGV2ZW50cyBhcmUgc3VwcHJlc3NlZCBvbiB0aGF0IHNlZWsoKSBieSBkZWZhdWx0LCBub3RoaW5nIHdpbGwgZmlyZSwgYnV0IHdoZW4gdGhlIHBsYXloZWFkIG1vdmVzIG9mZiBvZiB0aGF0IHBvc2l0aW9uLCB0aGUgY2FsbGJhY2sgc2hvdWxkIGZpcmUuIFRoaXMgYmVoYXZpb3IgaXMgd2hhdCBwZW9wbGUgaW50dWl0aXZlbHkgZXhwZWN0LiBXZSBzZXQgdGhlIF9yYXdQcmV2VGltZSB0byBiZSBhIHByZWNpc2UgdGlueSBudW1iZXIgdG8gaW5kaWNhdGUgdGhpcyBzY2VuYXJpbyByYXRoZXIgdGhhbiB1c2luZyBhbm90aGVyIHByb3BlcnR5L3ZhcmlhYmxlIHdoaWNoIHdvdWxkIGluY3JlYXNlIG1lbW9yeSB1c2FnZS4gVGhpcyB0ZWNobmlxdWUgaXMgbGVzcyByZWFkYWJsZSwgYnV0IG1vcmUgZWZmaWNpZW50LlxuXHRcdFx0XHRcdGlmICh0aW1lID09PSAwICYmIGlzQ29tcGxldGUpIHsgLy9pZiB0aGVyZSdzIGEgemVyby1kdXJhdGlvbiB0d2VlbiBhdCB0aGUgdmVyeSBiZWdpbm5pbmcgb2YgYSB0aW1lbGluZSBhbmQgdGhlIHBsYXloZWFkIGxhbmRzIEVYQUNUTFkgYXQgdGltZSAwLCB0aGF0IHR3ZWVuIHdpbGwgY29ycmVjdGx5IHJlbmRlciBpdHMgZW5kIHZhbHVlcywgYnV0IHdlIG5lZWQgdG8ga2VlcCB0aGUgdGltZWxpbmUgYWxpdmUgZm9yIG9uZSBtb3JlIHJlbmRlciBzbyB0aGF0IHRoZSBiZWdpbm5pbmcgdmFsdWVzIHJlbmRlciBwcm9wZXJseSBhcyB0aGUgcGFyZW50J3MgcGxheWhlYWQga2VlcHMgbW92aW5nIGJleW9uZCB0aGUgYmVnaW5pbmcuIEltYWdpbmUgb2JqLnggc3RhcnRzIGF0IDAgYW5kIHRoZW4gd2UgZG8gdGwuc2V0KG9iaiwge3g6MTAwfSkudG8ob2JqLCAxLCB7eDoyMDB9KSBhbmQgdGhlbiBsYXRlciB3ZSB0bC5yZXZlcnNlKCkuLi50aGUgZ29hbCBpcyB0byBoYXZlIG9iai54IHJldmVydCB0byAwLiBJZiB0aGUgcGxheWhlYWQgaGFwcGVucyB0byBsYW5kIG9uIGV4YWN0bHkgMCwgd2l0aG91dCB0aGlzIGNodW5rIG9mIGNvZGUsIGl0J2QgY29tcGxldGUgdGhlIHRpbWVsaW5lIGFuZCByZW1vdmUgaXQgZnJvbSB0aGUgcmVuZGVyaW5nIHF1ZXVlIChub3QgZ29vZCkuXG5cdFx0XHRcdFx0XHR0d2VlbiA9IHRoaXMuX2ZpcnN0O1xuXHRcdFx0XHRcdFx0d2hpbGUgKHR3ZWVuICYmIHR3ZWVuLl9zdGFydFRpbWUgPT09IDApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCF0d2Vlbi5fZHVyYXRpb24pIHtcblx0XHRcdFx0XHRcdFx0XHRpc0NvbXBsZXRlID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0dHdlZW4gPSB0d2Vlbi5fbmV4dDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGltZSA9IDA7IC8vdG8gYXZvaWQgb2NjYXNpb25hbCBmbG9hdGluZyBwb2ludCByb3VuZGluZyBlcnJvcnMgKGNvdWxkIGNhdXNlIHByb2JsZW1zIGVzcGVjaWFsbHkgd2l0aCB6ZXJvLWR1cmF0aW9uIHR3ZWVucyBhdCB0aGUgdmVyeSBiZWdpbm5pbmcgb2YgdGhlIHRpbWVsaW5lKVxuXHRcdFx0XHRcdGlmICghdGhpcy5faW5pdHRlZCkge1xuXHRcdFx0XHRcdFx0aW50ZXJuYWxGb3JjZSA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmIChkdXIgPT09IDAgJiYgcHJldlJhd1ByZXZUaW1lIDwgMCkgeyAvL3dpdGhvdXQgdGhpcywgemVyby1kdXJhdGlvbiByZXBlYXRpbmcgdGltZWxpbmVzIChsaWtlIHdpdGggYSBzaW1wbGUgY2FsbGJhY2sgbmVzdGVkIGF0IHRoZSB2ZXJ5IGJlZ2lubmluZyBhbmQgYSByZXBlYXREZWxheSkgd291bGRuJ3QgcmVuZGVyIHRoZSBmaXJzdCB0aW1lIHRocm91Z2guXG5cdFx0XHRcdFx0aW50ZXJuYWxGb3JjZSA9IHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy5fdGltZSA9IHRoaXMuX3Jhd1ByZXZUaW1lID0gdGltZTtcblx0XHRcdFx0aWYgKCF0aGlzLl9sb2NrZWQpIHtcblx0XHRcdFx0XHR0aGlzLl90b3RhbFRpbWUgPSB0aW1lO1xuXHRcdFx0XHRcdGlmICh0aGlzLl9yZXBlYXQgIT09IDApIHtcblx0XHRcdFx0XHRcdGN5Y2xlRHVyYXRpb24gPSBkdXIgKyB0aGlzLl9yZXBlYXREZWxheTtcblx0XHRcdFx0XHRcdHRoaXMuX2N5Y2xlID0gKHRoaXMuX3RvdGFsVGltZSAvIGN5Y2xlRHVyYXRpb24pID4+IDA7IC8vb3JpZ2luYWxseSBfdG90YWxUaW1lICUgY3ljbGVEdXJhdGlvbiBidXQgZmxvYXRpbmcgcG9pbnQgZXJyb3JzIGNhdXNlZCBwcm9ibGVtcywgc28gSSBub3JtYWxpemVkIGl0LiAoNCAlIDAuOCBzaG91bGQgYmUgMCBidXQgaXQgZ2V0cyByZXBvcnRlZCBhcyAwLjc5OTk5OTk5ISlcblx0XHRcdFx0XHRcdGlmICh0aGlzLl9jeWNsZSAhPT0gMCkgaWYgKHRoaXMuX2N5Y2xlID09PSB0aGlzLl90b3RhbFRpbWUgLyBjeWNsZUR1cmF0aW9uKSB7XG5cdFx0XHRcdFx0XHRcdHRoaXMuX2N5Y2xlLS07IC8vb3RoZXJ3aXNlIHdoZW4gcmVuZGVyZWQgZXhhY3RseSBhdCB0aGUgZW5kIHRpbWUsIGl0IHdpbGwgYWN0IGFzIHRob3VnaCBpdCBpcyByZXBlYXRpbmcgKGF0IHRoZSBiZWdpbm5pbmcpXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR0aGlzLl90aW1lID0gdGhpcy5fdG90YWxUaW1lIC0gKHRoaXMuX2N5Y2xlICogY3ljbGVEdXJhdGlvbik7XG5cdFx0XHRcdFx0XHRpZiAodGhpcy5feW95bykgaWYgKCh0aGlzLl9jeWNsZSAmIDEpICE9PSAwKSB7XG5cdFx0XHRcdFx0XHRcdHRoaXMuX3RpbWUgPSBkdXIgLSB0aGlzLl90aW1lO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKHRoaXMuX3RpbWUgPiBkdXIpIHtcblx0XHRcdFx0XHRcdFx0dGhpcy5fdGltZSA9IGR1cjtcblx0XHRcdFx0XHRcdFx0dGltZSA9IGR1ciArIDAuMDAwMTsgLy90byBhdm9pZCBvY2Nhc2lvbmFsIGZsb2F0aW5nIHBvaW50IHJvdW5kaW5nIGVycm9yXG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKHRoaXMuX3RpbWUgPCAwKSB7XG5cdFx0XHRcdFx0XHRcdHRoaXMuX3RpbWUgPSB0aW1lID0gMDtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHRpbWUgPSB0aGlzLl90aW1lO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICh0aGlzLl9oYXNQYXVzZSAmJiAhdGhpcy5fZm9yY2luZ1BsYXloZWFkICYmICFzdXBwcmVzc0V2ZW50cykge1xuXHRcdFx0XHRcdHRpbWUgPSB0aGlzLl90aW1lO1xuXHRcdFx0XHRcdGlmICh0aW1lID49IHByZXZUaW1lKSB7XG5cdFx0XHRcdFx0XHR0d2VlbiA9IHRoaXMuX2ZpcnN0O1xuXHRcdFx0XHRcdFx0d2hpbGUgKHR3ZWVuICYmIHR3ZWVuLl9zdGFydFRpbWUgPD0gdGltZSAmJiAhcGF1c2VUd2Vlbikge1xuXHRcdFx0XHRcdFx0XHRpZiAoIXR3ZWVuLl9kdXJhdGlvbikgaWYgKHR3ZWVuLmRhdGEgPT09IFwiaXNQYXVzZVwiICYmICF0d2Vlbi5yYXRpbyAmJiAhKHR3ZWVuLl9zdGFydFRpbWUgPT09IDAgJiYgdGhpcy5fcmF3UHJldlRpbWUgPT09IDApKSB7XG5cdFx0XHRcdFx0XHRcdFx0cGF1c2VUd2VlbiA9IHR3ZWVuO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHR3ZWVuID0gdHdlZW4uX25leHQ7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHR3ZWVuID0gdGhpcy5fbGFzdDtcblx0XHRcdFx0XHRcdHdoaWxlICh0d2VlbiAmJiB0d2Vlbi5fc3RhcnRUaW1lID49IHRpbWUgJiYgIXBhdXNlVHdlZW4pIHtcblx0XHRcdFx0XHRcdFx0aWYgKCF0d2Vlbi5fZHVyYXRpb24pIGlmICh0d2Vlbi5kYXRhID09PSBcImlzUGF1c2VcIiAmJiB0d2Vlbi5fcmF3UHJldlRpbWUgPiAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0cGF1c2VUd2VlbiA9IHR3ZWVuO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHR3ZWVuID0gdHdlZW4uX3ByZXY7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChwYXVzZVR3ZWVuKSB7XG5cdFx0XHRcdFx0XHR0aGlzLl90aW1lID0gdGltZSA9IHBhdXNlVHdlZW4uX3N0YXJ0VGltZTtcblx0XHRcdFx0XHRcdHRoaXMuX3RvdGFsVGltZSA9IHRpbWUgKyAodGhpcy5fY3ljbGUgKiAodGhpcy5fdG90YWxEdXJhdGlvbiArIHRoaXMuX3JlcGVhdERlbGF5KSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKHRoaXMuX2N5Y2xlICE9PSBwcmV2Q3ljbGUpIGlmICghdGhpcy5fbG9ja2VkKSB7XG5cdFx0XHRcdC8qXG5cdFx0XHRcdG1ha2Ugc3VyZSBjaGlsZHJlbiBhdCB0aGUgZW5kL2JlZ2lubmluZyBvZiB0aGUgdGltZWxpbmUgYXJlIHJlbmRlcmVkIHByb3Blcmx5LiBJZiwgZm9yIGV4YW1wbGUsXG5cdFx0XHRcdGEgMy1zZWNvbmQgbG9uZyB0aW1lbGluZSByZW5kZXJlZCBhdCAyLjkgc2Vjb25kcyBwcmV2aW91c2x5LCBhbmQgbm93IHJlbmRlcnMgYXQgMy4yIHNlY29uZHMgKHdoaWNoXG5cdFx0XHRcdHdvdWxkIGdldCB0cmFuc2F0ZWQgdG8gMi44IHNlY29uZHMgaWYgdGhlIHRpbWVsaW5lIHlveW9zIG9yIDAuMiBzZWNvbmRzIGlmIGl0IGp1c3QgcmVwZWF0cyksIHRoZXJlXG5cdFx0XHRcdGNvdWxkIGJlIGEgY2FsbGJhY2sgb3IgYSBzaG9ydCB0d2VlbiB0aGF0J3MgYXQgMi45NSBvciAzIHNlY29uZHMgaW4gd2hpY2ggd291bGRuJ3QgcmVuZGVyLiBTb1xuXHRcdFx0XHR3ZSBuZWVkIHRvIHB1c2ggdGhlIHRpbWVsaW5lIHRvIHRoZSBlbmQgKGFuZC9vciBiZWdpbm5pbmcgZGVwZW5kaW5nIG9uIGl0cyB5b3lvIHZhbHVlKS4gQWxzbyB3ZSBtdXN0XG5cdFx0XHRcdGVuc3VyZSB0aGF0IHplcm8tZHVyYXRpb24gdHdlZW5zIGF0IHRoZSB2ZXJ5IGJlZ2lubmluZyBvciBlbmQgb2YgdGhlIFRpbWVsaW5lTWF4IHdvcmsuXG5cdFx0XHRcdCovXG5cdFx0XHRcdHZhciBiYWNrd2FyZHMgPSAodGhpcy5feW95byAmJiAocHJldkN5Y2xlICYgMSkgIT09IDApLFxuXHRcdFx0XHRcdHdyYXAgPSAoYmFja3dhcmRzID09PSAodGhpcy5feW95byAmJiAodGhpcy5fY3ljbGUgJiAxKSAhPT0gMCkpLFxuXHRcdFx0XHRcdHJlY1RvdGFsVGltZSA9IHRoaXMuX3RvdGFsVGltZSxcblx0XHRcdFx0XHRyZWNDeWNsZSA9IHRoaXMuX2N5Y2xlLFxuXHRcdFx0XHRcdHJlY1Jhd1ByZXZUaW1lID0gdGhpcy5fcmF3UHJldlRpbWUsXG5cdFx0XHRcdFx0cmVjVGltZSA9IHRoaXMuX3RpbWU7XG5cblx0XHRcdFx0dGhpcy5fdG90YWxUaW1lID0gcHJldkN5Y2xlICogZHVyO1xuXHRcdFx0XHRpZiAodGhpcy5fY3ljbGUgPCBwcmV2Q3ljbGUpIHtcblx0XHRcdFx0XHRiYWNrd2FyZHMgPSAhYmFja3dhcmRzO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRoaXMuX3RvdGFsVGltZSArPSBkdXI7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy5fdGltZSA9IHByZXZUaW1lOyAvL3RlbXBvcmFyaWx5IHJldmVydCBfdGltZSBzbyB0aGF0IHJlbmRlcigpIHJlbmRlcnMgdGhlIGNoaWxkcmVuIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBXaXRob3V0IHRoaXMsIHR3ZWVucyB3b24ndCByZXdpbmQgY29ycmVjdGx5LiBXZSBjb3VsZCBhcmhpY3RlY3QgdGhpbmdzIGluIGEgXCJjbGVhbmVyXCIgd2F5IGJ5IHNwbGl0dGluZyBvdXQgdGhlIHJlbmRlcmluZyBxdWV1ZSBpbnRvIGEgc2VwYXJhdGUgbWV0aG9kIGJ1dCBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucywgd2Uga2VwdCBpdCBhbGwgaW5zaWRlIHRoaXMgbWV0aG9kLlxuXG5cdFx0XHRcdHRoaXMuX3Jhd1ByZXZUaW1lID0gKGR1ciA9PT0gMCkgPyBwcmV2UmF3UHJldlRpbWUgLSAwLjAwMDEgOiBwcmV2UmF3UHJldlRpbWU7XG5cdFx0XHRcdHRoaXMuX2N5Y2xlID0gcHJldkN5Y2xlO1xuXHRcdFx0XHR0aGlzLl9sb2NrZWQgPSB0cnVlOyAvL3ByZXZlbnRzIGNoYW5nZXMgdG8gdG90YWxUaW1lIGFuZCBza2lwcyByZXBlYXQveW95byBiZWhhdmlvciB3aGVuIHdlIHJlY3Vyc2l2ZWx5IGNhbGwgcmVuZGVyKClcblx0XHRcdFx0cHJldlRpbWUgPSAoYmFja3dhcmRzKSA/IDAgOiBkdXI7XG5cdFx0XHRcdHRoaXMucmVuZGVyKHByZXZUaW1lLCBzdXBwcmVzc0V2ZW50cywgKGR1ciA9PT0gMCkpO1xuXHRcdFx0XHRpZiAoIXN1cHByZXNzRXZlbnRzKSBpZiAoIXRoaXMuX2djKSB7XG5cdFx0XHRcdFx0aWYgKHRoaXMudmFycy5vblJlcGVhdCkge1xuXHRcdFx0XHRcdFx0dGhpcy5fY2FsbGJhY2soXCJvblJlcGVhdFwiKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHdyYXApIHtcblx0XHRcdFx0XHRwcmV2VGltZSA9IChiYWNrd2FyZHMpID8gZHVyICsgMC4wMDAxIDogLTAuMDAwMTtcblx0XHRcdFx0XHR0aGlzLnJlbmRlcihwcmV2VGltZSwgdHJ1ZSwgZmFsc2UpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuX2xvY2tlZCA9IGZhbHNlO1xuXHRcdFx0XHRpZiAodGhpcy5fcGF1c2VkICYmICFwcmV2UGF1c2VkKSB7IC8vaWYgdGhlIHJlbmRlcigpIHRyaWdnZXJlZCBjYWxsYmFjayB0aGF0IHBhdXNlZCB0aGlzIHRpbWVsaW5lLCB3ZSBzaG91bGQgYWJvcnQgKHZlcnkgcmFyZSwgYnV0IHBvc3NpYmxlKVxuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLl90aW1lID0gcmVjVGltZTtcblx0XHRcdFx0dGhpcy5fdG90YWxUaW1lID0gcmVjVG90YWxUaW1lO1xuXHRcdFx0XHR0aGlzLl9jeWNsZSA9IHJlY0N5Y2xlO1xuXHRcdFx0XHR0aGlzLl9yYXdQcmV2VGltZSA9IHJlY1Jhd1ByZXZUaW1lO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoKHRoaXMuX3RpbWUgPT09IHByZXZUaW1lIHx8ICF0aGlzLl9maXJzdCkgJiYgIWZvcmNlICYmICFpbnRlcm5hbEZvcmNlICYmICFwYXVzZVR3ZWVuKSB7XG5cdFx0XHRcdGlmIChwcmV2VG90YWxUaW1lICE9PSB0aGlzLl90b3RhbFRpbWUpIGlmICh0aGlzLl9vblVwZGF0ZSkgaWYgKCFzdXBwcmVzc0V2ZW50cykgeyAvL3NvIHRoYXQgb25VcGRhdGUgZmlyZXMgZXZlbiBkdXJpbmcgdGhlIHJlcGVhdERlbGF5IC0gYXMgbG9uZyBhcyB0aGUgdG90YWxUaW1lIGNoYW5nZWQsIHdlIHNob3VsZCB0cmlnZ2VyIG9uVXBkYXRlLlxuXHRcdFx0XHRcdHRoaXMuX2NhbGxiYWNrKFwib25VcGRhdGVcIik7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fSBlbHNlIGlmICghdGhpcy5faW5pdHRlZCkge1xuXHRcdFx0XHR0aGlzLl9pbml0dGVkID0gdHJ1ZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCF0aGlzLl9hY3RpdmUpIGlmICghdGhpcy5fcGF1c2VkICYmIHRoaXMuX3RvdGFsVGltZSAhPT0gcHJldlRvdGFsVGltZSAmJiB0aW1lID4gMCkge1xuXHRcdFx0XHR0aGlzLl9hY3RpdmUgPSB0cnVlOyAgLy9zbyB0aGF0IGlmIHRoZSB1c2VyIHJlbmRlcnMgdGhlIHRpbWVsaW5lIChhcyBvcHBvc2VkIHRvIHRoZSBwYXJlbnQgdGltZWxpbmUgcmVuZGVyaW5nIGl0KSwgaXQgaXMgZm9yY2VkIHRvIHJlLXJlbmRlciBhbmQgYWxpZ24gaXQgd2l0aCB0aGUgcHJvcGVyIHRpbWUvZnJhbWUgb24gdGhlIG5leHQgcmVuZGVyaW5nIGN5Y2xlLiBNYXliZSB0aGUgdGltZWxpbmUgYWxyZWFkeSBmaW5pc2hlZCBidXQgdGhlIHVzZXIgbWFudWFsbHkgcmUtcmVuZGVycyBpdCBhcyBoYWxmd2F5IGRvbmUsIGZvciBleGFtcGxlLlxuXHRcdFx0fVxuXG5cdFx0XHRpZiAocHJldlRvdGFsVGltZSA9PT0gMCkgaWYgKHRoaXMudmFycy5vblN0YXJ0KSBpZiAodGhpcy5fdG90YWxUaW1lICE9PSAwKSBpZiAoIXN1cHByZXNzRXZlbnRzKSB7XG5cdFx0XHRcdHRoaXMuX2NhbGxiYWNrKFwib25TdGFydFwiKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHRoaXMuX3RpbWUgPj0gcHJldlRpbWUpIHtcblx0XHRcdFx0dHdlZW4gPSB0aGlzLl9maXJzdDtcblx0XHRcdFx0d2hpbGUgKHR3ZWVuKSB7XG5cdFx0XHRcdFx0bmV4dCA9IHR3ZWVuLl9uZXh0OyAvL3JlY29yZCBpdCBoZXJlIGJlY2F1c2UgdGhlIHZhbHVlIGNvdWxkIGNoYW5nZSBhZnRlciByZW5kZXJpbmcuLi5cblx0XHRcdFx0XHRpZiAodGhpcy5fcGF1c2VkICYmICFwcmV2UGF1c2VkKSB7IC8vaW4gY2FzZSBhIHR3ZWVuIHBhdXNlcyB0aGUgdGltZWxpbmUgd2hlbiByZW5kZXJpbmdcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAodHdlZW4uX2FjdGl2ZSB8fCAodHdlZW4uX3N0YXJ0VGltZSA8PSB0aGlzLl90aW1lICYmICF0d2Vlbi5fcGF1c2VkICYmICF0d2Vlbi5fZ2MpKSB7XG5cdFx0XHRcdFx0XHRpZiAocGF1c2VUd2VlbiA9PT0gdHdlZW4pIHtcblx0XHRcdFx0XHRcdFx0dGhpcy5wYXVzZSgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCF0d2Vlbi5fcmV2ZXJzZWQpIHtcblx0XHRcdFx0XHRcdFx0dHdlZW4ucmVuZGVyKCh0aW1lIC0gdHdlZW4uX3N0YXJ0VGltZSkgKiB0d2Vlbi5fdGltZVNjYWxlLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0dHdlZW4ucmVuZGVyKCgoIXR3ZWVuLl9kaXJ0eSkgPyB0d2Vlbi5fdG90YWxEdXJhdGlvbiA6IHR3ZWVuLnRvdGFsRHVyYXRpb24oKSkgLSAoKHRpbWUgLSB0d2Vlbi5fc3RhcnRUaW1lKSAqIHR3ZWVuLl90aW1lU2NhbGUpLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0d2VlbiA9IG5leHQ7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHR3ZWVuID0gdGhpcy5fbGFzdDtcblx0XHRcdFx0d2hpbGUgKHR3ZWVuKSB7XG5cdFx0XHRcdFx0bmV4dCA9IHR3ZWVuLl9wcmV2OyAvL3JlY29yZCBpdCBoZXJlIGJlY2F1c2UgdGhlIHZhbHVlIGNvdWxkIGNoYW5nZSBhZnRlciByZW5kZXJpbmcuLi5cblx0XHRcdFx0XHRpZiAodGhpcy5fcGF1c2VkICYmICFwcmV2UGF1c2VkKSB7IC8vaW4gY2FzZSBhIHR3ZWVuIHBhdXNlcyB0aGUgdGltZWxpbmUgd2hlbiByZW5kZXJpbmdcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAodHdlZW4uX2FjdGl2ZSB8fCAodHdlZW4uX3N0YXJ0VGltZSA8PSBwcmV2VGltZSAmJiAhdHdlZW4uX3BhdXNlZCAmJiAhdHdlZW4uX2djKSkge1xuXHRcdFx0XHRcdFx0aWYgKHBhdXNlVHdlZW4gPT09IHR3ZWVuKSB7XG5cdFx0XHRcdFx0XHRcdHBhdXNlVHdlZW4gPSB0d2Vlbi5fcHJldjsgLy90aGUgbGlua2VkIGxpc3QgaXMgb3JnYW5pemVkIGJ5IF9zdGFydFRpbWUsIHRodXMgaXQncyBwb3NzaWJsZSB0aGF0IGEgdHdlZW4gY291bGQgc3RhcnQgQkVGT1JFIHRoZSBwYXVzZSBhbmQgZW5kIGFmdGVyIGl0LCBpbiB3aGljaCBjYXNlIGl0IHdvdWxkIGJlIHBvc2l0aW9uZWQgYmVmb3JlIHRoZSBwYXVzZSB0d2VlbiBpbiB0aGUgbGlua2VkIGxpc3QsIGJ1dCB3ZSBzaG91bGQgcmVuZGVyIGl0IGJlZm9yZSB3ZSBwYXVzZSgpIHRoZSB0aW1lbGluZSBhbmQgY2Vhc2UgcmVuZGVyaW5nLiBUaGlzIGlzIG9ubHkgYSBjb25jZXJuIHdoZW4gZ29pbmcgaW4gcmV2ZXJzZS5cblx0XHRcdFx0XHRcdFx0d2hpbGUgKHBhdXNlVHdlZW4gJiYgcGF1c2VUd2Vlbi5lbmRUaW1lKCkgPiB0aGlzLl90aW1lKSB7XG5cdFx0XHRcdFx0XHRcdFx0cGF1c2VUd2Vlbi5yZW5kZXIoIChwYXVzZVR3ZWVuLl9yZXZlcnNlZCA/IHBhdXNlVHdlZW4udG90YWxEdXJhdGlvbigpIC0gKCh0aW1lIC0gcGF1c2VUd2Vlbi5fc3RhcnRUaW1lKSAqIHBhdXNlVHdlZW4uX3RpbWVTY2FsZSkgOiAodGltZSAtIHBhdXNlVHdlZW4uX3N0YXJ0VGltZSkgKiBwYXVzZVR3ZWVuLl90aW1lU2NhbGUpLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuXHRcdFx0XHRcdFx0XHRcdHBhdXNlVHdlZW4gPSBwYXVzZVR3ZWVuLl9wcmV2O1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHBhdXNlVHdlZW4gPSBudWxsO1xuXHRcdFx0XHRcdFx0XHR0aGlzLnBhdXNlKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIXR3ZWVuLl9yZXZlcnNlZCkge1xuXHRcdFx0XHRcdFx0XHR0d2Vlbi5yZW5kZXIoKHRpbWUgLSB0d2Vlbi5fc3RhcnRUaW1lKSAqIHR3ZWVuLl90aW1lU2NhbGUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHR0d2Vlbi5yZW5kZXIoKCghdHdlZW4uX2RpcnR5KSA/IHR3ZWVuLl90b3RhbER1cmF0aW9uIDogdHdlZW4udG90YWxEdXJhdGlvbigpKSAtICgodGltZSAtIHR3ZWVuLl9zdGFydFRpbWUpICogdHdlZW4uX3RpbWVTY2FsZSksIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHR3ZWVuID0gbmV4dDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAodGhpcy5fb25VcGRhdGUpIGlmICghc3VwcHJlc3NFdmVudHMpIHtcblx0XHRcdFx0aWYgKF9sYXp5VHdlZW5zLmxlbmd0aCkgeyAvL2luIGNhc2UgcmVuZGVyaW5nIGNhdXNlZCBhbnkgdHdlZW5zIHRvIGxhenktaW5pdCwgd2Ugc2hvdWxkIHJlbmRlciB0aGVtIGJlY2F1c2UgdHlwaWNhbGx5IHdoZW4gYSB0aW1lbGluZSBmaW5pc2hlcywgdXNlcnMgZXhwZWN0IHRoaW5ncyB0byBoYXZlIHJlbmRlcmVkIGZ1bGx5LiBJbWFnaW5lIGFuIG9uVXBkYXRlIG9uIGEgdGltZWxpbmUgdGhhdCByZXBvcnRzL2NoZWNrcyB0d2VlbmVkIHZhbHVlcy5cblx0XHRcdFx0XHRfbGF6eVJlbmRlcigpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuX2NhbGxiYWNrKFwib25VcGRhdGVcIik7XG5cdFx0XHR9XG5cdFx0XHRpZiAoY2FsbGJhY2spIGlmICghdGhpcy5fbG9ja2VkKSBpZiAoIXRoaXMuX2djKSBpZiAocHJldlN0YXJ0ID09PSB0aGlzLl9zdGFydFRpbWUgfHwgcHJldlRpbWVTY2FsZSAhPT0gdGhpcy5fdGltZVNjYWxlKSBpZiAodGhpcy5fdGltZSA9PT0gMCB8fCB0b3RhbER1ciA+PSB0aGlzLnRvdGFsRHVyYXRpb24oKSkgeyAvL2lmIG9uZSBvZiB0aGUgdHdlZW5zIHRoYXQgd2FzIHJlbmRlcmVkIGFsdGVyZWQgdGhpcyB0aW1lbGluZSdzIHN0YXJ0VGltZSAobGlrZSBpZiBhbiBvbkNvbXBsZXRlIHJldmVyc2VkIHRoZSB0aW1lbGluZSksIGl0IHByb2JhYmx5IGlzbid0IGNvbXBsZXRlLiBJZiBpdCBpcywgZG9uJ3Qgd29ycnksIGJlY2F1c2Ugd2hhdGV2ZXIgY2FsbCBhbHRlcmVkIHRoZSBzdGFydFRpbWUgd291bGQgY29tcGxldGUgaWYgaXQgd2FzIG5lY2Vzc2FyeSBhdCB0aGUgbmV3IHRpbWUuIFRoZSBvbmx5IGV4Y2VwdGlvbiBpcyB0aGUgdGltZVNjYWxlIHByb3BlcnR5LiBBbHNvIGNoZWNrIF9nYyBiZWNhdXNlIHRoZXJlJ3MgYSBjaGFuY2UgdGhhdCBraWxsKCkgY291bGQgYmUgY2FsbGVkIGluIGFuIG9uVXBkYXRlXG5cdFx0XHRcdGlmIChpc0NvbXBsZXRlKSB7XG5cdFx0XHRcdFx0aWYgKF9sYXp5VHdlZW5zLmxlbmd0aCkgeyAvL2luIGNhc2UgcmVuZGVyaW5nIGNhdXNlZCBhbnkgdHdlZW5zIHRvIGxhenktaW5pdCwgd2Ugc2hvdWxkIHJlbmRlciB0aGVtIGJlY2F1c2UgdHlwaWNhbGx5IHdoZW4gYSB0aW1lbGluZSBmaW5pc2hlcywgdXNlcnMgZXhwZWN0IHRoaW5ncyB0byBoYXZlIHJlbmRlcmVkIGZ1bGx5LiBJbWFnaW5lIGFuIG9uQ29tcGxldGUgb24gYSB0aW1lbGluZSB0aGF0IHJlcG9ydHMvY2hlY2tzIHR3ZWVuZWQgdmFsdWVzLlxuXHRcdFx0XHRcdFx0X2xhenlSZW5kZXIoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHRoaXMuX3RpbWVsaW5lLmF1dG9SZW1vdmVDaGlsZHJlbikge1xuXHRcdFx0XHRcdFx0dGhpcy5fZW5hYmxlZChmYWxzZSwgZmFsc2UpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0aGlzLl9hY3RpdmUgPSBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIXN1cHByZXNzRXZlbnRzICYmIHRoaXMudmFyc1tjYWxsYmFja10pIHtcblx0XHRcdFx0XHR0aGlzLl9jYWxsYmFjayhjYWxsYmFjayk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cC5nZXRBY3RpdmUgPSBmdW5jdGlvbihuZXN0ZWQsIHR3ZWVucywgdGltZWxpbmVzKSB7XG5cdFx0XHRpZiAobmVzdGVkID09IG51bGwpIHtcblx0XHRcdFx0bmVzdGVkID0gdHJ1ZTtcblx0XHRcdH1cblx0XHRcdGlmICh0d2VlbnMgPT0gbnVsbCkge1xuXHRcdFx0XHR0d2VlbnMgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHRpbWVsaW5lcyA9PSBudWxsKSB7XG5cdFx0XHRcdHRpbWVsaW5lcyA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGEgPSBbXSxcblx0XHRcdFx0YWxsID0gdGhpcy5nZXRDaGlsZHJlbihuZXN0ZWQsIHR3ZWVucywgdGltZWxpbmVzKSxcblx0XHRcdFx0Y250ID0gMCxcblx0XHRcdFx0bCA9IGFsbC5sZW5ndGgsXG5cdFx0XHRcdGksIHR3ZWVuO1xuXHRcdFx0Zm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuXHRcdFx0XHR0d2VlbiA9IGFsbFtpXTtcblx0XHRcdFx0aWYgKHR3ZWVuLmlzQWN0aXZlKCkpIHtcblx0XHRcdFx0XHRhW2NudCsrXSA9IHR3ZWVuO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gYTtcblx0XHR9O1xuXG5cblx0XHRwLmdldExhYmVsQWZ0ZXIgPSBmdW5jdGlvbih0aW1lKSB7XG5cdFx0XHRpZiAoIXRpbWUpIGlmICh0aW1lICE9PSAwKSB7IC8vZmFzdGVyIHRoYW4gaXNOYW4oKVxuXHRcdFx0XHR0aW1lID0gdGhpcy5fdGltZTtcblx0XHRcdH1cblx0XHRcdHZhciBsYWJlbHMgPSB0aGlzLmdldExhYmVsc0FycmF5KCksXG5cdFx0XHRcdGwgPSBsYWJlbHMubGVuZ3RoLFxuXHRcdFx0XHRpO1xuXHRcdFx0Zm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuXHRcdFx0XHRpZiAobGFiZWxzW2ldLnRpbWUgPiB0aW1lKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGxhYmVsc1tpXS5uYW1lO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9O1xuXG5cdFx0cC5nZXRMYWJlbEJlZm9yZSA9IGZ1bmN0aW9uKHRpbWUpIHtcblx0XHRcdGlmICh0aW1lID09IG51bGwpIHtcblx0XHRcdFx0dGltZSA9IHRoaXMuX3RpbWU7XG5cdFx0XHR9XG5cdFx0XHR2YXIgbGFiZWxzID0gdGhpcy5nZXRMYWJlbHNBcnJheSgpLFxuXHRcdFx0XHRpID0gbGFiZWxzLmxlbmd0aDtcblx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRpZiAobGFiZWxzW2ldLnRpbWUgPCB0aW1lKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGxhYmVsc1tpXS5uYW1lO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9O1xuXG5cdFx0cC5nZXRMYWJlbHNBcnJheSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGEgPSBbXSxcblx0XHRcdFx0Y250ID0gMCxcblx0XHRcdFx0cDtcblx0XHRcdGZvciAocCBpbiB0aGlzLl9sYWJlbHMpIHtcblx0XHRcdFx0YVtjbnQrK10gPSB7dGltZTp0aGlzLl9sYWJlbHNbcF0sIG5hbWU6cH07XG5cdFx0XHR9XG5cdFx0XHRhLnNvcnQoZnVuY3Rpb24oYSxiKSB7XG5cdFx0XHRcdHJldHVybiBhLnRpbWUgLSBiLnRpbWU7XG5cdFx0XHR9KTtcblx0XHRcdHJldHVybiBhO1xuXHRcdH07XG5cblxuLy8tLS0tIEdFVFRFUlMgLyBTRVRURVJTIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXHRcdHAucHJvZ3Jlc3MgPSBmdW5jdGlvbih2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIHtcblx0XHRcdHJldHVybiAoIWFyZ3VtZW50cy5sZW5ndGgpID8gdGhpcy5fdGltZSAvIHRoaXMuZHVyYXRpb24oKSA6IHRoaXMudG90YWxUaW1lKCB0aGlzLmR1cmF0aW9uKCkgKiAoKHRoaXMuX3lveW8gJiYgKHRoaXMuX2N5Y2xlICYgMSkgIT09IDApID8gMSAtIHZhbHVlIDogdmFsdWUpICsgKHRoaXMuX2N5Y2xlICogKHRoaXMuX2R1cmF0aW9uICsgdGhpcy5fcmVwZWF0RGVsYXkpKSwgc3VwcHJlc3NFdmVudHMpO1xuXHRcdH07XG5cblx0XHRwLnRvdGFsUHJvZ3Jlc3MgPSBmdW5jdGlvbih2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIHtcblx0XHRcdHJldHVybiAoIWFyZ3VtZW50cy5sZW5ndGgpID8gdGhpcy5fdG90YWxUaW1lIC8gdGhpcy50b3RhbER1cmF0aW9uKCkgOiB0aGlzLnRvdGFsVGltZSggdGhpcy50b3RhbER1cmF0aW9uKCkgKiB2YWx1ZSwgc3VwcHJlc3NFdmVudHMpO1xuXHRcdH07XG5cblx0XHRwLnRvdGFsRHVyYXRpb24gPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0XHRcdGlmICh0aGlzLl9kaXJ0eSkge1xuXHRcdFx0XHRcdFRpbWVsaW5lTGl0ZS5wcm90b3R5cGUudG90YWxEdXJhdGlvbi5jYWxsKHRoaXMpOyAvL2p1c3QgZm9yY2VzIHJlZnJlc2hcblx0XHRcdFx0XHQvL0luc3RlYWQgb2YgSW5maW5pdHksIHdlIHVzZSA5OTk5OTk5OTk5OTkgc28gdGhhdCB3ZSBjYW4gYWNjb21tb2RhdGUgcmV2ZXJzZXMuXG5cdFx0XHRcdFx0dGhpcy5fdG90YWxEdXJhdGlvbiA9ICh0aGlzLl9yZXBlYXQgPT09IC0xKSA/IDk5OTk5OTk5OTk5OSA6IHRoaXMuX2R1cmF0aW9uICogKHRoaXMuX3JlcGVhdCArIDEpICsgKHRoaXMuX3JlcGVhdERlbGF5ICogdGhpcy5fcmVwZWF0KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcy5fdG90YWxEdXJhdGlvbjtcblx0XHRcdH1cblx0XHRcdHJldHVybiAodGhpcy5fcmVwZWF0ID09PSAtMSkgPyB0aGlzIDogdGhpcy5kdXJhdGlvbiggKHZhbHVlIC0gKHRoaXMuX3JlcGVhdCAqIHRoaXMuX3JlcGVhdERlbGF5KSkgLyAodGhpcy5fcmVwZWF0ICsgMSkgKTtcblx0XHR9O1xuXG5cdFx0cC50aW1lID0gZnVuY3Rpb24odmFsdWUsIHN1cHByZXNzRXZlbnRzKSB7XG5cdFx0XHRpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX3RpbWU7XG5cdFx0XHR9XG5cdFx0XHRpZiAodGhpcy5fZGlydHkpIHtcblx0XHRcdFx0dGhpcy50b3RhbER1cmF0aW9uKCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAodmFsdWUgPiB0aGlzLl9kdXJhdGlvbikge1xuXHRcdFx0XHR2YWx1ZSA9IHRoaXMuX2R1cmF0aW9uO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHRoaXMuX3lveW8gJiYgKHRoaXMuX2N5Y2xlICYgMSkgIT09IDApIHtcblx0XHRcdFx0dmFsdWUgPSAodGhpcy5fZHVyYXRpb24gLSB2YWx1ZSkgKyAodGhpcy5fY3ljbGUgKiAodGhpcy5fZHVyYXRpb24gKyB0aGlzLl9yZXBlYXREZWxheSkpO1xuXHRcdFx0fSBlbHNlIGlmICh0aGlzLl9yZXBlYXQgIT09IDApIHtcblx0XHRcdFx0dmFsdWUgKz0gdGhpcy5fY3ljbGUgKiAodGhpcy5fZHVyYXRpb24gKyB0aGlzLl9yZXBlYXREZWxheSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcy50b3RhbFRpbWUodmFsdWUsIHN1cHByZXNzRXZlbnRzKTtcblx0XHR9O1xuXG5cdFx0cC5yZXBlYXQgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLl9yZXBlYXQ7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9yZXBlYXQgPSB2YWx1ZTtcblx0XHRcdHJldHVybiB0aGlzLl91bmNhY2hlKHRydWUpO1xuXHRcdH07XG5cblx0XHRwLnJlcGVhdERlbGF5ID0gZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5fcmVwZWF0RGVsYXk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9yZXBlYXREZWxheSA9IHZhbHVlO1xuXHRcdFx0cmV0dXJuIHRoaXMuX3VuY2FjaGUodHJ1ZSk7XG5cdFx0fTtcblxuXHRcdHAueW95byA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHRpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX3lveW87XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl95b3lvID0gdmFsdWU7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9O1xuXG5cdFx0cC5jdXJyZW50TGFiZWwgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmdldExhYmVsQmVmb3JlKHRoaXMuX3RpbWUgKyAwLjAwMDAwMDAxKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzLnNlZWsodmFsdWUsIHRydWUpO1xuXHRcdH07XG5cblx0XHRyZXR1cm4gVGltZWxpbmVNYXg7XG5cblx0fSwgdHJ1ZSk7XG5cdFxuXG5cblxuXG5cdFxuXHRcblx0XG5cdFxuXHRcblx0XG5cdFxuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJlemllclBsdWdpblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cdChmdW5jdGlvbigpIHtcblxuXHRcdHZhciBfUkFEMkRFRyA9IDE4MCAvIE1hdGguUEksXG5cdFx0XHRfcjEgPSBbXSxcblx0XHRcdF9yMiA9IFtdLFxuXHRcdFx0X3IzID0gW10sXG5cdFx0XHRfY29yUHJvcHMgPSB7fSxcblx0XHRcdF9nbG9iYWxzID0gX2dzU2NvcGUuX2dzRGVmaW5lLmdsb2JhbHMsXG5cdFx0XHRTZWdtZW50ID0gZnVuY3Rpb24oYSwgYiwgYywgZCkge1xuXHRcdFx0XHR0aGlzLmEgPSBhO1xuXHRcdFx0XHR0aGlzLmIgPSBiO1xuXHRcdFx0XHR0aGlzLmMgPSBjO1xuXHRcdFx0XHR0aGlzLmQgPSBkO1xuXHRcdFx0XHR0aGlzLmRhID0gZCAtIGE7XG5cdFx0XHRcdHRoaXMuY2EgPSBjIC0gYTtcblx0XHRcdFx0dGhpcy5iYSA9IGIgLSBhO1xuXHRcdFx0fSxcblx0XHRcdF9jb3JyZWxhdGUgPSBcIix4LHkseixsZWZ0LHRvcCxyaWdodCxib3R0b20sbWFyZ2luVG9wLG1hcmdpbkxlZnQsbWFyZ2luUmlnaHQsbWFyZ2luQm90dG9tLHBhZGRpbmdMZWZ0LHBhZGRpbmdUb3AscGFkZGluZ1JpZ2h0LHBhZGRpbmdCb3R0b20sYmFja2dyb3VuZFBvc2l0aW9uLGJhY2tncm91bmRQb3NpdGlvbl95LFwiLFxuXHRcdFx0Y3ViaWNUb1F1YWRyYXRpYyA9IGZ1bmN0aW9uKGEsIGIsIGMsIGQpIHtcblx0XHRcdFx0dmFyIHExID0ge2E6YX0sXG5cdFx0XHRcdFx0cTIgPSB7fSxcblx0XHRcdFx0XHRxMyA9IHt9LFxuXHRcdFx0XHRcdHE0ID0ge2M6ZH0sXG5cdFx0XHRcdFx0bWFiID0gKGEgKyBiKSAvIDIsXG5cdFx0XHRcdFx0bWJjID0gKGIgKyBjKSAvIDIsXG5cdFx0XHRcdFx0bWNkID0gKGMgKyBkKSAvIDIsXG5cdFx0XHRcdFx0bWFiYyA9IChtYWIgKyBtYmMpIC8gMixcblx0XHRcdFx0XHRtYmNkID0gKG1iYyArIG1jZCkgLyAyLFxuXHRcdFx0XHRcdG04ID0gKG1iY2QgLSBtYWJjKSAvIDg7XG5cdFx0XHRcdHExLmIgPSBtYWIgKyAoYSAtIG1hYikgLyA0O1xuXHRcdFx0XHRxMi5iID0gbWFiYyArIG04O1xuXHRcdFx0XHRxMS5jID0gcTIuYSA9IChxMS5iICsgcTIuYikgLyAyO1xuXHRcdFx0XHRxMi5jID0gcTMuYSA9IChtYWJjICsgbWJjZCkgLyAyO1xuXHRcdFx0XHRxMy5iID0gbWJjZCAtIG04O1xuXHRcdFx0XHRxNC5iID0gbWNkICsgKGQgLSBtY2QpIC8gNDtcblx0XHRcdFx0cTMuYyA9IHE0LmEgPSAocTMuYiArIHE0LmIpIC8gMjtcblx0XHRcdFx0cmV0dXJuIFtxMSwgcTIsIHEzLCBxNF07XG5cdFx0XHR9LFxuXHRcdFx0X2NhbGN1bGF0ZUNvbnRyb2xQb2ludHMgPSBmdW5jdGlvbihhLCBjdXJ2aW5lc3MsIHF1YWQsIGJhc2ljLCBjb3JyZWxhdGUpIHtcblx0XHRcdFx0dmFyIGwgPSBhLmxlbmd0aCAtIDEsXG5cdFx0XHRcdFx0aWkgPSAwLFxuXHRcdFx0XHRcdGNwMSA9IGFbMF0uYSxcblx0XHRcdFx0XHRpLCBwMSwgcDIsIHAzLCBzZWcsIG0xLCBtMiwgbW0sIGNwMiwgcWIsIHIxLCByMiwgdGw7XG5cdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcblx0XHRcdFx0XHRzZWcgPSBhW2lpXTtcblx0XHRcdFx0XHRwMSA9IHNlZy5hO1xuXHRcdFx0XHRcdHAyID0gc2VnLmQ7XG5cdFx0XHRcdFx0cDMgPSBhW2lpKzFdLmQ7XG5cblx0XHRcdFx0XHRpZiAoY29ycmVsYXRlKSB7XG5cdFx0XHRcdFx0XHRyMSA9IF9yMVtpXTtcblx0XHRcdFx0XHRcdHIyID0gX3IyW2ldO1xuXHRcdFx0XHRcdFx0dGwgPSAoKHIyICsgcjEpICogY3VydmluZXNzICogMC4yNSkgLyAoYmFzaWMgPyAwLjUgOiBfcjNbaV0gfHwgMC41KTtcblx0XHRcdFx0XHRcdG0xID0gcDIgLSAocDIgLSBwMSkgKiAoYmFzaWMgPyBjdXJ2aW5lc3MgKiAwLjUgOiAocjEgIT09IDAgPyB0bCAvIHIxIDogMCkpO1xuXHRcdFx0XHRcdFx0bTIgPSBwMiArIChwMyAtIHAyKSAqIChiYXNpYyA/IGN1cnZpbmVzcyAqIDAuNSA6IChyMiAhPT0gMCA/IHRsIC8gcjIgOiAwKSk7XG5cdFx0XHRcdFx0XHRtbSA9IHAyIC0gKG0xICsgKCgobTIgLSBtMSkgKiAoKHIxICogMyAvIChyMSArIHIyKSkgKyAwLjUpIC8gNCkgfHwgMCkpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRtMSA9IHAyIC0gKHAyIC0gcDEpICogY3VydmluZXNzICogMC41O1xuXHRcdFx0XHRcdFx0bTIgPSBwMiArIChwMyAtIHAyKSAqIGN1cnZpbmVzcyAqIDAuNTtcblx0XHRcdFx0XHRcdG1tID0gcDIgLSAobTEgKyBtMikgLyAyO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtMSArPSBtbTtcblx0XHRcdFx0XHRtMiArPSBtbTtcblxuXHRcdFx0XHRcdHNlZy5jID0gY3AyID0gbTE7XG5cdFx0XHRcdFx0aWYgKGkgIT09IDApIHtcblx0XHRcdFx0XHRcdHNlZy5iID0gY3AxO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzZWcuYiA9IGNwMSA9IHNlZy5hICsgKHNlZy5jIC0gc2VnLmEpICogMC42OyAvL2luc3RlYWQgb2YgcGxhY2luZyBiIG9uIGEgZXhhY3RseSwgd2UgbW92ZSBpdCBpbmxpbmUgd2l0aCBjIHNvIHRoYXQgaWYgdGhlIHVzZXIgc3BlY2lmaWVzIGFuIGVhc2UgbGlrZSBCYWNrLmVhc2VJbiBvciBFbGFzdGljLmVhc2VJbiB3aGljaCBnb2VzIEJFWU9ORCB0aGUgYmVnaW5uaW5nLCBpdCB3aWxsIGRvIHNvIHNtb290aGx5LlxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHNlZy5kYSA9IHAyIC0gcDE7XG5cdFx0XHRcdFx0c2VnLmNhID0gY3AyIC0gcDE7XG5cdFx0XHRcdFx0c2VnLmJhID0gY3AxIC0gcDE7XG5cblx0XHRcdFx0XHRpZiAocXVhZCkge1xuXHRcdFx0XHRcdFx0cWIgPSBjdWJpY1RvUXVhZHJhdGljKHAxLCBjcDEsIGNwMiwgcDIpO1xuXHRcdFx0XHRcdFx0YS5zcGxpY2UoaWksIDEsIHFiWzBdLCBxYlsxXSwgcWJbMl0sIHFiWzNdKTtcblx0XHRcdFx0XHRcdGlpICs9IDQ7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGlpKys7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Y3AxID0gbTI7XG5cdFx0XHRcdH1cblx0XHRcdFx0c2VnID0gYVtpaV07XG5cdFx0XHRcdHNlZy5iID0gY3AxO1xuXHRcdFx0XHRzZWcuYyA9IGNwMSArIChzZWcuZCAtIGNwMSkgKiAwLjQ7IC8vaW5zdGVhZCBvZiBwbGFjaW5nIGMgb24gZCBleGFjdGx5LCB3ZSBtb3ZlIGl0IGlubGluZSB3aXRoIGIgc28gdGhhdCBpZiB0aGUgdXNlciBzcGVjaWZpZXMgYW4gZWFzZSBsaWtlIEJhY2suZWFzZU91dCBvciBFbGFzdGljLmVhc2VPdXQgd2hpY2ggZ29lcyBCRVlPTkQgdGhlIGVuZCwgaXQgd2lsbCBkbyBzbyBzbW9vdGhseS5cblx0XHRcdFx0c2VnLmRhID0gc2VnLmQgLSBzZWcuYTtcblx0XHRcdFx0c2VnLmNhID0gc2VnLmMgLSBzZWcuYTtcblx0XHRcdFx0c2VnLmJhID0gY3AxIC0gc2VnLmE7XG5cdFx0XHRcdGlmIChxdWFkKSB7XG5cdFx0XHRcdFx0cWIgPSBjdWJpY1RvUXVhZHJhdGljKHNlZy5hLCBjcDEsIHNlZy5jLCBzZWcuZCk7XG5cdFx0XHRcdFx0YS5zcGxpY2UoaWksIDEsIHFiWzBdLCBxYlsxXSwgcWJbMl0sIHFiWzNdKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdF9wYXJzZUFuY2hvcnMgPSBmdW5jdGlvbih2YWx1ZXMsIHAsIGNvcnJlbGF0ZSwgcHJlcGVuZCkge1xuXHRcdFx0XHR2YXIgYSA9IFtdLFxuXHRcdFx0XHRcdGwsIGksIHAxLCBwMiwgcDMsIHRtcDtcblx0XHRcdFx0aWYgKHByZXBlbmQpIHtcblx0XHRcdFx0XHR2YWx1ZXMgPSBbcHJlcGVuZF0uY29uY2F0KHZhbHVlcyk7XG5cdFx0XHRcdFx0aSA9IHZhbHVlcy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0XHRpZiAodHlwZW9mKCAodG1wID0gdmFsdWVzW2ldW3BdKSApID09PSBcInN0cmluZ1wiKSBpZiAodG1wLmNoYXJBdCgxKSA9PT0gXCI9XCIpIHtcblx0XHRcdFx0XHRcdFx0dmFsdWVzW2ldW3BdID0gcHJlcGVuZFtwXSArIE51bWJlcih0bXAuY2hhckF0KDApICsgdG1wLnN1YnN0cigyKSk7IC8vYWNjb21tb2RhdGUgcmVsYXRpdmUgdmFsdWVzLiBEbyBpdCBpbmxpbmUgaW5zdGVhZCBvZiBicmVha2luZyBpdCBvdXQgaW50byBhIGZ1bmN0aW9uIGZvciBzcGVlZCByZWFzb25zXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGwgPSB2YWx1ZXMubGVuZ3RoIC0gMjtcblx0XHRcdFx0aWYgKGwgPCAwKSB7XG5cdFx0XHRcdFx0YVswXSA9IG5ldyBTZWdtZW50KHZhbHVlc1swXVtwXSwgMCwgMCwgdmFsdWVzWyhsIDwgLTEpID8gMCA6IDFdW3BdKTtcblx0XHRcdFx0XHRyZXR1cm4gYTtcblx0XHRcdFx0fVxuXHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHRcdFx0cDEgPSB2YWx1ZXNbaV1bcF07XG5cdFx0XHRcdFx0cDIgPSB2YWx1ZXNbaSsxXVtwXTtcblx0XHRcdFx0XHRhW2ldID0gbmV3IFNlZ21lbnQocDEsIDAsIDAsIHAyKTtcblx0XHRcdFx0XHRpZiAoY29ycmVsYXRlKSB7XG5cdFx0XHRcdFx0XHRwMyA9IHZhbHVlc1tpKzJdW3BdO1xuXHRcdFx0XHRcdFx0X3IxW2ldID0gKF9yMVtpXSB8fCAwKSArIChwMiAtIHAxKSAqIChwMiAtIHAxKTtcblx0XHRcdFx0XHRcdF9yMltpXSA9IChfcjJbaV0gfHwgMCkgKyAocDMgLSBwMikgKiAocDMgLSBwMik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGFbaV0gPSBuZXcgU2VnbWVudCh2YWx1ZXNbaV1bcF0sIDAsIDAsIHZhbHVlc1tpKzFdW3BdKTtcblx0XHRcdFx0cmV0dXJuIGE7XG5cdFx0XHR9LFxuXHRcdFx0YmV6aWVyVGhyb3VnaCA9IGZ1bmN0aW9uKHZhbHVlcywgY3VydmluZXNzLCBxdWFkcmF0aWMsIGJhc2ljLCBjb3JyZWxhdGUsIHByZXBlbmQpIHtcblx0XHRcdFx0dmFyIG9iaiA9IHt9LFxuXHRcdFx0XHRcdHByb3BzID0gW10sXG5cdFx0XHRcdFx0Zmlyc3QgPSBwcmVwZW5kIHx8IHZhbHVlc1swXSxcblx0XHRcdFx0XHRpLCBwLCBhLCBqLCByLCBsLCBzZWFtbGVzcywgbGFzdDtcblx0XHRcdFx0Y29ycmVsYXRlID0gKHR5cGVvZihjb3JyZWxhdGUpID09PSBcInN0cmluZ1wiKSA/IFwiLFwiK2NvcnJlbGF0ZStcIixcIiA6IF9jb3JyZWxhdGU7XG5cdFx0XHRcdGlmIChjdXJ2aW5lc3MgPT0gbnVsbCkge1xuXHRcdFx0XHRcdGN1cnZpbmVzcyA9IDE7XG5cdFx0XHRcdH1cblx0XHRcdFx0Zm9yIChwIGluIHZhbHVlc1swXSkge1xuXHRcdFx0XHRcdHByb3BzLnB1c2gocCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly9jaGVjayB0byBzZWUgaWYgdGhlIGxhc3QgYW5kIGZpcnN0IHZhbHVlcyBhcmUgaWRlbnRpY2FsICh3ZWxsLCB3aXRoaW4gMC4wNSkuIElmIHNvLCBtYWtlIHNlYW1sZXNzIGJ5IGFwcGVuZGluZyB0aGUgc2Vjb25kIGVsZW1lbnQgdG8gdGhlIHZlcnkgZW5kIG9mIHRoZSB2YWx1ZXMgYXJyYXkgYW5kIHRoZSAybmQtdG8tbGFzdCBlbGVtZW50IHRvIHRoZSB2ZXJ5IGJlZ2lubmluZyAod2UnbGwgcmVtb3ZlIHRob3NlIHNlZ21lbnRzIGxhdGVyKVxuXHRcdFx0XHRpZiAodmFsdWVzLmxlbmd0aCA+IDEpIHtcblx0XHRcdFx0XHRsYXN0ID0gdmFsdWVzW3ZhbHVlcy5sZW5ndGggLSAxXTtcblx0XHRcdFx0XHRzZWFtbGVzcyA9IHRydWU7XG5cdFx0XHRcdFx0aSA9IHByb3BzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRcdHAgPSBwcm9wc1tpXTtcblx0XHRcdFx0XHRcdGlmIChNYXRoLmFicyhmaXJzdFtwXSAtIGxhc3RbcF0pID4gMC4wNSkgeyAvL2J1aWxkIGluIGEgdG9sZXJhbmNlIG9mICsvLTAuMDUgdG8gYWNjb21tb2RhdGUgcm91bmRpbmcgZXJyb3JzLiBGb3IgZXhhbXBsZSwgaWYgeW91IHNldCBhbiBvYmplY3QncyBwb3NpdGlvbiB0byA0Ljk0NSwgRmxhc2ggd2lsbCBtYWtlIGl0IDQuOVxuXHRcdFx0XHRcdFx0XHRzZWFtbGVzcyA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHNlYW1sZXNzKSB7XG5cdFx0XHRcdFx0XHR2YWx1ZXMgPSB2YWx1ZXMuY29uY2F0KCk7IC8vZHVwbGljYXRlIHRoZSBhcnJheSB0byBhdm9pZCBjb250YW1pbmF0aW5nIHRoZSBvcmlnaW5hbCB3aGljaCB0aGUgdXNlciBtYXkgYmUgcmV1c2luZyBmb3Igb3RoZXIgdHdlZW5zXG5cdFx0XHRcdFx0XHRpZiAocHJlcGVuZCkge1xuXHRcdFx0XHRcdFx0XHR2YWx1ZXMudW5zaGlmdChwcmVwZW5kKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHZhbHVlcy5wdXNoKHZhbHVlc1sxXSk7XG5cdFx0XHRcdFx0XHRwcmVwZW5kID0gdmFsdWVzW3ZhbHVlcy5sZW5ndGggLSAzXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0X3IxLmxlbmd0aCA9IF9yMi5sZW5ndGggPSBfcjMubGVuZ3RoID0gMDtcblx0XHRcdFx0aSA9IHByb3BzLmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0cCA9IHByb3BzW2ldO1xuXHRcdFx0XHRcdF9jb3JQcm9wc1twXSA9IChjb3JyZWxhdGUuaW5kZXhPZihcIixcIitwK1wiLFwiKSAhPT0gLTEpO1xuXHRcdFx0XHRcdG9ialtwXSA9IF9wYXJzZUFuY2hvcnModmFsdWVzLCBwLCBfY29yUHJvcHNbcF0sIHByZXBlbmQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGkgPSBfcjEubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRfcjFbaV0gPSBNYXRoLnNxcnQoX3IxW2ldKTtcblx0XHRcdFx0XHRfcjJbaV0gPSBNYXRoLnNxcnQoX3IyW2ldKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIWJhc2ljKSB7XG5cdFx0XHRcdFx0aSA9IHByb3BzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRcdGlmIChfY29yUHJvcHNbcF0pIHtcblx0XHRcdFx0XHRcdFx0YSA9IG9ialtwcm9wc1tpXV07XG5cdFx0XHRcdFx0XHRcdGwgPSBhLmxlbmd0aCAtIDE7XG5cdFx0XHRcdFx0XHRcdGZvciAoaiA9IDA7IGogPCBsOyBqKyspIHtcblx0XHRcdFx0XHRcdFx0XHRyID0gYVtqKzFdLmRhIC8gX3IyW2pdICsgYVtqXS5kYSAvIF9yMVtqXTtcblx0XHRcdFx0XHRcdFx0XHRfcjNbal0gPSAoX3IzW2pdIHx8IDApICsgciAqIHI7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aSA9IF9yMy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0XHRfcjNbaV0gPSBNYXRoLnNxcnQoX3IzW2ldKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0aSA9IHByb3BzLmxlbmd0aDtcblx0XHRcdFx0aiA9IHF1YWRyYXRpYyA/IDQgOiAxO1xuXHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRwID0gcHJvcHNbaV07XG5cdFx0XHRcdFx0YSA9IG9ialtwXTtcblx0XHRcdFx0XHRfY2FsY3VsYXRlQ29udHJvbFBvaW50cyhhLCBjdXJ2aW5lc3MsIHF1YWRyYXRpYywgYmFzaWMsIF9jb3JQcm9wc1twXSk7IC8vdGhpcyBtZXRob2QgcmVxdWlyZXMgdGhhdCBfcGFyc2VBbmNob3JzKCkgYW5kIF9zZXRTZWdtZW50UmF0aW9zKCkgcmFuIGZpcnN0IHNvIHRoYXQgX3IxLCBfcjIsIGFuZCBfcjMgdmFsdWVzIGFyZSBwb3B1bGF0ZWQgZm9yIGFsbCBwcm9wZXJ0aWVzXG5cdFx0XHRcdFx0aWYgKHNlYW1sZXNzKSB7XG5cdFx0XHRcdFx0XHRhLnNwbGljZSgwLCBqKTtcblx0XHRcdFx0XHRcdGEuc3BsaWNlKGEubGVuZ3RoIC0gaiwgaik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBvYmo7XG5cdFx0XHR9LFxuXHRcdFx0X3BhcnNlQmV6aWVyRGF0YSA9IGZ1bmN0aW9uKHZhbHVlcywgdHlwZSwgcHJlcGVuZCkge1xuXHRcdFx0XHR0eXBlID0gdHlwZSB8fCBcInNvZnRcIjtcblx0XHRcdFx0dmFyIG9iaiA9IHt9LFxuXHRcdFx0XHRcdGluYyA9ICh0eXBlID09PSBcImN1YmljXCIpID8gMyA6IDIsXG5cdFx0XHRcdFx0c29mdCA9ICh0eXBlID09PSBcInNvZnRcIiksXG5cdFx0XHRcdFx0cHJvcHMgPSBbXSxcblx0XHRcdFx0XHRhLCBiLCBjLCBkLCBjdXIsIGksIGosIGwsIHAsIGNudCwgdG1wO1xuXHRcdFx0XHRpZiAoc29mdCAmJiBwcmVwZW5kKSB7XG5cdFx0XHRcdFx0dmFsdWVzID0gW3ByZXBlbmRdLmNvbmNhdCh2YWx1ZXMpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh2YWx1ZXMgPT0gbnVsbCB8fCB2YWx1ZXMubGVuZ3RoIDwgaW5jICsgMSkgeyB0aHJvdyBcImludmFsaWQgQmV6aWVyIGRhdGFcIjsgfVxuXHRcdFx0XHRmb3IgKHAgaW4gdmFsdWVzWzBdKSB7XG5cdFx0XHRcdFx0cHJvcHMucHVzaChwKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpID0gcHJvcHMubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRwID0gcHJvcHNbaV07XG5cdFx0XHRcdFx0b2JqW3BdID0gY3VyID0gW107XG5cdFx0XHRcdFx0Y250ID0gMDtcblx0XHRcdFx0XHRsID0gdmFsdWVzLmxlbmd0aDtcblx0XHRcdFx0XHRmb3IgKGogPSAwOyBqIDwgbDsgaisrKSB7XG5cdFx0XHRcdFx0XHRhID0gKHByZXBlbmQgPT0gbnVsbCkgPyB2YWx1ZXNbal1bcF0gOiAodHlwZW9mKCAodG1wID0gdmFsdWVzW2pdW3BdKSApID09PSBcInN0cmluZ1wiICYmIHRtcC5jaGFyQXQoMSkgPT09IFwiPVwiKSA/IHByZXBlbmRbcF0gKyBOdW1iZXIodG1wLmNoYXJBdCgwKSArIHRtcC5zdWJzdHIoMikpIDogTnVtYmVyKHRtcCk7XG5cdFx0XHRcdFx0XHRpZiAoc29mdCkgaWYgKGogPiAxKSBpZiAoaiA8IGwgLSAxKSB7XG5cdFx0XHRcdFx0XHRcdGN1cltjbnQrK10gPSAoYSArIGN1cltjbnQtMl0pIC8gMjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGN1cltjbnQrK10gPSBhO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRsID0gY250IC0gaW5jICsgMTtcblx0XHRcdFx0XHRjbnQgPSAwO1xuXHRcdFx0XHRcdGZvciAoaiA9IDA7IGogPCBsOyBqICs9IGluYykge1xuXHRcdFx0XHRcdFx0YSA9IGN1cltqXTtcblx0XHRcdFx0XHRcdGIgPSBjdXJbaisxXTtcblx0XHRcdFx0XHRcdGMgPSBjdXJbaisyXTtcblx0XHRcdFx0XHRcdGQgPSAoaW5jID09PSAyKSA/IDAgOiBjdXJbaiszXTtcblx0XHRcdFx0XHRcdGN1cltjbnQrK10gPSB0bXAgPSAoaW5jID09PSAzKSA/IG5ldyBTZWdtZW50KGEsIGIsIGMsIGQpIDogbmV3IFNlZ21lbnQoYSwgKDIgKiBiICsgYSkgLyAzLCAoMiAqIGIgKyBjKSAvIDMsIGMpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjdXIubGVuZ3RoID0gY250O1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBvYmo7XG5cdFx0XHR9LFxuXHRcdFx0X2FkZEN1YmljTGVuZ3RocyA9IGZ1bmN0aW9uKGEsIHN0ZXBzLCByZXNvbHV0aW9uKSB7XG5cdFx0XHRcdHZhciBpbmMgPSAxIC8gcmVzb2x1dGlvbixcblx0XHRcdFx0XHRqID0gYS5sZW5ndGgsXG5cdFx0XHRcdFx0ZCwgZDEsIHMsIGRhLCBjYSwgYmEsIHAsIGksIGludiwgYmV6LCBpbmRleDtcblx0XHRcdFx0d2hpbGUgKC0taiA+IC0xKSB7XG5cdFx0XHRcdFx0YmV6ID0gYVtqXTtcblx0XHRcdFx0XHRzID0gYmV6LmE7XG5cdFx0XHRcdFx0ZGEgPSBiZXouZCAtIHM7XG5cdFx0XHRcdFx0Y2EgPSBiZXouYyAtIHM7XG5cdFx0XHRcdFx0YmEgPSBiZXouYiAtIHM7XG5cdFx0XHRcdFx0ZCA9IGQxID0gMDtcblx0XHRcdFx0XHRmb3IgKGkgPSAxOyBpIDw9IHJlc29sdXRpb247IGkrKykge1xuXHRcdFx0XHRcdFx0cCA9IGluYyAqIGk7XG5cdFx0XHRcdFx0XHRpbnYgPSAxIC0gcDtcblx0XHRcdFx0XHRcdGQgPSBkMSAtIChkMSA9IChwICogcCAqIGRhICsgMyAqIGludiAqIChwICogY2EgKyBpbnYgKiBiYSkpICogcCk7XG5cdFx0XHRcdFx0XHRpbmRleCA9IGogKiByZXNvbHV0aW9uICsgaSAtIDE7XG5cdFx0XHRcdFx0XHRzdGVwc1tpbmRleF0gPSAoc3RlcHNbaW5kZXhdIHx8IDApICsgZCAqIGQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0X3BhcnNlTGVuZ3RoRGF0YSA9IGZ1bmN0aW9uKG9iaiwgcmVzb2x1dGlvbikge1xuXHRcdFx0XHRyZXNvbHV0aW9uID0gcmVzb2x1dGlvbiA+PiAwIHx8IDY7XG5cdFx0XHRcdHZhciBhID0gW10sXG5cdFx0XHRcdFx0bGVuZ3RocyA9IFtdLFxuXHRcdFx0XHRcdGQgPSAwLFxuXHRcdFx0XHRcdHRvdGFsID0gMCxcblx0XHRcdFx0XHR0aHJlc2hvbGQgPSByZXNvbHV0aW9uIC0gMSxcblx0XHRcdFx0XHRzZWdtZW50cyA9IFtdLFxuXHRcdFx0XHRcdGN1ckxTID0gW10sIC8vY3VycmVudCBsZW5ndGggc2VnbWVudHMgYXJyYXlcblx0XHRcdFx0XHRwLCBpLCBsLCBpbmRleDtcblx0XHRcdFx0Zm9yIChwIGluIG9iaikge1xuXHRcdFx0XHRcdF9hZGRDdWJpY0xlbmd0aHMob2JqW3BdLCBhLCByZXNvbHV0aW9uKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRsID0gYS5sZW5ndGg7XG5cdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcblx0XHRcdFx0XHRkICs9IE1hdGguc3FydChhW2ldKTtcblx0XHRcdFx0XHRpbmRleCA9IGkgJSByZXNvbHV0aW9uO1xuXHRcdFx0XHRcdGN1ckxTW2luZGV4XSA9IGQ7XG5cdFx0XHRcdFx0aWYgKGluZGV4ID09PSB0aHJlc2hvbGQpIHtcblx0XHRcdFx0XHRcdHRvdGFsICs9IGQ7XG5cdFx0XHRcdFx0XHRpbmRleCA9IChpIC8gcmVzb2x1dGlvbikgPj4gMDtcblx0XHRcdFx0XHRcdHNlZ21lbnRzW2luZGV4XSA9IGN1ckxTO1xuXHRcdFx0XHRcdFx0bGVuZ3Roc1tpbmRleF0gPSB0b3RhbDtcblx0XHRcdFx0XHRcdGQgPSAwO1xuXHRcdFx0XHRcdFx0Y3VyTFMgPSBbXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHtsZW5ndGg6dG90YWwsIGxlbmd0aHM6bGVuZ3Rocywgc2VnbWVudHM6c2VnbWVudHN9O1xuXHRcdFx0fSxcblxuXG5cblx0XHRcdEJlemllclBsdWdpbiA9IF9nc1Njb3BlLl9nc0RlZmluZS5wbHVnaW4oe1xuXHRcdFx0XHRcdHByb3BOYW1lOiBcImJlemllclwiLFxuXHRcdFx0XHRcdHByaW9yaXR5OiAtMSxcblx0XHRcdFx0XHR2ZXJzaW9uOiBcIjEuMy40XCIsXG5cdFx0XHRcdFx0QVBJOiAyLFxuXHRcdFx0XHRcdGdsb2JhbDp0cnVlLFxuXG5cdFx0XHRcdFx0Ly9nZXRzIGNhbGxlZCB3aGVuIHRoZSB0d2VlbiByZW5kZXJzIGZvciB0aGUgZmlyc3QgdGltZS4gVGhpcyBpcyB3aGVyZSBpbml0aWFsIHZhbHVlcyBzaG91bGQgYmUgcmVjb3JkZWQgYW5kIGFueSBzZXR1cCByb3V0aW5lcyBzaG91bGQgcnVuLlxuXHRcdFx0XHRcdGluaXQ6IGZ1bmN0aW9uKHRhcmdldCwgdmFycywgdHdlZW4pIHtcblx0XHRcdFx0XHRcdHRoaXMuX3RhcmdldCA9IHRhcmdldDtcblx0XHRcdFx0XHRcdGlmICh2YXJzIGluc3RhbmNlb2YgQXJyYXkpIHtcblx0XHRcdFx0XHRcdFx0dmFycyA9IHt2YWx1ZXM6dmFyc307XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR0aGlzLl9mdW5jID0ge307XG5cdFx0XHRcdFx0XHR0aGlzLl9yb3VuZCA9IHt9O1xuXHRcdFx0XHRcdFx0dGhpcy5fcHJvcHMgPSBbXTtcblx0XHRcdFx0XHRcdHRoaXMuX3RpbWVSZXMgPSAodmFycy50aW1lUmVzb2x1dGlvbiA9PSBudWxsKSA/IDYgOiBwYXJzZUludCh2YXJzLnRpbWVSZXNvbHV0aW9uLCAxMCk7XG5cdFx0XHRcdFx0XHR2YXIgdmFsdWVzID0gdmFycy52YWx1ZXMgfHwgW10sXG5cdFx0XHRcdFx0XHRcdGZpcnN0ID0ge30sXG5cdFx0XHRcdFx0XHRcdHNlY29uZCA9IHZhbHVlc1swXSxcblx0XHRcdFx0XHRcdFx0YXV0b1JvdGF0ZSA9IHZhcnMuYXV0b1JvdGF0ZSB8fCB0d2Vlbi52YXJzLm9yaWVudFRvQmV6aWVyLFxuXHRcdFx0XHRcdFx0XHRwLCBpc0Z1bmMsIGksIGosIHByZXBlbmQ7XG5cblx0XHRcdFx0XHRcdHRoaXMuX2F1dG9Sb3RhdGUgPSBhdXRvUm90YXRlID8gKGF1dG9Sb3RhdGUgaW5zdGFuY2VvZiBBcnJheSkgPyBhdXRvUm90YXRlIDogW1tcInhcIixcInlcIixcInJvdGF0aW9uXCIsKChhdXRvUm90YXRlID09PSB0cnVlKSA/IDAgOiBOdW1iZXIoYXV0b1JvdGF0ZSkgfHwgMCldXSA6IG51bGw7XG5cdFx0XHRcdFx0XHRmb3IgKHAgaW4gc2Vjb25kKSB7XG5cdFx0XHRcdFx0XHRcdHRoaXMuX3Byb3BzLnB1c2gocCk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGkgPSB0aGlzLl9wcm9wcy5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRcdFx0cCA9IHRoaXMuX3Byb3BzW2ldO1xuXG5cdFx0XHRcdFx0XHRcdHRoaXMuX292ZXJ3cml0ZVByb3BzLnB1c2gocCk7XG5cdFx0XHRcdFx0XHRcdGlzRnVuYyA9IHRoaXMuX2Z1bmNbcF0gPSAodHlwZW9mKHRhcmdldFtwXSkgPT09IFwiZnVuY3Rpb25cIik7XG5cdFx0XHRcdFx0XHRcdGZpcnN0W3BdID0gKCFpc0Z1bmMpID8gcGFyc2VGbG9hdCh0YXJnZXRbcF0pIDogdGFyZ2V0WyAoKHAuaW5kZXhPZihcInNldFwiKSB8fCB0eXBlb2YodGFyZ2V0W1wiZ2V0XCIgKyBwLnN1YnN0cigzKV0pICE9PSBcImZ1bmN0aW9uXCIpID8gcCA6IFwiZ2V0XCIgKyBwLnN1YnN0cigzKSkgXSgpO1xuXHRcdFx0XHRcdFx0XHRpZiAoIXByZXBlbmQpIGlmIChmaXJzdFtwXSAhPT0gdmFsdWVzWzBdW3BdKSB7XG5cdFx0XHRcdFx0XHRcdFx0cHJlcGVuZCA9IGZpcnN0O1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR0aGlzLl9iZXppZXJzID0gKHZhcnMudHlwZSAhPT0gXCJjdWJpY1wiICYmIHZhcnMudHlwZSAhPT0gXCJxdWFkcmF0aWNcIiAmJiB2YXJzLnR5cGUgIT09IFwic29mdFwiKSA/IGJlemllclRocm91Z2godmFsdWVzLCBpc05hTih2YXJzLmN1cnZpbmVzcykgPyAxIDogdmFycy5jdXJ2aW5lc3MsIGZhbHNlLCAodmFycy50eXBlID09PSBcInRocnVCYXNpY1wiKSwgdmFycy5jb3JyZWxhdGUsIHByZXBlbmQpIDogX3BhcnNlQmV6aWVyRGF0YSh2YWx1ZXMsIHZhcnMudHlwZSwgZmlyc3QpO1xuXHRcdFx0XHRcdFx0dGhpcy5fc2VnQ291bnQgPSB0aGlzLl9iZXppZXJzW3BdLmxlbmd0aDtcblxuXHRcdFx0XHRcdFx0aWYgKHRoaXMuX3RpbWVSZXMpIHtcblx0XHRcdFx0XHRcdFx0dmFyIGxkID0gX3BhcnNlTGVuZ3RoRGF0YSh0aGlzLl9iZXppZXJzLCB0aGlzLl90aW1lUmVzKTtcblx0XHRcdFx0XHRcdFx0dGhpcy5fbGVuZ3RoID0gbGQubGVuZ3RoO1xuXHRcdFx0XHRcdFx0XHR0aGlzLl9sZW5ndGhzID0gbGQubGVuZ3Rocztcblx0XHRcdFx0XHRcdFx0dGhpcy5fc2VnbWVudHMgPSBsZC5zZWdtZW50cztcblx0XHRcdFx0XHRcdFx0dGhpcy5fbDEgPSB0aGlzLl9saSA9IHRoaXMuX3MxID0gdGhpcy5fc2kgPSAwO1xuXHRcdFx0XHRcdFx0XHR0aGlzLl9sMiA9IHRoaXMuX2xlbmd0aHNbMF07XG5cdFx0XHRcdFx0XHRcdHRoaXMuX2N1clNlZyA9IHRoaXMuX3NlZ21lbnRzWzBdO1xuXHRcdFx0XHRcdFx0XHR0aGlzLl9zMiA9IHRoaXMuX2N1clNlZ1swXTtcblx0XHRcdFx0XHRcdFx0dGhpcy5fcHJlYyA9IDEgLyB0aGlzLl9jdXJTZWcubGVuZ3RoO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRpZiAoKGF1dG9Sb3RhdGUgPSB0aGlzLl9hdXRvUm90YXRlKSkge1xuXHRcdFx0XHRcdFx0XHR0aGlzLl9pbml0aWFsUm90YXRpb25zID0gW107XG5cdFx0XHRcdFx0XHRcdGlmICghKGF1dG9Sb3RhdGVbMF0gaW5zdGFuY2VvZiBBcnJheSkpIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLl9hdXRvUm90YXRlID0gYXV0b1JvdGF0ZSA9IFthdXRvUm90YXRlXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRpID0gYXV0b1JvdGF0ZS5sZW5ndGg7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdFx0XHRcdGZvciAoaiA9IDA7IGogPCAzOyBqKyspIHtcblx0XHRcdFx0XHRcdFx0XHRcdHAgPSBhdXRvUm90YXRlW2ldW2pdO1xuXHRcdFx0XHRcdFx0XHRcdFx0dGhpcy5fZnVuY1twXSA9ICh0eXBlb2YodGFyZ2V0W3BdKSA9PT0gXCJmdW5jdGlvblwiKSA/IHRhcmdldFsgKChwLmluZGV4T2YoXCJzZXRcIikgfHwgdHlwZW9mKHRhcmdldFtcImdldFwiICsgcC5zdWJzdHIoMyldKSAhPT0gXCJmdW5jdGlvblwiKSA/IHAgOiBcImdldFwiICsgcC5zdWJzdHIoMykpIF0gOiBmYWxzZTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0cCA9IGF1dG9Sb3RhdGVbaV1bMl07XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5faW5pdGlhbFJvdGF0aW9uc1tpXSA9IHRoaXMuX2Z1bmNbcF0gPyB0aGlzLl9mdW5jW3BdLmNhbGwodGhpcy5fdGFyZ2V0KSA6IHRoaXMuX3RhcmdldFtwXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0dGhpcy5fc3RhcnRSYXRpbyA9IHR3ZWVuLnZhcnMucnVuQmFja3dhcmRzID8gMSA6IDA7IC8vd2UgZGV0ZXJtaW5lIHRoZSBzdGFydGluZyByYXRpbyB3aGVuIHRoZSB0d2VlbiBpbml0cyB3aGljaCBpcyBhbHdheXMgMCB1bmxlc3MgdGhlIHR3ZWVuIGhhcyBydW5CYWNrd2FyZHM6dHJ1ZSAoaW5kaWNhdGluZyBpdCdzIGEgZnJvbSgpIHR3ZWVuKSBpbiB3aGljaCBjYXNlIGl0J3MgMS5cblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvL2NhbGxlZCBlYWNoIHRpbWUgdGhlIHZhbHVlcyBzaG91bGQgYmUgdXBkYXRlZCwgYW5kIHRoZSByYXRpbyBnZXRzIHBhc3NlZCBhcyB0aGUgb25seSBwYXJhbWV0ZXIgKHR5cGljYWxseSBpdCdzIGEgdmFsdWUgYmV0d2VlbiAwIGFuZCAxLCBidXQgaXQgY2FuIGV4Y2VlZCB0aG9zZSB3aGVuIHVzaW5nIGFuIGVhc2UgbGlrZSBFbGFzdGljLmVhc2VPdXQgb3IgQmFjay5lYXNlT3V0LCBldGMuKVxuXHRcdFx0XHRcdHNldDogZnVuY3Rpb24odikge1xuXHRcdFx0XHRcdFx0dmFyIHNlZ21lbnRzID0gdGhpcy5fc2VnQ291bnQsXG5cdFx0XHRcdFx0XHRcdGZ1bmMgPSB0aGlzLl9mdW5jLFxuXHRcdFx0XHRcdFx0XHR0YXJnZXQgPSB0aGlzLl90YXJnZXQsXG5cdFx0XHRcdFx0XHRcdG5vdFN0YXJ0ID0gKHYgIT09IHRoaXMuX3N0YXJ0UmF0aW8pLFxuXHRcdFx0XHRcdFx0XHRjdXJJbmRleCwgaW52LCBpLCBwLCBiLCB0LCB2YWwsIGwsIGxlbmd0aHMsIGN1clNlZztcblx0XHRcdFx0XHRcdGlmICghdGhpcy5fdGltZVJlcykge1xuXHRcdFx0XHRcdFx0XHRjdXJJbmRleCA9ICh2IDwgMCkgPyAwIDogKHYgPj0gMSkgPyBzZWdtZW50cyAtIDEgOiAoc2VnbWVudHMgKiB2KSA+PiAwO1xuXHRcdFx0XHRcdFx0XHR0ID0gKHYgLSAoY3VySW5kZXggKiAoMSAvIHNlZ21lbnRzKSkpICogc2VnbWVudHM7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRsZW5ndGhzID0gdGhpcy5fbGVuZ3Rocztcblx0XHRcdFx0XHRcdFx0Y3VyU2VnID0gdGhpcy5fY3VyU2VnO1xuXHRcdFx0XHRcdFx0XHR2ICo9IHRoaXMuX2xlbmd0aDtcblx0XHRcdFx0XHRcdFx0aSA9IHRoaXMuX2xpO1xuXHRcdFx0XHRcdFx0XHQvL2ZpbmQgdGhlIGFwcHJvcHJpYXRlIHNlZ21lbnQgKGlmIHRoZSBjdXJyZW50bHkgY2FjaGVkIG9uZSBpc24ndCBjb3JyZWN0KVxuXHRcdFx0XHRcdFx0XHRpZiAodiA+IHRoaXMuX2wyICYmIGkgPCBzZWdtZW50cyAtIDEpIHtcblx0XHRcdFx0XHRcdFx0XHRsID0gc2VnbWVudHMgLSAxO1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlIChpIDwgbCAmJiAodGhpcy5fbDIgPSBsZW5ndGhzWysraV0pIDw9IHYpIHtcdH1cblx0XHRcdFx0XHRcdFx0XHR0aGlzLl9sMSA9IGxlbmd0aHNbaS0xXTtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLl9saSA9IGk7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5fY3VyU2VnID0gY3VyU2VnID0gdGhpcy5fc2VnbWVudHNbaV07XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5fczIgPSBjdXJTZWdbKHRoaXMuX3MxID0gdGhpcy5fc2kgPSAwKV07XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAodiA8IHRoaXMuX2wxICYmIGkgPiAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKGkgPiAwICYmICh0aGlzLl9sMSA9IGxlbmd0aHNbLS1pXSkgPj0gdikgeyB9XG5cdFx0XHRcdFx0XHRcdFx0aWYgKGkgPT09IDAgJiYgdiA8IHRoaXMuX2wxKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR0aGlzLl9sMSA9IDA7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdGkrKztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5fbDIgPSBsZW5ndGhzW2ldO1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuX2xpID0gaTtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLl9jdXJTZWcgPSBjdXJTZWcgPSB0aGlzLl9zZWdtZW50c1tpXTtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLl9zMSA9IGN1clNlZ1sodGhpcy5fc2kgPSBjdXJTZWcubGVuZ3RoIC0gMSkgLSAxXSB8fCAwO1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuX3MyID0gY3VyU2VnW3RoaXMuX3NpXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRjdXJJbmRleCA9IGk7XG5cdFx0XHRcdFx0XHRcdC8vbm93IGZpbmQgdGhlIGFwcHJvcHJpYXRlIHN1Yi1zZWdtZW50ICh3ZSBzcGxpdCBpdCBpbnRvIHRoZSBudW1iZXIgb2YgcGllY2VzIHRoYXQgd2FzIGRlZmluZWQgYnkgXCJwcmVjaXNpb25cIiBhbmQgbWVhc3VyZWQgZWFjaCBvbmUpXG5cdFx0XHRcdFx0XHRcdHYgLT0gdGhpcy5fbDE7XG5cdFx0XHRcdFx0XHRcdGkgPSB0aGlzLl9zaTtcblx0XHRcdFx0XHRcdFx0aWYgKHYgPiB0aGlzLl9zMiAmJiBpIDwgY3VyU2VnLmxlbmd0aCAtIDEpIHtcblx0XHRcdFx0XHRcdFx0XHRsID0gY3VyU2VnLmxlbmd0aCAtIDE7XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKGkgPCBsICYmICh0aGlzLl9zMiA9IGN1clNlZ1srK2ldKSA8PSB2KSB7XHR9XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5fczEgPSBjdXJTZWdbaS0xXTtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLl9zaSA9IGk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAodiA8IHRoaXMuX3MxICYmIGkgPiAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKGkgPiAwICYmICh0aGlzLl9zMSA9IGN1clNlZ1stLWldKSA+PSB2KSB7XHR9XG5cdFx0XHRcdFx0XHRcdFx0aWYgKGkgPT09IDAgJiYgdiA8IHRoaXMuX3MxKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR0aGlzLl9zMSA9IDA7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdGkrKztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5fczIgPSBjdXJTZWdbaV07XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5fc2kgPSBpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHQgPSAoaSArICh2IC0gdGhpcy5fczEpIC8gKHRoaXMuX3MyIC0gdGhpcy5fczEpKSAqIHRoaXMuX3ByZWM7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpbnYgPSAxIC0gdDtcblxuXHRcdFx0XHRcdFx0aSA9IHRoaXMuX3Byb3BzLmxlbmd0aDtcblx0XHRcdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdFx0XHRwID0gdGhpcy5fcHJvcHNbaV07XG5cdFx0XHRcdFx0XHRcdGIgPSB0aGlzLl9iZXppZXJzW3BdW2N1ckluZGV4XTtcblx0XHRcdFx0XHRcdFx0dmFsID0gKHQgKiB0ICogYi5kYSArIDMgKiBpbnYgKiAodCAqIGIuY2EgKyBpbnYgKiBiLmJhKSkgKiB0ICsgYi5hO1xuXHRcdFx0XHRcdFx0XHRpZiAodGhpcy5fcm91bmRbcF0pIHtcblx0XHRcdFx0XHRcdFx0XHR2YWwgPSBNYXRoLnJvdW5kKHZhbCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0aWYgKGZ1bmNbcF0pIHtcblx0XHRcdFx0XHRcdFx0XHR0YXJnZXRbcF0odmFsKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR0YXJnZXRbcF0gPSB2YWw7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aWYgKHRoaXMuX2F1dG9Sb3RhdGUpIHtcblx0XHRcdFx0XHRcdFx0dmFyIGFyID0gdGhpcy5fYXV0b1JvdGF0ZSxcblx0XHRcdFx0XHRcdFx0XHRiMiwgeDEsIHkxLCB4MiwgeTIsIGFkZCwgY29udjtcblx0XHRcdFx0XHRcdFx0aSA9IGFyLmxlbmd0aDtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0XHRcdFx0cCA9IGFyW2ldWzJdO1xuXHRcdFx0XHRcdFx0XHRcdGFkZCA9IGFyW2ldWzNdIHx8IDA7XG5cdFx0XHRcdFx0XHRcdFx0Y29udiA9IChhcltpXVs0XSA9PT0gdHJ1ZSkgPyAxIDogX1JBRDJERUc7XG5cdFx0XHRcdFx0XHRcdFx0YiA9IHRoaXMuX2JlemllcnNbYXJbaV1bMF1dO1xuXHRcdFx0XHRcdFx0XHRcdGIyID0gdGhpcy5fYmV6aWVyc1thcltpXVsxXV07XG5cblx0XHRcdFx0XHRcdFx0XHRpZiAoYiAmJiBiMikgeyAvL2luIGNhc2Ugb25lIG9mIHRoZSBwcm9wZXJ0aWVzIGdvdCBvdmVyd3JpdHRlbi5cblx0XHRcdFx0XHRcdFx0XHRcdGIgPSBiW2N1ckluZGV4XTtcblx0XHRcdFx0XHRcdFx0XHRcdGIyID0gYjJbY3VySW5kZXhdO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHR4MSA9IGIuYSArIChiLmIgLSBiLmEpICogdDtcblx0XHRcdFx0XHRcdFx0XHRcdHgyID0gYi5iICsgKGIuYyAtIGIuYikgKiB0O1xuXHRcdFx0XHRcdFx0XHRcdFx0eDEgKz0gKHgyIC0geDEpICogdDtcblx0XHRcdFx0XHRcdFx0XHRcdHgyICs9ICgoYi5jICsgKGIuZCAtIGIuYykgKiB0KSAtIHgyKSAqIHQ7XG5cblx0XHRcdFx0XHRcdFx0XHRcdHkxID0gYjIuYSArIChiMi5iIC0gYjIuYSkgKiB0O1xuXHRcdFx0XHRcdFx0XHRcdFx0eTIgPSBiMi5iICsgKGIyLmMgLSBiMi5iKSAqIHQ7XG5cdFx0XHRcdFx0XHRcdFx0XHR5MSArPSAoeTIgLSB5MSkgKiB0O1xuXHRcdFx0XHRcdFx0XHRcdFx0eTIgKz0gKChiMi5jICsgKGIyLmQgLSBiMi5jKSAqIHQpIC0geTIpICogdDtcblxuXHRcdFx0XHRcdFx0XHRcdFx0dmFsID0gbm90U3RhcnQgPyBNYXRoLmF0YW4yKHkyIC0geTEsIHgyIC0geDEpICogY29udiArIGFkZCA6IHRoaXMuX2luaXRpYWxSb3RhdGlvbnNbaV07XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmIChmdW5jW3BdKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRhcmdldFtwXSh2YWwpO1xuXHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGFyZ2V0W3BdID0gdmFsO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdH0pLFxuXHRcdFx0cCA9IEJlemllclBsdWdpbi5wcm90b3R5cGU7XG5cblxuXHRcdEJlemllclBsdWdpbi5iZXppZXJUaHJvdWdoID0gYmV6aWVyVGhyb3VnaDtcblx0XHRCZXppZXJQbHVnaW4uY3ViaWNUb1F1YWRyYXRpYyA9IGN1YmljVG9RdWFkcmF0aWM7XG5cdFx0QmV6aWVyUGx1Z2luLl9hdXRvQ1NTID0gdHJ1ZTsgLy9pbmRpY2F0ZXMgdGhhdCB0aGlzIHBsdWdpbiBjYW4gYmUgaW5zZXJ0ZWQgaW50byB0aGUgXCJjc3NcIiBvYmplY3QgdXNpbmcgdGhlIGF1dG9DU1MgZmVhdHVyZSBvZiBUd2VlbkxpdGVcblx0XHRCZXppZXJQbHVnaW4ucXVhZHJhdGljVG9DdWJpYyA9IGZ1bmN0aW9uKGEsIGIsIGMpIHtcblx0XHRcdHJldHVybiBuZXcgU2VnbWVudChhLCAoMiAqIGIgKyBhKSAvIDMsICgyICogYiArIGMpIC8gMywgYyk7XG5cdFx0fTtcblxuXHRcdEJlemllclBsdWdpbi5fY3NzUmVnaXN0ZXIgPSBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBDU1NQbHVnaW4gPSBfZ2xvYmFscy5DU1NQbHVnaW47XG5cdFx0XHRpZiAoIUNTU1BsdWdpbikge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHR2YXIgX2ludGVybmFscyA9IENTU1BsdWdpbi5faW50ZXJuYWxzLFxuXHRcdFx0XHRfcGFyc2VUb1Byb3h5ID0gX2ludGVybmFscy5fcGFyc2VUb1Byb3h5LFxuXHRcdFx0XHRfc2V0UGx1Z2luUmF0aW8gPSBfaW50ZXJuYWxzLl9zZXRQbHVnaW5SYXRpbyxcblx0XHRcdFx0Q1NTUHJvcFR3ZWVuID0gX2ludGVybmFscy5DU1NQcm9wVHdlZW47XG5cdFx0XHRfaW50ZXJuYWxzLl9yZWdpc3RlckNvbXBsZXhTcGVjaWFsUHJvcChcImJlemllclwiLCB7cGFyc2VyOmZ1bmN0aW9uKHQsIGUsIHByb3AsIGNzc3AsIHB0LCBwbHVnaW4pIHtcblx0XHRcdFx0aWYgKGUgaW5zdGFuY2VvZiBBcnJheSkge1xuXHRcdFx0XHRcdGUgPSB7dmFsdWVzOmV9O1xuXHRcdFx0XHR9XG5cdFx0XHRcdHBsdWdpbiA9IG5ldyBCZXppZXJQbHVnaW4oKTtcblx0XHRcdFx0dmFyIHZhbHVlcyA9IGUudmFsdWVzLFxuXHRcdFx0XHRcdGwgPSB2YWx1ZXMubGVuZ3RoIC0gMSxcblx0XHRcdFx0XHRwbHVnaW5WYWx1ZXMgPSBbXSxcblx0XHRcdFx0XHR2ID0ge30sXG5cdFx0XHRcdFx0aSwgcCwgZGF0YTtcblx0XHRcdFx0aWYgKGwgPCAwKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHB0O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGZvciAoaSA9IDA7IGkgPD0gbDsgaSsrKSB7XG5cdFx0XHRcdFx0ZGF0YSA9IF9wYXJzZVRvUHJveHkodCwgdmFsdWVzW2ldLCBjc3NwLCBwdCwgcGx1Z2luLCAobCAhPT0gaSkpO1xuXHRcdFx0XHRcdHBsdWdpblZhbHVlc1tpXSA9IGRhdGEuZW5kO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGZvciAocCBpbiBlKSB7XG5cdFx0XHRcdFx0dltwXSA9IGVbcF07IC8vZHVwbGljYXRlIHRoZSB2YXJzIG9iamVjdCBiZWNhdXNlIHdlIG5lZWQgdG8gYWx0ZXIgc29tZSB0aGluZ3Mgd2hpY2ggd291bGQgY2F1c2UgcHJvYmxlbXMgaWYgdGhlIHVzZXIgcGxhbnMgdG8gcmV1c2UgdGhlIHNhbWUgdmFycyBvYmplY3QgZm9yIGFub3RoZXIgdHdlZW4uXG5cdFx0XHRcdH1cblx0XHRcdFx0di52YWx1ZXMgPSBwbHVnaW5WYWx1ZXM7XG5cdFx0XHRcdHB0ID0gbmV3IENTU1Byb3BUd2Vlbih0LCBcImJlemllclwiLCAwLCAwLCBkYXRhLnB0LCAyKTtcblx0XHRcdFx0cHQuZGF0YSA9IGRhdGE7XG5cdFx0XHRcdHB0LnBsdWdpbiA9IHBsdWdpbjtcblx0XHRcdFx0cHQuc2V0UmF0aW8gPSBfc2V0UGx1Z2luUmF0aW87XG5cdFx0XHRcdGlmICh2LmF1dG9Sb3RhdGUgPT09IDApIHtcblx0XHRcdFx0XHR2LmF1dG9Sb3RhdGUgPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh2LmF1dG9Sb3RhdGUgJiYgISh2LmF1dG9Sb3RhdGUgaW5zdGFuY2VvZiBBcnJheSkpIHtcblx0XHRcdFx0XHRpID0gKHYuYXV0b1JvdGF0ZSA9PT0gdHJ1ZSkgPyAwIDogTnVtYmVyKHYuYXV0b1JvdGF0ZSk7XG5cdFx0XHRcdFx0di5hdXRvUm90YXRlID0gKGRhdGEuZW5kLmxlZnQgIT0gbnVsbCkgPyBbW1wibGVmdFwiLFwidG9wXCIsXCJyb3RhdGlvblwiLGksZmFsc2VdXSA6IChkYXRhLmVuZC54ICE9IG51bGwpID8gW1tcInhcIixcInlcIixcInJvdGF0aW9uXCIsaSxmYWxzZV1dIDogZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHYuYXV0b1JvdGF0ZSkge1xuXHRcdFx0XHRcdGlmICghY3NzcC5fdHJhbnNmb3JtKSB7XG5cdFx0XHRcdFx0XHRjc3NwLl9lbmFibGVUcmFuc2Zvcm1zKGZhbHNlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZGF0YS5hdXRvUm90YXRlID0gY3NzcC5fdGFyZ2V0Ll9nc1RyYW5zZm9ybTtcblx0XHRcdFx0fVxuXHRcdFx0XHRwbHVnaW4uX29uSW5pdFR3ZWVuKGRhdGEucHJveHksIHYsIGNzc3AuX3R3ZWVuKTtcblx0XHRcdFx0cmV0dXJuIHB0O1xuXHRcdFx0fX0pO1xuXHRcdH07XG5cblx0XHRwLl9yb3VuZFByb3BzID0gZnVuY3Rpb24obG9va3VwLCB2YWx1ZSkge1xuXHRcdFx0dmFyIG9wID0gdGhpcy5fb3ZlcndyaXRlUHJvcHMsXG5cdFx0XHRcdGkgPSBvcC5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0aWYgKGxvb2t1cFtvcFtpXV0gfHwgbG9va3VwLmJlemllciB8fCBsb29rdXAuYmV6aWVyVGhyb3VnaCkge1xuXHRcdFx0XHRcdHRoaXMuX3JvdW5kW29wW2ldXSA9IHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHAuX2tpbGwgPSBmdW5jdGlvbihsb29rdXApIHtcblx0XHRcdHZhciBhID0gdGhpcy5fcHJvcHMsXG5cdFx0XHRcdHAsIGk7XG5cdFx0XHRmb3IgKHAgaW4gdGhpcy5fYmV6aWVycykge1xuXHRcdFx0XHRpZiAocCBpbiBsb29rdXApIHtcblx0XHRcdFx0XHRkZWxldGUgdGhpcy5fYmV6aWVyc1twXTtcblx0XHRcdFx0XHRkZWxldGUgdGhpcy5fZnVuY1twXTtcblx0XHRcdFx0XHRpID0gYS5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0XHRpZiAoYVtpXSA9PT0gcCkge1xuXHRcdFx0XHRcdFx0XHRhLnNwbGljZShpLCAxKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzLl9zdXBlci5fa2lsbC5jYWxsKHRoaXMsIGxvb2t1cCk7XG5cdFx0fTtcblxuXHR9KCkpO1xuXG5cblxuXG5cblxuXHRcblx0XG5cdFxuXHRcblx0XG5cdFxuXHRcblx0XG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ1NTUGx1Z2luXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblx0X2dzU2NvcGUuX2dzRGVmaW5lKFwicGx1Z2lucy5DU1NQbHVnaW5cIiwgW1wicGx1Z2lucy5Ud2VlblBsdWdpblwiLFwiVHdlZW5MaXRlXCJdLCBmdW5jdGlvbihUd2VlblBsdWdpbiwgVHdlZW5MaXRlKSB7XG5cblx0XHQvKiogQGNvbnN0cnVjdG9yICoqL1xuXHRcdHZhciBDU1NQbHVnaW4gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0VHdlZW5QbHVnaW4uY2FsbCh0aGlzLCBcImNzc1wiKTtcblx0XHRcdFx0dGhpcy5fb3ZlcndyaXRlUHJvcHMubGVuZ3RoID0gMDtcblx0XHRcdFx0dGhpcy5zZXRSYXRpbyA9IENTU1BsdWdpbi5wcm90b3R5cGUuc2V0UmF0aW87IC8vc3BlZWQgb3B0aW1pemF0aW9uIChhdm9pZCBwcm90b3R5cGUgbG9va3VwIG9uIHRoaXMgXCJob3RcIiBtZXRob2QpXG5cdFx0XHR9LFxuXHRcdFx0X2dsb2JhbHMgPSBfZ3NTY29wZS5fZ3NEZWZpbmUuZ2xvYmFscyxcblx0XHRcdF9oYXNQcmlvcml0eSwgLy90dXJucyB0cnVlIHdoZW5ldmVyIGEgQ1NTUHJvcFR3ZWVuIGluc3RhbmNlIGlzIGNyZWF0ZWQgdGhhdCBoYXMgYSBwcmlvcml0eSBvdGhlciB0aGFuIDAuIFRoaXMgaGVscHMgdXMgZGlzY2VybiB3aGV0aGVyIG9yIG5vdCB3ZSBzaG91bGQgc3BlbmQgdGhlIHRpbWUgb3JnYW5pemluZyB0aGUgbGlua2VkIGxpc3Qgb3Igbm90IGFmdGVyIGEgQ1NTUGx1Z2luJ3MgX29uSW5pdFR3ZWVuKCkgbWV0aG9kIGlzIGNhbGxlZC5cblx0XHRcdF9zdWZmaXhNYXAsIC8vd2Ugc2V0IHRoaXMgaW4gX29uSW5pdFR3ZWVuKCkgZWFjaCB0aW1lIGFzIGEgd2F5IHRvIGhhdmUgYSBwZXJzaXN0ZW50IHZhcmlhYmxlIHdlIGNhbiB1c2UgaW4gb3RoZXIgbWV0aG9kcyBsaWtlIF9wYXJzZSgpIHdpdGhvdXQgaGF2aW5nIHRvIHBhc3MgaXQgYXJvdW5kIGFzIGEgcGFyYW1ldGVyIGFuZCB3ZSBrZWVwIF9wYXJzZSgpIGRlY291cGxlZCBmcm9tIGEgcGFydGljdWxhciBDU1NQbHVnaW4gaW5zdGFuY2Vcblx0XHRcdF9jcywgLy9jb21wdXRlZCBzdHlsZSAod2Ugc3RvcmUgdGhpcyBpbiBhIHNoYXJlZCB2YXJpYWJsZSB0byBjb25zZXJ2ZSBtZW1vcnkgYW5kIG1ha2UgbWluaWZpY2F0aW9uIHRpZ2h0ZXJcblx0XHRcdF9vdmVyd3JpdGVQcm9wcywgLy9hbGlhcyB0byB0aGUgY3VycmVudGx5IGluc3RhbnRpYXRpbmcgQ1NTUGx1Z2luJ3MgX292ZXJ3cml0ZVByb3BzIGFycmF5LiBXZSB1c2UgdGhpcyBjbG9zdXJlIGluIG9yZGVyIHRvIGF2b2lkIGhhdmluZyB0byBwYXNzIGEgcmVmZXJlbmNlIGFyb3VuZCBmcm9tIG1ldGhvZCB0byBtZXRob2QgYW5kIGFpZCBpbiBtaW5pZmljYXRpb24uXG5cdFx0XHRfc3BlY2lhbFByb3BzID0ge30sXG5cdFx0XHRwID0gQ1NTUGx1Z2luLnByb3RvdHlwZSA9IG5ldyBUd2VlblBsdWdpbihcImNzc1wiKTtcblxuXHRcdHAuY29uc3RydWN0b3IgPSBDU1NQbHVnaW47XG5cdFx0Q1NTUGx1Z2luLnZlcnNpb24gPSBcIjEuMTguMFwiO1xuXHRcdENTU1BsdWdpbi5BUEkgPSAyO1xuXHRcdENTU1BsdWdpbi5kZWZhdWx0VHJhbnNmb3JtUGVyc3BlY3RpdmUgPSAwO1xuXHRcdENTU1BsdWdpbi5kZWZhdWx0U2tld1R5cGUgPSBcImNvbXBlbnNhdGVkXCI7XG5cdFx0Q1NTUGx1Z2luLmRlZmF1bHRTbW9vdGhPcmlnaW4gPSB0cnVlO1xuXHRcdHAgPSBcInB4XCI7IC8vd2UnbGwgcmV1c2UgdGhlIFwicFwiIHZhcmlhYmxlIHRvIGtlZXAgZmlsZSBzaXplIGRvd25cblx0XHRDU1NQbHVnaW4uc3VmZml4TWFwID0ge3RvcDpwLCByaWdodDpwLCBib3R0b206cCwgbGVmdDpwLCB3aWR0aDpwLCBoZWlnaHQ6cCwgZm9udFNpemU6cCwgcGFkZGluZzpwLCBtYXJnaW46cCwgcGVyc3BlY3RpdmU6cCwgbGluZUhlaWdodDpcIlwifTtcblxuXG5cdFx0dmFyIF9udW1FeHAgPSAvKD86XFxkfFxcLVxcZHxcXC5cXGR8XFwtXFwuXFxkKSsvZyxcblx0XHRcdF9yZWxOdW1FeHAgPSAvKD86XFxkfFxcLVxcZHxcXC5cXGR8XFwtXFwuXFxkfFxcKz1cXGR8XFwtPVxcZHxcXCs9LlxcZHxcXC09XFwuXFxkKSsvZyxcblx0XHRcdF92YWx1ZXNFeHAgPSAvKD86XFwrPXxcXC09fFxcLXxcXGIpW1xcZFxcLVxcLl0rW2EtekEtWjAtOV0qKD86JXxcXGIpL2dpLCAvL2ZpbmRzIGFsbCB0aGUgdmFsdWVzIHRoYXQgYmVnaW4gd2l0aCBudW1iZXJzIG9yICs9IG9yIC09IGFuZCB0aGVuIGEgbnVtYmVyLiBJbmNsdWRlcyBzdWZmaXhlcy4gV2UgdXNlIHRoaXMgdG8gc3BsaXQgY29tcGxleCB2YWx1ZXMgYXBhcnQgbGlrZSBcIjFweCA1cHggMjBweCByZ2IoMjU1LDEwMiw1MSlcIlxuXHRcdFx0X05hTkV4cCA9IC8oPyFbKy1dP1xcZCpcXC4/XFxkK3xbKy1dfGVbKy1dXFxkKylbXjAtOV0vZywgLy9hbHNvIGFsbG93cyBzY2llbnRpZmljIG5vdGF0aW9uIGFuZCBkb2Vzbid0IGtpbGwgdGhlIGxlYWRpbmcgLS8rIGluIC09IGFuZCArPVxuXHRcdFx0X3N1ZmZpeEV4cCA9IC8oPzpcXGR8XFwtfFxcK3w9fCN8XFwuKSovZyxcblx0XHRcdF9vcGFjaXR5RXhwID0gL29wYWNpdHkgKj0gKihbXildKikvaSxcblx0XHRcdF9vcGFjaXR5VmFsRXhwID0gL29wYWNpdHk6KFteO10qKS9pLFxuXHRcdFx0X2FscGhhRmlsdGVyRXhwID0gL2FscGhhXFwob3BhY2l0eSAqPS4rP1xcKS9pLFxuXHRcdFx0X3JnYmhzbEV4cCA9IC9eKHJnYnxoc2wpLyxcblx0XHRcdF9jYXBzRXhwID0gLyhbQS1aXSkvZyxcblx0XHRcdF9jYW1lbEV4cCA9IC8tKFthLXpdKS9naSxcblx0XHRcdF91cmxFeHAgPSAvKF4oPzp1cmxcXChcXFwifHVybFxcKCkpfCg/OihcXFwiXFwpKSR8XFwpJCkvZ2ksIC8vZm9yIHB1bGxpbmcgb3V0IHVybHMgZnJvbSB1cmwoLi4uKSBvciB1cmwoXCIuLi5cIikgc3RyaW5ncyAoc29tZSBicm93c2VycyB3cmFwIHVybHMgaW4gcXVvdGVzLCBzb21lIGRvbid0IHdoZW4gcmVwb3J0aW5nIHRoaW5ncyBsaWtlIGJhY2tncm91bmRJbWFnZSlcblx0XHRcdF9jYW1lbEZ1bmMgPSBmdW5jdGlvbihzLCBnKSB7IHJldHVybiBnLnRvVXBwZXJDYXNlKCk7IH0sXG5cdFx0XHRfaG9yaXpFeHAgPSAvKD86TGVmdHxSaWdodHxXaWR0aCkvaSxcblx0XHRcdF9pZUdldE1hdHJpeEV4cCA9IC8oTTExfE0xMnxNMjF8TTIyKT1bXFxkXFwtXFwuZV0rL2dpLFxuXHRcdFx0X2llU2V0TWF0cml4RXhwID0gL3Byb2dpZFxcOkRYSW1hZ2VUcmFuc2Zvcm1cXC5NaWNyb3NvZnRcXC5NYXRyaXhcXCguKz9cXCkvaSxcblx0XHRcdF9jb21tYXNPdXRzaWRlUGFyZW5FeHAgPSAvLCg/PVteXFwpXSooPzpcXCh8JCkpL2dpLCAvL2ZpbmRzIGFueSBjb21tYXMgdGhhdCBhcmUgbm90IHdpdGhpbiBwYXJlbnRoZXNpc1xuXHRcdFx0X0RFRzJSQUQgPSBNYXRoLlBJIC8gMTgwLFxuXHRcdFx0X1JBRDJERUcgPSAxODAgLyBNYXRoLlBJLFxuXHRcdFx0X2ZvcmNlUFQgPSB7fSxcblx0XHRcdF9kb2MgPSBkb2N1bWVudCxcblx0XHRcdF9jcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24odHlwZSkge1xuXHRcdFx0XHRyZXR1cm4gX2RvYy5jcmVhdGVFbGVtZW50TlMgPyBfZG9jLmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIiwgdHlwZSkgOiBfZG9jLmNyZWF0ZUVsZW1lbnQodHlwZSk7XG5cdFx0XHR9LFxuXHRcdFx0X3RlbXBEaXYgPSBfY3JlYXRlRWxlbWVudChcImRpdlwiKSxcblx0XHRcdF90ZW1wSW1nID0gX2NyZWF0ZUVsZW1lbnQoXCJpbWdcIiksXG5cdFx0XHRfaW50ZXJuYWxzID0gQ1NTUGx1Z2luLl9pbnRlcm5hbHMgPSB7X3NwZWNpYWxQcm9wczpfc3BlY2lhbFByb3BzfSwgLy9wcm92aWRlcyBhIGhvb2sgdG8gYSBmZXcgaW50ZXJuYWwgbWV0aG9kcyB0aGF0IHdlIG5lZWQgdG8gYWNjZXNzIGZyb20gaW5zaWRlIG90aGVyIHBsdWdpbnNcblx0XHRcdF9hZ2VudCA9IG5hdmlnYXRvci51c2VyQWdlbnQsXG5cdFx0XHRfYXV0b1JvdW5kLFxuXHRcdFx0X3JlcVNhZmFyaUZpeCwgLy93ZSB3b24ndCBhcHBseSB0aGUgU2FmYXJpIHRyYW5zZm9ybSBmaXggdW50aWwgd2UgYWN0dWFsbHkgY29tZSBhY3Jvc3MgYSB0d2VlbiB0aGF0IGFmZmVjdHMgYSB0cmFuc2Zvcm0gcHJvcGVydHkgKHRvIG1haW50YWluIGJlc3QgcGVyZm9ybWFuY2UpLlxuXG5cdFx0XHRfaXNTYWZhcmksXG5cdFx0XHRfaXNGaXJlZm94LCAvL0ZpcmVmb3ggaGFzIGEgYnVnIHRoYXQgY2F1c2VzIDNEIHRyYW5zZm9ybWVkIGVsZW1lbnRzIHRvIHJhbmRvbWx5IGRpc2FwcGVhciB1bmxlc3MgYSByZXBhaW50IGlzIGZvcmNlZCBhZnRlciBlYWNoIHVwZGF0ZSBvbiBlYWNoIGVsZW1lbnQuXG5cdFx0XHRfaXNTYWZhcmlMVDYsIC8vU2FmYXJpIChhbmQgQW5kcm9pZCA0IHdoaWNoIHVzZXMgYSBmbGF2b3Igb2YgU2FmYXJpKSBoYXMgYSBidWcgdGhhdCBwcmV2ZW50cyBjaGFuZ2VzIHRvIFwidG9wXCIgYW5kIFwibGVmdFwiIHByb3BlcnRpZXMgZnJvbSByZW5kZXJpbmcgcHJvcGVybHkgaWYgY2hhbmdlZCBvbiB0aGUgc2FtZSBmcmFtZSBhcyBhIHRyYW5zZm9ybSBVTkxFU1Mgd2Ugc2V0IHRoZSBlbGVtZW50J3MgV2Via2l0QmFja2ZhY2VWaXNpYmlsaXR5IHRvIGhpZGRlbiAod2VpcmQsIEkga25vdykuIERvaW5nIHRoaXMgZm9yIEFuZHJvaWQgMyBhbmQgZWFybGllciBzZWVtcyB0byBhY3R1YWxseSBjYXVzZSBvdGhlciBwcm9ibGVtcywgdGhvdWdoIChmdW4hKVxuXHRcdFx0X2llVmVycyxcblx0XHRcdF9zdXBwb3J0c09wYWNpdHkgPSAoZnVuY3Rpb24oKSB7IC8vd2Ugc2V0IF9pc1NhZmFyaSwgX2llVmVycywgX2lzRmlyZWZveCwgYW5kIF9zdXBwb3J0c09wYWNpdHkgYWxsIGluIG9uZSBmdW5jdGlvbiBoZXJlIHRvIHJlZHVjZSBmaWxlIHNpemUgc2xpZ2h0bHksIGVzcGVjaWFsbHkgaW4gdGhlIG1pbmlmaWVkIHZlcnNpb24uXG5cdFx0XHRcdHZhciBpID0gX2FnZW50LmluZGV4T2YoXCJBbmRyb2lkXCIpLFxuXHRcdFx0XHRcdGEgPSBfY3JlYXRlRWxlbWVudChcImFcIik7XG5cdFx0XHRcdF9pc1NhZmFyaSA9IChfYWdlbnQuaW5kZXhPZihcIlNhZmFyaVwiKSAhPT0gLTEgJiYgX2FnZW50LmluZGV4T2YoXCJDaHJvbWVcIikgPT09IC0xICYmIChpID09PSAtMSB8fCBOdW1iZXIoX2FnZW50LnN1YnN0cihpKzgsIDEpKSA+IDMpKTtcblx0XHRcdFx0X2lzU2FmYXJpTFQ2ID0gKF9pc1NhZmFyaSAmJiAoTnVtYmVyKF9hZ2VudC5zdWJzdHIoX2FnZW50LmluZGV4T2YoXCJWZXJzaW9uL1wiKSs4LCAxKSkgPCA2KSk7XG5cdFx0XHRcdF9pc0ZpcmVmb3ggPSAoX2FnZW50LmluZGV4T2YoXCJGaXJlZm94XCIpICE9PSAtMSk7XG5cdFx0XHRcdGlmICgoL01TSUUgKFswLTldezEsfVtcXC4wLTldezAsfSkvKS5leGVjKF9hZ2VudCkgfHwgKC9UcmlkZW50XFwvLipydjooWzAtOV17MSx9W1xcLjAtOV17MCx9KS8pLmV4ZWMoX2FnZW50KSkge1xuXHRcdFx0XHRcdF9pZVZlcnMgPSBwYXJzZUZsb2F0KCBSZWdFeHAuJDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIWEpIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdFx0YS5zdHlsZS5jc3NUZXh0ID0gXCJ0b3A6MXB4O29wYWNpdHk6LjU1O1wiO1xuXHRcdFx0XHRyZXR1cm4gL14wLjU1Ly50ZXN0KGEuc3R5bGUub3BhY2l0eSk7XG5cdFx0XHR9KCkpLFxuXHRcdFx0X2dldElFT3BhY2l0eSA9IGZ1bmN0aW9uKHYpIHtcblx0XHRcdFx0cmV0dXJuIChfb3BhY2l0eUV4cC50ZXN0KCAoKHR5cGVvZih2KSA9PT0gXCJzdHJpbmdcIikgPyB2IDogKHYuY3VycmVudFN0eWxlID8gdi5jdXJyZW50U3R5bGUuZmlsdGVyIDogdi5zdHlsZS5maWx0ZXIpIHx8IFwiXCIpICkgPyAoIHBhcnNlRmxvYXQoIFJlZ0V4cC4kMSApIC8gMTAwICkgOiAxKTtcblx0XHRcdH0sXG5cdFx0XHRfbG9nID0gZnVuY3Rpb24ocykgey8vZm9yIGxvZ2dpbmcgbWVzc2FnZXMsIGJ1dCBpbiBhIHdheSB0aGF0IHdvbid0IHRocm93IGVycm9ycyBpbiBvbGQgdmVyc2lvbnMgb2YgSUUuXG5cdFx0XHRcdGlmICh3aW5kb3cuY29uc29sZSkge1xuXHRcdFx0XHRcdGNvbnNvbGUubG9nKHMpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRfcHJlZml4Q1NTID0gXCJcIiwgLy90aGUgbm9uLWNhbWVsQ2FzZSB2ZW5kb3IgcHJlZml4IGxpa2UgXCItby1cIiwgXCItbW96LVwiLCBcIi1tcy1cIiwgb3IgXCItd2Via2l0LVwiXG5cdFx0XHRfcHJlZml4ID0gXCJcIiwgLy9jYW1lbENhc2UgdmVuZG9yIHByZWZpeCBsaWtlIFwiT1wiLCBcIm1zXCIsIFwiV2Via2l0XCIsIG9yIFwiTW96XCIuXG5cblx0XHRcdC8vIEBwcml2YXRlIGZlZWQgaW4gYSBjYW1lbENhc2UgcHJvcGVydHkgbmFtZSBsaWtlIFwidHJhbnNmb3JtXCIgYW5kIGl0IHdpbGwgY2hlY2sgdG8gc2VlIGlmIGl0IGlzIHZhbGlkIGFzLWlzIG9yIGlmIGl0IG5lZWRzIGEgdmVuZG9yIHByZWZpeC4gSXQgcmV0dXJucyB0aGUgY29ycmVjdGVkIGNhbWVsQ2FzZSBwcm9wZXJ0eSBuYW1lIChpLmUuIFwiV2Via2l0VHJhbnNmb3JtXCIgb3IgXCJNb3pUcmFuc2Zvcm1cIiBvciBcInRyYW5zZm9ybVwiIG9yIG51bGwgaWYgbm8gc3VjaCBwcm9wZXJ0eSBpcyBmb3VuZCwgbGlrZSBpZiB0aGUgYnJvd3NlciBpcyBJRTggb3IgYmVmb3JlLCBcInRyYW5zZm9ybVwiIHdvbid0IGJlIGZvdW5kIGF0IGFsbClcblx0XHRcdF9jaGVja1Byb3BQcmVmaXggPSBmdW5jdGlvbihwLCBlKSB7XG5cdFx0XHRcdGUgPSBlIHx8IF90ZW1wRGl2O1xuXHRcdFx0XHR2YXIgcyA9IGUuc3R5bGUsXG5cdFx0XHRcdFx0YSwgaTtcblx0XHRcdFx0aWYgKHNbcF0gIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdHJldHVybiBwO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHAgPSBwLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcC5zdWJzdHIoMSk7XG5cdFx0XHRcdGEgPSBbXCJPXCIsXCJNb3pcIixcIm1zXCIsXCJNc1wiLFwiV2Via2l0XCJdO1xuXHRcdFx0XHRpID0gNTtcblx0XHRcdFx0d2hpbGUgKC0taSA+IC0xICYmIHNbYVtpXStwXSA9PT0gdW5kZWZpbmVkKSB7IH1cblx0XHRcdFx0aWYgKGkgPj0gMCkge1xuXHRcdFx0XHRcdF9wcmVmaXggPSAoaSA9PT0gMykgPyBcIm1zXCIgOiBhW2ldO1xuXHRcdFx0XHRcdF9wcmVmaXhDU1MgPSBcIi1cIiArIF9wcmVmaXgudG9Mb3dlckNhc2UoKSArIFwiLVwiO1xuXHRcdFx0XHRcdHJldHVybiBfcHJlZml4ICsgcDtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH0sXG5cblx0XHRcdF9nZXRDb21wdXRlZFN0eWxlID0gX2RvYy5kZWZhdWx0VmlldyA/IF9kb2MuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSA6IGZ1bmN0aW9uKCkge30sXG5cblx0XHRcdC8qKlxuXHRcdFx0ICogQHByaXZhdGUgUmV0dXJucyB0aGUgY3NzIHN0eWxlIGZvciBhIHBhcnRpY3VsYXIgcHJvcGVydHkgb2YgYW4gZWxlbWVudC4gRm9yIGV4YW1wbGUsIHRvIGdldCB3aGF0ZXZlciB0aGUgY3VycmVudCBcImxlZnRcIiBjc3MgdmFsdWUgZm9yIGFuIGVsZW1lbnQgd2l0aCBhbiBJRCBvZiBcIm15RWxlbWVudFwiLCB5b3UgY291bGQgZG86XG5cdFx0XHQgKiB2YXIgY3VycmVudExlZnQgPSBDU1NQbHVnaW4uZ2V0U3R5bGUoIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibXlFbGVtZW50XCIpLCBcImxlZnRcIik7XG5cdFx0XHQgKlxuXHRcdFx0ICogQHBhcmFtIHshT2JqZWN0fSB0IFRhcmdldCBlbGVtZW50IHdob3NlIHN0eWxlIHByb3BlcnR5IHlvdSB3YW50IHRvIHF1ZXJ5XG5cdFx0XHQgKiBAcGFyYW0geyFzdHJpbmd9IHAgUHJvcGVydHkgbmFtZSAobGlrZSBcImxlZnRcIiBvciBcInRvcFwiIG9yIFwibWFyZ2luVG9wXCIsIGV0Yy4pXG5cdFx0XHQgKiBAcGFyYW0ge09iamVjdD19IGNzIENvbXB1dGVkIHN0eWxlIG9iamVjdC4gVGhpcyBqdXN0IHByb3ZpZGVzIGEgd2F5IHRvIHNwZWVkIHByb2Nlc3NpbmcgaWYgeW91J3JlIGdvaW5nIHRvIGdldCBzZXZlcmFsIHByb3BlcnRpZXMgb24gdGhlIHNhbWUgZWxlbWVudCBpbiBxdWljayBzdWNjZXNzaW9uIC0geW91IGNhbiByZXVzZSB0aGUgcmVzdWx0IG9mIHRoZSBnZXRDb21wdXRlZFN0eWxlKCkgY2FsbC5cblx0XHRcdCAqIEBwYXJhbSB7Ym9vbGVhbj19IGNhbGMgSWYgdHJ1ZSwgdGhlIHZhbHVlIHdpbGwgbm90IGJlIHJlYWQgZGlyZWN0bHkgZnJvbSB0aGUgZWxlbWVudCdzIFwic3R5bGVcIiBwcm9wZXJ0eSAoaWYgaXQgZXhpc3RzIHRoZXJlKSwgYnV0IGluc3RlYWQgdGhlIGdldENvbXB1dGVkU3R5bGUoKSByZXN1bHQgd2lsbCBiZSB1c2VkLiBUaGlzIGNhbiBiZSB1c2VmdWwgd2hlbiB5b3Ugd2FudCB0byBlbnN1cmUgdGhhdCB0aGUgYnJvd3NlciBpdHNlbGYgaXMgaW50ZXJwcmV0aW5nIHRoZSB2YWx1ZS5cblx0XHRcdCAqIEBwYXJhbSB7c3RyaW5nPX0gZGZsdCBEZWZhdWx0IHZhbHVlIHRoYXQgc2hvdWxkIGJlIHJldHVybmVkIGluIHRoZSBwbGFjZSBvZiBudWxsLCBcIm5vbmVcIiwgXCJhdXRvXCIgb3IgXCJhdXRvIGF1dG9cIi5cblx0XHRcdCAqIEByZXR1cm4gez9zdHJpbmd9IFRoZSBjdXJyZW50IHByb3BlcnR5IHZhbHVlXG5cdFx0XHQgKi9cblx0XHRcdF9nZXRTdHlsZSA9IENTU1BsdWdpbi5nZXRTdHlsZSA9IGZ1bmN0aW9uKHQsIHAsIGNzLCBjYWxjLCBkZmx0KSB7XG5cdFx0XHRcdHZhciBydjtcblx0XHRcdFx0aWYgKCFfc3VwcG9ydHNPcGFjaXR5KSBpZiAocCA9PT0gXCJvcGFjaXR5XCIpIHsgLy9zZXZlcmFsIHZlcnNpb25zIG9mIElFIGRvbid0IHVzZSB0aGUgc3RhbmRhcmQgXCJvcGFjaXR5XCIgcHJvcGVydHkgLSB0aGV5IHVzZSB0aGluZ3MgbGlrZSBmaWx0ZXI6YWxwaGEob3BhY2l0eT01MCksIHNvIHdlIHBhcnNlIHRoYXQgaGVyZS5cblx0XHRcdFx0XHRyZXR1cm4gX2dldElFT3BhY2l0eSh0KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIWNhbGMgJiYgdC5zdHlsZVtwXSkge1xuXHRcdFx0XHRcdHJ2ID0gdC5zdHlsZVtwXTtcblx0XHRcdFx0fSBlbHNlIGlmICgoY3MgPSBjcyB8fCBfZ2V0Q29tcHV0ZWRTdHlsZSh0KSkpIHtcblx0XHRcdFx0XHRydiA9IGNzW3BdIHx8IGNzLmdldFByb3BlcnR5VmFsdWUocCkgfHwgY3MuZ2V0UHJvcGVydHlWYWx1ZShwLnJlcGxhY2UoX2NhcHNFeHAsIFwiLSQxXCIpLnRvTG93ZXJDYXNlKCkpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHQuY3VycmVudFN0eWxlKSB7XG5cdFx0XHRcdFx0cnYgPSB0LmN1cnJlbnRTdHlsZVtwXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gKGRmbHQgIT0gbnVsbCAmJiAoIXJ2IHx8IHJ2ID09PSBcIm5vbmVcIiB8fCBydiA9PT0gXCJhdXRvXCIgfHwgcnYgPT09IFwiYXV0byBhdXRvXCIpKSA/IGRmbHQgOiBydjtcblx0XHRcdH0sXG5cblx0XHRcdC8qKlxuXHRcdFx0ICogQHByaXZhdGUgUGFzcyB0aGUgdGFyZ2V0IGVsZW1lbnQsIHRoZSBwcm9wZXJ0eSBuYW1lLCB0aGUgbnVtZXJpYyB2YWx1ZSwgYW5kIHRoZSBzdWZmaXggKGxpa2UgXCIlXCIsIFwiZW1cIiwgXCJweFwiLCBldGMuKSBhbmQgaXQgd2lsbCBzcGl0IGJhY2sgdGhlIGVxdWl2YWxlbnQgcGl4ZWwgbnVtYmVyLlxuXHRcdFx0ICogQHBhcmFtIHshT2JqZWN0fSB0IFRhcmdldCBlbGVtZW50XG5cdFx0XHQgKiBAcGFyYW0geyFzdHJpbmd9IHAgUHJvcGVydHkgbmFtZSAobGlrZSBcImxlZnRcIiwgXCJ0b3BcIiwgXCJtYXJnaW5MZWZ0XCIsIGV0Yy4pXG5cdFx0XHQgKiBAcGFyYW0geyFudW1iZXJ9IHYgVmFsdWVcblx0XHRcdCAqIEBwYXJhbSB7c3RyaW5nPX0gc2Z4IFN1ZmZpeCAobGlrZSBcInB4XCIgb3IgXCIlXCIgb3IgXCJlbVwiKVxuXHRcdFx0ICogQHBhcmFtIHtib29sZWFuPX0gcmVjdXJzZSBJZiB0cnVlLCB0aGUgY2FsbCBpcyBhIHJlY3Vyc2l2ZSBvbmUuIEluIHNvbWUgYnJvd3NlcnMgKGxpa2UgSUU3LzgpLCBvY2Nhc2lvbmFsbHkgdGhlIHZhbHVlIGlzbid0IGFjY3VyYXRlbHkgcmVwb3J0ZWQgaW5pdGlhbGx5LCBidXQgaWYgd2UgcnVuIHRoZSBmdW5jdGlvbiBhZ2FpbiBpdCB3aWxsIHRha2UgZWZmZWN0LlxuXHRcdFx0ICogQHJldHVybiB7bnVtYmVyfSB2YWx1ZSBpbiBwaXhlbHNcblx0XHRcdCAqL1xuXHRcdFx0X2NvbnZlcnRUb1BpeGVscyA9IF9pbnRlcm5hbHMuY29udmVydFRvUGl4ZWxzID0gZnVuY3Rpb24odCwgcCwgdiwgc2Z4LCByZWN1cnNlKSB7XG5cdFx0XHRcdGlmIChzZnggPT09IFwicHhcIiB8fCAhc2Z4KSB7IHJldHVybiB2OyB9XG5cdFx0XHRcdGlmIChzZnggPT09IFwiYXV0b1wiIHx8ICF2KSB7IHJldHVybiAwOyB9XG5cdFx0XHRcdHZhciBob3JpeiA9IF9ob3JpekV4cC50ZXN0KHApLFxuXHRcdFx0XHRcdG5vZGUgPSB0LFxuXHRcdFx0XHRcdHN0eWxlID0gX3RlbXBEaXYuc3R5bGUsXG5cdFx0XHRcdFx0bmVnID0gKHYgPCAwKSxcblx0XHRcdFx0XHRwaXgsIGNhY2hlLCB0aW1lO1xuXHRcdFx0XHRpZiAobmVnKSB7XG5cdFx0XHRcdFx0diA9IC12O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChzZnggPT09IFwiJVwiICYmIHAuaW5kZXhPZihcImJvcmRlclwiKSAhPT0gLTEpIHtcblx0XHRcdFx0XHRwaXggPSAodiAvIDEwMCkgKiAoaG9yaXogPyB0LmNsaWVudFdpZHRoIDogdC5jbGllbnRIZWlnaHQpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0eWxlLmNzc1RleHQgPSBcImJvcmRlcjowIHNvbGlkIHJlZDtwb3NpdGlvbjpcIiArIF9nZXRTdHlsZSh0LCBcInBvc2l0aW9uXCIpICsgXCI7bGluZS1oZWlnaHQ6MDtcIjtcblx0XHRcdFx0XHRpZiAoc2Z4ID09PSBcIiVcIiB8fCAhbm9kZS5hcHBlbmRDaGlsZCB8fCBzZnguY2hhckF0KDApID09PSBcInZcIiB8fCBzZnggPT09IFwicmVtXCIpIHtcblx0XHRcdFx0XHRcdG5vZGUgPSB0LnBhcmVudE5vZGUgfHwgX2RvYy5ib2R5O1xuXHRcdFx0XHRcdFx0Y2FjaGUgPSBub2RlLl9nc0NhY2hlO1xuXHRcdFx0XHRcdFx0dGltZSA9IFR3ZWVuTGl0ZS50aWNrZXIuZnJhbWU7XG5cdFx0XHRcdFx0XHRpZiAoY2FjaGUgJiYgaG9yaXogJiYgY2FjaGUudGltZSA9PT0gdGltZSkgeyAvL3BlcmZvcm1hbmNlIG9wdGltaXphdGlvbjogd2UgcmVjb3JkIHRoZSB3aWR0aCBvZiBlbGVtZW50cyBhbG9uZyB3aXRoIHRoZSB0aWNrZXIgZnJhbWUgc28gdGhhdCB3ZSBjYW4gcXVpY2tseSBnZXQgaXQgYWdhaW4gb24gdGhlIHNhbWUgdGljayAoc2VlbXMgcmVsYXRpdmVseSBzYWZlIHRvIGFzc3VtZSBpdCB3b3VsZG4ndCBjaGFuZ2Ugb24gdGhlIHNhbWUgdGljaylcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGNhY2hlLndpZHRoICogdiAvIDEwMDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHN0eWxlWyhob3JpeiA/IFwid2lkdGhcIiA6IFwiaGVpZ2h0XCIpXSA9IHYgKyBzZng7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHN0eWxlWyhob3JpeiA/IFwiYm9yZGVyTGVmdFdpZHRoXCIgOiBcImJvcmRlclRvcFdpZHRoXCIpXSA9IHYgKyBzZng7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG5vZGUuYXBwZW5kQ2hpbGQoX3RlbXBEaXYpO1xuXHRcdFx0XHRcdHBpeCA9IHBhcnNlRmxvYXQoX3RlbXBEaXZbKGhvcml6ID8gXCJvZmZzZXRXaWR0aFwiIDogXCJvZmZzZXRIZWlnaHRcIildKTtcblx0XHRcdFx0XHRub2RlLnJlbW92ZUNoaWxkKF90ZW1wRGl2KTtcblx0XHRcdFx0XHRpZiAoaG9yaXogJiYgc2Z4ID09PSBcIiVcIiAmJiBDU1NQbHVnaW4uY2FjaGVXaWR0aHMgIT09IGZhbHNlKSB7XG5cdFx0XHRcdFx0XHRjYWNoZSA9IG5vZGUuX2dzQ2FjaGUgPSBub2RlLl9nc0NhY2hlIHx8IHt9O1xuXHRcdFx0XHRcdFx0Y2FjaGUudGltZSA9IHRpbWU7XG5cdFx0XHRcdFx0XHRjYWNoZS53aWR0aCA9IHBpeCAvIHYgKiAxMDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChwaXggPT09IDAgJiYgIXJlY3Vyc2UpIHtcblx0XHRcdFx0XHRcdHBpeCA9IF9jb252ZXJ0VG9QaXhlbHModCwgcCwgdiwgc2Z4LCB0cnVlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIG5lZyA/IC1waXggOiBwaXg7XG5cdFx0XHR9LFxuXHRcdFx0X2NhbGN1bGF0ZU9mZnNldCA9IF9pbnRlcm5hbHMuY2FsY3VsYXRlT2Zmc2V0ID0gZnVuY3Rpb24odCwgcCwgY3MpIHsgLy9mb3IgZmlndXJpbmcgb3V0IFwidG9wXCIgb3IgXCJsZWZ0XCIgaW4gcHggd2hlbiBpdCdzIFwiYXV0b1wiLiBXZSBuZWVkIHRvIGZhY3RvciBpbiBtYXJnaW4gd2l0aCB0aGUgb2Zmc2V0TGVmdC9vZmZzZXRUb3Bcblx0XHRcdFx0aWYgKF9nZXRTdHlsZSh0LCBcInBvc2l0aW9uXCIsIGNzKSAhPT0gXCJhYnNvbHV0ZVwiKSB7IHJldHVybiAwOyB9XG5cdFx0XHRcdHZhciBkaW0gPSAoKHAgPT09IFwibGVmdFwiKSA/IFwiTGVmdFwiIDogXCJUb3BcIiksXG5cdFx0XHRcdFx0diA9IF9nZXRTdHlsZSh0LCBcIm1hcmdpblwiICsgZGltLCBjcyk7XG5cdFx0XHRcdHJldHVybiB0W1wib2Zmc2V0XCIgKyBkaW1dIC0gKF9jb252ZXJ0VG9QaXhlbHModCwgcCwgcGFyc2VGbG9hdCh2KSwgdi5yZXBsYWNlKF9zdWZmaXhFeHAsIFwiXCIpKSB8fCAwKTtcblx0XHRcdH0sXG5cblx0XHRcdC8vIEBwcml2YXRlIHJldHVybnMgYXQgb2JqZWN0IGNvbnRhaW5pbmcgQUxMIG9mIHRoZSBzdHlsZSBwcm9wZXJ0aWVzIGluIGNhbWVsQ2FzZSBhbmQgdGhlaXIgYXNzb2NpYXRlZCB2YWx1ZXMuXG5cdFx0XHRfZ2V0QWxsU3R5bGVzID0gZnVuY3Rpb24odCwgY3MpIHtcblx0XHRcdFx0dmFyIHMgPSB7fSxcblx0XHRcdFx0XHRpLCB0ciwgcDtcblx0XHRcdFx0aWYgKChjcyA9IGNzIHx8IF9nZXRDb21wdXRlZFN0eWxlKHQsIG51bGwpKSkge1xuXHRcdFx0XHRcdGlmICgoaSA9IGNzLmxlbmd0aCkpIHtcblx0XHRcdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdFx0XHRwID0gY3NbaV07XG5cdFx0XHRcdFx0XHRcdGlmIChwLmluZGV4T2YoXCItdHJhbnNmb3JtXCIpID09PSAtMSB8fCBfdHJhbnNmb3JtUHJvcENTUyA9PT0gcCkgeyAvL1NvbWUgd2Via2l0IGJyb3dzZXJzIGR1cGxpY2F0ZSB0cmFuc2Zvcm0gdmFsdWVzLCBvbmUgbm9uLXByZWZpeGVkIGFuZCBvbmUgcHJlZml4ZWQgKFwidHJhbnNmb3JtXCIgYW5kIFwiV2Via2l0VHJhbnNmb3JtXCIpLCBzbyB3ZSBtdXN0IHdlZWQgb3V0IHRoZSBleHRyYSBvbmUgaGVyZS5cblx0XHRcdFx0XHRcdFx0XHRzW3AucmVwbGFjZShfY2FtZWxFeHAsIF9jYW1lbEZ1bmMpXSA9IGNzLmdldFByb3BlcnR5VmFsdWUocCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2UgeyAvL3NvbWUgYnJvd3NlcnMgYmVoYXZlIGRpZmZlcmVudGx5IC0gY3MubGVuZ3RoIGlzIGFsd2F5cyAwLCBzbyB3ZSBtdXN0IGRvIGEgZm9yLi4uaW4gbG9vcC5cblx0XHRcdFx0XHRcdGZvciAoaSBpbiBjcykge1xuXHRcdFx0XHRcdFx0XHRpZiAoaS5pbmRleE9mKFwiVHJhbnNmb3JtXCIpID09PSAtMSB8fCBfdHJhbnNmb3JtUHJvcCA9PT0gaSkgeyAvL1NvbWUgd2Via2l0IGJyb3dzZXJzIGR1cGxpY2F0ZSB0cmFuc2Zvcm0gdmFsdWVzLCBvbmUgbm9uLXByZWZpeGVkIGFuZCBvbmUgcHJlZml4ZWQgKFwidHJhbnNmb3JtXCIgYW5kIFwiV2Via2l0VHJhbnNmb3JtXCIpLCBzbyB3ZSBtdXN0IHdlZWQgb3V0IHRoZSBleHRyYSBvbmUgaGVyZS5cblx0XHRcdFx0XHRcdFx0XHRzW2ldID0gY3NbaV07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSBpZiAoKGNzID0gdC5jdXJyZW50U3R5bGUgfHwgdC5zdHlsZSkpIHtcblx0XHRcdFx0XHRmb3IgKGkgaW4gY3MpIHtcblx0XHRcdFx0XHRcdGlmICh0eXBlb2YoaSkgPT09IFwic3RyaW5nXCIgJiYgc1tpXSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHRcdHNbaS5yZXBsYWNlKF9jYW1lbEV4cCwgX2NhbWVsRnVuYyldID0gY3NbaV07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICghX3N1cHBvcnRzT3BhY2l0eSkge1xuXHRcdFx0XHRcdHMub3BhY2l0eSA9IF9nZXRJRU9wYWNpdHkodCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dHIgPSBfZ2V0VHJhbnNmb3JtKHQsIGNzLCBmYWxzZSk7XG5cdFx0XHRcdHMucm90YXRpb24gPSB0ci5yb3RhdGlvbjtcblx0XHRcdFx0cy5za2V3WCA9IHRyLnNrZXdYO1xuXHRcdFx0XHRzLnNjYWxlWCA9IHRyLnNjYWxlWDtcblx0XHRcdFx0cy5zY2FsZVkgPSB0ci5zY2FsZVk7XG5cdFx0XHRcdHMueCA9IHRyLng7XG5cdFx0XHRcdHMueSA9IHRyLnk7XG5cdFx0XHRcdGlmIChfc3VwcG9ydHMzRCkge1xuXHRcdFx0XHRcdHMueiA9IHRyLno7XG5cdFx0XHRcdFx0cy5yb3RhdGlvblggPSB0ci5yb3RhdGlvblg7XG5cdFx0XHRcdFx0cy5yb3RhdGlvblkgPSB0ci5yb3RhdGlvblk7XG5cdFx0XHRcdFx0cy5zY2FsZVogPSB0ci5zY2FsZVo7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHMuZmlsdGVycykge1xuXHRcdFx0XHRcdGRlbGV0ZSBzLmZpbHRlcnM7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBAcHJpdmF0ZSBhbmFseXplcyB0d28gc3R5bGUgb2JqZWN0cyAoYXMgcmV0dXJuZWQgYnkgX2dldEFsbFN0eWxlcygpKSBhbmQgb25seSBsb29rcyBmb3IgZGlmZmVyZW5jZXMgYmV0d2VlbiB0aGVtIHRoYXQgY29udGFpbiB0d2VlbmFibGUgdmFsdWVzIChsaWtlIGEgbnVtYmVyIG9yIGNvbG9yKS4gSXQgcmV0dXJucyBhbiBvYmplY3Qgd2l0aCBhIFwiZGlmc1wiIHByb3BlcnR5IHdoaWNoIHJlZmVycyB0byBhbiBvYmplY3QgY29udGFpbmluZyBvbmx5IHRob3NlIGlzb2xhdGVkIHByb3BlcnRpZXMgYW5kIHZhbHVlcyBmb3IgdHdlZW5pbmcsIGFuZCBhIFwiZmlyc3RNUFRcIiBwcm9wZXJ0eSB3aGljaCByZWZlcnMgdG8gdGhlIGZpcnN0IE1pbmlQcm9wVHdlZW4gaW5zdGFuY2UgaW4gYSBsaW5rZWQgbGlzdCB0aGF0IHJlY29yZGVkIGFsbCB0aGUgc3RhcnRpbmcgdmFsdWVzIG9mIHRoZSBkaWZmZXJlbnQgcHJvcGVydGllcyBzbyB0aGF0IHdlIGNhbiByZXZlcnQgdG8gdGhlbSBhdCB0aGUgZW5kIG9yIGJlZ2lubmluZyBvZiB0aGUgdHdlZW4gLSB3ZSBkb24ndCB3YW50IHRoZSBjYXNjYWRpbmcgdG8gZ2V0IG1lc3NlZCB1cC4gVGhlIGZvcmNlTG9va3VwIHBhcmFtZXRlciBpcyBhbiBvcHRpb25hbCBnZW5lcmljIG9iamVjdCB3aXRoIHByb3BlcnRpZXMgdGhhdCBzaG91bGQgYmUgZm9yY2VkIGludG8gdGhlIHJlc3VsdHMgLSB0aGlzIGlzIG5lY2Vzc2FyeSBmb3IgY2xhc3NOYW1lIHR3ZWVucyB0aGF0IGFyZSBvdmVyd3JpdGluZyBvdGhlcnMgYmVjYXVzZSBpbWFnaW5lIGEgc2NlbmFyaW8gd2hlcmUgYSByb2xsb3Zlci9yb2xsb3V0IGFkZHMvcmVtb3ZlcyBhIGNsYXNzIGFuZCB0aGUgdXNlciBzd2lwZXMgdGhlIG1vdXNlIG92ZXIgdGhlIHRhcmdldCBTVVBFUiBmYXN0LCB0aHVzIG5vdGhpbmcgYWN0dWFsbHkgY2hhbmdlZCB5ZXQgYW5kIHRoZSBzdWJzZXF1ZW50IGNvbXBhcmlzb24gb2YgdGhlIHByb3BlcnRpZXMgd291bGQgaW5kaWNhdGUgdGhleSBtYXRjaCAoZXNwZWNpYWxseSB3aGVuIHB4IHJvdW5kaW5nIGlzIHRha2VuIGludG8gY29uc2lkZXJhdGlvbiksIHRodXMgbm8gdHdlZW5pbmcgaXMgbmVjZXNzYXJ5IGV2ZW4gdGhvdWdoIGl0IFNIT1VMRCB0d2VlbiBhbmQgcmVtb3ZlIHRob3NlIHByb3BlcnRpZXMgYWZ0ZXIgdGhlIHR3ZWVuIChvdGhlcndpc2UgdGhlIGlubGluZSBzdHlsZXMgd2lsbCBjb250YW1pbmF0ZSB0aGluZ3MpLiBTZWUgdGhlIGNsYXNzTmFtZSBTcGVjaWFsUHJvcCBjb2RlIGZvciBkZXRhaWxzLlxuXHRcdFx0X2Nzc0RpZiA9IGZ1bmN0aW9uKHQsIHMxLCBzMiwgdmFycywgZm9yY2VMb29rdXApIHtcblx0XHRcdFx0dmFyIGRpZnMgPSB7fSxcblx0XHRcdFx0XHRzdHlsZSA9IHQuc3R5bGUsXG5cdFx0XHRcdFx0dmFsLCBwLCBtcHQ7XG5cdFx0XHRcdGZvciAocCBpbiBzMikge1xuXHRcdFx0XHRcdGlmIChwICE9PSBcImNzc1RleHRcIikgaWYgKHAgIT09IFwibGVuZ3RoXCIpIGlmIChpc05hTihwKSkgaWYgKHMxW3BdICE9PSAodmFsID0gczJbcF0pIHx8IChmb3JjZUxvb2t1cCAmJiBmb3JjZUxvb2t1cFtwXSkpIGlmIChwLmluZGV4T2YoXCJPcmlnaW5cIikgPT09IC0xKSBpZiAodHlwZW9mKHZhbCkgPT09IFwibnVtYmVyXCIgfHwgdHlwZW9mKHZhbCkgPT09IFwic3RyaW5nXCIpIHtcblx0XHRcdFx0XHRcdGRpZnNbcF0gPSAodmFsID09PSBcImF1dG9cIiAmJiAocCA9PT0gXCJsZWZ0XCIgfHwgcCA9PT0gXCJ0b3BcIikpID8gX2NhbGN1bGF0ZU9mZnNldCh0LCBwKSA6ICgodmFsID09PSBcIlwiIHx8IHZhbCA9PT0gXCJhdXRvXCIgfHwgdmFsID09PSBcIm5vbmVcIikgJiYgdHlwZW9mKHMxW3BdKSA9PT0gXCJzdHJpbmdcIiAmJiBzMVtwXS5yZXBsYWNlKF9OYU5FeHAsIFwiXCIpICE9PSBcIlwiKSA/IDAgOiB2YWw7IC8vaWYgdGhlIGVuZGluZyB2YWx1ZSBpcyBkZWZhdWx0aW5nIChcIlwiIG9yIFwiYXV0b1wiKSwgd2UgY2hlY2sgdGhlIHN0YXJ0aW5nIHZhbHVlIGFuZCBpZiBpdCBjYW4gYmUgcGFyc2VkIGludG8gYSBudW1iZXIgKGEgc3RyaW5nIHdoaWNoIGNvdWxkIGhhdmUgYSBzdWZmaXggdG9vLCBsaWtlIDcwMHB4KSwgdGhlbiB3ZSBzd2FwIGluIDAgZm9yIFwiXCIgb3IgXCJhdXRvXCIgc28gdGhhdCB0aGluZ3MgYWN0dWFsbHkgdHdlZW4uXG5cdFx0XHRcdFx0XHRpZiAoc3R5bGVbcF0gIT09IHVuZGVmaW5lZCkgeyAvL2ZvciBjbGFzc05hbWUgdHdlZW5zLCB3ZSBtdXN0IHJlbWVtYmVyIHdoaWNoIHByb3BlcnRpZXMgYWxyZWFkeSBleGlzdGVkIGlubGluZSAtIHRoZSBvbmVzIHRoYXQgZGlkbid0IHNob3VsZCBiZSByZW1vdmVkIHdoZW4gdGhlIHR3ZWVuIGlzbid0IGluIHByb2dyZXNzIGJlY2F1c2UgdGhleSB3ZXJlIG9ubHkgaW50cm9kdWNlZCB0byBmYWNpbGl0YXRlIHRoZSB0cmFuc2l0aW9uIGJldHdlZW4gY2xhc3Nlcy5cblx0XHRcdFx0XHRcdFx0bXB0ID0gbmV3IE1pbmlQcm9wVHdlZW4oc3R5bGUsIHAsIHN0eWxlW3BdLCBtcHQpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodmFycykge1xuXHRcdFx0XHRcdGZvciAocCBpbiB2YXJzKSB7IC8vY29weSBwcm9wZXJ0aWVzIChleGNlcHQgY2xhc3NOYW1lKVxuXHRcdFx0XHRcdFx0aWYgKHAgIT09IFwiY2xhc3NOYW1lXCIpIHtcblx0XHRcdFx0XHRcdFx0ZGlmc1twXSA9IHZhcnNbcF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB7ZGlmczpkaWZzLCBmaXJzdE1QVDptcHR9O1xuXHRcdFx0fSxcblx0XHRcdF9kaW1lbnNpb25zID0ge3dpZHRoOltcIkxlZnRcIixcIlJpZ2h0XCJdLCBoZWlnaHQ6W1wiVG9wXCIsXCJCb3R0b21cIl19LFxuXHRcdFx0X21hcmdpbnMgPSBbXCJtYXJnaW5MZWZ0XCIsXCJtYXJnaW5SaWdodFwiLFwibWFyZ2luVG9wXCIsXCJtYXJnaW5Cb3R0b21cIl0sXG5cblx0XHRcdC8qKlxuXHRcdFx0ICogQHByaXZhdGUgR2V0cyB0aGUgd2lkdGggb3IgaGVpZ2h0IG9mIGFuIGVsZW1lbnRcblx0XHRcdCAqIEBwYXJhbSB7IU9iamVjdH0gdCBUYXJnZXQgZWxlbWVudFxuXHRcdFx0ICogQHBhcmFtIHshc3RyaW5nfSBwIFByb3BlcnR5IG5hbWUgKFwid2lkdGhcIiBvciBcImhlaWdodFwiKVxuXHRcdFx0ICogQHBhcmFtIHtPYmplY3Q9fSBjcyBDb21wdXRlZCBzdHlsZSBvYmplY3QgKGlmIG9uZSBleGlzdHMpLiBKdXN0IGEgc3BlZWQgb3B0aW1pemF0aW9uLlxuXHRcdFx0ICogQHJldHVybiB7bnVtYmVyfSBEaW1lbnNpb24gKGluIHBpeGVscylcblx0XHRcdCAqL1xuXHRcdFx0X2dldERpbWVuc2lvbiA9IGZ1bmN0aW9uKHQsIHAsIGNzKSB7XG5cdFx0XHRcdHZhciB2ID0gcGFyc2VGbG9hdCgocCA9PT0gXCJ3aWR0aFwiKSA/IHQub2Zmc2V0V2lkdGggOiB0Lm9mZnNldEhlaWdodCksXG5cdFx0XHRcdFx0YSA9IF9kaW1lbnNpb25zW3BdLFxuXHRcdFx0XHRcdGkgPSBhLmxlbmd0aDtcblx0XHRcdFx0Y3MgPSBjcyB8fCBfZ2V0Q29tcHV0ZWRTdHlsZSh0LCBudWxsKTtcblx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0diAtPSBwYXJzZUZsb2F0KCBfZ2V0U3R5bGUodCwgXCJwYWRkaW5nXCIgKyBhW2ldLCBjcywgdHJ1ZSkgKSB8fCAwO1xuXHRcdFx0XHRcdHYgLT0gcGFyc2VGbG9hdCggX2dldFN0eWxlKHQsIFwiYm9yZGVyXCIgKyBhW2ldICsgXCJXaWR0aFwiLCBjcywgdHJ1ZSkgKSB8fCAwO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2O1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQHByaXZhdGUgUGFyc2VzIHBvc2l0aW9uLXJlbGF0ZWQgY29tcGxleCBzdHJpbmdzIGxpa2UgXCJ0b3AgbGVmdFwiIG9yIFwiNTBweCAxMHB4XCIgb3IgXCI3MCUgMjAlXCIsIGV0Yy4gd2hpY2ggYXJlIHVzZWQgZm9yIHRoaW5ncyBsaWtlIHRyYW5zZm9ybU9yaWdpbiBvciBiYWNrZ3JvdW5kUG9zaXRpb24uIE9wdGlvbmFsbHkgZGVjb3JhdGVzIGEgc3VwcGxpZWQgb2JqZWN0IChyZWNPYmopIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOiBcIm94XCIgKG9mZnNldFgpLCBcIm95XCIgKG9mZnNldFkpLCBcIm94cFwiIChpZiB0cnVlLCBcIm94XCIgaXMgYSBwZXJjZW50YWdlIG5vdCBhIHBpeGVsIHZhbHVlKSwgYW5kIFwib3h5XCIgKGlmIHRydWUsIFwib3lcIiBpcyBhIHBlcmNlbnRhZ2Ugbm90IGEgcGl4ZWwgdmFsdWUpXG5cdFx0XHRfcGFyc2VQb3NpdGlvbiA9IGZ1bmN0aW9uKHYsIHJlY09iaikge1xuXHRcdFx0XHRpZiAodiA9PT0gXCJjb250YWluXCIgfHwgdiA9PT0gXCJhdXRvXCIgfHwgdiA9PT0gXCJhdXRvIGF1dG9cIikge1xuXHRcdFx0XHRcdHJldHVybiB2ICsgXCIgXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHYgPT0gbnVsbCB8fCB2ID09PSBcIlwiKSB7IC8vbm90ZTogRmlyZWZveCB1c2VzIFwiYXV0byBhdXRvXCIgYXMgZGVmYXVsdCB3aGVyZWFzIENocm9tZSB1c2VzIFwiYXV0b1wiLlxuXHRcdFx0XHRcdHYgPSBcIjAgMFwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHZhciBhID0gdi5zcGxpdChcIiBcIiksXG5cdFx0XHRcdFx0eCA9ICh2LmluZGV4T2YoXCJsZWZ0XCIpICE9PSAtMSkgPyBcIjAlXCIgOiAodi5pbmRleE9mKFwicmlnaHRcIikgIT09IC0xKSA/IFwiMTAwJVwiIDogYVswXSxcblx0XHRcdFx0XHR5ID0gKHYuaW5kZXhPZihcInRvcFwiKSAhPT0gLTEpID8gXCIwJVwiIDogKHYuaW5kZXhPZihcImJvdHRvbVwiKSAhPT0gLTEpID8gXCIxMDAlXCIgOiBhWzFdO1xuXHRcdFx0XHRpZiAoeSA9PSBudWxsKSB7XG5cdFx0XHRcdFx0eSA9ICh4ID09PSBcImNlbnRlclwiKSA/IFwiNTAlXCIgOiBcIjBcIjtcblx0XHRcdFx0fSBlbHNlIGlmICh5ID09PSBcImNlbnRlclwiKSB7XG5cdFx0XHRcdFx0eSA9IFwiNTAlXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHggPT09IFwiY2VudGVyXCIgfHwgKGlzTmFOKHBhcnNlRmxvYXQoeCkpICYmICh4ICsgXCJcIikuaW5kZXhPZihcIj1cIikgPT09IC0xKSkgeyAvL3JlbWVtYmVyLCB0aGUgdXNlciBjb3VsZCBmbGlwLWZsb3AgdGhlIHZhbHVlcyBhbmQgc2F5IFwiYm90dG9tIGNlbnRlclwiIG9yIFwiY2VudGVyIGJvdHRvbVwiLCBldGMuIFwiY2VudGVyXCIgaXMgYW1iaWd1b3VzIGJlY2F1c2UgaXQgY291bGQgYmUgdXNlZCB0byBkZXNjcmliZSBob3Jpem9udGFsIG9yIHZlcnRpY2FsLCBoZW5jZSB0aGUgaXNOYU4oKS4gSWYgdGhlcmUncyBhbiBcIj1cIiBzaWduIGluIHRoZSB2YWx1ZSwgaXQncyByZWxhdGl2ZS5cblx0XHRcdFx0XHR4ID0gXCI1MCVcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHR2ID0geCArIFwiIFwiICsgeSArICgoYS5sZW5ndGggPiAyKSA/IFwiIFwiICsgYVsyXSA6IFwiXCIpO1xuXHRcdFx0XHRpZiAocmVjT2JqKSB7XG5cdFx0XHRcdFx0cmVjT2JqLm94cCA9ICh4LmluZGV4T2YoXCIlXCIpICE9PSAtMSk7XG5cdFx0XHRcdFx0cmVjT2JqLm95cCA9ICh5LmluZGV4T2YoXCIlXCIpICE9PSAtMSk7XG5cdFx0XHRcdFx0cmVjT2JqLm94ciA9ICh4LmNoYXJBdCgxKSA9PT0gXCI9XCIpO1xuXHRcdFx0XHRcdHJlY09iai5veXIgPSAoeS5jaGFyQXQoMSkgPT09IFwiPVwiKTtcblx0XHRcdFx0XHRyZWNPYmoub3ggPSBwYXJzZUZsb2F0KHgucmVwbGFjZShfTmFORXhwLCBcIlwiKSk7XG5cdFx0XHRcdFx0cmVjT2JqLm95ID0gcGFyc2VGbG9hdCh5LnJlcGxhY2UoX05hTkV4cCwgXCJcIikpO1xuXHRcdFx0XHRcdHJlY09iai52ID0gdjtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gcmVjT2JqIHx8IHY7XG5cdFx0XHR9LFxuXG5cdFx0XHQvKipcblx0XHRcdCAqIEBwcml2YXRlIFRha2VzIGFuIGVuZGluZyB2YWx1ZSAodHlwaWNhbGx5IGEgc3RyaW5nLCBidXQgY2FuIGJlIGEgbnVtYmVyKSBhbmQgYSBzdGFydGluZyB2YWx1ZSBhbmQgcmV0dXJucyB0aGUgY2hhbmdlIGJldHdlZW4gdGhlIHR3bywgbG9va2luZyBmb3IgcmVsYXRpdmUgdmFsdWUgaW5kaWNhdG9ycyBsaWtlICs9IGFuZCAtPSBhbmQgaXQgYWxzbyBpZ25vcmVzIHN1ZmZpeGVzIChidXQgbWFrZSBzdXJlIHRoZSBlbmRpbmcgdmFsdWUgc3RhcnRzIHdpdGggYSBudW1iZXIgb3IgKz0vLT0gYW5kIHRoYXQgdGhlIHN0YXJ0aW5nIHZhbHVlIGlzIGEgTlVNQkVSISlcblx0XHRcdCAqIEBwYXJhbSB7KG51bWJlcnxzdHJpbmcpfSBlIEVuZCB2YWx1ZSB3aGljaCBpcyB0eXBpY2FsbHkgYSBzdHJpbmcsIGJ1dCBjb3VsZCBiZSBhIG51bWJlclxuXHRcdFx0ICogQHBhcmFtIHsobnVtYmVyfHN0cmluZyl9IGIgQmVnaW5uaW5nIHZhbHVlIHdoaWNoIGlzIHR5cGljYWxseSBhIHN0cmluZyBidXQgY291bGQgYmUgYSBudW1iZXJcblx0XHRcdCAqIEByZXR1cm4ge251bWJlcn0gQW1vdW50IG9mIGNoYW5nZSBiZXR3ZWVuIHRoZSBiZWdpbm5pbmcgYW5kIGVuZGluZyB2YWx1ZXMgKHJlbGF0aXZlIHZhbHVlcyB0aGF0IGhhdmUgYSBcIis9XCIgb3IgXCItPVwiIGFyZSByZWNvZ25pemVkKVxuXHRcdFx0ICovXG5cdFx0XHRfcGFyc2VDaGFuZ2UgPSBmdW5jdGlvbihlLCBiKSB7XG5cdFx0XHRcdHJldHVybiAodHlwZW9mKGUpID09PSBcInN0cmluZ1wiICYmIGUuY2hhckF0KDEpID09PSBcIj1cIikgPyBwYXJzZUludChlLmNoYXJBdCgwKSArIFwiMVwiLCAxMCkgKiBwYXJzZUZsb2F0KGUuc3Vic3RyKDIpKSA6IHBhcnNlRmxvYXQoZSkgLSBwYXJzZUZsb2F0KGIpO1xuXHRcdFx0fSxcblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBAcHJpdmF0ZSBUYWtlcyBhIHZhbHVlIGFuZCBhIGRlZmF1bHQgbnVtYmVyLCBjaGVja3MgaWYgdGhlIHZhbHVlIGlzIHJlbGF0aXZlLCBudWxsLCBvciBudW1lcmljIGFuZCBzcGl0cyBiYWNrIGEgbm9ybWFsaXplZCBudW1iZXIgYWNjb3JkaW5nbHkuIFByaW1hcmlseSB1c2VkIGluIHRoZSBfcGFyc2VUcmFuc2Zvcm0oKSBmdW5jdGlvbi5cblx0XHRcdCAqIEBwYXJhbSB7T2JqZWN0fSB2IFZhbHVlIHRvIGJlIHBhcnNlZFxuXHRcdFx0ICogQHBhcmFtIHshbnVtYmVyfSBkIERlZmF1bHQgdmFsdWUgKHdoaWNoIGlzIGFsc28gdXNlZCBmb3IgcmVsYXRpdmUgY2FsY3VsYXRpb25zIGlmIFwiKz1cIiBvciBcIi09XCIgaXMgZm91bmQgaW4gdGhlIGZpcnN0IHBhcmFtZXRlcilcblx0XHRcdCAqIEByZXR1cm4ge251bWJlcn0gUGFyc2VkIHZhbHVlXG5cdFx0XHQgKi9cblx0XHRcdF9wYXJzZVZhbCA9IGZ1bmN0aW9uKHYsIGQpIHtcblx0XHRcdFx0cmV0dXJuICh2ID09IG51bGwpID8gZCA6ICh0eXBlb2YodikgPT09IFwic3RyaW5nXCIgJiYgdi5jaGFyQXQoMSkgPT09IFwiPVwiKSA/IHBhcnNlSW50KHYuY2hhckF0KDApICsgXCIxXCIsIDEwKSAqIHBhcnNlRmxvYXQodi5zdWJzdHIoMikpICsgZCA6IHBhcnNlRmxvYXQodik7XG5cdFx0XHR9LFxuXG5cdFx0XHQvKipcblx0XHRcdCAqIEBwcml2YXRlIFRyYW5zbGF0ZXMgc3RyaW5ncyBsaWtlIFwiNDBkZWdcIiBvciBcIjQwXCIgb3IgNDByYWRcIiBvciBcIis9NDBkZWdcIiBvciBcIjI3MF9zaG9ydFwiIG9yIFwiLTkwX2N3XCIgb3IgXCIrPTQ1X2Njd1wiIHRvIGEgbnVtZXJpYyByYWRpYW4gYW5nbGUuIE9mIGNvdXJzZSBhIHN0YXJ0aW5nL2RlZmF1bHQgdmFsdWUgbXVzdCBiZSBmZWQgaW4gdG9vIHNvIHRoYXQgcmVsYXRpdmUgdmFsdWVzIGNhbiBiZSBjYWxjdWxhdGVkIHByb3Blcmx5LlxuXHRcdFx0ICogQHBhcmFtIHtPYmplY3R9IHYgVmFsdWUgdG8gYmUgcGFyc2VkXG5cdFx0XHQgKiBAcGFyYW0geyFudW1iZXJ9IGQgRGVmYXVsdCB2YWx1ZSAod2hpY2ggaXMgYWxzbyB1c2VkIGZvciByZWxhdGl2ZSBjYWxjdWxhdGlvbnMgaWYgXCIrPVwiIG9yIFwiLT1cIiBpcyBmb3VuZCBpbiB0aGUgZmlyc3QgcGFyYW1ldGVyKVxuXHRcdFx0ICogQHBhcmFtIHtzdHJpbmc9fSBwIHByb3BlcnR5IG5hbWUgZm9yIGRpcmVjdGlvbmFsRW5kIChvcHRpb25hbCAtIG9ubHkgdXNlZCB3aGVuIHRoZSBwYXJzZWQgdmFsdWUgaXMgZGlyZWN0aW9uYWwgKFwiX3Nob3J0XCIsIFwiX2N3XCIsIG9yIFwiX2Njd1wiIHN1ZmZpeCkuIFdlIG5lZWQgYSB3YXkgdG8gc3RvcmUgdGhlIHVuY29tcGVuc2F0ZWQgdmFsdWUgc28gdGhhdCBhdCB0aGUgZW5kIG9mIHRoZSB0d2Vlbiwgd2Ugc2V0IGl0IHRvIGV4YWN0bHkgd2hhdCB3YXMgcmVxdWVzdGVkIHdpdGggbm8gZGlyZWN0aW9uYWwgY29tcGVuc2F0aW9uKS4gUHJvcGVydHkgbmFtZSB3b3VsZCBiZSBcInJvdGF0aW9uXCIsIFwicm90YXRpb25YXCIsIG9yIFwicm90YXRpb25ZXCJcblx0XHRcdCAqIEBwYXJhbSB7T2JqZWN0PX0gZGlyZWN0aW9uYWxFbmQgQW4gb2JqZWN0IHRoYXQgd2lsbCBzdG9yZSB0aGUgcmF3IGVuZCB2YWx1ZXMgZm9yIGRpcmVjdGlvbmFsIGFuZ2xlcyAoXCJfc2hvcnRcIiwgXCJfY3dcIiwgb3IgXCJfY2N3XCIgc3VmZml4KS4gV2UgbmVlZCBhIHdheSB0byBzdG9yZSB0aGUgdW5jb21wZW5zYXRlZCB2YWx1ZSBzbyB0aGF0IGF0IHRoZSBlbmQgb2YgdGhlIHR3ZWVuLCB3ZSBzZXQgaXQgdG8gZXhhY3RseSB3aGF0IHdhcyByZXF1ZXN0ZWQgd2l0aCBubyBkaXJlY3Rpb25hbCBjb21wZW5zYXRpb24uXG5cdFx0XHQgKiBAcmV0dXJuIHtudW1iZXJ9IHBhcnNlZCBhbmdsZSBpbiByYWRpYW5zXG5cdFx0XHQgKi9cblx0XHRcdF9wYXJzZUFuZ2xlID0gZnVuY3Rpb24odiwgZCwgcCwgZGlyZWN0aW9uYWxFbmQpIHtcblx0XHRcdFx0dmFyIG1pbiA9IDAuMDAwMDAxLFxuXHRcdFx0XHRcdGNhcCwgc3BsaXQsIGRpZiwgcmVzdWx0LCBpc1JlbGF0aXZlO1xuXHRcdFx0XHRpZiAodiA9PSBudWxsKSB7XG5cdFx0XHRcdFx0cmVzdWx0ID0gZDtcblx0XHRcdFx0fSBlbHNlIGlmICh0eXBlb2YodikgPT09IFwibnVtYmVyXCIpIHtcblx0XHRcdFx0XHRyZXN1bHQgPSB2O1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNhcCA9IDM2MDtcblx0XHRcdFx0XHRzcGxpdCA9IHYuc3BsaXQoXCJfXCIpO1xuXHRcdFx0XHRcdGlzUmVsYXRpdmUgPSAodi5jaGFyQXQoMSkgPT09IFwiPVwiKTtcblx0XHRcdFx0XHRkaWYgPSAoaXNSZWxhdGl2ZSA/IHBhcnNlSW50KHYuY2hhckF0KDApICsgXCIxXCIsIDEwKSAqIHBhcnNlRmxvYXQoc3BsaXRbMF0uc3Vic3RyKDIpKSA6IHBhcnNlRmxvYXQoc3BsaXRbMF0pKSAqICgodi5pbmRleE9mKFwicmFkXCIpID09PSAtMSkgPyAxIDogX1JBRDJERUcpIC0gKGlzUmVsYXRpdmUgPyAwIDogZCk7XG5cdFx0XHRcdFx0aWYgKHNwbGl0Lmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0aWYgKGRpcmVjdGlvbmFsRW5kKSB7XG5cdFx0XHRcdFx0XHRcdGRpcmVjdGlvbmFsRW5kW3BdID0gZCArIGRpZjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICh2LmluZGV4T2YoXCJzaG9ydFwiKSAhPT0gLTEpIHtcblx0XHRcdFx0XHRcdFx0ZGlmID0gZGlmICUgY2FwO1xuXHRcdFx0XHRcdFx0XHRpZiAoZGlmICE9PSBkaWYgJSAoY2FwIC8gMikpIHtcblx0XHRcdFx0XHRcdFx0XHRkaWYgPSAoZGlmIDwgMCkgPyBkaWYgKyBjYXAgOiBkaWYgLSBjYXA7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICh2LmluZGV4T2YoXCJfY3dcIikgIT09IC0xICYmIGRpZiA8IDApIHtcblx0XHRcdFx0XHRcdFx0ZGlmID0gKChkaWYgKyBjYXAgKiA5OTk5OTk5OTk5KSAlIGNhcCkgLSAoKGRpZiAvIGNhcCkgfCAwKSAqIGNhcDtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAodi5pbmRleE9mKFwiY2N3XCIpICE9PSAtMSAmJiBkaWYgPiAwKSB7XG5cdFx0XHRcdFx0XHRcdGRpZiA9ICgoZGlmIC0gY2FwICogOTk5OTk5OTk5OSkgJSBjYXApIC0gKChkaWYgLyBjYXApIHwgMCkgKiBjYXA7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJlc3VsdCA9IGQgKyBkaWY7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHJlc3VsdCA8IG1pbiAmJiByZXN1bHQgPiAtbWluKSB7XG5cdFx0XHRcdFx0cmVzdWx0ID0gMDtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0fSxcblxuXHRcdFx0X2NvbG9yTG9va3VwID0ge2FxdWE6WzAsMjU1LDI1NV0sXG5cdFx0XHRcdGxpbWU6WzAsMjU1LDBdLFxuXHRcdFx0XHRzaWx2ZXI6WzE5MiwxOTIsMTkyXSxcblx0XHRcdFx0YmxhY2s6WzAsMCwwXSxcblx0XHRcdFx0bWFyb29uOlsxMjgsMCwwXSxcblx0XHRcdFx0dGVhbDpbMCwxMjgsMTI4XSxcblx0XHRcdFx0Ymx1ZTpbMCwwLDI1NV0sXG5cdFx0XHRcdG5hdnk6WzAsMCwxMjhdLFxuXHRcdFx0XHR3aGl0ZTpbMjU1LDI1NSwyNTVdLFxuXHRcdFx0XHRmdWNoc2lhOlsyNTUsMCwyNTVdLFxuXHRcdFx0XHRvbGl2ZTpbMTI4LDEyOCwwXSxcblx0XHRcdFx0eWVsbG93OlsyNTUsMjU1LDBdLFxuXHRcdFx0XHRvcmFuZ2U6WzI1NSwxNjUsMF0sXG5cdFx0XHRcdGdyYXk6WzEyOCwxMjgsMTI4XSxcblx0XHRcdFx0cHVycGxlOlsxMjgsMCwxMjhdLFxuXHRcdFx0XHRncmVlbjpbMCwxMjgsMF0sXG5cdFx0XHRcdHJlZDpbMjU1LDAsMF0sXG5cdFx0XHRcdHBpbms6WzI1NSwxOTIsMjAzXSxcblx0XHRcdFx0Y3lhbjpbMCwyNTUsMjU1XSxcblx0XHRcdFx0dHJhbnNwYXJlbnQ6WzI1NSwyNTUsMjU1LDBdfSxcblxuXHRcdFx0X2h1ZSA9IGZ1bmN0aW9uKGgsIG0xLCBtMikge1xuXHRcdFx0XHRoID0gKGggPCAwKSA/IGggKyAxIDogKGggPiAxKSA/IGggLSAxIDogaDtcblx0XHRcdFx0cmV0dXJuICgoKChoICogNiA8IDEpID8gbTEgKyAobTIgLSBtMSkgKiBoICogNiA6IChoIDwgMC41KSA/IG0yIDogKGggKiAzIDwgMikgPyBtMSArIChtMiAtIG0xKSAqICgyIC8gMyAtIGgpICogNiA6IG0xKSAqIDI1NSkgKyAwLjUpIHwgMDtcblx0XHRcdH0sXG5cblx0XHRcdC8qKlxuXHRcdFx0ICogQHByaXZhdGUgUGFyc2VzIGEgY29sb3IgKGxpa2UgIzlGMCwgI0ZGOTkwMCwgcmdiKDI1NSw1MSwxNTMpIG9yIGhzbCgxMDgsIDUwJSwgMTAlKSkgaW50byBhbiBhcnJheSB3aXRoIDMgZWxlbWVudHMgZm9yIHJlZCwgZ3JlZW4sIGFuZCBibHVlIG9yIGlmIHRvSFNMIHBhcmFtZXRlciBpcyB0cnVlLCBpdCB3aWxsIHBvcHVsYXRlIHRoZSBhcnJheSB3aXRoIGh1ZSwgc2F0dXJhdGlvbiwgYW5kIGxpZ2h0bmVzcyB2YWx1ZXMuIElmIGEgcmVsYXRpdmUgdmFsdWUgaXMgZm91bmQgaW4gYW4gaHNsKCkgb3IgaHNsYSgpIHN0cmluZywgaXQgd2lsbCBwcmVzZXJ2ZSB0aG9zZSByZWxhdGl2ZSBwcmVmaXhlcyBhbmQgYWxsIHRoZSB2YWx1ZXMgaW4gdGhlIGFycmF5IHdpbGwgYmUgc3RyaW5ncyBpbnN0ZWFkIG9mIG51bWJlcnMgKGluIGFsbCBvdGhlciBjYXNlcyBpdCB3aWxsIGJlIHBvcHVsYXRlZCB3aXRoIG51bWJlcnMpLlxuXHRcdFx0ICogQHBhcmFtIHsoc3RyaW5nfG51bWJlcil9IHYgVGhlIHZhbHVlIHRoZSBzaG91bGQgYmUgcGFyc2VkIHdoaWNoIGNvdWxkIGJlIGEgc3RyaW5nIGxpa2UgIzlGMCBvciByZ2IoMjU1LDEwMiw1MSkgb3IgcmdiYSgyNTUsMCwwLDAuNSkgb3IgaXQgY291bGQgYmUgYSBudW1iZXIgbGlrZSAweEZGMDBDQyBvciBldmVuIGEgbmFtZWQgY29sb3IgbGlrZSByZWQsIGJsdWUsIHB1cnBsZSwgZXRjLlxuXHRcdFx0ICogQHBhcmFtIHsoYm9vbGVhbil9IHRvSFNMIElmIHRydWUsIGFuIGhzbCgpIG9yIGhzbGEoKSB2YWx1ZSB3aWxsIGJlIHJldHVybmVkIGluc3RlYWQgb2YgcmdiKCkgb3IgcmdiYSgpXG5cdFx0XHQgKiBAcmV0dXJuIHtBcnJheS48bnVtYmVyPn0gQW4gYXJyYXkgY29udGFpbmluZyByZWQsIGdyZWVuLCBhbmQgYmx1ZSAoYW5kIG9wdGlvbmFsbHkgYWxwaGEpIGluIHRoYXQgb3JkZXIsIG9yIGlmIHRoZSB0b0hTTCBwYXJhbWV0ZXIgd2FzIHRydWUsIHRoZSBhcnJheSB3aWxsIGNvbnRhaW4gaHVlLCBzYXR1cmF0aW9uIGFuZCBsaWdodG5lc3MgKGFuZCBvcHRpb25hbGx5IGFscGhhKSBpbiB0aGF0IG9yZGVyLiBBbHdheXMgbnVtYmVycyB1bmxlc3MgdGhlcmUncyBhIHJlbGF0aXZlIHByZWZpeCBmb3VuZCBpbiBhbiBoc2woKSBvciBoc2xhKCkgc3RyaW5nIGFuZCB0b0hTTCBpcyB0cnVlLlxuXHRcdFx0ICovXG5cdFx0XHRfcGFyc2VDb2xvciA9IENTU1BsdWdpbi5wYXJzZUNvbG9yID0gZnVuY3Rpb24odiwgdG9IU0wpIHtcblx0XHRcdFx0dmFyIGEsIHIsIGcsIGIsIGgsIHMsIGwsIG1heCwgbWluLCBkLCB3YXNIU0w7XG5cdFx0XHRcdGlmICghdikge1xuXHRcdFx0XHRcdGEgPSBfY29sb3JMb29rdXAuYmxhY2s7XG5cdFx0XHRcdH0gZWxzZSBpZiAodHlwZW9mKHYpID09PSBcIm51bWJlclwiKSB7XG5cdFx0XHRcdFx0YSA9IFt2ID4+IDE2LCAodiA+PiA4KSAmIDI1NSwgdiAmIDI1NV07XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aWYgKHYuY2hhckF0KHYubGVuZ3RoIC0gMSkgPT09IFwiLFwiKSB7IC8vc29tZXRpbWVzIGEgdHJhaWxpbmcgY29tbWEgaXMgaW5jbHVkZWQgYW5kIHdlIHNob3VsZCBjaG9wIGl0IG9mZiAodHlwaWNhbGx5IGZyb20gYSBjb21tYS1kZWxpbWl0ZWQgbGlzdCBvZiB2YWx1ZXMgbGlrZSBhIHRleHRTaGFkb3c6XCIycHggMnB4IDJweCBibHVlLCA1cHggNXB4IDVweCByZ2IoMjU1LDAsMClcIiAtIGluIHRoaXMgZXhhbXBsZSBcImJsdWUsXCIgaGFzIGEgdHJhaWxpbmcgY29tbWEuIFdlIGNvdWxkIHN0cmlwIGl0IG91dCBpbnNpZGUgcGFyc2VDb21wbGV4KCkgYnV0IHdlJ2QgbmVlZCB0byBkbyBpdCB0byB0aGUgYmVnaW5uaW5nIGFuZCBlbmRpbmcgdmFsdWVzIHBsdXMgaXQgd291bGRuJ3QgcHJvdmlkZSBwcm90ZWN0aW9uIGZyb20gb3RoZXIgcG90ZW50aWFsIHNjZW5hcmlvcyBsaWtlIGlmIHRoZSB1c2VyIHBhc3NlcyBpbiBhIHNpbWlsYXIgdmFsdWUuXG5cdFx0XHRcdFx0XHR2ID0gdi5zdWJzdHIoMCwgdi5sZW5ndGggLSAxKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKF9jb2xvckxvb2t1cFt2XSkge1xuXHRcdFx0XHRcdFx0YSA9IF9jb2xvckxvb2t1cFt2XTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHYuY2hhckF0KDApID09PSBcIiNcIikge1xuXHRcdFx0XHRcdFx0aWYgKHYubGVuZ3RoID09PSA0KSB7IC8vZm9yIHNob3J0aGFuZCBsaWtlICM5RjBcblx0XHRcdFx0XHRcdFx0ciA9IHYuY2hhckF0KDEpO1xuXHRcdFx0XHRcdFx0XHRnID0gdi5jaGFyQXQoMik7XG5cdFx0XHRcdFx0XHRcdGIgPSB2LmNoYXJBdCgzKTtcblx0XHRcdFx0XHRcdFx0diA9IFwiI1wiICsgciArIHIgKyBnICsgZyArIGIgKyBiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0diA9IHBhcnNlSW50KHYuc3Vic3RyKDEpLCAxNik7XG5cdFx0XHRcdFx0XHRhID0gW3YgPj4gMTYsICh2ID4+IDgpICYgMjU1LCB2ICYgMjU1XTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHYuc3Vic3RyKDAsIDMpID09PSBcImhzbFwiKSB7XG5cdFx0XHRcdFx0XHRhID0gd2FzSFNMID0gdi5tYXRjaChfbnVtRXhwKTtcblx0XHRcdFx0XHRcdGlmICghdG9IU0wpIHtcblx0XHRcdFx0XHRcdFx0aCA9IChOdW1iZXIoYVswXSkgJSAzNjApIC8gMzYwO1xuXHRcdFx0XHRcdFx0XHRzID0gTnVtYmVyKGFbMV0pIC8gMTAwO1xuXHRcdFx0XHRcdFx0XHRsID0gTnVtYmVyKGFbMl0pIC8gMTAwO1xuXHRcdFx0XHRcdFx0XHRnID0gKGwgPD0gMC41KSA/IGwgKiAocyArIDEpIDogbCArIHMgLSBsICogcztcblx0XHRcdFx0XHRcdFx0ciA9IGwgKiAyIC0gZztcblx0XHRcdFx0XHRcdFx0aWYgKGEubGVuZ3RoID4gMykge1xuXHRcdFx0XHRcdFx0XHRcdGFbM10gPSBOdW1iZXIodlszXSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0YVswXSA9IF9odWUoaCArIDEgLyAzLCByLCBnKTtcblx0XHRcdFx0XHRcdFx0YVsxXSA9IF9odWUoaCwgciwgZyk7XG5cdFx0XHRcdFx0XHRcdGFbMl0gPSBfaHVlKGggLSAxIC8gMywgciwgZyk7XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKHYuaW5kZXhPZihcIj1cIikgIT09IC0xKSB7IC8vaWYgcmVsYXRpdmUgdmFsdWVzIGFyZSBmb3VuZCwganVzdCByZXR1cm4gdGhlIHJhdyBzdHJpbmdzIHdpdGggdGhlIHJlbGF0aXZlIHByZWZpeGVzIGluIHBsYWNlLlxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdi5tYXRjaChfcmVsTnVtRXhwKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0YSA9IHYubWF0Y2goX251bUV4cCkgfHwgX2NvbG9yTG9va3VwLnRyYW5zcGFyZW50O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRhWzBdID0gTnVtYmVyKGFbMF0pO1xuXHRcdFx0XHRcdGFbMV0gPSBOdW1iZXIoYVsxXSk7XG5cdFx0XHRcdFx0YVsyXSA9IE51bWJlcihhWzJdKTtcblx0XHRcdFx0XHRpZiAoYS5sZW5ndGggPiAzKSB7XG5cdFx0XHRcdFx0XHRhWzNdID0gTnVtYmVyKGFbM10pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodG9IU0wgJiYgIXdhc0hTTCkge1xuXHRcdFx0XHRcdHIgPSBhWzBdIC8gMjU1O1xuXHRcdFx0XHRcdGcgPSBhWzFdIC8gMjU1O1xuXHRcdFx0XHRcdGIgPSBhWzJdIC8gMjU1O1xuXHRcdFx0XHRcdG1heCA9IE1hdGgubWF4KHIsIGcsIGIpO1xuXHRcdFx0XHRcdG1pbiA9IE1hdGgubWluKHIsIGcsIGIpO1xuXHRcdFx0XHRcdGwgPSAobWF4ICsgbWluKSAvIDI7XG5cdFx0XHRcdFx0aWYgKG1heCA9PT0gbWluKSB7XG5cdFx0XHRcdFx0XHRoID0gcyA9IDA7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGQgPSBtYXggLSBtaW47XG5cdFx0XHRcdFx0XHRzID0gbCA+IDAuNSA/IGQgLyAoMiAtIG1heCAtIG1pbikgOiBkIC8gKG1heCArIG1pbik7XG5cdFx0XHRcdFx0XHRoID0gKG1heCA9PT0gcikgPyAoZyAtIGIpIC8gZCArIChnIDwgYiA/IDYgOiAwKSA6IChtYXggPT09IGcpID8gKGIgLSByKSAvIGQgKyAyIDogKHIgLSBnKSAvIGQgKyA0O1xuXHRcdFx0XHRcdFx0aCAqPSA2MDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YVswXSA9IChoICsgMC41KSB8IDA7XG5cdFx0XHRcdFx0YVsxXSA9IChzICogMTAwICsgMC41KSB8IDA7XG5cdFx0XHRcdFx0YVsyXSA9IChsICogMTAwICsgMC41KSB8IDA7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGE7XG5cdFx0XHR9LFxuXHRcdFx0X2Zvcm1hdENvbG9ycyA9IGZ1bmN0aW9uKHMsIHRvSFNMKSB7XG5cdFx0XHRcdHZhciBjb2xvcnMgPSBzLm1hdGNoKF9jb2xvckV4cCkgfHwgW10sXG5cdFx0XHRcdFx0Y2hhckluZGV4ID0gMCxcblx0XHRcdFx0XHRwYXJzZWQgPSBjb2xvcnMubGVuZ3RoID8gXCJcIiA6IHMsXG5cdFx0XHRcdFx0aSwgY29sb3IsIHRlbXA7XG5cdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBjb2xvcnMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRjb2xvciA9IGNvbG9yc1tpXTtcblx0XHRcdFx0XHR0ZW1wID0gcy5zdWJzdHIoY2hhckluZGV4LCBzLmluZGV4T2YoY29sb3IsIGNoYXJJbmRleCktY2hhckluZGV4KTtcblx0XHRcdFx0XHRjaGFySW5kZXggKz0gdGVtcC5sZW5ndGggKyBjb2xvci5sZW5ndGg7XG5cdFx0XHRcdFx0Y29sb3IgPSBfcGFyc2VDb2xvcihjb2xvciwgdG9IU0wpO1xuXHRcdFx0XHRcdGlmIChjb2xvci5sZW5ndGggPT09IDMpIHtcblx0XHRcdFx0XHRcdGNvbG9yLnB1c2goMSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHBhcnNlZCArPSB0ZW1wICsgKHRvSFNMID8gXCJoc2xhKFwiICsgY29sb3JbMF0gKyBcIixcIiArIGNvbG9yWzFdICsgXCIlLFwiICsgY29sb3JbMl0gKyBcIiUsXCIgKyBjb2xvclszXSA6IFwicmdiYShcIiArIGNvbG9yLmpvaW4oXCIsXCIpKSArIFwiKVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBwYXJzZWQ7XG5cdFx0XHR9LFxuXHRcdFx0X2NvbG9yRXhwID0gXCIoPzpcXFxcYig/Oig/OnJnYnxyZ2JhfGhzbHxoc2xhKVxcXFwoLis/XFxcXCkpfFxcXFxCIy4rP1xcXFxiXCI7IC8vd2UnbGwgZHluYW1pY2FsbHkgYnVpbGQgdGhpcyBSZWd1bGFyIEV4cHJlc3Npb24gdG8gY29uc2VydmUgZmlsZSBzaXplLiBBZnRlciBidWlsZGluZyBpdCwgaXQgd2lsbCBiZSBhYmxlIHRvIGZpbmQgcmdiKCksIHJnYmEoKSwgIyAoaGV4YWRlY2ltYWwpLCBhbmQgbmFtZWQgY29sb3IgdmFsdWVzIGxpa2UgcmVkLCBibHVlLCBwdXJwbGUsIGV0Yy5cblxuXHRcdGZvciAocCBpbiBfY29sb3JMb29rdXApIHtcblx0XHRcdF9jb2xvckV4cCArPSBcInxcIiArIHAgKyBcIlxcXFxiXCI7XG5cdFx0fVxuXHRcdF9jb2xvckV4cCA9IG5ldyBSZWdFeHAoX2NvbG9yRXhwK1wiKVwiLCBcImdpXCIpO1xuXG5cdFx0Q1NTUGx1Z2luLmNvbG9yU3RyaW5nRmlsdGVyID0gZnVuY3Rpb24oYSkge1xuXHRcdFx0dmFyIGNvbWJpbmVkID0gYVswXSArIGFbMV0sXG5cdFx0XHRcdHRvSFNMO1xuXHRcdFx0X2NvbG9yRXhwLmxhc3RJbmRleCA9IDA7XG5cdFx0XHRpZiAoX2NvbG9yRXhwLnRlc3QoY29tYmluZWQpKSB7XG5cdFx0XHRcdHRvSFNMID0gKGNvbWJpbmVkLmluZGV4T2YoXCJoc2woXCIpICE9PSAtMSB8fCBjb21iaW5lZC5pbmRleE9mKFwiaHNsYShcIikgIT09IC0xKTtcblx0XHRcdFx0YVswXSA9IF9mb3JtYXRDb2xvcnMoYVswXSwgdG9IU0wpO1xuXHRcdFx0XHRhWzFdID0gX2Zvcm1hdENvbG9ycyhhWzFdLCB0b0hTTCk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdGlmICghVHdlZW5MaXRlLmRlZmF1bHRTdHJpbmdGaWx0ZXIpIHtcblx0XHRcdFR3ZWVuTGl0ZS5kZWZhdWx0U3RyaW5nRmlsdGVyID0gQ1NTUGx1Z2luLmNvbG9yU3RyaW5nRmlsdGVyO1xuXHRcdH1cblxuXHRcdC8qKlxuXHRcdCAqIEBwcml2YXRlIFJldHVybnMgYSBmb3JtYXR0ZXIgZnVuY3Rpb24gdGhhdCBoYW5kbGVzIHRha2luZyBhIHN0cmluZyAob3IgbnVtYmVyIGluIHNvbWUgY2FzZXMpIGFuZCByZXR1cm5pbmcgYSBjb25zaXN0ZW50bHkgZm9ybWF0dGVkIG9uZSBpbiB0ZXJtcyBvZiBkZWxpbWl0ZXJzLCBxdWFudGl0eSBvZiB2YWx1ZXMsIGV0Yy4gRm9yIGV4YW1wbGUsIHdlIG1heSBnZXQgYm94U2hhZG93IHZhbHVlcyBkZWZpbmVkIGFzIFwiMHB4IHJlZFwiIG9yIFwiMHB4IDBweCAxMHB4IHJnYigyNTUsMCwwKVwiIG9yIFwiMHB4IDBweCAyMHB4IDIwcHggI0YwMFwiIGFuZCB3ZSBuZWVkIHRvIGVuc3VyZSB0aGF0IHdoYXQgd2UgZ2V0IGJhY2sgaXMgZGVzY3JpYmVkIHdpdGggNCBudW1iZXJzIGFuZCBhIGNvbG9yLiBUaGlzIGFsbG93cyB1cyB0byBmZWVkIGl0IGludG8gdGhlIF9wYXJzZUNvbXBsZXgoKSBtZXRob2QgYW5kIHNwbGl0IHRoZSB2YWx1ZXMgdXAgYXBwcm9wcmlhdGVseS4gVGhlIG5lYXQgdGhpbmcgYWJvdXQgdGhpcyBfZ2V0Rm9ybWF0dGVyKCkgZnVuY3Rpb24gaXMgdGhhdCB0aGUgZGZsdCBkZWZpbmVzIGEgcGF0dGVybiBhcyB3ZWxsIGFzIGEgZGVmYXVsdCwgc28gZm9yIGV4YW1wbGUsIF9nZXRGb3JtYXR0ZXIoXCIwcHggMHB4IDBweCAwcHggIzc3N1wiLCB0cnVlKSBub3Qgb25seSBzZXRzIHRoZSBkZWZhdWx0IGFzIDBweCBmb3IgYWxsIGRpc3RhbmNlcyBhbmQgIzc3NyBmb3IgdGhlIGNvbG9yLCBidXQgYWxzbyBzZXRzIHRoZSBwYXR0ZXJuIHN1Y2ggdGhhdCA0IG51bWJlcnMgYW5kIGEgY29sb3Igd2lsbCBhbHdheXMgZ2V0IHJldHVybmVkLlxuXHRcdCAqIEBwYXJhbSB7IXN0cmluZ30gZGZsdCBUaGUgZGVmYXVsdCB2YWx1ZSBhbmQgcGF0dGVybiB0byBmb2xsb3cuIFNvIFwiMHB4IDBweCAwcHggMHB4ICM3NzdcIiB3aWxsIGVuc3VyZSB0aGF0IDQgbnVtYmVycyBhbmQgYSBjb2xvciB3aWxsIGFsd2F5cyBnZXQgcmV0dXJuZWQuXG5cdFx0ICogQHBhcmFtIHtib29sZWFuPX0gY2xyIElmIHRydWUsIHRoZSB2YWx1ZXMgc2hvdWxkIGJlIHNlYXJjaGVkIGZvciBjb2xvci1yZWxhdGVkIGRhdGEuIEZvciBleGFtcGxlLCBib3hTaGFkb3cgdmFsdWVzIHR5cGljYWxseSBjb250YWluIGEgY29sb3Igd2hlcmVhcyBib3JkZXJSYWRpdXMgZG9uJ3QuXG5cdFx0ICogQHBhcmFtIHtib29sZWFuPX0gY29sbGFwc2libGUgSWYgdHJ1ZSwgdGhlIHZhbHVlIGlzIGEgdG9wL2xlZnQvcmlnaHQvYm90dG9tIHN0eWxlIG9uZSB0aGF0IGFjdHMgbGlrZSBtYXJnaW4gb3IgcGFkZGluZywgd2hlcmUgaWYgb25seSBvbmUgdmFsdWUgaXMgcmVjZWl2ZWQsIGl0J3MgdXNlZCBmb3IgYWxsIDQ7IGlmIDIgYXJlIHJlY2VpdmVkLCB0aGUgZmlyc3QgaXMgZHVwbGljYXRlZCBmb3IgM3JkIChib3R0b20pIGFuZCB0aGUgMm5kIGlzIGR1cGxpY2F0ZWQgZm9yIHRoZSA0dGggc3BvdCAobGVmdCksIGV0Yy5cblx0XHQgKiBAcmV0dXJuIHtGdW5jdGlvbn0gZm9ybWF0dGVyIGZ1bmN0aW9uXG5cdFx0ICovXG5cdFx0dmFyIF9nZXRGb3JtYXR0ZXIgPSBmdW5jdGlvbihkZmx0LCBjbHIsIGNvbGxhcHNpYmxlLCBtdWx0aSkge1xuXHRcdFx0XHRpZiAoZGZsdCA9PSBudWxsKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKHYpIHtyZXR1cm4gdjt9O1xuXHRcdFx0XHR9XG5cdFx0XHRcdHZhciBkQ29sb3IgPSBjbHIgPyAoZGZsdC5tYXRjaChfY29sb3JFeHApIHx8IFtcIlwiXSlbMF0gOiBcIlwiLFxuXHRcdFx0XHRcdGRWYWxzID0gZGZsdC5zcGxpdChkQ29sb3IpLmpvaW4oXCJcIikubWF0Y2goX3ZhbHVlc0V4cCkgfHwgW10sXG5cdFx0XHRcdFx0cGZ4ID0gZGZsdC5zdWJzdHIoMCwgZGZsdC5pbmRleE9mKGRWYWxzWzBdKSksXG5cdFx0XHRcdFx0c2Z4ID0gKGRmbHQuY2hhckF0KGRmbHQubGVuZ3RoIC0gMSkgPT09IFwiKVwiKSA/IFwiKVwiIDogXCJcIixcblx0XHRcdFx0XHRkZWxpbSA9IChkZmx0LmluZGV4T2YoXCIgXCIpICE9PSAtMSkgPyBcIiBcIiA6IFwiLFwiLFxuXHRcdFx0XHRcdG51bVZhbHMgPSBkVmFscy5sZW5ndGgsXG5cdFx0XHRcdFx0ZFNmeCA9IChudW1WYWxzID4gMCkgPyBkVmFsc1swXS5yZXBsYWNlKF9udW1FeHAsIFwiXCIpIDogXCJcIixcblx0XHRcdFx0XHRmb3JtYXR0ZXI7XG5cdFx0XHRcdGlmICghbnVtVmFscykge1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbih2KSB7cmV0dXJuIHY7fTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoY2xyKSB7XG5cdFx0XHRcdFx0Zm9ybWF0dGVyID0gZnVuY3Rpb24odikge1xuXHRcdFx0XHRcdFx0dmFyIGNvbG9yLCB2YWxzLCBpLCBhO1xuXHRcdFx0XHRcdFx0aWYgKHR5cGVvZih2KSA9PT0gXCJudW1iZXJcIikge1xuXHRcdFx0XHRcdFx0XHR2ICs9IGRTZng7XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKG11bHRpICYmIF9jb21tYXNPdXRzaWRlUGFyZW5FeHAudGVzdCh2KSkge1xuXHRcdFx0XHRcdFx0XHRhID0gdi5yZXBsYWNlKF9jb21tYXNPdXRzaWRlUGFyZW5FeHAsIFwifFwiKS5zcGxpdChcInxcIik7XG5cdFx0XHRcdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0XHRcdFx0YVtpXSA9IGZvcm1hdHRlcihhW2ldKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gYS5qb2luKFwiLFwiKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGNvbG9yID0gKHYubWF0Y2goX2NvbG9yRXhwKSB8fCBbZENvbG9yXSlbMF07XG5cdFx0XHRcdFx0XHR2YWxzID0gdi5zcGxpdChjb2xvcikuam9pbihcIlwiKS5tYXRjaChfdmFsdWVzRXhwKSB8fCBbXTtcblx0XHRcdFx0XHRcdGkgPSB2YWxzLmxlbmd0aDtcblx0XHRcdFx0XHRcdGlmIChudW1WYWxzID4gaS0tKSB7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICgrK2kgPCBudW1WYWxzKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFsc1tpXSA9IGNvbGxhcHNpYmxlID8gdmFsc1soKChpIC0gMSkgLyAyKSB8IDApXSA6IGRWYWxzW2ldO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRyZXR1cm4gcGZ4ICsgdmFscy5qb2luKGRlbGltKSArIGRlbGltICsgY29sb3IgKyBzZnggKyAodi5pbmRleE9mKFwiaW5zZXRcIikgIT09IC0xID8gXCIgaW5zZXRcIiA6IFwiXCIpO1xuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0cmV0dXJuIGZvcm1hdHRlcjtcblxuXHRcdFx0XHR9XG5cdFx0XHRcdGZvcm1hdHRlciA9IGZ1bmN0aW9uKHYpIHtcblx0XHRcdFx0XHR2YXIgdmFscywgYSwgaTtcblx0XHRcdFx0XHRpZiAodHlwZW9mKHYpID09PSBcIm51bWJlclwiKSB7XG5cdFx0XHRcdFx0XHR2ICs9IGRTZng7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChtdWx0aSAmJiBfY29tbWFzT3V0c2lkZVBhcmVuRXhwLnRlc3QodikpIHtcblx0XHRcdFx0XHRcdGEgPSB2LnJlcGxhY2UoX2NvbW1hc091dHNpZGVQYXJlbkV4cCwgXCJ8XCIpLnNwbGl0KFwifFwiKTtcblx0XHRcdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0XHRcdGFbaV0gPSBmb3JtYXR0ZXIoYVtpXSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRyZXR1cm4gYS5qb2luKFwiLFwiKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dmFscyA9IHYubWF0Y2goX3ZhbHVlc0V4cCkgfHwgW107XG5cdFx0XHRcdFx0aSA9IHZhbHMubGVuZ3RoO1xuXHRcdFx0XHRcdGlmIChudW1WYWxzID4gaS0tKSB7XG5cdFx0XHRcdFx0XHR3aGlsZSAoKytpIDwgbnVtVmFscykge1xuXHRcdFx0XHRcdFx0XHR2YWxzW2ldID0gY29sbGFwc2libGUgPyB2YWxzWygoKGkgLSAxKSAvIDIpIHwgMCldIDogZFZhbHNbaV07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBwZnggKyB2YWxzLmpvaW4oZGVsaW0pICsgc2Z4O1xuXHRcdFx0XHR9O1xuXHRcdFx0XHRyZXR1cm4gZm9ybWF0dGVyO1xuXHRcdFx0fSxcblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBAcHJpdmF0ZSByZXR1cm5zIGEgZm9ybWF0dGVyIGZ1bmN0aW9uIHRoYXQncyB1c2VkIGZvciBlZGdlLXJlbGF0ZWQgdmFsdWVzIGxpa2UgbWFyZ2luVG9wLCBtYXJnaW5MZWZ0LCBwYWRkaW5nQm90dG9tLCBwYWRkaW5nUmlnaHQsIGV0Yy4gSnVzdCBwYXNzIGEgY29tbWEtZGVsaW1pdGVkIGxpc3Qgb2YgcHJvcGVydHkgbmFtZXMgcmVsYXRlZCB0byB0aGUgZWRnZXMuXG5cdFx0XHQgKiBAcGFyYW0geyFzdHJpbmd9IHByb3BzIGEgY29tbWEtZGVsaW1pdGVkIGxpc3Qgb2YgcHJvcGVydHkgbmFtZXMgaW4gb3JkZXIgZnJvbSB0b3AgdG8gbGVmdCwgbGlrZSBcIm1hcmdpblRvcCxtYXJnaW5SaWdodCxtYXJnaW5Cb3R0b20sbWFyZ2luTGVmdFwiXG5cdFx0XHQgKiBAcmV0dXJuIHtGdW5jdGlvbn0gYSBmb3JtYXR0ZXIgZnVuY3Rpb25cblx0XHRcdCAqL1xuXHRcdFx0X2dldEVkZ2VQYXJzZXIgPSBmdW5jdGlvbihwcm9wcykge1xuXHRcdFx0XHRwcm9wcyA9IHByb3BzLnNwbGl0KFwiLFwiKTtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKHQsIGUsIHAsIGNzc3AsIHB0LCBwbHVnaW4sIHZhcnMpIHtcblx0XHRcdFx0XHR2YXIgYSA9IChlICsgXCJcIikuc3BsaXQoXCIgXCIpLFxuXHRcdFx0XHRcdFx0aTtcblx0XHRcdFx0XHR2YXJzID0ge307XG5cdFx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IDQ7IGkrKykge1xuXHRcdFx0XHRcdFx0dmFyc1twcm9wc1tpXV0gPSBhW2ldID0gYVtpXSB8fCBhWygoKGkgLSAxKSAvIDIpID4+IDApXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIGNzc3AucGFyc2UodCwgdmFycywgcHQsIHBsdWdpbik7XG5cdFx0XHRcdH07XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBAcHJpdmF0ZSB1c2VkIHdoZW4gb3RoZXIgcGx1Z2lucyBtdXN0IHR3ZWVuIHZhbHVlcyBmaXJzdCwgbGlrZSBCZXppZXJQbHVnaW4gb3IgVGhyb3dQcm9wc1BsdWdpbiwgZXRjLiBUaGF0IHBsdWdpbidzIHNldFJhdGlvKCkgZ2V0cyBjYWxsZWQgZmlyc3Qgc28gdGhhdCB0aGUgdmFsdWVzIGFyZSB1cGRhdGVkLCBhbmQgdGhlbiB3ZSBsb29wIHRocm91Z2ggdGhlIE1pbmlQcm9wVHdlZW5zICB3aGljaCBoYW5kbGUgY29weWluZyB0aGUgdmFsdWVzIGludG8gdGhlaXIgYXBwcm9wcmlhdGUgc2xvdHMgc28gdGhhdCB0aGV5IGNhbiB0aGVuIGJlIGFwcGxpZWQgY29ycmVjdGx5IGluIHRoZSBtYWluIENTU1BsdWdpbiBzZXRSYXRpbygpIG1ldGhvZC4gUmVtZW1iZXIsIHdlIHR5cGljYWxseSBjcmVhdGUgYSBwcm94eSBvYmplY3QgdGhhdCBoYXMgYSBidW5jaCBvZiB1bmlxdWVseS1uYW1lZCBwcm9wZXJ0aWVzIHRoYXQgd2UgZmVlZCB0byB0aGUgc3ViLXBsdWdpbiBhbmQgaXQgZG9lcyBpdHMgbWFnaWMgbm9ybWFsbHksIGFuZCB0aGVuIHdlIG11c3QgaW50ZXJwcmV0IHRob3NlIHZhbHVlcyBhbmQgYXBwbHkgdGhlbSB0byB0aGUgY3NzIGJlY2F1c2Ugb2Z0ZW4gbnVtYmVycyBtdXN0IGdldCBjb21iaW5lZC9jb25jYXRlbmF0ZWQsIHN1ZmZpeGVzIGFkZGVkLCBldGMuIHRvIHdvcmsgd2l0aCBjc3MsIGxpa2UgYm94U2hhZG93IGNvdWxkIGhhdmUgNCB2YWx1ZXMgcGx1cyBhIGNvbG9yLlxuXHRcdFx0X3NldFBsdWdpblJhdGlvID0gX2ludGVybmFscy5fc2V0UGx1Z2luUmF0aW8gPSBmdW5jdGlvbih2KSB7XG5cdFx0XHRcdHRoaXMucGx1Z2luLnNldFJhdGlvKHYpO1xuXHRcdFx0XHR2YXIgZCA9IHRoaXMuZGF0YSxcblx0XHRcdFx0XHRwcm94eSA9IGQucHJveHksXG5cdFx0XHRcdFx0bXB0ID0gZC5maXJzdE1QVCxcblx0XHRcdFx0XHRtaW4gPSAwLjAwMDAwMSxcblx0XHRcdFx0XHR2YWwsIHB0LCBpLCBzdHI7XG5cdFx0XHRcdHdoaWxlIChtcHQpIHtcblx0XHRcdFx0XHR2YWwgPSBwcm94eVttcHQudl07XG5cdFx0XHRcdFx0aWYgKG1wdC5yKSB7XG5cdFx0XHRcdFx0XHR2YWwgPSBNYXRoLnJvdW5kKHZhbCk7XG5cdFx0XHRcdFx0fSBlbHNlIGlmICh2YWwgPCBtaW4gJiYgdmFsID4gLW1pbikge1xuXHRcdFx0XHRcdFx0dmFsID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bXB0LnRbbXB0LnBdID0gdmFsO1xuXHRcdFx0XHRcdG1wdCA9IG1wdC5fbmV4dDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoZC5hdXRvUm90YXRlKSB7XG5cdFx0XHRcdFx0ZC5hdXRvUm90YXRlLnJvdGF0aW9uID0gcHJveHkucm90YXRpb247XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly9hdCB0aGUgZW5kLCB3ZSBtdXN0IHNldCB0aGUgQ1NTUHJvcFR3ZWVuJ3MgXCJlXCIgKGVuZCkgdmFsdWUgZHluYW1pY2FsbHkgaGVyZSBiZWNhdXNlIHRoYXQncyB3aGF0IGlzIHVzZWQgaW4gdGhlIGZpbmFsIHNldFJhdGlvKCkgbWV0aG9kLlxuXHRcdFx0XHRpZiAodiA9PT0gMSkge1xuXHRcdFx0XHRcdG1wdCA9IGQuZmlyc3RNUFQ7XG5cdFx0XHRcdFx0d2hpbGUgKG1wdCkge1xuXHRcdFx0XHRcdFx0cHQgPSBtcHQudDtcblx0XHRcdFx0XHRcdGlmICghcHQudHlwZSkge1xuXHRcdFx0XHRcdFx0XHRwdC5lID0gcHQucyArIHB0LnhzMDtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAocHQudHlwZSA9PT0gMSkge1xuXHRcdFx0XHRcdFx0XHRzdHIgPSBwdC54czAgKyBwdC5zICsgcHQueHMxO1xuXHRcdFx0XHRcdFx0XHRmb3IgKGkgPSAxOyBpIDwgcHQubDsgaSsrKSB7XG5cdFx0XHRcdFx0XHRcdFx0c3RyICs9IHB0W1wieG5cIitpXSArIHB0W1wieHNcIisoaSsxKV07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cHQuZSA9IHN0cjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1wdCA9IG1wdC5fbmV4dDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdC8qKlxuXHRcdFx0ICogQHByaXZhdGUgQGNvbnN0cnVjdG9yIFVzZWQgYnkgYSBmZXcgU3BlY2lhbFByb3BzIHRvIGhvbGQgaW1wb3J0YW50IHZhbHVlcyBmb3IgcHJveGllcy4gRm9yIGV4YW1wbGUsIF9wYXJzZVRvUHJveHkoKSBjcmVhdGVzIGEgTWluaVByb3BUd2VlbiBpbnN0YW5jZSBmb3IgZWFjaCBwcm9wZXJ0eSB0aGF0IG11c3QgZ2V0IHR3ZWVuZWQgb24gdGhlIHByb3h5LCBhbmQgd2UgcmVjb3JkIHRoZSBvcmlnaW5hbCBwcm9wZXJ0eSBuYW1lIGFzIHdlbGwgYXMgdGhlIHVuaXF1ZSBvbmUgd2UgY3JlYXRlIGZvciB0aGUgcHJveHksIHBsdXMgd2hldGhlciBvciBub3QgdGhlIHZhbHVlIG5lZWRzIHRvIGJlIHJvdW5kZWQgcGx1cyB0aGUgb3JpZ2luYWwgdmFsdWUuXG5cdFx0XHQgKiBAcGFyYW0geyFPYmplY3R9IHQgdGFyZ2V0IG9iamVjdCB3aG9zZSBwcm9wZXJ0eSB3ZSdyZSB0d2VlbmluZyAob2Z0ZW4gYSBDU1NQcm9wVHdlZW4pXG5cdFx0XHQgKiBAcGFyYW0geyFzdHJpbmd9IHAgcHJvcGVydHkgbmFtZVxuXHRcdFx0ICogQHBhcmFtIHsobnVtYmVyfHN0cmluZ3xvYmplY3QpfSB2IHZhbHVlXG5cdFx0XHQgKiBAcGFyYW0ge01pbmlQcm9wVHdlZW49fSBuZXh0IG5leHQgTWluaVByb3BUd2VlbiBpbiB0aGUgbGlua2VkIGxpc3Rcblx0XHRcdCAqIEBwYXJhbSB7Ym9vbGVhbj19IHIgaWYgdHJ1ZSwgdGhlIHR3ZWVuZWQgdmFsdWUgc2hvdWxkIGJlIHJvdW5kZWQgdG8gdGhlIG5lYXJlc3QgaW50ZWdlclxuXHRcdFx0ICovXG5cdFx0XHRNaW5pUHJvcFR3ZWVuID0gZnVuY3Rpb24odCwgcCwgdiwgbmV4dCwgcikge1xuXHRcdFx0XHR0aGlzLnQgPSB0O1xuXHRcdFx0XHR0aGlzLnAgPSBwO1xuXHRcdFx0XHR0aGlzLnYgPSB2O1xuXHRcdFx0XHR0aGlzLnIgPSByO1xuXHRcdFx0XHRpZiAobmV4dCkge1xuXHRcdFx0XHRcdG5leHQuX3ByZXYgPSB0aGlzO1xuXHRcdFx0XHRcdHRoaXMuX25leHQgPSBuZXh0O1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHQvKipcblx0XHRcdCAqIEBwcml2YXRlIE1vc3Qgb3RoZXIgcGx1Z2lucyAobGlrZSBCZXppZXJQbHVnaW4gYW5kIFRocm93UHJvcHNQbHVnaW4gYW5kIG90aGVycykgY2FuIG9ubHkgdHdlZW4gbnVtZXJpYyB2YWx1ZXMsIGJ1dCBDU1NQbHVnaW4gbXVzdCBhY2NvbW1vZGF0ZSBzcGVjaWFsIHZhbHVlcyB0aGF0IGhhdmUgYSBidW5jaCBvZiBleHRyYSBkYXRhIChsaWtlIGEgc3VmZml4IG9yIHN0cmluZ3MgYmV0d2VlbiBudW1lcmljIHZhbHVlcywgZXRjLikuIEZvciBleGFtcGxlLCBib3hTaGFkb3cgaGFzIHZhbHVlcyBsaWtlIFwiMTBweCAxMHB4IDIwcHggMzBweCByZ2IoMjU1LDAsMClcIiB3aGljaCB3b3VsZCB1dHRlcmx5IGNvbmZ1c2Ugb3RoZXIgcGx1Z2lucy4gVGhpcyBtZXRob2QgYWxsb3dzIHVzIHRvIHNwbGl0IHRoYXQgZGF0YSBhcGFydCBhbmQgZ3JhYiBvbmx5IHRoZSBudW1lcmljIGRhdGEgYW5kIGF0dGFjaCBpdCB0byB1bmlxdWVseS1uYW1lZCBwcm9wZXJ0aWVzIG9mIGEgZ2VuZXJpYyBwcm94eSBvYmplY3QgKHt9KSBzbyB0aGF0IHdlIGNhbiBmZWVkIHRoYXQgdG8gdmlydHVhbGx5IGFueSBwbHVnaW4gdG8gaGF2ZSB0aGUgbnVtYmVycyB0d2VlbmVkLiBIb3dldmVyLCB3ZSBtdXN0IGFsc28ga2VlcCB0cmFjayBvZiB3aGljaCBwcm9wZXJ0aWVzIGZyb20gdGhlIHByb3h5IGdvIHdpdGggd2hpY2ggQ1NTUHJvcFR3ZWVuIHZhbHVlcyBhbmQgaW5zdGFuY2VzLiBTbyB3ZSBjcmVhdGUgYSBsaW5rZWQgbGlzdCBvZiBNaW5pUHJvcFR3ZWVucy4gRWFjaCBvbmUgcmVjb3JkcyBhIHRhcmdldCAodGhlIG9yaWdpbmFsIENTU1Byb3BUd2VlbiksIHByb3BlcnR5IChsaWtlIFwic1wiIG9yIFwieG4xXCIgb3IgXCJ4bjJcIikgdGhhdCB3ZSdyZSB0d2VlbmluZyBhbmQgdGhlIHVuaXF1ZSBwcm9wZXJ0eSBuYW1lIHRoYXQgd2FzIHVzZWQgZm9yIHRoZSBwcm94eSAobGlrZSBcImJveFNoYWRvd194bjFcIiBhbmQgXCJib3hTaGFkb3dfeG4yXCIpIGFuZCB3aGV0aGVyIG9yIG5vdCB0aGV5IG5lZWQgdG8gYmUgcm91bmRlZC4gVGhhdCB3YXksIGluIHRoZSBfc2V0UGx1Z2luUmF0aW8oKSBtZXRob2Qgd2UgY2FuIHNpbXBseSBjb3B5IHRoZSB2YWx1ZXMgb3ZlciBmcm9tIHRoZSBwcm94eSB0byB0aGUgQ1NTUHJvcFR3ZWVuIGluc3RhbmNlKHMpLiBUaGVuLCB3aGVuIHRoZSBtYWluIENTU1BsdWdpbiBzZXRSYXRpbygpIG1ldGhvZCBydW5zIGFuZCBhcHBsaWVzIHRoZSBDU1NQcm9wVHdlZW4gdmFsdWVzIGFjY29yZGluZ2x5LCB0aGV5J3JlIHVwZGF0ZWQgbmljZWx5LiBTbyB0aGUgZXh0ZXJuYWwgcGx1Z2luIHR3ZWVucyB0aGUgbnVtYmVycywgX3NldFBsdWdpblJhdGlvKCkgY29waWVzIHRoZW0gb3ZlciwgYW5kIHNldFJhdGlvKCkgYWN0cyBub3JtYWxseSwgYXBwbHlpbmcgY3NzLXNwZWNpZmljIHZhbHVlcyB0byB0aGUgZWxlbWVudC5cblx0XHRcdCAqIFRoaXMgbWV0aG9kIHJldHVybnMgYW4gb2JqZWN0IHRoYXQgaGFzIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcblx0XHRcdCAqICAtIHByb3h5OiBhIGdlbmVyaWMgb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHN0YXJ0aW5nIHZhbHVlcyBmb3IgYWxsIHRoZSBwcm9wZXJ0aWVzIHRoYXQgd2lsbCBiZSB0d2VlbmVkIGJ5IHRoZSBleHRlcm5hbCBwbHVnaW4uICBUaGlzIGlzIHdoYXQgd2UgZmVlZCB0byB0aGUgZXh0ZXJuYWwgX29uSW5pdFR3ZWVuKCkgYXMgdGhlIHRhcmdldFxuXHRcdFx0ICogIC0gZW5kOiBhIGdlbmVyaWMgb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGVuZGluZyB2YWx1ZXMgZm9yIGFsbCB0aGUgcHJvcGVydGllcyB0aGF0IHdpbGwgYmUgdHdlZW5lZCBieSB0aGUgZXh0ZXJuYWwgcGx1Z2luLiBUaGlzIGlzIHdoYXQgd2UgZmVlZCB0byB0aGUgZXh0ZXJuYWwgcGx1Z2luJ3MgX29uSW5pdFR3ZWVuKCkgYXMgdGhlIGRlc3RpbmF0aW9uIHZhbHVlc1xuXHRcdFx0ICogIC0gZmlyc3RNUFQ6IHRoZSBmaXJzdCBNaW5pUHJvcFR3ZWVuIGluIHRoZSBsaW5rZWQgbGlzdFxuXHRcdFx0ICogIC0gcHQ6IHRoZSBmaXJzdCBDU1NQcm9wVHdlZW4gaW4gdGhlIGxpbmtlZCBsaXN0IHRoYXQgd2FzIGNyZWF0ZWQgd2hlbiBwYXJzaW5nLiBJZiBzaGFsbG93IGlzIHRydWUsIHRoaXMgbGlua2VkIGxpc3Qgd2lsbCBOT1QgYXR0YWNoIHRvIHRoZSBvbmUgcGFzc2VkIGludG8gdGhlIF9wYXJzZVRvUHJveHkoKSBhcyB0aGUgXCJwdFwiICg0dGgpIHBhcmFtZXRlci5cblx0XHRcdCAqIEBwYXJhbSB7IU9iamVjdH0gdCB0YXJnZXQgb2JqZWN0IHRvIGJlIHR3ZWVuZWRcblx0XHRcdCAqIEBwYXJhbSB7IShPYmplY3R8c3RyaW5nKX0gdmFycyB0aGUgb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGluZm9ybWF0aW9uIGFib3V0IHRoZSB0d2VlbmluZyB2YWx1ZXMgKHR5cGljYWxseSB0aGUgZW5kL2Rlc3RpbmF0aW9uIHZhbHVlcykgdGhhdCBzaG91bGQgYmUgcGFyc2VkXG5cdFx0XHQgKiBAcGFyYW0geyFDU1NQbHVnaW59IGNzc3AgVGhlIENTU1BsdWdpbiBpbnN0YW5jZVxuXHRcdFx0ICogQHBhcmFtIHtDU1NQcm9wVHdlZW49fSBwdCB0aGUgbmV4dCBDU1NQcm9wVHdlZW4gaW4gdGhlIGxpbmtlZCBsaXN0XG5cdFx0XHQgKiBAcGFyYW0ge1R3ZWVuUGx1Z2luPX0gcGx1Z2luIHRoZSBleHRlcm5hbCBUd2VlblBsdWdpbiBpbnN0YW5jZSB0aGF0IHdpbGwgYmUgaGFuZGxpbmcgdHdlZW5pbmcgdGhlIG51bWVyaWMgdmFsdWVzXG5cdFx0XHQgKiBAcGFyYW0ge2Jvb2xlYW49fSBzaGFsbG93IGlmIHRydWUsIHRoZSByZXN1bHRpbmcgbGlua2VkIGxpc3QgZnJvbSB0aGUgcGFyc2Ugd2lsbCBOT1QgYmUgYXR0YWNoZWQgdG8gdGhlIENTU1Byb3BUd2VlbiB0aGF0IHdhcyBwYXNzZWQgaW4gYXMgdGhlIFwicHRcIiAoNHRoKSBwYXJhbWV0ZXIuXG5cdFx0XHQgKiBAcmV0dXJuIEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczogcHJveHksIGVuZCwgZmlyc3RNUFQsIGFuZCBwdCAoc2VlIGFib3ZlIGZvciBkZXNjcmlwdGlvbnMpXG5cdFx0XHQgKi9cblx0XHRcdF9wYXJzZVRvUHJveHkgPSBfaW50ZXJuYWxzLl9wYXJzZVRvUHJveHkgPSBmdW5jdGlvbih0LCB2YXJzLCBjc3NwLCBwdCwgcGx1Z2luLCBzaGFsbG93KSB7XG5cdFx0XHRcdHZhciBicHQgPSBwdCxcblx0XHRcdFx0XHRzdGFydCA9IHt9LFxuXHRcdFx0XHRcdGVuZCA9IHt9LFxuXHRcdFx0XHRcdHRyYW5zZm9ybSA9IGNzc3AuX3RyYW5zZm9ybSxcblx0XHRcdFx0XHRvbGRGb3JjZSA9IF9mb3JjZVBULFxuXHRcdFx0XHRcdGksIHAsIHhwLCBtcHQsIGZpcnN0UFQ7XG5cdFx0XHRcdGNzc3AuX3RyYW5zZm9ybSA9IG51bGw7XG5cdFx0XHRcdF9mb3JjZVBUID0gdmFycztcblx0XHRcdFx0cHQgPSBmaXJzdFBUID0gY3NzcC5wYXJzZSh0LCB2YXJzLCBwdCwgcGx1Z2luKTtcblx0XHRcdFx0X2ZvcmNlUFQgPSBvbGRGb3JjZTtcblx0XHRcdFx0Ly9icmVhayBvZmYgZnJvbSB0aGUgbGlua2VkIGxpc3Qgc28gdGhlIG5ldyBvbmVzIGFyZSBpc29sYXRlZC5cblx0XHRcdFx0aWYgKHNoYWxsb3cpIHtcblx0XHRcdFx0XHRjc3NwLl90cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG5cdFx0XHRcdFx0aWYgKGJwdCkge1xuXHRcdFx0XHRcdFx0YnB0Ll9wcmV2ID0gbnVsbDtcblx0XHRcdFx0XHRcdGlmIChicHQuX3ByZXYpIHtcblx0XHRcdFx0XHRcdFx0YnB0Ll9wcmV2Ll9uZXh0ID0gbnVsbDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0d2hpbGUgKHB0ICYmIHB0ICE9PSBicHQpIHtcblx0XHRcdFx0XHRpZiAocHQudHlwZSA8PSAxKSB7XG5cdFx0XHRcdFx0XHRwID0gcHQucDtcblx0XHRcdFx0XHRcdGVuZFtwXSA9IHB0LnMgKyBwdC5jO1xuXHRcdFx0XHRcdFx0c3RhcnRbcF0gPSBwdC5zO1xuXHRcdFx0XHRcdFx0aWYgKCFzaGFsbG93KSB7XG5cdFx0XHRcdFx0XHRcdG1wdCA9IG5ldyBNaW5pUHJvcFR3ZWVuKHB0LCBcInNcIiwgcCwgbXB0LCBwdC5yKTtcblx0XHRcdFx0XHRcdFx0cHQuYyA9IDA7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAocHQudHlwZSA9PT0gMSkge1xuXHRcdFx0XHRcdFx0XHRpID0gcHQubDtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKC0taSA+IDApIHtcblx0XHRcdFx0XHRcdFx0XHR4cCA9IFwieG5cIiArIGk7XG5cdFx0XHRcdFx0XHRcdFx0cCA9IHB0LnAgKyBcIl9cIiArIHhwO1xuXHRcdFx0XHRcdFx0XHRcdGVuZFtwXSA9IHB0LmRhdGFbeHBdO1xuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0W3BdID0gcHRbeHBdO1xuXHRcdFx0XHRcdFx0XHRcdGlmICghc2hhbGxvdykge1xuXHRcdFx0XHRcdFx0XHRcdFx0bXB0ID0gbmV3IE1pbmlQcm9wVHdlZW4ocHQsIHhwLCBwLCBtcHQsIHB0LnJ4cFt4cF0pO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwdCA9IHB0Ll9uZXh0O1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB7cHJveHk6c3RhcnQsIGVuZDplbmQsIGZpcnN0TVBUOm1wdCwgcHQ6Zmlyc3RQVH07XG5cdFx0XHR9LFxuXG5cblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBAY29uc3RydWN0b3IgRWFjaCBwcm9wZXJ0eSB0aGF0IGlzIHR3ZWVuZWQgaGFzIGF0IGxlYXN0IG9uZSBDU1NQcm9wVHdlZW4gYXNzb2NpYXRlZCB3aXRoIGl0LiBUaGVzZSBpbnN0YW5jZXMgc3RvcmUgaW1wb3J0YW50IGluZm9ybWF0aW9uIGxpa2UgdGhlIHRhcmdldCwgcHJvcGVydHksIHN0YXJ0aW5nIHZhbHVlLCBhbW91bnQgb2YgY2hhbmdlLCBldGMuIFRoZXkgY2FuIGFsc28gb3B0aW9uYWxseSBoYXZlIGEgbnVtYmVyIG9mIFwiZXh0cmFcIiBzdHJpbmdzIGFuZCBudW1lcmljIHZhbHVlcyBuYW1lZCB4czEsIHhuMSwgeHMyLCB4bjIsIHhzMywgeG4zLCBldGMuIHdoZXJlIFwic1wiIGluZGljYXRlcyBzdHJpbmcgYW5kIFwiblwiIGluZGljYXRlcyBudW1iZXIuIFRoZXNlIGNhbiBiZSBwaWVjZWQgdG9nZXRoZXIgaW4gYSBjb21wbGV4LXZhbHVlIHR3ZWVuICh0eXBlOjEpIHRoYXQgaGFzIGFsdGVybmF0aW5nIHR5cGVzIG9mIGRhdGEgbGlrZSBhIHN0cmluZywgbnVtYmVyLCBzdHJpbmcsIG51bWJlciwgZXRjLiBGb3IgZXhhbXBsZSwgYm94U2hhZG93IGNvdWxkIGJlIFwiNXB4IDVweCA4cHggcmdiKDEwMiwgMTAyLCA1MSlcIi4gSW4gdGhhdCB2YWx1ZSwgdGhlcmUgYXJlIDYgbnVtYmVycyB0aGF0IG1heSBuZWVkIHRvIHR3ZWVuIGFuZCB0aGVuIHBpZWNlZCBiYWNrIHRvZ2V0aGVyIGludG8gYSBzdHJpbmcgYWdhaW4gd2l0aCBzcGFjZXMsIHN1ZmZpeGVzLCBldGMuIHhzMCBpcyBzcGVjaWFsIGluIHRoYXQgaXQgc3RvcmVzIHRoZSBzdWZmaXggZm9yIHN0YW5kYXJkICh0eXBlOjApIHR3ZWVucywgLU9SLSB0aGUgZmlyc3Qgc3RyaW5nIChwcmVmaXgpIGluIGEgY29tcGxleC12YWx1ZSAodHlwZToxKSBDU1NQcm9wVHdlZW4gLU9SLSBpdCBjYW4gYmUgdGhlIG5vbi10d2VlbmluZyB2YWx1ZSBpbiBhIHR5cGU6LTEgQ1NTUHJvcFR3ZWVuLiBXZSBkbyB0aGlzIHRvIGNvbnNlcnZlIG1lbW9yeS5cblx0XHRcdCAqIENTU1Byb3BUd2VlbnMgaGF2ZSB0aGUgZm9sbG93aW5nIG9wdGlvbmFsIHByb3BlcnRpZXMgYXMgd2VsbCAobm90IGRlZmluZWQgdGhyb3VnaCB0aGUgY29uc3RydWN0b3IpOlxuXHRcdFx0ICogIC0gbDogTGVuZ3RoIGluIHRlcm1zIG9mIHRoZSBudW1iZXIgb2YgZXh0cmEgcHJvcGVydGllcyB0aGF0IHRoZSBDU1NQcm9wVHdlZW4gaGFzIChkZWZhdWx0OiAwKS4gRm9yIGV4YW1wbGUsIGZvciBhIGJveFNoYWRvdyB3ZSBtYXkgbmVlZCB0byB0d2VlbiA1IG51bWJlcnMgaW4gd2hpY2ggY2FzZSBsIHdvdWxkIGJlIDU7IEtlZXAgaW4gbWluZCB0aGF0IHRoZSBzdGFydC9lbmQgdmFsdWVzIGZvciB0aGUgZmlyc3QgbnVtYmVyIHRoYXQncyB0d2VlbmVkIGFyZSBhbHdheXMgc3RvcmVkIGluIHRoZSBzIGFuZCBjIHByb3BlcnRpZXMgdG8gY29uc2VydmUgbWVtb3J5LiBBbGwgYWRkaXRpb25hbCB2YWx1ZXMgdGhlcmVhZnRlciBhcmUgc3RvcmVkIGluIHhuMSwgeG4yLCBldGMuXG5cdFx0XHQgKiAgLSB4Zmlyc3Q6IFRoZSBmaXJzdCBpbnN0YW5jZSBvZiBhbnkgc3ViLUNTU1Byb3BUd2VlbnMgdGhhdCBhcmUgdHdlZW5pbmcgcHJvcGVydGllcyBvZiB0aGlzIGluc3RhbmNlLiBGb3IgZXhhbXBsZSwgd2UgbWF5IHNwbGl0IHVwIGEgYm94U2hhZG93IHR3ZWVuIHNvIHRoYXQgdGhlcmUncyBhIG1haW4gQ1NTUHJvcFR3ZWVuIG9mIHR5cGU6MSB0aGF0IGhhcyB2YXJpb3VzIHhzKiBhbmQgeG4qIHZhbHVlcyBhc3NvY2lhdGVkIHdpdGggdGhlIGgtc2hhZG93LCB2LXNoYWRvdywgYmx1ciwgY29sb3IsIGV0Yy4gVGhlbiB3ZSBzcGF3biBhIENTU1Byb3BUd2VlbiBmb3IgZWFjaCBvZiB0aG9zZSB0aGF0IGhhcyBhIGhpZ2hlciBwcmlvcml0eSBhbmQgcnVucyBCRUZPUkUgdGhlIG1haW4gQ1NTUHJvcFR3ZWVuIHNvIHRoYXQgdGhlIHZhbHVlcyBhcmUgYWxsIHNldCBieSB0aGUgdGltZSBpdCBuZWVkcyB0byByZS1hc3NlbWJsZSB0aGVtLiBUaGUgeGZpcnN0IGdpdmVzIHVzIGFuIGVhc3kgd2F5IHRvIGlkZW50aWZ5IHRoZSBmaXJzdCBvbmUgaW4gdGhhdCBjaGFpbiB3aGljaCB0eXBpY2FsbHkgZW5kcyBhdCB0aGUgbWFpbiBvbmUgKGJlY2F1c2UgdGhleSdyZSBhbGwgcHJlcGVuZGUgdG8gdGhlIGxpbmtlZCBsaXN0KVxuXHRcdFx0ICogIC0gcGx1Z2luOiBUaGUgVHdlZW5QbHVnaW4gaW5zdGFuY2UgdGhhdCB3aWxsIGhhbmRsZSB0aGUgdHdlZW5pbmcgb2YgYW55IGNvbXBsZXggdmFsdWVzLiBGb3IgZXhhbXBsZSwgc29tZXRpbWVzIHdlIGRvbid0IHdhbnQgdG8gdXNlIG5vcm1hbCBzdWJ0d2VlbnMgKGxpa2UgeGZpcnN0IHJlZmVycyB0bykgdG8gdHdlZW4gdGhlIHZhbHVlcyAtIHdlIG1pZ2h0IHdhbnQgVGhyb3dQcm9wc1BsdWdpbiBvciBCZXppZXJQbHVnaW4gc29tZSBvdGhlciBwbHVnaW4gdG8gZG8gdGhlIGFjdHVhbCB0d2VlbmluZywgc28gd2UgY3JlYXRlIGEgcGx1Z2luIGluc3RhbmNlIGFuZCBzdG9yZSBhIHJlZmVyZW5jZSBoZXJlLiBXZSBuZWVkIHRoaXMgcmVmZXJlbmNlIHNvIHRoYXQgaWYgd2UgZ2V0IGEgcmVxdWVzdCB0byByb3VuZCB2YWx1ZXMgb3IgZGlzYWJsZSBhIHR3ZWVuLCB3ZSBjYW4gcGFzcyBhbG9uZyB0aGF0IHJlcXVlc3QuXG5cdFx0XHQgKiAgLSBkYXRhOiBBcmJpdHJhcnkgZGF0YSB0aGF0IG5lZWRzIHRvIGJlIHN0b3JlZCB3aXRoIHRoZSBDU1NQcm9wVHdlZW4uIFR5cGljYWxseSBpZiB3ZSdyZSBnb2luZyB0byBoYXZlIGEgcGx1Z2luIGhhbmRsZSB0aGUgdHdlZW5pbmcgb2YgYSBjb21wbGV4LXZhbHVlIHR3ZWVuLCB3ZSBjcmVhdGUgYSBnZW5lcmljIG9iamVjdCB0aGF0IHN0b3JlcyB0aGUgRU5EIHZhbHVlcyB0aGF0IHdlJ3JlIHR3ZWVuaW5nIHRvIGFuZCB0aGUgQ1NTUHJvcFR3ZWVuJ3MgeHMxLCB4czIsIGV0Yy4gaGF2ZSB0aGUgc3RhcnRpbmcgdmFsdWVzLiBXZSBzdG9yZSB0aGF0IG9iamVjdCBhcyBkYXRhLiBUaGF0IHdheSwgd2UgY2FuIHNpbXBseSBwYXNzIHRoYXQgb2JqZWN0IHRvIHRoZSBwbHVnaW4gYW5kIHVzZSB0aGUgQ1NTUHJvcFR3ZWVuIGFzIHRoZSB0YXJnZXQuXG5cdFx0XHQgKiAgLSBzZXRSYXRpbzogT25seSB1c2VkIGZvciB0eXBlOjIgdHdlZW5zIHRoYXQgcmVxdWlyZSBjdXN0b20gZnVuY3Rpb25hbGl0eS4gSW4gdGhpcyBjYXNlLCB3ZSBjYWxsIHRoZSBDU1NQcm9wVHdlZW4ncyBzZXRSYXRpbygpIG1ldGhvZCBhbmQgcGFzcyB0aGUgcmF0aW8gZWFjaCB0aW1lIHRoZSB0d2VlbiB1cGRhdGVzLiBUaGlzIGlzbid0IHF1aXRlIGFzIGVmZmljaWVudCBhcyBkb2luZyB0aGluZ3MgZGlyZWN0bHkgaW4gdGhlIENTU1BsdWdpbidzIHNldFJhdGlvKCkgbWV0aG9kLCBidXQgaXQncyB2ZXJ5IGNvbnZlbmllbnQgYW5kIGZsZXhpYmxlLlxuXHRcdFx0ICogQHBhcmFtIHshT2JqZWN0fSB0IFRhcmdldCBvYmplY3Qgd2hvc2UgcHJvcGVydHkgd2lsbCBiZSB0d2VlbmVkLiBPZnRlbiBhIERPTSBlbGVtZW50LCBidXQgbm90IGFsd2F5cy4gSXQgY291bGQgYmUgYW55dGhpbmcuXG5cdFx0XHQgKiBAcGFyYW0ge3N0cmluZ30gcCBQcm9wZXJ0eSB0byB0d2VlbiAobmFtZSkuIEZvciBleGFtcGxlLCB0byB0d2VlbiBlbGVtZW50LndpZHRoLCBwIHdvdWxkIGJlIFwid2lkdGhcIi5cblx0XHRcdCAqIEBwYXJhbSB7bnVtYmVyfSBzIFN0YXJ0aW5nIG51bWVyaWMgdmFsdWVcblx0XHRcdCAqIEBwYXJhbSB7bnVtYmVyfSBjIENoYW5nZSBpbiBudW1lcmljIHZhbHVlIG92ZXIgdGhlIGNvdXJzZSBvZiB0aGUgZW50aXJlIHR3ZWVuLiBGb3IgZXhhbXBsZSwgaWYgZWxlbWVudC53aWR0aCBzdGFydHMgYXQgNSBhbmQgc2hvdWxkIGVuZCBhdCAxMDAsIGMgd291bGQgYmUgOTUuXG5cdFx0XHQgKiBAcGFyYW0ge0NTU1Byb3BUd2Vlbj19IG5leHQgVGhlIG5leHQgQ1NTUHJvcFR3ZWVuIGluIHRoZSBsaW5rZWQgbGlzdC4gSWYgb25lIGlzIGRlZmluZWQsIHdlIHdpbGwgZGVmaW5lIGl0cyBfcHJldiBhcyB0aGUgbmV3IGluc3RhbmNlLCBhbmQgdGhlIG5ldyBpbnN0YW5jZSdzIF9uZXh0IHdpbGwgYmUgcG9pbnRlZCBhdCBpdC5cblx0XHRcdCAqIEBwYXJhbSB7bnVtYmVyPX0gdHlwZSBUaGUgdHlwZSBvZiBDU1NQcm9wVHdlZW4gd2hlcmUgLTEgPSBhIG5vbi10d2VlbmluZyB2YWx1ZSwgMCA9IGEgc3RhbmRhcmQgc2ltcGxlIHR3ZWVuLCAxID0gYSBjb21wbGV4IHZhbHVlIChsaWtlIG9uZSB0aGF0IGhhcyBtdWx0aXBsZSBudW1iZXJzIGluIGEgY29tbWEtIG9yIHNwYWNlLWRlbGltaXRlZCBzdHJpbmcgbGlrZSBib3JkZXI6XCIxcHggc29saWQgcmVkXCIpLCBhbmQgMiA9IG9uZSB0aGF0IHVzZXMgYSBjdXN0b20gc2V0UmF0aW8gZnVuY3Rpb24gdGhhdCBkb2VzIGFsbCBvZiB0aGUgd29yayBvZiBhcHBseWluZyB0aGUgdmFsdWVzIG9uIGVhY2ggdXBkYXRlLlxuXHRcdFx0ICogQHBhcmFtIHtzdHJpbmc9fSBuIE5hbWUgb2YgdGhlIHByb3BlcnR5IHRoYXQgc2hvdWxkIGJlIHVzZWQgZm9yIG92ZXJ3cml0aW5nIHB1cnBvc2VzIHdoaWNoIGlzIHR5cGljYWxseSB0aGUgc2FtZSBhcyBwIGJ1dCBub3QgYWx3YXlzLiBGb3IgZXhhbXBsZSwgd2UgbWF5IG5lZWQgdG8gY3JlYXRlIGEgc3VidHdlZW4gZm9yIHRoZSAybmQgcGFydCBvZiBhIFwiY2xpcDpyZWN0KC4uLilcIiB0d2VlbiBpbiB3aGljaCBjYXNlIFwicFwiIG1pZ2h0IGJlIHhzMSBidXQgXCJuXCIgaXMgc3RpbGwgXCJjbGlwXCJcblx0XHRcdCAqIEBwYXJhbSB7Ym9vbGVhbj19IHIgSWYgdHJ1ZSwgdGhlIHZhbHVlKHMpIHNob3VsZCBiZSByb3VuZGVkXG5cdFx0XHQgKiBAcGFyYW0ge251bWJlcj19IHByIFByaW9yaXR5IGluIHRoZSBsaW5rZWQgbGlzdCBvcmRlci4gSGlnaGVyIHByaW9yaXR5IENTU1Byb3BUd2VlbnMgd2lsbCBiZSB1cGRhdGVkIGJlZm9yZSBsb3dlciBwcmlvcml0eSBvbmVzLiBUaGUgZGVmYXVsdCBwcmlvcml0eSBpcyAwLlxuXHRcdFx0ICogQHBhcmFtIHtzdHJpbmc9fSBiIEJlZ2lubmluZyB2YWx1ZS4gV2Ugc3RvcmUgdGhpcyB0byBlbnN1cmUgdGhhdCBpdCBpcyBFWEFDVExZIHdoYXQgaXQgd2FzIHdoZW4gdGhlIHR3ZWVuIGJlZ2FuIHdpdGhvdXQgYW55IHJpc2sgb2YgaW50ZXJwcmV0YXRpb24gaXNzdWVzLlxuXHRcdFx0ICogQHBhcmFtIHtzdHJpbmc9fSBlIEVuZGluZyB2YWx1ZS4gV2Ugc3RvcmUgdGhpcyB0byBlbnN1cmUgdGhhdCBpdCBpcyBFWEFDVExZIHdoYXQgdGhlIHVzZXIgZGVmaW5lZCBhdCB0aGUgZW5kIG9mIHRoZSB0d2VlbiB3aXRob3V0IGFueSByaXNrIG9mIGludGVycHJldGF0aW9uIGlzc3Vlcy5cblx0XHRcdCAqL1xuXHRcdFx0Q1NTUHJvcFR3ZWVuID0gX2ludGVybmFscy5DU1NQcm9wVHdlZW4gPSBmdW5jdGlvbih0LCBwLCBzLCBjLCBuZXh0LCB0eXBlLCBuLCByLCBwciwgYiwgZSkge1xuXHRcdFx0XHR0aGlzLnQgPSB0OyAvL3RhcmdldFxuXHRcdFx0XHR0aGlzLnAgPSBwOyAvL3Byb3BlcnR5XG5cdFx0XHRcdHRoaXMucyA9IHM7IC8vc3RhcnRpbmcgdmFsdWVcblx0XHRcdFx0dGhpcy5jID0gYzsgLy9jaGFuZ2UgdmFsdWVcblx0XHRcdFx0dGhpcy5uID0gbiB8fCBwOyAvL25hbWUgdGhhdCB0aGlzIENTU1Byb3BUd2VlbiBzaG91bGQgYmUgYXNzb2NpYXRlZCB0byAodXN1YWxseSB0aGUgc2FtZSBhcyBwLCBidXQgbm90IGFsd2F5cyAtIG4gaXMgd2hhdCBvdmVyd3JpdGluZyBsb29rcyBhdClcblx0XHRcdFx0aWYgKCEodCBpbnN0YW5jZW9mIENTU1Byb3BUd2VlbikpIHtcblx0XHRcdFx0XHRfb3ZlcndyaXRlUHJvcHMucHVzaCh0aGlzLm4pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuciA9IHI7IC8vcm91bmQgKGJvb2xlYW4pXG5cdFx0XHRcdHRoaXMudHlwZSA9IHR5cGUgfHwgMDsgLy8wID0gbm9ybWFsIHR3ZWVuLCAtMSA9IG5vbi10d2VlbmluZyAoaW4gd2hpY2ggY2FzZSB4czAgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSB0YXJnZXQncyBwcm9wZXJ0eSwgbGlrZSB0cC50W3RwLnBdID0gdHAueHMwKSwgMSA9IGNvbXBsZXgtdmFsdWUgU3BlY2lhbFByb3AsIDIgPSBjdXN0b20gc2V0UmF0aW8oKSB0aGF0IGRvZXMgYWxsIHRoZSB3b3JrXG5cdFx0XHRcdGlmIChwcikge1xuXHRcdFx0XHRcdHRoaXMucHIgPSBwcjtcblx0XHRcdFx0XHRfaGFzUHJpb3JpdHkgPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuYiA9IChiID09PSB1bmRlZmluZWQpID8gcyA6IGI7XG5cdFx0XHRcdHRoaXMuZSA9IChlID09PSB1bmRlZmluZWQpID8gcyArIGMgOiBlO1xuXHRcdFx0XHRpZiAobmV4dCkge1xuXHRcdFx0XHRcdHRoaXMuX25leHQgPSBuZXh0O1xuXHRcdFx0XHRcdG5leHQuX3ByZXYgPSB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRfYWRkTm9uVHdlZW5pbmdOdW1lcmljUFQgPSBmdW5jdGlvbih0YXJnZXQsIHByb3AsIHN0YXJ0LCBlbmQsIG5leHQsIG92ZXJ3cml0ZVByb3ApIHsgLy9jbGVhbnMgdXAgc29tZSBjb2RlIHJlZHVuZGFuY2llcyBhbmQgaGVscHMgbWluaWZpY2F0aW9uLiBKdXN0IGEgZmFzdCB3YXkgdG8gYWRkIGEgTlVNRVJJQyBub24tdHdlZW5pbmcgQ1NTUHJvcFR3ZWVuXG5cdFx0XHRcdHZhciBwdCA9IG5ldyBDU1NQcm9wVHdlZW4odGFyZ2V0LCBwcm9wLCBzdGFydCwgZW5kIC0gc3RhcnQsIG5leHQsIC0xLCBvdmVyd3JpdGVQcm9wKTtcblx0XHRcdFx0cHQuYiA9IHN0YXJ0O1xuXHRcdFx0XHRwdC5lID0gcHQueHMwID0gZW5kO1xuXHRcdFx0XHRyZXR1cm4gcHQ7XG5cdFx0XHR9LFxuXG5cdFx0XHQvKipcblx0XHRcdCAqIFRha2VzIGEgdGFyZ2V0LCB0aGUgYmVnaW5uaW5nIHZhbHVlIGFuZCBlbmRpbmcgdmFsdWUgKGFzIHN0cmluZ3MpIGFuZCBwYXJzZXMgdGhlbSBpbnRvIGEgQ1NTUHJvcFR3ZWVuIChwb3NzaWJseSB3aXRoIGNoaWxkIENTU1Byb3BUd2VlbnMpIHRoYXQgYWNjb21tb2RhdGVzIG11bHRpcGxlIG51bWJlcnMsIGNvbG9ycywgY29tbWEtZGVsaW1pdGVkIHZhbHVlcywgZXRjLiBGb3IgZXhhbXBsZTpcblx0XHRcdCAqIHNwLnBhcnNlQ29tcGxleChlbGVtZW50LCBcImJveFNoYWRvd1wiLCBcIjVweCAxMHB4IDIwcHggcmdiKDI1NSwxMDIsNTEpXCIsIFwiMHB4IDBweCAwcHggcmVkXCIsIHRydWUsIFwiMHB4IDBweCAwcHggcmdiKDAsMCwwLDApXCIsIHB0KTtcblx0XHRcdCAqIEl0IHdpbGwgd2FsayB0aHJvdWdoIHRoZSBiZWdpbm5pbmcgYW5kIGVuZGluZyB2YWx1ZXMgKHdoaWNoIHNob3VsZCBiZSBpbiB0aGUgc2FtZSBmb3JtYXQgd2l0aCB0aGUgc2FtZSBudW1iZXIgYW5kIHR5cGUgb2YgdmFsdWVzKSBhbmQgZmlndXJlIG91dCB3aGljaCBwYXJ0cyBhcmUgbnVtYmVycywgd2hhdCBzdHJpbmdzIHNlcGFyYXRlIHRoZSBudW1lcmljL3R3ZWVuYWJsZSB2YWx1ZXMsIGFuZCB0aGVuIGNyZWF0ZSB0aGUgQ1NTUHJvcFR3ZWVucyBhY2NvcmRpbmdseS4gSWYgYSBwbHVnaW4gaXMgZGVmaW5lZCwgbm8gY2hpbGQgQ1NTUHJvcFR3ZWVucyB3aWxsIGJlIGNyZWF0ZWQuIEluc3RlYWQsIHRoZSBlbmRpbmcgdmFsdWVzIHdpbGwgYmUgc3RvcmVkIGluIHRoZSBcImRhdGFcIiBwcm9wZXJ0eSBvZiB0aGUgcmV0dXJuZWQgQ1NTUHJvcFR3ZWVuIGxpa2U6IHtzOi01LCB4bjE6LTEwLCB4bjI6LTIwLCB4bjM6MjU1LCB4bjQ6MCwgeG41OjB9IHNvIHRoYXQgaXQgY2FuIGJlIGZlZCB0byBhbnkgb3RoZXIgcGx1Z2luIGFuZCBpdCdsbCBiZSBwbGFpbiBudW1lcmljIHR3ZWVucyBidXQgdGhlIHJlY29tcG9zaXRpb24gb2YgdGhlIGNvbXBsZXggdmFsdWUgd2lsbCBiZSBoYW5kbGVkIGluc2lkZSBDU1NQbHVnaW4ncyBzZXRSYXRpbygpLlxuXHRcdFx0ICogSWYgYSBzZXRSYXRpbyBpcyBkZWZpbmVkLCB0aGUgdHlwZSBvZiB0aGUgQ1NTUHJvcFR3ZWVuIHdpbGwgYmUgc2V0IHRvIDIgYW5kIHJlY29tcG9zaXRpb24gb2YgdGhlIHZhbHVlcyB3aWxsIGJlIHRoZSByZXNwb25zaWJpbGl0eSBvZiB0aGF0IG1ldGhvZC5cblx0XHRcdCAqXG5cdFx0XHQgKiBAcGFyYW0geyFPYmplY3R9IHQgVGFyZ2V0IHdob3NlIHByb3BlcnR5IHdpbGwgYmUgdHdlZW5lZFxuXHRcdFx0ICogQHBhcmFtIHshc3RyaW5nfSBwIFByb3BlcnR5IHRoYXQgd2lsbCBiZSB0d2VlbmVkIChpdHMgbmFtZSwgbGlrZSBcImxlZnRcIiBvciBcImJhY2tncm91bmRDb2xvclwiIG9yIFwiYm94U2hhZG93XCIpXG5cdFx0XHQgKiBAcGFyYW0ge3N0cmluZ30gYiBCZWdpbm5pbmcgdmFsdWVcblx0XHRcdCAqIEBwYXJhbSB7c3RyaW5nfSBlIEVuZGluZyB2YWx1ZVxuXHRcdFx0ICogQHBhcmFtIHtib29sZWFufSBjbHJzIElmIHRydWUsIHRoZSB2YWx1ZSBjb3VsZCBjb250YWluIGEgY29sb3IgdmFsdWUgbGlrZSBcInJnYigyNTUsMCwwKVwiIG9yIFwiI0YwMFwiIG9yIFwicmVkXCIuIFRoZSBkZWZhdWx0IGlzIGZhbHNlLCBzbyBubyBjb2xvcnMgd2lsbCBiZSByZWNvZ25pemVkIChhIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbilcblx0XHRcdCAqIEBwYXJhbSB7KHN0cmluZ3xudW1iZXJ8T2JqZWN0KX0gZGZsdCBUaGUgZGVmYXVsdCBiZWdpbm5pbmcgdmFsdWUgdGhhdCBzaG91bGQgYmUgdXNlZCBpZiBubyB2YWxpZCBiZWdpbm5pbmcgdmFsdWUgaXMgZGVmaW5lZCBvciBpZiB0aGUgbnVtYmVyIG9mIHZhbHVlcyBpbnNpZGUgdGhlIGNvbXBsZXggYmVnaW5uaW5nIGFuZCBlbmRpbmcgdmFsdWVzIGRvbid0IG1hdGNoXG5cdFx0XHQgKiBAcGFyYW0gez9DU1NQcm9wVHdlZW59IHB0IENTU1Byb3BUd2VlbiBpbnN0YW5jZSB0aGF0IGlzIHRoZSBjdXJyZW50IGhlYWQgb2YgdGhlIGxpbmtlZCBsaXN0ICh3ZSdsbCBwcmVwZW5kIHRvIHRoaXMpLlxuXHRcdFx0ICogQHBhcmFtIHtudW1iZXI9fSBwciBQcmlvcml0eSBpbiB0aGUgbGlua2VkIGxpc3Qgb3JkZXIuIEhpZ2hlciBwcmlvcml0eSBwcm9wZXJ0aWVzIHdpbGwgYmUgdXBkYXRlZCBiZWZvcmUgbG93ZXIgcHJpb3JpdHkgb25lcy4gVGhlIGRlZmF1bHQgcHJpb3JpdHkgaXMgMC5cblx0XHRcdCAqIEBwYXJhbSB7VHdlZW5QbHVnaW49fSBwbHVnaW4gSWYgYSBwbHVnaW4gc2hvdWxkIGhhbmRsZSB0aGUgdHdlZW5pbmcgb2YgZXh0cmEgcHJvcGVydGllcywgcGFzcyB0aGUgcGx1Z2luIGluc3RhbmNlIGhlcmUuIElmIG9uZSBpcyBkZWZpbmVkLCB0aGVuIE5PIHN1YnR3ZWVucyB3aWxsIGJlIGNyZWF0ZWQgZm9yIGFueSBleHRyYSBwcm9wZXJ0aWVzICh0aGUgcHJvcGVydGllcyB3aWxsIGJlIGNyZWF0ZWQgLSBqdXN0IG5vdCBhZGRpdGlvbmFsIENTU1Byb3BUd2VlbiBpbnN0YW5jZXMgdG8gdHdlZW4gdGhlbSkgYmVjYXVzZSB0aGUgcGx1Z2luIGlzIGV4cGVjdGVkIHRvIGRvIHNvLiBIb3dldmVyLCB0aGUgZW5kIHZhbHVlcyBXSUxMIGJlIHBvcHVsYXRlZCBpbiB0aGUgXCJkYXRhXCIgcHJvcGVydHksIGxpa2Uge3M6MTAwLCB4bjE6NTAsIHhuMjozMDB9XG5cdFx0XHQgKiBAcGFyYW0ge2Z1bmN0aW9uKG51bWJlcik9fSBzZXRSYXRpbyBJZiB2YWx1ZXMgc2hvdWxkIGJlIHNldCBpbiBhIGN1c3RvbSBmdW5jdGlvbiBpbnN0ZWFkIG9mIGJlaW5nIHBpZWNlZCB0b2dldGhlciBpbiBhIHR5cGU6MSAoY29tcGxleC12YWx1ZSkgQ1NTUHJvcFR3ZWVuLCBkZWZpbmUgdGhhdCBjdXN0b20gZnVuY3Rpb24gaGVyZS5cblx0XHRcdCAqIEByZXR1cm4ge0NTU1Byb3BUd2Vlbn0gVGhlIGZpcnN0IENTU1Byb3BUd2VlbiBpbiB0aGUgbGlua2VkIGxpc3Qgd2hpY2ggaW5jbHVkZXMgdGhlIG5ldyBvbmUocykgYWRkZWQgYnkgdGhlIHBhcnNlQ29tcGxleCgpIGNhbGwuXG5cdFx0XHQgKi9cblx0XHRcdF9wYXJzZUNvbXBsZXggPSBDU1NQbHVnaW4ucGFyc2VDb21wbGV4ID0gZnVuY3Rpb24odCwgcCwgYiwgZSwgY2xycywgZGZsdCwgcHQsIHByLCBwbHVnaW4sIHNldFJhdGlvKSB7XG5cdFx0XHRcdC8vREVCVUc6IF9sb2coXCJwYXJzZUNvbXBsZXg6IFwiK3ArXCIsIGI6IFwiK2IrXCIsIGU6IFwiK2UpO1xuXHRcdFx0XHRiID0gYiB8fCBkZmx0IHx8IFwiXCI7XG5cdFx0XHRcdHB0ID0gbmV3IENTU1Byb3BUd2Vlbih0LCBwLCAwLCAwLCBwdCwgKHNldFJhdGlvID8gMiA6IDEpLCBudWxsLCBmYWxzZSwgcHIsIGIsIGUpO1xuXHRcdFx0XHRlICs9IFwiXCI7IC8vZW5zdXJlcyBpdCdzIGEgc3RyaW5nXG5cdFx0XHRcdHZhciBiYSA9IGIuc3BsaXQoXCIsIFwiKS5qb2luKFwiLFwiKS5zcGxpdChcIiBcIiksIC8vYmVnaW5uaW5nIGFycmF5XG5cdFx0XHRcdFx0ZWEgPSBlLnNwbGl0KFwiLCBcIikuam9pbihcIixcIikuc3BsaXQoXCIgXCIpLCAvL2VuZGluZyBhcnJheVxuXHRcdFx0XHRcdGwgPSBiYS5sZW5ndGgsXG5cdFx0XHRcdFx0YXV0b1JvdW5kID0gKF9hdXRvUm91bmQgIT09IGZhbHNlKSxcblx0XHRcdFx0XHRpLCB4aSwgbmksIGJ2LCBldiwgYm51bXMsIGVudW1zLCBibiwgaGFzQWxwaGEsIHRlbXAsIGN2LCBzdHIsIHVzZUhTTDtcblx0XHRcdFx0aWYgKGUuaW5kZXhPZihcIixcIikgIT09IC0xIHx8IGIuaW5kZXhPZihcIixcIikgIT09IC0xKSB7XG5cdFx0XHRcdFx0YmEgPSBiYS5qb2luKFwiIFwiKS5yZXBsYWNlKF9jb21tYXNPdXRzaWRlUGFyZW5FeHAsIFwiLCBcIikuc3BsaXQoXCIgXCIpO1xuXHRcdFx0XHRcdGVhID0gZWEuam9pbihcIiBcIikucmVwbGFjZShfY29tbWFzT3V0c2lkZVBhcmVuRXhwLCBcIiwgXCIpLnNwbGl0KFwiIFwiKTtcblx0XHRcdFx0XHRsID0gYmEubGVuZ3RoO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChsICE9PSBlYS5sZW5ndGgpIHtcblx0XHRcdFx0XHQvL0RFQlVHOiBfbG9nKFwibWlzbWF0Y2hlZCBmb3JtYXR0aW5nIGRldGVjdGVkIG9uIFwiICsgcCArIFwiIChcIiArIGIgKyBcIiB2cyBcIiArIGUgKyBcIilcIik7XG5cdFx0XHRcdFx0YmEgPSAoZGZsdCB8fCBcIlwiKS5zcGxpdChcIiBcIik7XG5cdFx0XHRcdFx0bCA9IGJhLmxlbmd0aDtcblx0XHRcdFx0fVxuXHRcdFx0XHRwdC5wbHVnaW4gPSBwbHVnaW47XG5cdFx0XHRcdHB0LnNldFJhdGlvID0gc2V0UmF0aW87XG5cdFx0XHRcdF9jb2xvckV4cC5sYXN0SW5kZXggPSAwO1xuXHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHRcdFx0YnYgPSBiYVtpXTtcblx0XHRcdFx0XHRldiA9IGVhW2ldO1xuXHRcdFx0XHRcdGJuID0gcGFyc2VGbG9hdChidik7XG5cdFx0XHRcdFx0Ly9pZiB0aGUgdmFsdWUgYmVnaW5zIHdpdGggYSBudW1iZXIgKG1vc3QgY29tbW9uKS4gSXQncyBmaW5lIGlmIGl0IGhhcyBhIHN1ZmZpeCBsaWtlIHB4XG5cdFx0XHRcdFx0aWYgKGJuIHx8IGJuID09PSAwKSB7XG5cdFx0XHRcdFx0XHRwdC5hcHBlbmRYdHJhKFwiXCIsIGJuLCBfcGFyc2VDaGFuZ2UoZXYsIGJuKSwgZXYucmVwbGFjZShfcmVsTnVtRXhwLCBcIlwiKSwgKGF1dG9Sb3VuZCAmJiBldi5pbmRleE9mKFwicHhcIikgIT09IC0xKSwgdHJ1ZSk7XG5cblx0XHRcdFx0XHQvL2lmIHRoZSB2YWx1ZSBpcyBhIGNvbG9yXG5cdFx0XHRcdFx0fSBlbHNlIGlmIChjbHJzICYmIF9jb2xvckV4cC50ZXN0KGJ2KSkge1xuXHRcdFx0XHRcdFx0c3RyID0gZXYuY2hhckF0KGV2Lmxlbmd0aCAtIDEpID09PSBcIixcIiA/IFwiKSxcIiA6IFwiKVwiOyAvL2lmIHRoZXJlJ3MgYSBjb21tYSBhdCB0aGUgZW5kLCByZXRhaW4gaXQuXG5cdFx0XHRcdFx0XHR1c2VIU0wgPSAoZXYuaW5kZXhPZihcImhzbFwiKSAhPT0gLTEgJiYgX3N1cHBvcnRzT3BhY2l0eSk7XG5cdFx0XHRcdFx0XHRidiA9IF9wYXJzZUNvbG9yKGJ2LCB1c2VIU0wpO1xuXHRcdFx0XHRcdFx0ZXYgPSBfcGFyc2VDb2xvcihldiwgdXNlSFNMKTtcblx0XHRcdFx0XHRcdGhhc0FscGhhID0gKGJ2Lmxlbmd0aCArIGV2Lmxlbmd0aCA+IDYpO1xuXHRcdFx0XHRcdFx0aWYgKGhhc0FscGhhICYmICFfc3VwcG9ydHNPcGFjaXR5ICYmIGV2WzNdID09PSAwKSB7IC8vb2xkZXIgdmVyc2lvbnMgb2YgSUUgZG9uJ3Qgc3VwcG9ydCByZ2JhKCksIHNvIGlmIHRoZSBkZXN0aW5hdGlvbiBhbHBoYSBpcyAwLCBqdXN0IHVzZSBcInRyYW5zcGFyZW50XCIgZm9yIHRoZSBlbmQgY29sb3Jcblx0XHRcdFx0XHRcdFx0cHRbXCJ4c1wiICsgcHQubF0gKz0gcHQubCA/IFwiIHRyYW5zcGFyZW50XCIgOiBcInRyYW5zcGFyZW50XCI7XG5cdFx0XHRcdFx0XHRcdHB0LmUgPSBwdC5lLnNwbGl0KGVhW2ldKS5qb2luKFwidHJhbnNwYXJlbnRcIik7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRpZiAoIV9zdXBwb3J0c09wYWNpdHkpIHsgLy9vbGQgdmVyc2lvbnMgb2YgSUUgZG9uJ3Qgc3VwcG9ydCByZ2JhKCkuXG5cdFx0XHRcdFx0XHRcdFx0aGFzQWxwaGEgPSBmYWxzZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRpZiAodXNlSFNMKSB7XG5cdFx0XHRcdFx0XHRcdFx0cHQuYXBwZW5kWHRyYSgoaGFzQWxwaGEgPyBcImhzbGEoXCIgOiBcImhzbChcIiksIGJ2WzBdLCBfcGFyc2VDaGFuZ2UoZXZbMF0sIGJ2WzBdKSwgXCIsXCIsIGZhbHNlLCB0cnVlKVxuXHRcdFx0XHRcdFx0XHRcdFx0LmFwcGVuZFh0cmEoXCJcIiwgYnZbMV0sIF9wYXJzZUNoYW5nZShldlsxXSwgYnZbMV0pLCBcIiUsXCIsIGZhbHNlKVxuXHRcdFx0XHRcdFx0XHRcdFx0LmFwcGVuZFh0cmEoXCJcIiwgYnZbMl0sIF9wYXJzZUNoYW5nZShldlsyXSwgYnZbMl0pLCAoaGFzQWxwaGEgPyBcIiUsXCIgOiBcIiVcIiArIHN0ciksIGZhbHNlKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRwdC5hcHBlbmRYdHJhKChoYXNBbHBoYSA/IFwicmdiYShcIiA6IFwicmdiKFwiKSwgYnZbMF0sIGV2WzBdIC0gYnZbMF0sIFwiLFwiLCB0cnVlLCB0cnVlKVxuXHRcdFx0XHRcdFx0XHRcdFx0LmFwcGVuZFh0cmEoXCJcIiwgYnZbMV0sIGV2WzFdIC0gYnZbMV0sIFwiLFwiLCB0cnVlKVxuXHRcdFx0XHRcdFx0XHRcdFx0LmFwcGVuZFh0cmEoXCJcIiwgYnZbMl0sIGV2WzJdIC0gYnZbMl0sIChoYXNBbHBoYSA/IFwiLFwiIDogc3RyKSwgdHJ1ZSk7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRpZiAoaGFzQWxwaGEpIHtcblx0XHRcdFx0XHRcdFx0XHRidiA9IChidi5sZW5ndGggPCA0KSA/IDEgOiBidlszXTtcblx0XHRcdFx0XHRcdFx0XHRwdC5hcHBlbmRYdHJhKFwiXCIsIGJ2LCAoKGV2Lmxlbmd0aCA8IDQpID8gMSA6IGV2WzNdKSAtIGJ2LCBzdHIsIGZhbHNlKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0X2NvbG9yRXhwLmxhc3RJbmRleCA9IDA7IC8vb3RoZXJ3aXNlIHRoZSB0ZXN0KCkgb24gdGhlIFJlZ0V4cCBjb3VsZCBtb3ZlIHRoZSBsYXN0SW5kZXggYW5kIHRhaW50IGZ1dHVyZSByZXN1bHRzLlxuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGJudW1zID0gYnYubWF0Y2goX251bUV4cCk7IC8vZ2V0cyBlYWNoIGdyb3VwIG9mIG51bWJlcnMgaW4gdGhlIGJlZ2lubmluZyB2YWx1ZSBzdHJpbmcgYW5kIGRyb3BzIHRoZW0gaW50byBhbiBhcnJheVxuXG5cdFx0XHRcdFx0XHQvL2lmIG5vIG51bWJlciBpcyBmb3VuZCwgdHJlYXQgaXQgYXMgYSBub24tdHdlZW5pbmcgdmFsdWUgYW5kIGp1c3QgYXBwZW5kIHRoZSBzdHJpbmcgdG8gdGhlIGN1cnJlbnQgeHMuXG5cdFx0XHRcdFx0XHRpZiAoIWJudW1zKSB7XG5cdFx0XHRcdFx0XHRcdHB0W1wieHNcIiArIHB0LmxdICs9IHB0LmwgPyBcIiBcIiArIGJ2IDogYnY7XG5cblx0XHRcdFx0XHRcdC8vbG9vcCB0aHJvdWdoIGFsbCB0aGUgbnVtYmVycyB0aGF0IGFyZSBmb3VuZCBhbmQgY29uc3RydWN0IHRoZSBleHRyYSB2YWx1ZXMgb24gdGhlIHB0LlxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0ZW51bXMgPSBldi5tYXRjaChfcmVsTnVtRXhwKTsgLy9nZXQgZWFjaCBncm91cCBvZiBudW1iZXJzIGluIHRoZSBlbmQgdmFsdWUgc3RyaW5nIGFuZCBkcm9wIHRoZW0gaW50byBhbiBhcnJheS4gV2UgYWxsb3cgcmVsYXRpdmUgdmFsdWVzIHRvbywgbGlrZSArPTUwIG9yIC09LjVcblx0XHRcdFx0XHRcdFx0aWYgKCFlbnVtcyB8fCBlbnVtcy5sZW5ndGggIT09IGJudW1zLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0XHRcdC8vREVCVUc6IF9sb2coXCJtaXNtYXRjaGVkIGZvcm1hdHRpbmcgZGV0ZWN0ZWQgb24gXCIgKyBwICsgXCIgKFwiICsgYiArIFwiIHZzIFwiICsgZSArIFwiKVwiKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcHQ7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0bmkgPSAwO1xuXHRcdFx0XHRcdFx0XHRmb3IgKHhpID0gMDsgeGkgPCBibnVtcy5sZW5ndGg7IHhpKyspIHtcblx0XHRcdFx0XHRcdFx0XHRjdiA9IGJudW1zW3hpXTtcblx0XHRcdFx0XHRcdFx0XHR0ZW1wID0gYnYuaW5kZXhPZihjdiwgbmkpO1xuXHRcdFx0XHRcdFx0XHRcdHB0LmFwcGVuZFh0cmEoYnYuc3Vic3RyKG5pLCB0ZW1wIC0gbmkpLCBOdW1iZXIoY3YpLCBfcGFyc2VDaGFuZ2UoZW51bXNbeGldLCBjdiksIFwiXCIsIChhdXRvUm91bmQgJiYgYnYuc3Vic3RyKHRlbXAgKyBjdi5sZW5ndGgsIDIpID09PSBcInB4XCIpLCAoeGkgPT09IDApKTtcblx0XHRcdFx0XHRcdFx0XHRuaSA9IHRlbXAgKyBjdi5sZW5ndGg7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cHRbXCJ4c1wiICsgcHQubF0gKz0gYnYuc3Vic3RyKG5pKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly9pZiB0aGVyZSBhcmUgcmVsYXRpdmUgdmFsdWVzIChcIis9XCIgb3IgXCItPVwiIHByZWZpeCksIHdlIG5lZWQgdG8gYWRqdXN0IHRoZSBlbmRpbmcgdmFsdWUgdG8gZWxpbWluYXRlIHRoZSBwcmVmaXhlcyBhbmQgY29tYmluZSB0aGUgdmFsdWVzIHByb3Blcmx5LlxuXHRcdFx0XHRpZiAoZS5pbmRleE9mKFwiPVwiKSAhPT0gLTEpIGlmIChwdC5kYXRhKSB7XG5cdFx0XHRcdFx0c3RyID0gcHQueHMwICsgcHQuZGF0YS5zO1xuXHRcdFx0XHRcdGZvciAoaSA9IDE7IGkgPCBwdC5sOyBpKyspIHtcblx0XHRcdFx0XHRcdHN0ciArPSBwdFtcInhzXCIgKyBpXSArIHB0LmRhdGFbXCJ4blwiICsgaV07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHB0LmUgPSBzdHIgKyBwdFtcInhzXCIgKyBpXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIXB0LmwpIHtcblx0XHRcdFx0XHRwdC50eXBlID0gLTE7XG5cdFx0XHRcdFx0cHQueHMwID0gcHQuZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gcHQueGZpcnN0IHx8IHB0O1xuXHRcdFx0fSxcblx0XHRcdGkgPSA5O1xuXG5cblx0XHRwID0gQ1NTUHJvcFR3ZWVuLnByb3RvdHlwZTtcblx0XHRwLmwgPSBwLnByID0gMDsgLy9sZW5ndGggKG51bWJlciBvZiBleHRyYSBwcm9wZXJ0aWVzIGxpa2UgeG4xLCB4bjIsIHhuMywgZXRjLlxuXHRcdHdoaWxlICgtLWkgPiAwKSB7XG5cdFx0XHRwW1wieG5cIiArIGldID0gMDtcblx0XHRcdHBbXCJ4c1wiICsgaV0gPSBcIlwiO1xuXHRcdH1cblx0XHRwLnhzMCA9IFwiXCI7XG5cdFx0cC5fbmV4dCA9IHAuX3ByZXYgPSBwLnhmaXJzdCA9IHAuZGF0YSA9IHAucGx1Z2luID0gcC5zZXRSYXRpbyA9IHAucnhwID0gbnVsbDtcblxuXG5cdFx0LyoqXG5cdFx0ICogQXBwZW5kcyBhbmQgZXh0cmEgdHdlZW5pbmcgdmFsdWUgdG8gYSBDU1NQcm9wVHdlZW4gYW5kIGF1dG9tYXRpY2FsbHkgbWFuYWdlcyBhbnkgcHJlZml4IGFuZCBzdWZmaXggc3RyaW5ncy4gVGhlIGZpcnN0IGV4dHJhIHZhbHVlIGlzIHN0b3JlZCBpbiB0aGUgcyBhbmQgYyBvZiB0aGUgbWFpbiBDU1NQcm9wVHdlZW4gaW5zdGFuY2UsIGJ1dCB0aGVyZWFmdGVyIGFueSBleHRyYXMgYXJlIHN0b3JlZCBpbiB0aGUgeG4xLCB4bjIsIHhuMywgZXRjLiBUaGUgcHJlZml4ZXMgYW5kIHN1ZmZpeGVzIGFyZSBzdG9yZWQgaW4gdGhlIHhzMCwgeHMxLCB4czIsIGV0Yy4gcHJvcGVydGllcy4gRm9yIGV4YW1wbGUsIGlmIEkgd2FsayB0aHJvdWdoIGEgY2xpcCB2YWx1ZSBsaWtlIFwicmVjdCgxMHB4LCA1cHgsIDBweCwgMjBweClcIiwgdGhlIHZhbHVlcyB3b3VsZCBiZSBzdG9yZWQgbGlrZSB0aGlzOlxuXHRcdCAqIHhzMDpcInJlY3QoXCIsIHM6MTAsIHhzMTpcInB4LCBcIiwgeG4xOjUsIHhzMjpcInB4LCBcIiwgeG4yOjAsIHhzMzpcInB4LCBcIiwgeG4zOjIwLCB4bjQ6XCJweClcIlxuXHRcdCAqIEFuZCB0aGV5J2QgYWxsIGdldCBqb2luZWQgdG9nZXRoZXIgd2hlbiB0aGUgQ1NTUGx1Z2luIHJlbmRlcnMgKGluIHRoZSBzZXRSYXRpbygpIG1ldGhvZCkuXG5cdFx0ICogQHBhcmFtIHtzdHJpbmc9fSBwZnggUHJlZml4IChpZiBhbnkpXG5cdFx0ICogQHBhcmFtIHshbnVtYmVyfSBzIFN0YXJ0aW5nIHZhbHVlXG5cdFx0ICogQHBhcmFtIHshbnVtYmVyfSBjIENoYW5nZSBpbiBudW1lcmljIHZhbHVlIG92ZXIgdGhlIGNvdXJzZSBvZiB0aGUgZW50aXJlIHR3ZWVuLiBGb3IgZXhhbXBsZSwgaWYgdGhlIHN0YXJ0IGlzIDUgYW5kIHRoZSBlbmQgaXMgMTAwLCB0aGUgY2hhbmdlIHdvdWxkIGJlIDk1LlxuXHRcdCAqIEBwYXJhbSB7c3RyaW5nPX0gc2Z4IFN1ZmZpeCAoaWYgYW55KVxuXHRcdCAqIEBwYXJhbSB7Ym9vbGVhbj19IHIgUm91bmQgKGlmIHRydWUpLlxuXHRcdCAqIEBwYXJhbSB7Ym9vbGVhbj19IHBhZCBJZiB0cnVlLCB0aGlzIGV4dHJhIHZhbHVlIHNob3VsZCBiZSBzZXBhcmF0ZWQgYnkgdGhlIHByZXZpb3VzIG9uZSBieSBhIHNwYWNlLiBJZiB0aGVyZSBpcyBubyBwcmV2aW91cyBleHRyYSBhbmQgcGFkIGlzIHRydWUsIGl0IHdpbGwgYXV0b21hdGljYWxseSBkcm9wIHRoZSBzcGFjZS5cblx0XHQgKiBAcmV0dXJuIHtDU1NQcm9wVHdlZW59IHJldHVybnMgaXRzZWxmIHNvIHRoYXQgbXVsdGlwbGUgbWV0aG9kcyBjYW4gYmUgY2hhaW5lZCB0b2dldGhlci5cblx0XHQgKi9cblx0XHRwLmFwcGVuZFh0cmEgPSBmdW5jdGlvbihwZngsIHMsIGMsIHNmeCwgciwgcGFkKSB7XG5cdFx0XHR2YXIgcHQgPSB0aGlzLFxuXHRcdFx0XHRsID0gcHQubDtcblx0XHRcdHB0W1wieHNcIiArIGxdICs9IChwYWQgJiYgbCkgPyBcIiBcIiArIHBmeCA6IHBmeCB8fCBcIlwiO1xuXHRcdFx0aWYgKCFjKSBpZiAobCAhPT0gMCAmJiAhcHQucGx1Z2luKSB7IC8vdHlwaWNhbGx5IHdlJ2xsIGNvbWJpbmUgbm9uLWNoYW5naW5nIHZhbHVlcyByaWdodCBpbnRvIHRoZSB4cyB0byBvcHRpbWl6ZSBwZXJmb3JtYW5jZSwgYnV0IHdlIGRvbid0IGNvbWJpbmUgdGhlbSB3aGVuIHRoZXJlJ3MgYSBwbHVnaW4gdGhhdCB3aWxsIGJlIHR3ZWVuaW5nIHRoZSB2YWx1ZXMgYmVjYXVzZSBpdCBtYXkgZGVwZW5kIG9uIHRoZSB2YWx1ZXMgYmVpbmcgc3BsaXQgYXBhcnQsIGxpa2UgZm9yIGEgYmV6aWVyLCBpZiBhIHZhbHVlIGRvZXNuJ3QgY2hhbmdlIGJldHdlZW4gdGhlIGZpcnN0IGFuZCBzZWNvbmQgaXRlcmF0aW9uIGJ1dCB0aGVuIGl0IGRvZXMgb24gdGhlIDNyZCwgd2UnbGwgcnVuIGludG8gdHJvdWJsZSBiZWNhdXNlIHRoZXJlJ3Mgbm8geG4gc2xvdCBmb3IgdGhhdCB2YWx1ZSFcblx0XHRcdFx0cHRbXCJ4c1wiICsgbF0gKz0gcyArIChzZnggfHwgXCJcIik7XG5cdFx0XHRcdHJldHVybiBwdDtcblx0XHRcdH1cblx0XHRcdHB0LmwrKztcblx0XHRcdHB0LnR5cGUgPSBwdC5zZXRSYXRpbyA/IDIgOiAxO1xuXHRcdFx0cHRbXCJ4c1wiICsgcHQubF0gPSBzZnggfHwgXCJcIjtcblx0XHRcdGlmIChsID4gMCkge1xuXHRcdFx0XHRwdC5kYXRhW1wieG5cIiArIGxdID0gcyArIGM7XG5cdFx0XHRcdHB0LnJ4cFtcInhuXCIgKyBsXSA9IHI7IC8vcm91bmQgZXh0cmEgcHJvcGVydHkgKHdlIG5lZWQgdG8gdGFwIGludG8gdGhpcyBpbiB0aGUgX3BhcnNlVG9Qcm94eSgpIG1ldGhvZClcblx0XHRcdFx0cHRbXCJ4blwiICsgbF0gPSBzO1xuXHRcdFx0XHRpZiAoIXB0LnBsdWdpbikge1xuXHRcdFx0XHRcdHB0LnhmaXJzdCA9IG5ldyBDU1NQcm9wVHdlZW4ocHQsIFwieG5cIiArIGwsIHMsIGMsIHB0LnhmaXJzdCB8fCBwdCwgMCwgcHQubiwgciwgcHQucHIpO1xuXHRcdFx0XHRcdHB0LnhmaXJzdC54czAgPSAwOyAvL2p1c3QgdG8gZW5zdXJlIHRoYXQgdGhlIHByb3BlcnR5IHN0YXlzIG51bWVyaWMgd2hpY2ggaGVscHMgbW9kZXJuIGJyb3dzZXJzIHNwZWVkIHVwIHByb2Nlc3NpbmcuIFJlbWVtYmVyLCBpbiB0aGUgc2V0UmF0aW8oKSBtZXRob2QsIHdlIGRvIHB0LnRbcHQucF0gPSB2YWwgKyBwdC54czAgc28gaWYgcHQueHMwIGlzIFwiXCIgKHRoZSBkZWZhdWx0KSwgaXQnbGwgY2FzdCB0aGUgZW5kIHZhbHVlIGFzIGEgc3RyaW5nLiBXaGVuIGEgcHJvcGVydHkgaXMgYSBudW1iZXIgc29tZXRpbWVzIGFuZCBhIHN0cmluZyBzb21ldGltZXMsIGl0IHByZXZlbnRzIHRoZSBjb21waWxlciBmcm9tIGxvY2tpbmcgaW4gdGhlIGRhdGEgdHlwZSwgc2xvd2luZyB0aGluZ3MgZG93biBzbGlnaHRseS5cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gcHQ7XG5cdFx0XHR9XG5cdFx0XHRwdC5kYXRhID0ge3M6cyArIGN9O1xuXHRcdFx0cHQucnhwID0ge307XG5cdFx0XHRwdC5zID0gcztcblx0XHRcdHB0LmMgPSBjO1xuXHRcdFx0cHQuciA9IHI7XG5cdFx0XHRyZXR1cm4gcHQ7XG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIEBjb25zdHJ1Y3RvciBBIFNwZWNpYWxQcm9wIGlzIGJhc2ljYWxseSBhIGNzcyBwcm9wZXJ0eSB0aGF0IG5lZWRzIHRvIGJlIHRyZWF0ZWQgaW4gYSBub24tc3RhbmRhcmQgd2F5LCBsaWtlIGlmIGl0IG1heSBjb250YWluIGEgY29tcGxleCB2YWx1ZSBsaWtlIGJveFNoYWRvdzpcIjVweCAxMHB4IDE1cHggcmdiKDI1NSwgMTAyLCA1MSlcIiBvciBpZiBpdCBpcyBhc3NvY2lhdGVkIHdpdGggYW5vdGhlciBwbHVnaW4gbGlrZSBUaHJvd1Byb3BzUGx1Z2luIG9yIEJlemllclBsdWdpbi4gRXZlcnkgU3BlY2lhbFByb3AgaXMgYXNzb2NpYXRlZCB3aXRoIGEgcGFydGljdWxhciBwcm9wZXJ0eSBuYW1lIGxpa2UgXCJib3hTaGFkb3dcIiBvciBcInRocm93UHJvcHNcIiBvciBcImJlemllclwiIGFuZCBpdCB3aWxsIGludGVyY2VwdCB0aG9zZSB2YWx1ZXMgaW4gdGhlIHZhcnMgb2JqZWN0IHRoYXQncyBwYXNzZWQgdG8gdGhlIENTU1BsdWdpbiBhbmQgaGFuZGxlIHRoZW0gYWNjb3JkaW5nbHkuXG5cdFx0ICogQHBhcmFtIHshc3RyaW5nfSBwIFByb3BlcnR5IG5hbWUgKGxpa2UgXCJib3hTaGFkb3dcIiBvciBcInRocm93UHJvcHNcIilcblx0XHQgKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnMgQW4gb2JqZWN0IGNvbnRhaW5pbmcgYW55IG9mIHRoZSBmb2xsb3dpbmcgY29uZmlndXJhdGlvbiBvcHRpb25zOlxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgIC0gZGVmYXVsdFZhbHVlOiB0aGUgZGVmYXVsdCB2YWx1ZVxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgIC0gcGFyc2VyOiBBIGZ1bmN0aW9uIHRoYXQgc2hvdWxkIGJlIGNhbGxlZCB3aGVuIHRoZSBhc3NvY2lhdGVkIHByb3BlcnR5IG5hbWUgaXMgZm91bmQgaW4gdGhlIHZhcnMuIFRoaXMgZnVuY3Rpb24gc2hvdWxkIHJldHVybiBhIENTU1Byb3BUd2VlbiBpbnN0YW5jZSBhbmQgaXQgc2hvdWxkIGVuc3VyZSB0aGF0IGl0IGlzIHByb3Blcmx5IGluc2VydGVkIGludG8gdGhlIGxpbmtlZCBsaXN0LiBJdCB3aWxsIHJlY2VpdmUgNCBwYXJhbXRlcnM6IDEpIFRoZSB0YXJnZXQsIDIpIFRoZSB2YWx1ZSBkZWZpbmVkIGluIHRoZSB2YXJzLCAzKSBUaGUgQ1NTUGx1Z2luIGluc3RhbmNlICh3aG9zZSBfZmlyc3RQVCBzaG91bGQgYmUgdXNlZCBmb3IgdGhlIGxpbmtlZCBsaXN0KSwgYW5kIDQpIEEgY29tcHV0ZWQgc3R5bGUgb2JqZWN0IGlmIG9uZSB3YXMgY2FsY3VsYXRlZCAodGhpcyBpcyBhIHNwZWVkIG9wdGltaXphdGlvbiB0aGF0IGFsbG93cyByZXRyaWV2YWwgb2Ygc3RhcnRpbmcgdmFsdWVzIHF1aWNrZXIpXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgLSBmb3JtYXR0ZXI6IGEgZnVuY3Rpb24gdGhhdCBmb3JtYXRzIGFueSB2YWx1ZSByZWNlaXZlZCBmb3IgdGhpcyBzcGVjaWFsIHByb3BlcnR5IChmb3IgZXhhbXBsZSwgYm94U2hhZG93IGNvdWxkIHRha2UgXCI1cHggNXB4IHJlZFwiIGFuZCBmb3JtYXQgaXQgdG8gXCI1cHggNXB4IDBweCAwcHggcmVkXCIgc28gdGhhdCBib3RoIHRoZSBiZWdpbm5pbmcgYW5kIGVuZGluZyB2YWx1ZXMgaGF2ZSBhIGNvbW1vbiBvcmRlciBhbmQgcXVhbnRpdHkgb2YgdmFsdWVzLilcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAtIHByZWZpeDogaWYgdHJ1ZSwgd2UnbGwgZGV0ZXJtaW5lIHdoZXRoZXIgb3Igbm90IHRoaXMgcHJvcGVydHkgcmVxdWlyZXMgYSB2ZW5kb3IgcHJlZml4IChsaWtlIFdlYmtpdCBvciBNb3ogb3IgbXMgb3IgTylcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAtIGNvbG9yOiBzZXQgdGhpcyB0byB0cnVlIGlmIHRoZSB2YWx1ZSBmb3IgdGhpcyBTcGVjaWFsUHJvcCBtYXkgY29udGFpbiBjb2xvci1yZWxhdGVkIHZhbHVlcyBsaWtlIHJnYigpLCByZ2JhKCksIGV0Yy5cblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAtIHByaW9yaXR5OiBwcmlvcml0eSBpbiB0aGUgbGlua2VkIGxpc3Qgb3JkZXIuIEhpZ2hlciBwcmlvcml0eSBTcGVjaWFsUHJvcHMgd2lsbCBiZSB1cGRhdGVkIGJlZm9yZSBsb3dlciBwcmlvcml0eSBvbmVzLiBUaGUgZGVmYXVsdCBwcmlvcml0eSBpcyAwLlxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgIC0gbXVsdGk6IGlmIHRydWUsIHRoZSBmb3JtYXR0ZXIgc2hvdWxkIGFjY29tbW9kYXRlIGEgY29tbWEtZGVsaW1pdGVkIGxpc3Qgb2YgdmFsdWVzLCBsaWtlIGJveFNoYWRvdyBjb3VsZCBoYXZlIG11bHRpcGxlIGJveFNoYWRvd3MgbGlzdGVkIG91dC5cblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAtIGNvbGxhcHNpYmxlOiBpZiB0cnVlLCB0aGUgZm9ybWF0dGVyIHNob3VsZCB0cmVhdCB0aGUgdmFsdWUgbGlrZSBpdCdzIGEgdG9wL3JpZ2h0L2JvdHRvbS9sZWZ0IHZhbHVlIHRoYXQgY291bGQgYmUgY29sbGFwc2VkLCBsaWtlIFwiNXB4XCIgd291bGQgYXBwbHkgdG8gYWxsLCBcIjVweCwgMTBweFwiIHdvdWxkIHVzZSA1cHggZm9yIHRvcC9ib3R0b20gYW5kIDEwcHggZm9yIHJpZ2h0L2xlZnQsIGV0Yy5cblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAtIGtleXdvcmQ6IGEgc3BlY2lhbCBrZXl3b3JkIHRoYXQgY2FuIFtvcHRpb25hbGx5XSBiZSBmb3VuZCBpbnNpZGUgdGhlIHZhbHVlIChsaWtlIFwiaW5zZXRcIiBmb3IgYm94U2hhZG93KS4gVGhpcyBhbGxvd3MgdXMgdG8gdmFsaWRhdGUgYmVnaW5uaW5nL2VuZGluZyB2YWx1ZXMgdG8gbWFrZSBzdXJlIHRoZXkgbWF0Y2ggKGlmIHRoZSBrZXl3b3JkIGlzIGZvdW5kIGluIG9uZSwgaXQnbGwgYmUgYWRkZWQgdG8gdGhlIG90aGVyIGZvciBjb25zaXN0ZW5jeSBieSBkZWZhdWx0KS5cblx0XHQgKi9cblx0XHR2YXIgU3BlY2lhbFByb3AgPSBmdW5jdGlvbihwLCBvcHRpb25zKSB7XG5cdFx0XHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXHRcdFx0XHR0aGlzLnAgPSBvcHRpb25zLnByZWZpeCA/IF9jaGVja1Byb3BQcmVmaXgocCkgfHwgcCA6IHA7XG5cdFx0XHRcdF9zcGVjaWFsUHJvcHNbcF0gPSBfc3BlY2lhbFByb3BzW3RoaXMucF0gPSB0aGlzO1xuXHRcdFx0XHR0aGlzLmZvcm1hdCA9IG9wdGlvbnMuZm9ybWF0dGVyIHx8IF9nZXRGb3JtYXR0ZXIob3B0aW9ucy5kZWZhdWx0VmFsdWUsIG9wdGlvbnMuY29sb3IsIG9wdGlvbnMuY29sbGFwc2libGUsIG9wdGlvbnMubXVsdGkpO1xuXHRcdFx0XHRpZiAob3B0aW9ucy5wYXJzZXIpIHtcblx0XHRcdFx0XHR0aGlzLnBhcnNlID0gb3B0aW9ucy5wYXJzZXI7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy5jbHJzID0gb3B0aW9ucy5jb2xvcjtcblx0XHRcdFx0dGhpcy5tdWx0aSA9IG9wdGlvbnMubXVsdGk7XG5cdFx0XHRcdHRoaXMua2V5d29yZCA9IG9wdGlvbnMua2V5d29yZDtcblx0XHRcdFx0dGhpcy5kZmx0ID0gb3B0aW9ucy5kZWZhdWx0VmFsdWU7XG5cdFx0XHRcdHRoaXMucHIgPSBvcHRpb25zLnByaW9yaXR5IHx8IDA7XG5cdFx0XHR9LFxuXG5cdFx0XHQvL3Nob3J0Y3V0IGZvciBjcmVhdGluZyBhIG5ldyBTcGVjaWFsUHJvcCB0aGF0IGNhbiBhY2NlcHQgbXVsdGlwbGUgcHJvcGVydGllcyBhcyBhIGNvbW1hLWRlbGltaXRlZCBsaXN0IChoZWxwcyBtaW5pZmljYXRpb24pLiBkZmx0IGNhbiBiZSBhbiBhcnJheSBmb3IgbXVsdGlwbGUgdmFsdWVzICh3ZSBkb24ndCBkbyBhIGNvbW1hLWRlbGltaXRlZCBsaXN0IGJlY2F1c2UgdGhlIGRlZmF1bHQgdmFsdWUgbWF5IGNvbnRhaW4gY29tbWFzLCBsaWtlIHJlY3QoMHB4LDBweCwwcHgsMHB4KSkuIFdlIGF0dGFjaCB0aGlzIG1ldGhvZCB0byB0aGUgU3BlY2lhbFByb3AgY2xhc3Mvb2JqZWN0IGluc3RlYWQgb2YgdXNpbmcgYSBwcml2YXRlIF9jcmVhdGVTcGVjaWFsUHJvcCgpIG1ldGhvZCBzbyB0aGF0IHdlIGNhbiB0YXAgaW50byBpdCBleHRlcm5hbGx5IGlmIG5lY2Vzc2FyeSwgbGlrZSBmcm9tIGFub3RoZXIgcGx1Z2luLlxuXHRcdFx0X3JlZ2lzdGVyQ29tcGxleFNwZWNpYWxQcm9wID0gX2ludGVybmFscy5fcmVnaXN0ZXJDb21wbGV4U3BlY2lhbFByb3AgPSBmdW5jdGlvbihwLCBvcHRpb25zLCBkZWZhdWx0cykge1xuXHRcdFx0XHRpZiAodHlwZW9mKG9wdGlvbnMpICE9PSBcIm9iamVjdFwiKSB7XG5cdFx0XHRcdFx0b3B0aW9ucyA9IHtwYXJzZXI6ZGVmYXVsdHN9OyAvL3RvIG1ha2UgYmFja3dhcmRzIGNvbXBhdGlibGUgd2l0aCBvbGRlciB2ZXJzaW9ucyBvZiBCZXppZXJQbHVnaW4gYW5kIFRocm93UHJvcHNQbHVnaW5cblx0XHRcdFx0fVxuXHRcdFx0XHR2YXIgYSA9IHAuc3BsaXQoXCIsXCIpLFxuXHRcdFx0XHRcdGQgPSBvcHRpb25zLmRlZmF1bHRWYWx1ZSxcblx0XHRcdFx0XHRpLCB0ZW1wO1xuXHRcdFx0XHRkZWZhdWx0cyA9IGRlZmF1bHRzIHx8IFtkXTtcblx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRvcHRpb25zLnByZWZpeCA9IChpID09PSAwICYmIG9wdGlvbnMucHJlZml4KTtcblx0XHRcdFx0XHRvcHRpb25zLmRlZmF1bHRWYWx1ZSA9IGRlZmF1bHRzW2ldIHx8IGQ7XG5cdFx0XHRcdFx0dGVtcCA9IG5ldyBTcGVjaWFsUHJvcChhW2ldLCBvcHRpb25zKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0Ly9jcmVhdGVzIGEgcGxhY2Vob2xkZXIgc3BlY2lhbCBwcm9wIGZvciBhIHBsdWdpbiBzbyB0aGF0IHRoZSBwcm9wZXJ0eSBnZXRzIGNhdWdodCB0aGUgZmlyc3QgdGltZSBhIHR3ZWVuIG9mIGl0IGlzIGF0dGVtcHRlZCwgYW5kIGF0IHRoYXQgdGltZSBpdCBtYWtlcyB0aGUgcGx1Z2luIHJlZ2lzdGVyIGl0c2VsZiwgdGh1cyB0YWtpbmcgb3ZlciBmb3IgYWxsIGZ1dHVyZSB0d2VlbnMgb2YgdGhhdCBwcm9wZXJ0eS4gVGhpcyBhbGxvd3MgdXMgdG8gbm90IG1hbmRhdGUgdGhhdCB0aGluZ3MgbG9hZCBpbiBhIHBhcnRpY3VsYXIgb3JkZXIgYW5kIGl0IGFsc28gYWxsb3dzIHVzIHRvIGxvZygpIGFuIGVycm9yIHRoYXQgaW5mb3JtcyB0aGUgdXNlciB3aGVuIHRoZXkgYXR0ZW1wdCB0byB0d2VlbiBhbiBleHRlcm5hbCBwbHVnaW4tcmVsYXRlZCBwcm9wZXJ0eSB3aXRob3V0IGxvYWRpbmcgaXRzIC5qcyBmaWxlLlxuXHRcdFx0X3JlZ2lzdGVyUGx1Z2luUHJvcCA9IGZ1bmN0aW9uKHApIHtcblx0XHRcdFx0aWYgKCFfc3BlY2lhbFByb3BzW3BdKSB7XG5cdFx0XHRcdFx0dmFyIHBsdWdpbk5hbWUgPSBwLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcC5zdWJzdHIoMSkgKyBcIlBsdWdpblwiO1xuXHRcdFx0XHRcdF9yZWdpc3RlckNvbXBsZXhTcGVjaWFsUHJvcChwLCB7cGFyc2VyOmZ1bmN0aW9uKHQsIGUsIHAsIGNzc3AsIHB0LCBwbHVnaW4sIHZhcnMpIHtcblx0XHRcdFx0XHRcdHZhciBwbHVnaW5DbGFzcyA9IF9nbG9iYWxzLmNvbS5ncmVlbnNvY2sucGx1Z2luc1twbHVnaW5OYW1lXTtcblx0XHRcdFx0XHRcdGlmICghcGx1Z2luQ2xhc3MpIHtcblx0XHRcdFx0XHRcdFx0X2xvZyhcIkVycm9yOiBcIiArIHBsdWdpbk5hbWUgKyBcIiBqcyBmaWxlIG5vdCBsb2FkZWQuXCIpO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcHQ7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRwbHVnaW5DbGFzcy5fY3NzUmVnaXN0ZXIoKTtcblx0XHRcdFx0XHRcdHJldHVybiBfc3BlY2lhbFByb3BzW3BdLnBhcnNlKHQsIGUsIHAsIGNzc3AsIHB0LCBwbHVnaW4sIHZhcnMpO1xuXHRcdFx0XHRcdH19KTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXG5cdFx0cCA9IFNwZWNpYWxQcm9wLnByb3RvdHlwZTtcblxuXHRcdC8qKlxuXHRcdCAqIEFsaWFzIGZvciBfcGFyc2VDb21wbGV4KCkgdGhhdCBhdXRvbWF0aWNhbGx5IHBsdWdzIGluIGNlcnRhaW4gdmFsdWVzIGZvciB0aGlzIFNwZWNpYWxQcm9wLCBsaWtlIGl0cyBwcm9wZXJ0eSBuYW1lLCB3aGV0aGVyIG9yIG5vdCBjb2xvcnMgc2hvdWxkIGJlIHNlbnNlZCwgdGhlIGRlZmF1bHQgdmFsdWUsIGFuZCBwcmlvcml0eS4gSXQgYWxzbyBsb29rcyBmb3IgYW55IGtleXdvcmQgdGhhdCB0aGUgU3BlY2lhbFByb3AgZGVmaW5lcyAobGlrZSBcImluc2V0XCIgZm9yIGJveFNoYWRvdykgYW5kIGVuc3VyZXMgdGhhdCB0aGUgYmVnaW5uaW5nIGFuZCBlbmRpbmcgdmFsdWVzIGhhdmUgdGhlIHNhbWUgbnVtYmVyIG9mIHZhbHVlcyBmb3IgU3BlY2lhbFByb3BzIHdoZXJlIG11bHRpIGlzIHRydWUgKGxpa2UgYm94U2hhZG93IGFuZCB0ZXh0U2hhZG93IGNhbiBoYXZlIGEgY29tbWEtZGVsaW1pdGVkIGxpc3QpXG5cdFx0ICogQHBhcmFtIHshT2JqZWN0fSB0IHRhcmdldCBlbGVtZW50XG5cdFx0ICogQHBhcmFtIHsoc3RyaW5nfG51bWJlcnxvYmplY3QpfSBiIGJlZ2lubmluZyB2YWx1ZVxuXHRcdCAqIEBwYXJhbSB7KHN0cmluZ3xudW1iZXJ8b2JqZWN0KX0gZSBlbmRpbmcgKGRlc3RpbmF0aW9uKSB2YWx1ZVxuXHRcdCAqIEBwYXJhbSB7Q1NTUHJvcFR3ZWVuPX0gcHQgbmV4dCBDU1NQcm9wVHdlZW4gaW4gdGhlIGxpbmtlZCBsaXN0XG5cdFx0ICogQHBhcmFtIHtUd2VlblBsdWdpbj19IHBsdWdpbiBJZiBhbm90aGVyIHBsdWdpbiB3aWxsIGJlIHR3ZWVuaW5nIHRoZSBjb21wbGV4IHZhbHVlLCB0aGF0IFR3ZWVuUGx1Z2luIGluc3RhbmNlIGdvZXMgaGVyZS5cblx0XHQgKiBAcGFyYW0ge2Z1bmN0aW9uPX0gc2V0UmF0aW8gSWYgYSBjdXN0b20gc2V0UmF0aW8oKSBtZXRob2Qgc2hvdWxkIGJlIHVzZWQgdG8gaGFuZGxlIHRoaXMgY29tcGxleCB2YWx1ZSwgdGhhdCBnb2VzIGhlcmUuXG5cdFx0ICogQHJldHVybiB7Q1NTUHJvcFR3ZWVuPX0gRmlyc3QgQ1NTUHJvcFR3ZWVuIGluIHRoZSBsaW5rZWQgbGlzdFxuXHRcdCAqL1xuXHRcdHAucGFyc2VDb21wbGV4ID0gZnVuY3Rpb24odCwgYiwgZSwgcHQsIHBsdWdpbiwgc2V0UmF0aW8pIHtcblx0XHRcdHZhciBrd2QgPSB0aGlzLmtleXdvcmQsXG5cdFx0XHRcdGksIGJhLCBlYSwgbCwgYmksIGVpO1xuXHRcdFx0Ly9pZiB0aGlzIFNwZWNpYWxQcm9wJ3MgdmFsdWUgY2FuIGNvbnRhaW4gYSBjb21tYS1kZWxpbWl0ZWQgbGlzdCBvZiB2YWx1ZXMgKGxpa2UgYm94U2hhZG93IG9yIHRleHRTaGFkb3cpLCB3ZSBtdXN0IHBhcnNlIHRoZW0gaW4gYSBzcGVjaWFsIHdheSwgYW5kIGxvb2sgZm9yIGEga2V5d29yZCAobGlrZSBcImluc2V0XCIgZm9yIGJveFNoYWRvdykgYW5kIGVuc3VyZSB0aGF0IHRoZSBiZWdpbm5pbmcgYW5kIGVuZGluZyBCT1RIIGhhdmUgaXQgaWYgdGhlIGVuZCBkZWZpbmVzIGl0IGFzIHN1Y2guIFdlIGFsc28gbXVzdCBlbnN1cmUgdGhhdCB0aGVyZSBhcmUgYW4gZXF1YWwgbnVtYmVyIG9mIHZhbHVlcyBzcGVjaWZpZWQgKHdlIGNhbid0IHR3ZWVuIDEgYm94U2hhZG93IHRvIDMgZm9yIGV4YW1wbGUpXG5cdFx0XHRpZiAodGhpcy5tdWx0aSkgaWYgKF9jb21tYXNPdXRzaWRlUGFyZW5FeHAudGVzdChlKSB8fCBfY29tbWFzT3V0c2lkZVBhcmVuRXhwLnRlc3QoYikpIHtcblx0XHRcdFx0YmEgPSBiLnJlcGxhY2UoX2NvbW1hc091dHNpZGVQYXJlbkV4cCwgXCJ8XCIpLnNwbGl0KFwifFwiKTtcblx0XHRcdFx0ZWEgPSBlLnJlcGxhY2UoX2NvbW1hc091dHNpZGVQYXJlbkV4cCwgXCJ8XCIpLnNwbGl0KFwifFwiKTtcblx0XHRcdH0gZWxzZSBpZiAoa3dkKSB7XG5cdFx0XHRcdGJhID0gW2JdO1xuXHRcdFx0XHRlYSA9IFtlXTtcblx0XHRcdH1cblx0XHRcdGlmIChlYSkge1xuXHRcdFx0XHRsID0gKGVhLmxlbmd0aCA+IGJhLmxlbmd0aCkgPyBlYS5sZW5ndGggOiBiYS5sZW5ndGg7XG5cdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcblx0XHRcdFx0XHRiID0gYmFbaV0gPSBiYVtpXSB8fCB0aGlzLmRmbHQ7XG5cdFx0XHRcdFx0ZSA9IGVhW2ldID0gZWFbaV0gfHwgdGhpcy5kZmx0O1xuXHRcdFx0XHRcdGlmIChrd2QpIHtcblx0XHRcdFx0XHRcdGJpID0gYi5pbmRleE9mKGt3ZCk7XG5cdFx0XHRcdFx0XHRlaSA9IGUuaW5kZXhPZihrd2QpO1xuXHRcdFx0XHRcdFx0aWYgKGJpICE9PSBlaSkge1xuXHRcdFx0XHRcdFx0XHRpZiAoZWkgPT09IC0xKSB7IC8vaWYgdGhlIGtleXdvcmQgaXNuJ3QgaW4gdGhlIGVuZCB2YWx1ZSwgcmVtb3ZlIGl0IGZyb20gdGhlIGJlZ2lubmluZyBvbmUuXG5cdFx0XHRcdFx0XHRcdFx0YmFbaV0gPSBiYVtpXS5zcGxpdChrd2QpLmpvaW4oXCJcIik7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoYmkgPT09IC0xKSB7IC8vaWYgdGhlIGtleXdvcmQgaXNuJ3QgaW4gdGhlIGJlZ2lubmluZywgYWRkIGl0LlxuXHRcdFx0XHRcdFx0XHRcdGJhW2ldICs9IFwiIFwiICsga3dkO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGIgPSBiYS5qb2luKFwiLCBcIik7XG5cdFx0XHRcdGUgPSBlYS5qb2luKFwiLCBcIik7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gX3BhcnNlQ29tcGxleCh0LCB0aGlzLnAsIGIsIGUsIHRoaXMuY2xycywgdGhpcy5kZmx0LCBwdCwgdGhpcy5wciwgcGx1Z2luLCBzZXRSYXRpbyk7XG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIEFjY2VwdHMgYSB0YXJnZXQgYW5kIGVuZCB2YWx1ZSBhbmQgc3BpdHMgYmFjayBhIENTU1Byb3BUd2VlbiB0aGF0IGhhcyBiZWVuIGluc2VydGVkIGludG8gdGhlIENTU1BsdWdpbidzIGxpbmtlZCBsaXN0IGFuZCBjb25mb3JtcyB3aXRoIGFsbCB0aGUgY29udmVudGlvbnMgd2UgdXNlIGludGVybmFsbHksIGxpa2UgdHlwZTotMSwgMCwgMSwgb3IgMiwgc2V0dGluZyB1cCBhbnkgZXh0cmEgcHJvcGVydHkgdHdlZW5zLCBwcmlvcml0eSwgZXRjLiBGb3IgZXhhbXBsZSwgaWYgd2UgaGF2ZSBhIGJveFNoYWRvdyBTcGVjaWFsUHJvcCBhbmQgY2FsbDpcblx0XHQgKiB0aGlzLl9maXJzdFBUID0gc3AucGFyc2UoZWxlbWVudCwgXCI1cHggMTBweCAyMHB4IHJnYigyNTUwLDEwMiw1MSlcIiwgXCJib3hTaGFkb3dcIiwgdGhpcyk7XG5cdFx0ICogSXQgc2hvdWxkIGZpZ3VyZSBvdXQgdGhlIHN0YXJ0aW5nIHZhbHVlIG9mIHRoZSBlbGVtZW50J3MgYm94U2hhZG93LCBjb21wYXJlIGl0IHRvIHRoZSBwcm92aWRlZCBlbmQgdmFsdWUgYW5kIGNyZWF0ZSBhbGwgdGhlIG5lY2Vzc2FyeSBDU1NQcm9wVHdlZW5zIG9mIHRoZSBhcHByb3ByaWF0ZSB0eXBlcyB0byB0d2VlbiB0aGUgYm94U2hhZG93LiBUaGUgQ1NTUHJvcFR3ZWVuIHRoYXQgZ2V0cyBzcGl0IGJhY2sgc2hvdWxkIGFscmVhZHkgYmUgaW5zZXJ0ZWQgaW50byB0aGUgbGlua2VkIGxpc3QgKHRoZSA0dGggcGFyYW1ldGVyIGlzIHRoZSBjdXJyZW50IGhlYWQsIHNvIHByZXBlbmQgdG8gdGhhdCkuXG5cdFx0ICogQHBhcmFtIHshT2JqZWN0fSB0IFRhcmdldCBvYmplY3Qgd2hvc2UgcHJvcGVydHkgaXMgYmVpbmcgdHdlZW5lZFxuXHRcdCAqIEBwYXJhbSB7T2JqZWN0fSBlIEVuZCB2YWx1ZSBhcyBwcm92aWRlZCBpbiB0aGUgdmFycyBvYmplY3QgKHR5cGljYWxseSBhIHN0cmluZywgYnV0IG5vdCBhbHdheXMgLSBsaWtlIGEgdGhyb3dQcm9wcyB3b3VsZCBiZSBhbiBvYmplY3QpLlxuXHRcdCAqIEBwYXJhbSB7IXN0cmluZ30gcCBQcm9wZXJ0eSBuYW1lXG5cdFx0ICogQHBhcmFtIHshQ1NTUGx1Z2lufSBjc3NwIFRoZSBDU1NQbHVnaW4gaW5zdGFuY2UgdGhhdCBzaG91bGQgYmUgYXNzb2NpYXRlZCB3aXRoIHRoaXMgdHdlZW4uXG5cdFx0ICogQHBhcmFtIHs/Q1NTUHJvcFR3ZWVufSBwdCBUaGUgQ1NTUHJvcFR3ZWVuIHRoYXQgaXMgdGhlIGN1cnJlbnQgaGVhZCBvZiB0aGUgbGlua2VkIGxpc3QgKHdlJ2xsIHByZXBlbmQgdG8gaXQpXG5cdFx0ICogQHBhcmFtIHtUd2VlblBsdWdpbj19IHBsdWdpbiBJZiBhIHBsdWdpbiB3aWxsIGJlIHVzZWQgdG8gdHdlZW4gdGhlIHBhcnNlZCB2YWx1ZSwgdGhpcyBpcyB0aGUgcGx1Z2luIGluc3RhbmNlLlxuXHRcdCAqIEBwYXJhbSB7T2JqZWN0PX0gdmFycyBPcmlnaW5hbCB2YXJzIG9iamVjdCB0aGF0IGNvbnRhaW5zIHRoZSBkYXRhIGZvciBwYXJzaW5nLlxuXHRcdCAqIEByZXR1cm4ge0NTU1Byb3BUd2Vlbn0gVGhlIGZpcnN0IENTU1Byb3BUd2VlbiBpbiB0aGUgbGlua2VkIGxpc3Qgd2hpY2ggaW5jbHVkZXMgdGhlIG5ldyBvbmUocykgYWRkZWQgYnkgdGhlIHBhcnNlKCkgY2FsbC5cblx0XHQgKi9cblx0XHRwLnBhcnNlID0gZnVuY3Rpb24odCwgZSwgcCwgY3NzcCwgcHQsIHBsdWdpbiwgdmFycykge1xuXHRcdFx0cmV0dXJuIHRoaXMucGFyc2VDb21wbGV4KHQuc3R5bGUsIHRoaXMuZm9ybWF0KF9nZXRTdHlsZSh0LCB0aGlzLnAsIF9jcywgZmFsc2UsIHRoaXMuZGZsdCkpLCB0aGlzLmZvcm1hdChlKSwgcHQsIHBsdWdpbik7XG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIFJlZ2lzdGVycyBhIHNwZWNpYWwgcHJvcGVydHkgdGhhdCBzaG91bGQgYmUgaW50ZXJjZXB0ZWQgZnJvbSBhbnkgXCJjc3NcIiBvYmplY3RzIGRlZmluZWQgaW4gdHdlZW5zLiBUaGlzIGFsbG93cyB5b3UgdG8gaGFuZGxlIHRoZW0gaG93ZXZlciB5b3Ugd2FudCB3aXRob3V0IENTU1BsdWdpbiBkb2luZyBpdCBmb3IgeW91LiBUaGUgMm5kIHBhcmFtZXRlciBzaG91bGQgYmUgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgMyBwYXJhbWV0ZXJzOlxuXHRcdCAqICAxKSBUYXJnZXQgb2JqZWN0IHdob3NlIHByb3BlcnR5IHNob3VsZCBiZSB0d2VlbmVkICh0eXBpY2FsbHkgYSBET00gZWxlbWVudClcblx0XHQgKiAgMikgVGhlIGVuZC9kZXN0aW5hdGlvbiB2YWx1ZSAoY291bGQgYmUgYSBzdHJpbmcsIG51bWJlciwgb2JqZWN0LCBvciB3aGF0ZXZlciB5b3Ugd2FudClcblx0XHQgKiAgMykgVGhlIHR3ZWVuIGluc3RhbmNlICh5b3UgcHJvYmFibHkgZG9uJ3QgbmVlZCB0byB3b3JyeSBhYm91dCB0aGlzLCBidXQgaXQgY2FuIGJlIHVzZWZ1bCBmb3IgbG9va2luZyB1cCBpbmZvcm1hdGlvbiBsaWtlIHRoZSBkdXJhdGlvbilcblx0XHQgKlxuXHRcdCAqIFRoZW4sIHlvdXIgZnVuY3Rpb24gc2hvdWxkIHJldHVybiBhIGZ1bmN0aW9uIHdoaWNoIHdpbGwgYmUgY2FsbGVkIGVhY2ggdGltZSB0aGUgdHdlZW4gZ2V0cyByZW5kZXJlZCwgcGFzc2luZyBhIG51bWVyaWMgXCJyYXRpb1wiIHBhcmFtZXRlciB0byB5b3VyIGZ1bmN0aW9uIHRoYXQgaW5kaWNhdGVzIHRoZSBjaGFuZ2UgZmFjdG9yICh1c3VhbGx5IGJldHdlZW4gMCBhbmQgMSkuIEZvciBleGFtcGxlOlxuXHRcdCAqXG5cdFx0ICogQ1NTUGx1Z2luLnJlZ2lzdGVyU3BlY2lhbFByb3AoXCJteUN1c3RvbVByb3BcIiwgZnVuY3Rpb24odGFyZ2V0LCB2YWx1ZSwgdHdlZW4pIHtcblx0XHQgKiAgICAgIHZhciBzdGFydCA9IHRhcmdldC5zdHlsZS53aWR0aDtcblx0XHQgKiAgICAgIHJldHVybiBmdW5jdGlvbihyYXRpbykge1xuXHRcdCAqICAgICAgICAgICAgICB0YXJnZXQuc3R5bGUud2lkdGggPSAoc3RhcnQgKyB2YWx1ZSAqIHJhdGlvKSArIFwicHhcIjtcblx0XHQgKiAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJzZXQgd2lkdGggdG8gXCIgKyB0YXJnZXQuc3R5bGUud2lkdGgpO1xuXHRcdCAqICAgICAgICAgIH1cblx0XHQgKiB9LCAwKTtcblx0XHQgKlxuXHRcdCAqIFRoZW4sIHdoZW4gSSBkbyB0aGlzIHR3ZWVuLCBpdCB3aWxsIHRyaWdnZXIgbXkgc3BlY2lhbCBwcm9wZXJ0eTpcblx0XHQgKlxuXHRcdCAqIFR3ZWVuTGl0ZS50byhlbGVtZW50LCAxLCB7Y3NzOntteUN1c3RvbVByb3A6MTAwfX0pO1xuXHRcdCAqXG5cdFx0ICogSW4gdGhlIGV4YW1wbGUsIG9mIGNvdXJzZSwgd2UncmUganVzdCBjaGFuZ2luZyB0aGUgd2lkdGgsIGJ1dCB5b3UgY2FuIGRvIGFueXRoaW5nIHlvdSB3YW50LlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHshc3RyaW5nfSBuYW1lIFByb3BlcnR5IG5hbWUgKG9yIGNvbW1hLWRlbGltaXRlZCBsaXN0IG9mIHByb3BlcnR5IG5hbWVzKSB0aGF0IHNob3VsZCBiZSBpbnRlcmNlcHRlZCBhbmQgaGFuZGxlZCBieSB5b3VyIGZ1bmN0aW9uLiBGb3IgZXhhbXBsZSwgaWYgSSBkZWZpbmUgXCJteUN1c3RvbVByb3BcIiwgdGhlbiBpdCB3b3VsZCBoYW5kbGUgdGhhdCBwb3J0aW9uIG9mIHRoZSBmb2xsb3dpbmcgdHdlZW46IFR3ZWVuTGl0ZS50byhlbGVtZW50LCAxLCB7Y3NzOntteUN1c3RvbVByb3A6MTAwfX0pXG5cdFx0ICogQHBhcmFtIHshZnVuY3Rpb24oT2JqZWN0LCBPYmplY3QsIE9iamVjdCwgc3RyaW5nKTpmdW5jdGlvbihudW1iZXIpfSBvbkluaXRUd2VlbiBUaGUgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCB3aGVuIGEgdHdlZW4gb2YgdGhpcyBzcGVjaWFsIHByb3BlcnR5IGlzIHBlcmZvcm1lZC4gVGhlIGZ1bmN0aW9uIHdpbGwgcmVjZWl2ZSA0IHBhcmFtZXRlcnM6IDEpIFRhcmdldCBvYmplY3QgdGhhdCBzaG91bGQgYmUgdHdlZW5lZCwgMikgVmFsdWUgdGhhdCB3YXMgcGFzc2VkIHRvIHRoZSB0d2VlbiwgMykgVGhlIHR3ZWVuIGluc3RhbmNlIGl0c2VsZiAocmFyZWx5IHVzZWQpLCBhbmQgNCkgVGhlIHByb3BlcnR5IG5hbWUgdGhhdCdzIGJlaW5nIHR3ZWVuZWQuIFlvdXIgZnVuY3Rpb24gc2hvdWxkIHJldHVybiBhIGZ1bmN0aW9uIHRoYXQgc2hvdWxkIGJlIGNhbGxlZCBvbiBldmVyeSB1cGRhdGUgb2YgdGhlIHR3ZWVuLiBUaGF0IGZ1bmN0aW9uIHdpbGwgcmVjZWl2ZSBhIHNpbmdsZSBwYXJhbWV0ZXIgdGhhdCBpcyBhIFwiY2hhbmdlIGZhY3RvclwiIHZhbHVlICh0eXBpY2FsbHkgYmV0d2VlbiAwIGFuZCAxKSBpbmRpY2F0aW5nIHRoZSBhbW91bnQgb2YgY2hhbmdlIGFzIGEgcmF0aW8uIFlvdSBjYW4gdXNlIHRoaXMgdG8gZGV0ZXJtaW5lIGhvdyB0byBzZXQgdGhlIHZhbHVlcyBhcHByb3ByaWF0ZWx5IGluIHlvdXIgZnVuY3Rpb24uXG5cdFx0ICogQHBhcmFtIHtudW1iZXI9fSBwcmlvcml0eSBQcmlvcml0eSB0aGF0IGhlbHBzIHRoZSBlbmdpbmUgZGV0ZXJtaW5lIHRoZSBvcmRlciBpbiB3aGljaCB0byBzZXQgdGhlIHByb3BlcnRpZXMgKGRlZmF1bHQ6IDApLiBIaWdoZXIgcHJpb3JpdHkgcHJvcGVydGllcyB3aWxsIGJlIHVwZGF0ZWQgYmVmb3JlIGxvd2VyIHByaW9yaXR5IG9uZXMuXG5cdFx0ICovXG5cdFx0Q1NTUGx1Z2luLnJlZ2lzdGVyU3BlY2lhbFByb3AgPSBmdW5jdGlvbihuYW1lLCBvbkluaXRUd2VlbiwgcHJpb3JpdHkpIHtcblx0XHRcdF9yZWdpc3RlckNvbXBsZXhTcGVjaWFsUHJvcChuYW1lLCB7cGFyc2VyOmZ1bmN0aW9uKHQsIGUsIHAsIGNzc3AsIHB0LCBwbHVnaW4sIHZhcnMpIHtcblx0XHRcdFx0dmFyIHJ2ID0gbmV3IENTU1Byb3BUd2Vlbih0LCBwLCAwLCAwLCBwdCwgMiwgcCwgZmFsc2UsIHByaW9yaXR5KTtcblx0XHRcdFx0cnYucGx1Z2luID0gcGx1Z2luO1xuXHRcdFx0XHRydi5zZXRSYXRpbyA9IG9uSW5pdFR3ZWVuKHQsIGUsIGNzc3AuX3R3ZWVuLCBwKTtcblx0XHRcdFx0cmV0dXJuIHJ2O1xuXHRcdFx0fSwgcHJpb3JpdHk6cHJpb3JpdHl9KTtcblx0XHR9O1xuXG5cblxuXG5cblxuXHRcdC8vdHJhbnNmb3JtLXJlbGF0ZWQgbWV0aG9kcyBhbmQgcHJvcGVydGllc1xuXHRcdENTU1BsdWdpbi51c2VTVkdUcmFuc2Zvcm1BdHRyID0gX2lzU2FmYXJpIHx8IF9pc0ZpcmVmb3g7IC8vU2FmYXJpIGFuZCBGaXJlZm94IGJvdGggaGF2ZSBzb21lIHJlbmRlcmluZyBidWdzIHdoZW4gYXBwbHlpbmcgQ1NTIHRyYW5zZm9ybXMgdG8gU1ZHIGVsZW1lbnRzLCBzbyBkZWZhdWx0IHRvIHVzaW5nIHRoZSBcInRyYW5zZm9ybVwiIGF0dHJpYnV0ZSBpbnN0ZWFkICh1c2VycyBjYW4gb3ZlcnJpZGUgdGhpcykuXG5cdFx0dmFyIF90cmFuc2Zvcm1Qcm9wcyA9IChcInNjYWxlWCxzY2FsZVksc2NhbGVaLHgseSx6LHNrZXdYLHNrZXdZLHJvdGF0aW9uLHJvdGF0aW9uWCxyb3RhdGlvblkscGVyc3BlY3RpdmUseFBlcmNlbnQseVBlcmNlbnRcIikuc3BsaXQoXCIsXCIpLFxuXHRcdFx0X3RyYW5zZm9ybVByb3AgPSBfY2hlY2tQcm9wUHJlZml4KFwidHJhbnNmb3JtXCIpLCAvL3RoZSBKYXZhc2NyaXB0IChjYW1lbENhc2UpIHRyYW5zZm9ybSBwcm9wZXJ0eSwgbGlrZSBtc1RyYW5zZm9ybSwgV2Via2l0VHJhbnNmb3JtLCBNb3pUcmFuc2Zvcm0sIG9yIE9UcmFuc2Zvcm0uXG5cdFx0XHRfdHJhbnNmb3JtUHJvcENTUyA9IF9wcmVmaXhDU1MgKyBcInRyYW5zZm9ybVwiLFxuXHRcdFx0X3RyYW5zZm9ybU9yaWdpblByb3AgPSBfY2hlY2tQcm9wUHJlZml4KFwidHJhbnNmb3JtT3JpZ2luXCIpLFxuXHRcdFx0X3N1cHBvcnRzM0QgPSAoX2NoZWNrUHJvcFByZWZpeChcInBlcnNwZWN0aXZlXCIpICE9PSBudWxsKSxcblx0XHRcdFRyYW5zZm9ybSA9IF9pbnRlcm5hbHMuVHJhbnNmb3JtID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHRoaXMucGVyc3BlY3RpdmUgPSBwYXJzZUZsb2F0KENTU1BsdWdpbi5kZWZhdWx0VHJhbnNmb3JtUGVyc3BlY3RpdmUpIHx8IDA7XG5cdFx0XHRcdHRoaXMuZm9yY2UzRCA9IChDU1NQbHVnaW4uZGVmYXVsdEZvcmNlM0QgPT09IGZhbHNlIHx8ICFfc3VwcG9ydHMzRCkgPyBmYWxzZSA6IENTU1BsdWdpbi5kZWZhdWx0Rm9yY2UzRCB8fCBcImF1dG9cIjtcblx0XHRcdH0sXG5cdFx0XHRfU1ZHRWxlbWVudCA9IHdpbmRvdy5TVkdFbGVtZW50LFxuXHRcdFx0X3VzZVNWR1RyYW5zZm9ybUF0dHIsXG5cdFx0XHQvL1NvbWUgYnJvd3NlcnMgKGxpa2UgRmlyZWZveCBhbmQgSUUpIGRvbid0IGhvbm9yIHRyYW5zZm9ybS1vcmlnaW4gcHJvcGVybHkgaW4gU1ZHIGVsZW1lbnRzLCBzbyB3ZSBuZWVkIHRvIG1hbnVhbGx5IGFkanVzdCB0aGUgbWF0cml4IGFjY29yZGluZ2x5LiBXZSBmZWF0dXJlIGRldGVjdCBoZXJlIHJhdGhlciB0aGFuIGFsd2F5cyBkb2luZyB0aGUgY29udmVyc2lvbiBmb3IgY2VydGFpbiBicm93c2VycyBiZWNhdXNlIHRoZXkgbWF5IGZpeCB0aGUgcHJvYmxlbSBhdCBzb21lIHBvaW50IGluIHRoZSBmdXR1cmUuXG5cblx0XHRcdF9jcmVhdGVTVkcgPSBmdW5jdGlvbih0eXBlLCBjb250YWluZXIsIGF0dHJpYnV0ZXMpIHtcblx0XHRcdFx0dmFyIGVsZW1lbnQgPSBfZG9jLmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIHR5cGUpLFxuXHRcdFx0XHRcdHJlZyA9IC8oW2Etel0pKFtBLVpdKS9nLFxuXHRcdFx0XHRcdHA7XG5cdFx0XHRcdGZvciAocCBpbiBhdHRyaWJ1dGVzKSB7XG5cdFx0XHRcdFx0ZWxlbWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBwLnJlcGxhY2UocmVnLCBcIiQxLSQyXCIpLnRvTG93ZXJDYXNlKCksIGF0dHJpYnV0ZXNbcF0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRhaW5lci5hcHBlbmRDaGlsZChlbGVtZW50KTtcblx0XHRcdFx0cmV0dXJuIGVsZW1lbnQ7XG5cdFx0XHR9LFxuXHRcdFx0X2RvY0VsZW1lbnQgPSBfZG9jLmRvY3VtZW50RWxlbWVudCxcblx0XHRcdF9mb3JjZVNWR1RyYW5zZm9ybUF0dHIgPSAoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdC8vSUUgYW5kIEFuZHJvaWQgc3RvY2sgZG9uJ3Qgc3VwcG9ydCBDU1MgdHJhbnNmb3JtcyBvbiBTVkcgZWxlbWVudHMsIHNvIHdlIG11c3Qgd3JpdGUgdGhlbSB0byB0aGUgXCJ0cmFuc2Zvcm1cIiBhdHRyaWJ1dGUuIFdlIHBvcHVsYXRlIHRoaXMgdmFyaWFibGUgaW4gdGhlIF9wYXJzZVRyYW5zZm9ybSgpIG1ldGhvZCwgYW5kIG9ubHkgaWYvd2hlbiB3ZSBjb21lIGFjcm9zcyBhbiBTVkcgZWxlbWVudFxuXHRcdFx0XHR2YXIgZm9yY2UgPSBfaWVWZXJzIHx8ICgvQW5kcm9pZC9pLnRlc3QoX2FnZW50KSAmJiAhd2luZG93LmNocm9tZSksXG5cdFx0XHRcdFx0c3ZnLCByZWN0LCB3aWR0aDtcblx0XHRcdFx0aWYgKF9kb2MuY3JlYXRlRWxlbWVudE5TICYmICFmb3JjZSkgeyAvL0lFOCBhbmQgZWFybGllciBkb2Vzbid0IHN1cHBvcnQgU1ZHIGFueXdheVxuXHRcdFx0XHRcdHN2ZyA9IF9jcmVhdGVTVkcoXCJzdmdcIiwgX2RvY0VsZW1lbnQpO1xuXHRcdFx0XHRcdHJlY3QgPSBfY3JlYXRlU1ZHKFwicmVjdFwiLCBzdmcsIHt3aWR0aDoxMDAsIGhlaWdodDo1MCwgeDoxMDB9KTtcblx0XHRcdFx0XHR3aWR0aCA9IHJlY3QuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XG5cdFx0XHRcdFx0cmVjdC5zdHlsZVtfdHJhbnNmb3JtT3JpZ2luUHJvcF0gPSBcIjUwJSA1MCVcIjtcblx0XHRcdFx0XHRyZWN0LnN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IFwic2NhbGVYKDAuNSlcIjtcblx0XHRcdFx0XHRmb3JjZSA9ICh3aWR0aCA9PT0gcmVjdC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCAmJiAhKF9pc0ZpcmVmb3ggJiYgX3N1cHBvcnRzM0QpKTsgLy9ub3RlOiBGaXJlZm94IGZhaWxzIHRoZSB0ZXN0IGV2ZW4gdGhvdWdoIGl0IGRvZXMgc3VwcG9ydCBDU1MgdHJhbnNmb3JtcyBpbiAzRC4gU2luY2Ugd2UgY2FuJ3QgcHVzaCAzRCBzdHVmZiBpbnRvIHRoZSB0cmFuc2Zvcm0gYXR0cmlidXRlLCB3ZSBmb3JjZSBGaXJlZm94IHRvIHBhc3MgdGhlIHRlc3QgaGVyZSAoYXMgbG9uZyBhcyBpdCBkb2VzIHRydWx5IHN1cHBvcnQgM0QpLlxuXHRcdFx0XHRcdF9kb2NFbGVtZW50LnJlbW92ZUNoaWxkKHN2Zyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZvcmNlO1xuXHRcdFx0fSkoKSxcblx0XHRcdF9wYXJzZVNWR09yaWdpbiA9IGZ1bmN0aW9uKGUsIGxvY2FsLCBkZWNvcmF0ZWUsIGFic29sdXRlLCBzbW9vdGhPcmlnaW4pIHtcblx0XHRcdFx0dmFyIHRtID0gZS5fZ3NUcmFuc2Zvcm0sXG5cdFx0XHRcdFx0bSA9IF9nZXRNYXRyaXgoZSwgdHJ1ZSksXG5cdFx0XHRcdFx0diwgeCwgeSwgeE9yaWdpbiwgeU9yaWdpbiwgYSwgYiwgYywgZCwgdHgsIHR5LCBkZXRlcm1pbmFudCwgeE9yaWdpbk9sZCwgeU9yaWdpbk9sZDtcblx0XHRcdFx0aWYgKHRtKSB7XG5cdFx0XHRcdFx0eE9yaWdpbk9sZCA9IHRtLnhPcmlnaW47IC8vcmVjb3JkIHRoZSBvcmlnaW5hbCB2YWx1ZXMgYmVmb3JlIHdlIGFsdGVyIHRoZW0uXG5cdFx0XHRcdFx0eU9yaWdpbk9sZCA9IHRtLnlPcmlnaW47XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCFhYnNvbHV0ZSB8fCAodiA9IGFic29sdXRlLnNwbGl0KFwiIFwiKSkubGVuZ3RoIDwgMikge1xuXHRcdFx0XHRcdGIgPSBlLmdldEJCb3goKTtcblx0XHRcdFx0XHRsb2NhbCA9IF9wYXJzZVBvc2l0aW9uKGxvY2FsKS5zcGxpdChcIiBcIik7XG5cdFx0XHRcdFx0diA9IFsobG9jYWxbMF0uaW5kZXhPZihcIiVcIikgIT09IC0xID8gcGFyc2VGbG9hdChsb2NhbFswXSkgLyAxMDAgKiBiLndpZHRoIDogcGFyc2VGbG9hdChsb2NhbFswXSkpICsgYi54LFxuXHRcdFx0XHRcdFx0IChsb2NhbFsxXS5pbmRleE9mKFwiJVwiKSAhPT0gLTEgPyBwYXJzZUZsb2F0KGxvY2FsWzFdKSAvIDEwMCAqIGIuaGVpZ2h0IDogcGFyc2VGbG9hdChsb2NhbFsxXSkpICsgYi55XTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkZWNvcmF0ZWUueE9yaWdpbiA9IHhPcmlnaW4gPSBwYXJzZUZsb2F0KHZbMF0pO1xuXHRcdFx0XHRkZWNvcmF0ZWUueU9yaWdpbiA9IHlPcmlnaW4gPSBwYXJzZUZsb2F0KHZbMV0pO1xuXHRcdFx0XHRpZiAoYWJzb2x1dGUgJiYgbSAhPT0gX2lkZW50aXR5MkRNYXRyaXgpIHsgLy9pZiBzdmdPcmlnaW4gaXMgYmVpbmcgc2V0LCB3ZSBtdXN0IGludmVydCB0aGUgbWF0cml4IGFuZCBkZXRlcm1pbmUgd2hlcmUgdGhlIGFic29sdXRlIHBvaW50IGlzLCBmYWN0b3JpbmcgaW4gdGhlIGN1cnJlbnQgdHJhbnNmb3Jtcy4gT3RoZXJ3aXNlLCB0aGUgc3ZnT3JpZ2luIHdvdWxkIGJlIGJhc2VkIG9uIHRoZSBlbGVtZW50J3Mgbm9uLXRyYW5zZm9ybWVkIHBvc2l0aW9uIG9uIHRoZSBjYW52YXMuXG5cdFx0XHRcdFx0YSA9IG1bMF07XG5cdFx0XHRcdFx0YiA9IG1bMV07XG5cdFx0XHRcdFx0YyA9IG1bMl07XG5cdFx0XHRcdFx0ZCA9IG1bM107XG5cdFx0XHRcdFx0dHggPSBtWzRdO1xuXHRcdFx0XHRcdHR5ID0gbVs1XTtcblx0XHRcdFx0XHRkZXRlcm1pbmFudCA9IChhICogZCAtIGIgKiBjKTtcblx0XHRcdFx0XHR4ID0geE9yaWdpbiAqIChkIC8gZGV0ZXJtaW5hbnQpICsgeU9yaWdpbiAqICgtYyAvIGRldGVybWluYW50KSArICgoYyAqIHR5IC0gZCAqIHR4KSAvIGRldGVybWluYW50KTtcblx0XHRcdFx0XHR5ID0geE9yaWdpbiAqICgtYiAvIGRldGVybWluYW50KSArIHlPcmlnaW4gKiAoYSAvIGRldGVybWluYW50KSAtICgoYSAqIHR5IC0gYiAqIHR4KSAvIGRldGVybWluYW50KTtcblx0XHRcdFx0XHR4T3JpZ2luID0gZGVjb3JhdGVlLnhPcmlnaW4gPSB2WzBdID0geDtcblx0XHRcdFx0XHR5T3JpZ2luID0gZGVjb3JhdGVlLnlPcmlnaW4gPSB2WzFdID0geTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodG0pIHsgLy9hdm9pZCBqdW1wIHdoZW4gdHJhbnNmb3JtT3JpZ2luIGlzIGNoYW5nZWQgLSBhZGp1c3QgdGhlIHgveSB2YWx1ZXMgYWNjb3JkaW5nbHlcblx0XHRcdFx0XHRpZiAoc21vb3RoT3JpZ2luIHx8IChzbW9vdGhPcmlnaW4gIT09IGZhbHNlICYmIENTU1BsdWdpbi5kZWZhdWx0U21vb3RoT3JpZ2luICE9PSBmYWxzZSkpIHtcblx0XHRcdFx0XHRcdHggPSB4T3JpZ2luIC0geE9yaWdpbk9sZDtcblx0XHRcdFx0XHRcdHkgPSB5T3JpZ2luIC0geU9yaWdpbk9sZDtcblx0XHRcdFx0XHRcdC8vb3JpZ2luYWxseSwgd2Ugc2ltcGx5IGFkanVzdGVkIHRoZSB4IGFuZCB5IHZhbHVlcywgYnV0IHRoYXQgd291bGQgY2F1c2UgcHJvYmxlbXMgaWYsIGZvciBleGFtcGxlLCB5b3UgY3JlYXRlZCBhIHJvdGF0aW9uYWwgdHdlZW4gcGFydC13YXkgdGhyb3VnaCBhbiB4L3kgdHdlZW4uIE1hbmFnaW5nIHRoZSBvZmZzZXQgaW4gYSBzZXBhcmF0ZSB2YXJpYWJsZSBnaXZlcyB1cyB1bHRpbWF0ZSBmbGV4aWJpbGl0eS5cblx0XHRcdFx0XHRcdC8vdG0ueCAtPSB4IC0gKHggKiBtWzBdICsgeSAqIG1bMl0pO1xuXHRcdFx0XHRcdFx0Ly90bS55IC09IHkgLSAoeCAqIG1bMV0gKyB5ICogbVszXSk7XG5cdFx0XHRcdFx0XHR0bS54T2Zmc2V0ICs9ICh4ICogbVswXSArIHkgKiBtWzJdKSAtIHg7XG5cdFx0XHRcdFx0XHR0bS55T2Zmc2V0ICs9ICh4ICogbVsxXSArIHkgKiBtWzNdKSAtIHk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRtLnhPZmZzZXQgPSB0bS55T2Zmc2V0ID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0ZS5zZXRBdHRyaWJ1dGUoXCJkYXRhLXN2Zy1vcmlnaW5cIiwgdi5qb2luKFwiIFwiKSk7XG5cdFx0XHR9LFxuXHRcdFx0X2lzU1ZHID0gZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRyZXR1cm4gISEoX1NWR0VsZW1lbnQgJiYgdHlwZW9mKGUuZ2V0QkJveCkgPT09IFwiZnVuY3Rpb25cIiAmJiBlLmdldENUTSAmJiAoIWUucGFyZW50Tm9kZSB8fCAoZS5wYXJlbnROb2RlLmdldEJCb3ggJiYgZS5wYXJlbnROb2RlLmdldENUTSkpKTtcblx0XHRcdH0sXG5cdFx0XHRfaWRlbnRpdHkyRE1hdHJpeCA9IFsxLDAsMCwxLDAsMF0sXG5cdFx0XHRfZ2V0TWF0cml4ID0gZnVuY3Rpb24oZSwgZm9yY2UyRCkge1xuXHRcdFx0XHR2YXIgdG0gPSBlLl9nc1RyYW5zZm9ybSB8fCBuZXcgVHJhbnNmb3JtKCksXG5cdFx0XHRcdFx0cm5kID0gMTAwMDAwLFxuXHRcdFx0XHRcdGlzRGVmYXVsdCwgcywgbSwgbiwgZGVjO1xuXHRcdFx0XHRpZiAoX3RyYW5zZm9ybVByb3ApIHtcblx0XHRcdFx0XHRzID0gX2dldFN0eWxlKGUsIF90cmFuc2Zvcm1Qcm9wQ1NTLCBudWxsLCB0cnVlKTtcblx0XHRcdFx0fSBlbHNlIGlmIChlLmN1cnJlbnRTdHlsZSkge1xuXHRcdFx0XHRcdC8vZm9yIG9sZGVyIHZlcnNpb25zIG9mIElFLCB3ZSBuZWVkIHRvIGludGVycHJldCB0aGUgZmlsdGVyIHBvcnRpb24gdGhhdCBpcyBpbiB0aGUgZm9ybWF0OiBwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuTWF0cml4KE0xMT02LjEyMzIzMzk5NTczNjc2NmUtMTcsIE0xMj0tMSwgTTIxPTEsIE0yMj02LjEyMzIzMzk5NTczNjc2NmUtMTcsIHNpemluZ01ldGhvZD0nYXV0byBleHBhbmQnKSBOb3RpY2UgdGhhdCB3ZSBuZWVkIHRvIHN3YXAgYiBhbmQgYyBjb21wYXJlZCB0byBhIG5vcm1hbCBtYXRyaXguXG5cdFx0XHRcdFx0cyA9IGUuY3VycmVudFN0eWxlLmZpbHRlci5tYXRjaChfaWVHZXRNYXRyaXhFeHApO1xuXHRcdFx0XHRcdHMgPSAocyAmJiBzLmxlbmd0aCA9PT0gNCkgPyBbc1swXS5zdWJzdHIoNCksIE51bWJlcihzWzJdLnN1YnN0cig0KSksIE51bWJlcihzWzFdLnN1YnN0cig0KSksIHNbM10uc3Vic3RyKDQpLCAodG0ueCB8fCAwKSwgKHRtLnkgfHwgMCldLmpvaW4oXCIsXCIpIDogXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpc0RlZmF1bHQgPSAoIXMgfHwgcyA9PT0gXCJub25lXCIgfHwgcyA9PT0gXCJtYXRyaXgoMSwgMCwgMCwgMSwgMCwgMClcIik7XG5cdFx0XHRcdGlmICh0bS5zdmcgfHwgKGUuZ2V0QkJveCAmJiBfaXNTVkcoZSkpKSB7XG5cdFx0XHRcdFx0aWYgKGlzRGVmYXVsdCAmJiAoZS5zdHlsZVtfdHJhbnNmb3JtUHJvcF0gKyBcIlwiKS5pbmRleE9mKFwibWF0cml4XCIpICE9PSAtMSkgeyAvL3NvbWUgYnJvd3NlcnMgKGxpa2UgQ2hyb21lIDQwKSBkb24ndCBjb3JyZWN0bHkgcmVwb3J0IHRyYW5zZm9ybXMgdGhhdCBhcmUgYXBwbGllZCBpbmxpbmUgb24gYW4gU1ZHIGVsZW1lbnQgKHRoZXkgZG9uJ3QgZ2V0IGluY2x1ZGVkIGluIHRoZSBjb21wdXRlZCBzdHlsZSksIHNvIHdlIGRvdWJsZS1jaGVjayBoZXJlIGFuZCBhY2NlcHQgbWF0cml4IHZhbHVlc1xuXHRcdFx0XHRcdFx0cyA9IGUuc3R5bGVbX3RyYW5zZm9ybVByb3BdO1xuXHRcdFx0XHRcdFx0aXNEZWZhdWx0ID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bSA9IGUuZ2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIpO1xuXHRcdFx0XHRcdGlmIChpc0RlZmF1bHQgJiYgbSkge1xuXHRcdFx0XHRcdFx0aWYgKG0uaW5kZXhPZihcIm1hdHJpeFwiKSAhPT0gLTEpIHsgLy9qdXN0IGluIGNhc2UgdGhlcmUncyBhIFwidHJhbnNmb3JtXCIgdmFsdWUgc3BlY2lmaWVkIGFzIGFuIGF0dHJpYnV0ZSBpbnN0ZWFkIG9mIENTUyBzdHlsZS4gQWNjZXB0IGVpdGhlciBhIG1hdHJpeCgpIG9yIHNpbXBsZSB0cmFuc2xhdGUoKSB2YWx1ZSB0aG91Z2guXG5cdFx0XHRcdFx0XHRcdHMgPSBtO1xuXHRcdFx0XHRcdFx0XHRpc0RlZmF1bHQgPSAwO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmIChtLmluZGV4T2YoXCJ0cmFuc2xhdGVcIikgIT09IC0xKSB7XG5cdFx0XHRcdFx0XHRcdHMgPSBcIm1hdHJpeCgxLDAsMCwxLFwiICsgbS5tYXRjaCgvKD86XFwtfFxcYilbXFxkXFwtXFwuZV0rXFxiL2dpKS5qb2luKFwiLFwiKSArIFwiKVwiO1xuXHRcdFx0XHRcdFx0XHRpc0RlZmF1bHQgPSAwO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoaXNEZWZhdWx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIF9pZGVudGl0eTJETWF0cml4O1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vc3BsaXQgdGhlIG1hdHJpeCB2YWx1ZXMgb3V0IGludG8gYW4gYXJyYXkgKG0gZm9yIG1hdHJpeClcblx0XHRcdFx0bSA9IChzIHx8IFwiXCIpLm1hdGNoKC8oPzpcXC18XFxiKVtcXGRcXC1cXC5lXStcXGIvZ2kpIHx8IFtdO1xuXHRcdFx0XHRpID0gbS5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdG4gPSBOdW1iZXIobVtpXSk7XG5cdFx0XHRcdFx0bVtpXSA9IChkZWMgPSBuIC0gKG4gfD0gMCkpID8gKChkZWMgKiBybmQgKyAoZGVjIDwgMCA/IC0wLjUgOiAwLjUpKSB8IDApIC8gcm5kICsgbiA6IG47IC8vY29udmVydCBzdHJpbmdzIHRvIE51bWJlcnMgYW5kIHJvdW5kIHRvIDUgZGVjaW1hbCBwbGFjZXMgdG8gYXZvaWQgaXNzdWVzIHdpdGggdGlueSBudW1iZXJzLiBSb3VnaGx5IDIweCBmYXN0ZXIgdGhhbiBOdW1iZXIudG9GaXhlZCgpLiBXZSBhbHNvIG11c3QgbWFrZSBzdXJlIHRvIHJvdW5kIGJlZm9yZSBkaXZpZGluZyBzbyB0aGF0IHZhbHVlcyBsaWtlIDAuOTk5OTk5OTk5OSBiZWNvbWUgMSB0byBhdm9pZCBnbGl0Y2hlcyBpbiBicm93c2VyIHJlbmRlcmluZyBhbmQgaW50ZXJwcmV0YXRpb24gb2YgZmxpcHBlZC9yb3RhdGVkIDNEIG1hdHJpY2VzLiBBbmQgZG9uJ3QganVzdCBtdWx0aXBseSB0aGUgbnVtYmVyIGJ5IHJuZCwgZmxvb3IgaXQsIGFuZCB0aGVuIGRpdmlkZSBieSBybmQgYmVjYXVzZSB0aGUgYml0d2lzZSBvcGVyYXRpb25zIG1heCBvdXQgYXQgYSAzMi1iaXQgc2lnbmVkIGludGVnZXIsIHRodXMgaXQgY291bGQgZ2V0IGNsaXBwZWQgYXQgYSByZWxhdGl2ZWx5IGxvdyB2YWx1ZSAobGlrZSAyMiwwMDAuMDAwMDAgZm9yIGV4YW1wbGUpLlxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiAoZm9yY2UyRCAmJiBtLmxlbmd0aCA+IDYpID8gW21bMF0sIG1bMV0sIG1bNF0sIG1bNV0sIG1bMTJdLCBtWzEzXV0gOiBtO1xuXHRcdFx0fSxcblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBQYXJzZXMgdGhlIHRyYW5zZm9ybSB2YWx1ZXMgZm9yIGFuIGVsZW1lbnQsIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCB4LCB5LCB6LCBzY2FsZVgsIHNjYWxlWSwgc2NhbGVaLCByb3RhdGlvbiwgcm90YXRpb25YLCByb3RhdGlvblksIHNrZXdYLCBhbmQgc2tld1kgcHJvcGVydGllcy4gTm90ZTogYnkgZGVmYXVsdCAoZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMpLCBhbGwgc2tld2luZyBpcyBjb21iaW5lZCBpbnRvIHNrZXdYIGFuZCByb3RhdGlvbiBidXQgc2tld1kgc3RpbGwgaGFzIGEgcGxhY2UgaW4gdGhlIHRyYW5zZm9ybSBvYmplY3Qgc28gdGhhdCB3ZSBjYW4gcmVjb3JkIGhvdyBtdWNoIG9mIHRoZSBza2V3IGlzIGF0dHJpYnV0ZWQgdG8gc2tld1ggdnMgc2tld1kuIFJlbWVtYmVyLCBhIHNrZXdZIG9mIDEwIGxvb2tzIHRoZSBzYW1lIGFzIGEgcm90YXRpb24gb2YgMTAgYW5kIHNrZXdYIG9mIC0xMC5cblx0XHRcdCAqIEBwYXJhbSB7IU9iamVjdH0gdCB0YXJnZXQgZWxlbWVudFxuXHRcdFx0ICogQHBhcmFtIHtPYmplY3Q9fSBjcyBjb21wdXRlZCBzdHlsZSBvYmplY3QgKG9wdGlvbmFsKVxuXHRcdFx0ICogQHBhcmFtIHtib29sZWFuPX0gcmVjIGlmIHRydWUsIHRoZSB0cmFuc2Zvcm0gdmFsdWVzIHdpbGwgYmUgcmVjb3JkZWQgdG8gdGhlIHRhcmdldCBlbGVtZW50J3MgX2dzVHJhbnNmb3JtIG9iamVjdCwgbGlrZSB0YXJnZXQuX2dzVHJhbnNmb3JtID0ge3g6MCwgeTowLCB6OjAsIHNjYWxlWDoxLi4ufVxuXHRcdFx0ICogQHBhcmFtIHtib29sZWFuPX0gcGFyc2UgaWYgdHJ1ZSwgd2UnbGwgaWdub3JlIGFueSBfZ3NUcmFuc2Zvcm0gdmFsdWVzIHRoYXQgYWxyZWFkeSBleGlzdCBvbiB0aGUgZWxlbWVudCwgYW5kIGZvcmNlIGEgcmVwYXJzaW5nIG9mIHRoZSBjc3MgKGNhbGN1bGF0ZWQgc3R5bGUpXG5cdFx0XHQgKiBAcmV0dXJuIHtvYmplY3R9IG9iamVjdCBjb250YWluaW5nIGFsbCBvZiB0aGUgdHJhbnNmb3JtIHByb3BlcnRpZXMvdmFsdWVzIGxpa2Uge3g6MCwgeTowLCB6OjAsIHNjYWxlWDoxLi4ufVxuXHRcdFx0ICovXG5cdFx0XHRfZ2V0VHJhbnNmb3JtID0gX2ludGVybmFscy5nZXRUcmFuc2Zvcm0gPSBmdW5jdGlvbih0LCBjcywgcmVjLCBwYXJzZSkge1xuXHRcdFx0XHRpZiAodC5fZ3NUcmFuc2Zvcm0gJiYgcmVjICYmICFwYXJzZSkge1xuXHRcdFx0XHRcdHJldHVybiB0Ll9nc1RyYW5zZm9ybTsgLy9pZiB0aGUgZWxlbWVudCBhbHJlYWR5IGhhcyBhIF9nc1RyYW5zZm9ybSwgdXNlIHRoYXQuIE5vdGU6IHNvbWUgYnJvd3NlcnMgZG9uJ3QgYWNjdXJhdGVseSByZXR1cm4gdGhlIGNhbGN1bGF0ZWQgc3R5bGUgZm9yIHRoZSB0cmFuc2Zvcm0gKHBhcnRpY3VsYXJseSBmb3IgU1ZHKSwgc28gaXQncyBhbG1vc3QgYWx3YXlzIHNhZmVzdCB0byBqdXN0IHVzZSB0aGUgdmFsdWVzIHdlJ3ZlIGFscmVhZHkgYXBwbGllZCByYXRoZXIgdGhhbiByZS1wYXJzaW5nIHRoaW5ncy5cblx0XHRcdFx0fVxuXHRcdFx0XHR2YXIgdG0gPSByZWMgPyB0Ll9nc1RyYW5zZm9ybSB8fCBuZXcgVHJhbnNmb3JtKCkgOiBuZXcgVHJhbnNmb3JtKCksXG5cdFx0XHRcdFx0aW52WCA9ICh0bS5zY2FsZVggPCAwKSwgLy9pbiBvcmRlciB0byBpbnRlcnByZXQgdGhpbmdzIHByb3Blcmx5LCB3ZSBuZWVkIHRvIGtub3cgaWYgdGhlIHVzZXIgYXBwbGllZCBhIG5lZ2F0aXZlIHNjYWxlWCBwcmV2aW91c2x5IHNvIHRoYXQgd2UgY2FuIGFkanVzdCB0aGUgcm90YXRpb24gYW5kIHNrZXdYIGFjY29yZGluZ2x5LiBPdGhlcndpc2UsIGlmIHdlIGFsd2F5cyBpbnRlcnByZXQgYSBmbGlwcGVkIG1hdHJpeCBhcyBhZmZlY3Rpbmcgc2NhbGVZIGFuZCB0aGUgdXNlciBvbmx5IHdhbnRzIHRvIHR3ZWVuIHRoZSBzY2FsZVggb24gbXVsdGlwbGUgc2VxdWVudGlhbCB0d2VlbnMsIGl0IHdvdWxkIGtlZXAgdGhlIG5lZ2F0aXZlIHNjYWxlWSB3aXRob3V0IHRoYXQgYmVpbmcgdGhlIHVzZXIncyBpbnRlbnQuXG5cdFx0XHRcdFx0bWluID0gMC4wMDAwMixcblx0XHRcdFx0XHRybmQgPSAxMDAwMDAsXG5cdFx0XHRcdFx0ek9yaWdpbiA9IF9zdXBwb3J0czNEID8gcGFyc2VGbG9hdChfZ2V0U3R5bGUodCwgX3RyYW5zZm9ybU9yaWdpblByb3AsIGNzLCBmYWxzZSwgXCIwIDAgMFwiKS5zcGxpdChcIiBcIilbMl0pIHx8IHRtLnpPcmlnaW4gIHx8IDAgOiAwLFxuXHRcdFx0XHRcdGRlZmF1bHRUcmFuc2Zvcm1QZXJzcGVjdGl2ZSA9IHBhcnNlRmxvYXQoQ1NTUGx1Z2luLmRlZmF1bHRUcmFuc2Zvcm1QZXJzcGVjdGl2ZSkgfHwgMCxcblx0XHRcdFx0XHRtLCBpLCBzY2FsZVgsIHNjYWxlWSwgcm90YXRpb24sIHNrZXdYO1xuXG5cdFx0XHRcdHRtLnN2ZyA9ICEhKHQuZ2V0QkJveCAmJiBfaXNTVkcodCkpO1xuXHRcdFx0XHRpZiAodG0uc3ZnKSB7XG5cdFx0XHRcdFx0X3BhcnNlU1ZHT3JpZ2luKHQsIF9nZXRTdHlsZSh0LCBfdHJhbnNmb3JtT3JpZ2luUHJvcCwgX2NzLCBmYWxzZSwgXCI1MCUgNTAlXCIpICsgXCJcIiwgdG0sIHQuZ2V0QXR0cmlidXRlKFwiZGF0YS1zdmctb3JpZ2luXCIpKTtcblx0XHRcdFx0XHRfdXNlU1ZHVHJhbnNmb3JtQXR0ciA9IENTU1BsdWdpbi51c2VTVkdUcmFuc2Zvcm1BdHRyIHx8IF9mb3JjZVNWR1RyYW5zZm9ybUF0dHI7XG5cdFx0XHRcdH1cblx0XHRcdFx0bSA9IF9nZXRNYXRyaXgodCk7XG5cdFx0XHRcdGlmIChtICE9PSBfaWRlbnRpdHkyRE1hdHJpeCkge1xuXG5cdFx0XHRcdFx0aWYgKG0ubGVuZ3RoID09PSAxNikge1xuXHRcdFx0XHRcdFx0Ly93ZSdsbCBvbmx5IGxvb2sgYXQgdGhlc2UgcG9zaXRpb24tcmVsYXRlZCA2IHZhcmlhYmxlcyBmaXJzdCBiZWNhdXNlIGlmIHgveS96IGFsbCBtYXRjaCwgaXQncyByZWxhdGl2ZWx5IHNhZmUgdG8gYXNzdW1lIHdlIGRvbid0IG5lZWQgdG8gcmUtcGFyc2UgZXZlcnl0aGluZyB3aGljaCByaXNrcyBsb3NpbmcgaW1wb3J0YW50IHJvdGF0aW9uYWwgaW5mb3JtYXRpb24gKGxpa2Ugcm90YXRpb25YOjE4MCBwbHVzIHJvdGF0aW9uWToxODAgd291bGQgbG9vayB0aGUgc2FtZSBhcyByb3RhdGlvbjoxODAgLSB0aGVyZSdzIG5vIHdheSB0byBrbm93IGZvciBzdXJlIHdoaWNoIGRpcmVjdGlvbiB3YXMgdGFrZW4gYmFzZWQgc29sZWx5IG9uIHRoZSBtYXRyaXgzZCgpIHZhbHVlcylcblx0XHRcdFx0XHRcdHZhciBhMTEgPSBtWzBdLCBhMjEgPSBtWzFdLCBhMzEgPSBtWzJdLCBhNDEgPSBtWzNdLFxuXHRcdFx0XHRcdFx0XHRhMTIgPSBtWzRdLCBhMjIgPSBtWzVdLCBhMzIgPSBtWzZdLCBhNDIgPSBtWzddLFxuXHRcdFx0XHRcdFx0XHRhMTMgPSBtWzhdLCBhMjMgPSBtWzldLCBhMzMgPSBtWzEwXSxcblx0XHRcdFx0XHRcdFx0YTE0ID0gbVsxMl0sIGEyNCA9IG1bMTNdLCBhMzQgPSBtWzE0XSxcblx0XHRcdFx0XHRcdFx0YTQzID0gbVsxMV0sXG5cdFx0XHRcdFx0XHRcdGFuZ2xlID0gTWF0aC5hdGFuMihhMzIsIGEzMyksXG5cdFx0XHRcdFx0XHRcdHQxLCB0MiwgdDMsIHQ0LCBjb3MsIHNpbjtcblxuXHRcdFx0XHRcdFx0Ly93ZSBtYW51YWxseSBjb21wZW5zYXRlIGZvciBub24temVybyB6IGNvbXBvbmVudCBvZiB0cmFuc2Zvcm1PcmlnaW4gdG8gd29yayBhcm91bmQgYnVncyBpbiBTYWZhcmlcblx0XHRcdFx0XHRcdGlmICh0bS56T3JpZ2luKSB7XG5cdFx0XHRcdFx0XHRcdGEzNCA9IC10bS56T3JpZ2luO1xuXHRcdFx0XHRcdFx0XHRhMTQgPSBhMTMqYTM0LW1bMTJdO1xuXHRcdFx0XHRcdFx0XHRhMjQgPSBhMjMqYTM0LW1bMTNdO1xuXHRcdFx0XHRcdFx0XHRhMzQgPSBhMzMqYTM0K3RtLnpPcmlnaW4tbVsxNF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR0bS5yb3RhdGlvblggPSBhbmdsZSAqIF9SQUQyREVHO1xuXHRcdFx0XHRcdFx0Ly9yb3RhdGlvblhcblx0XHRcdFx0XHRcdGlmIChhbmdsZSkge1xuXHRcdFx0XHRcdFx0XHRjb3MgPSBNYXRoLmNvcygtYW5nbGUpO1xuXHRcdFx0XHRcdFx0XHRzaW4gPSBNYXRoLnNpbigtYW5nbGUpO1xuXHRcdFx0XHRcdFx0XHR0MSA9IGExMipjb3MrYTEzKnNpbjtcblx0XHRcdFx0XHRcdFx0dDIgPSBhMjIqY29zK2EyMypzaW47XG5cdFx0XHRcdFx0XHRcdHQzID0gYTMyKmNvcythMzMqc2luO1xuXHRcdFx0XHRcdFx0XHRhMTMgPSBhMTIqLXNpbithMTMqY29zO1xuXHRcdFx0XHRcdFx0XHRhMjMgPSBhMjIqLXNpbithMjMqY29zO1xuXHRcdFx0XHRcdFx0XHRhMzMgPSBhMzIqLXNpbithMzMqY29zO1xuXHRcdFx0XHRcdFx0XHRhNDMgPSBhNDIqLXNpbithNDMqY29zO1xuXHRcdFx0XHRcdFx0XHRhMTIgPSB0MTtcblx0XHRcdFx0XHRcdFx0YTIyID0gdDI7XG5cdFx0XHRcdFx0XHRcdGEzMiA9IHQzO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Ly9yb3RhdGlvbllcblx0XHRcdFx0XHRcdGFuZ2xlID0gTWF0aC5hdGFuMihhMTMsIGEzMyk7XG5cdFx0XHRcdFx0XHR0bS5yb3RhdGlvblkgPSBhbmdsZSAqIF9SQUQyREVHO1xuXHRcdFx0XHRcdFx0aWYgKGFuZ2xlKSB7XG5cdFx0XHRcdFx0XHRcdGNvcyA9IE1hdGguY29zKC1hbmdsZSk7XG5cdFx0XHRcdFx0XHRcdHNpbiA9IE1hdGguc2luKC1hbmdsZSk7XG5cdFx0XHRcdFx0XHRcdHQxID0gYTExKmNvcy1hMTMqc2luO1xuXHRcdFx0XHRcdFx0XHR0MiA9IGEyMSpjb3MtYTIzKnNpbjtcblx0XHRcdFx0XHRcdFx0dDMgPSBhMzEqY29zLWEzMypzaW47XG5cdFx0XHRcdFx0XHRcdGEyMyA9IGEyMSpzaW4rYTIzKmNvcztcblx0XHRcdFx0XHRcdFx0YTMzID0gYTMxKnNpbithMzMqY29zO1xuXHRcdFx0XHRcdFx0XHRhNDMgPSBhNDEqc2luK2E0Mypjb3M7XG5cdFx0XHRcdFx0XHRcdGExMSA9IHQxO1xuXHRcdFx0XHRcdFx0XHRhMjEgPSB0Mjtcblx0XHRcdFx0XHRcdFx0YTMxID0gdDM7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHQvL3JvdGF0aW9uWlxuXHRcdFx0XHRcdFx0YW5nbGUgPSBNYXRoLmF0YW4yKGEyMSwgYTExKTtcblx0XHRcdFx0XHRcdHRtLnJvdGF0aW9uID0gYW5nbGUgKiBfUkFEMkRFRztcblx0XHRcdFx0XHRcdGlmIChhbmdsZSkge1xuXHRcdFx0XHRcdFx0XHRjb3MgPSBNYXRoLmNvcygtYW5nbGUpO1xuXHRcdFx0XHRcdFx0XHRzaW4gPSBNYXRoLnNpbigtYW5nbGUpO1xuXHRcdFx0XHRcdFx0XHRhMTEgPSBhMTEqY29zK2ExMipzaW47XG5cdFx0XHRcdFx0XHRcdHQyID0gYTIxKmNvcythMjIqc2luO1xuXHRcdFx0XHRcdFx0XHRhMjIgPSBhMjEqLXNpbithMjIqY29zO1xuXHRcdFx0XHRcdFx0XHRhMzIgPSBhMzEqLXNpbithMzIqY29zO1xuXHRcdFx0XHRcdFx0XHRhMjEgPSB0Mjtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aWYgKHRtLnJvdGF0aW9uWCAmJiBNYXRoLmFicyh0bS5yb3RhdGlvblgpICsgTWF0aC5hYnModG0ucm90YXRpb24pID4gMzU5LjkpIHsgLy93aGVuIHJvdGF0aW9uWSBpcyBzZXQsIGl0IHdpbGwgb2Z0ZW4gYmUgcGFyc2VkIGFzIDE4MCBkZWdyZWVzIGRpZmZlcmVudCB0aGFuIGl0IHNob3VsZCBiZSwgYW5kIHJvdGF0aW9uWCBhbmQgcm90YXRpb24gYm90aCBiZWluZyAxODAgKGl0IGxvb2tzIHRoZSBzYW1lKSwgc28gd2UgYWRqdXN0IGZvciB0aGF0IGhlcmUuXG5cdFx0XHRcdFx0XHRcdHRtLnJvdGF0aW9uWCA9IHRtLnJvdGF0aW9uID0gMDtcblx0XHRcdFx0XHRcdFx0dG0ucm90YXRpb25ZICs9IDE4MDtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0dG0uc2NhbGVYID0gKChNYXRoLnNxcnQoYTExICogYTExICsgYTIxICogYTIxKSAqIHJuZCArIDAuNSkgfCAwKSAvIHJuZDtcblx0XHRcdFx0XHRcdHRtLnNjYWxlWSA9ICgoTWF0aC5zcXJ0KGEyMiAqIGEyMiArIGEyMyAqIGEyMykgKiBybmQgKyAwLjUpIHwgMCkgLyBybmQ7XG5cdFx0XHRcdFx0XHR0bS5zY2FsZVogPSAoKE1hdGguc3FydChhMzIgKiBhMzIgKyBhMzMgKiBhMzMpICogcm5kICsgMC41KSB8IDApIC8gcm5kO1xuXHRcdFx0XHRcdFx0dG0uc2tld1ggPSAwO1xuXHRcdFx0XHRcdFx0dG0ucGVyc3BlY3RpdmUgPSBhNDMgPyAxIC8gKChhNDMgPCAwKSA/IC1hNDMgOiBhNDMpIDogMDtcblx0XHRcdFx0XHRcdHRtLnggPSBhMTQ7XG5cdFx0XHRcdFx0XHR0bS55ID0gYTI0O1xuXHRcdFx0XHRcdFx0dG0ueiA9IGEzNDtcblx0XHRcdFx0XHRcdGlmICh0bS5zdmcpIHtcblx0XHRcdFx0XHRcdFx0dG0ueCAtPSB0bS54T3JpZ2luIC0gKHRtLnhPcmlnaW4gKiBhMTEgLSB0bS55T3JpZ2luICogYTEyKTtcblx0XHRcdFx0XHRcdFx0dG0ueSAtPSB0bS55T3JpZ2luIC0gKHRtLnlPcmlnaW4gKiBhMjEgLSB0bS54T3JpZ2luICogYTIyKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoKCFfc3VwcG9ydHMzRCB8fCBwYXJzZSB8fCAhbS5sZW5ndGggfHwgdG0ueCAhPT0gbVs0XSB8fCB0bS55ICE9PSBtWzVdIHx8ICghdG0ucm90YXRpb25YICYmICF0bS5yb3RhdGlvblkpKSAmJiAhKHRtLnggIT09IHVuZGVmaW5lZCAmJiBfZ2V0U3R5bGUodCwgXCJkaXNwbGF5XCIsIGNzKSA9PT0gXCJub25lXCIpKSB7IC8vc29tZXRpbWVzIGEgNi1lbGVtZW50IG1hdHJpeCBpcyByZXR1cm5lZCBldmVuIHdoZW4gd2UgcGVyZm9ybWVkIDNEIHRyYW5zZm9ybXMsIGxpa2UgaWYgcm90YXRpb25YIGFuZCByb3RhdGlvblkgYXJlIDE4MC4gSW4gY2FzZXMgbGlrZSB0aGlzLCB3ZSBzdGlsbCBuZWVkIHRvIGhvbm9yIHRoZSAzRCB0cmFuc2Zvcm1zLiBJZiB3ZSBqdXN0IHJlbHkgb24gdGhlIDJEIGluZm8sIGl0IGNvdWxkIGFmZmVjdCBob3cgdGhlIGRhdGEgaXMgaW50ZXJwcmV0ZWQsIGxpa2Ugc2NhbGVZIG1pZ2h0IGdldCBzZXQgdG8gLTEgb3Igcm90YXRpb24gY291bGQgZ2V0IG9mZnNldCBieSAxODAgZGVncmVlcy4gRm9yIGV4YW1wbGUsIGRvIGEgVHdlZW5MaXRlLnRvKGVsZW1lbnQsIDEsIHtjc3M6e3JvdGF0aW9uWDoxODAsIHJvdGF0aW9uWToxODB9fSkgYW5kIHRoZW4gbGF0ZXIsIFR3ZWVuTGl0ZS50byhlbGVtZW50LCAxLCB7Y3NzOntyb3RhdGlvblg6MH19KSBhbmQgd2l0aG91dCB0aGlzIGNvbmRpdGlvbmFsIGxvZ2ljIGluIHBsYWNlLCBpdCdkIGp1bXAgdG8gYSBzdGF0ZSBvZiBiZWluZyB1bnJvdGF0ZWQgd2hlbiB0aGUgMm5kIHR3ZWVuIHN0YXJ0cy4gVGhlbiBhZ2Fpbiwgd2UgbmVlZCB0byBob25vciB0aGUgZmFjdCB0aGF0IHRoZSB1c2VyIENPVUxEIGFsdGVyIHRoZSB0cmFuc2Zvcm1zIG91dHNpZGUgb2YgQ1NTUGx1Z2luLCBsaWtlIGJ5IG1hbnVhbGx5IGFwcGx5aW5nIG5ldyBjc3MsIHNvIHdlIHRyeSB0byBzZW5zZSB0aGF0IGJ5IGxvb2tpbmcgYXQgeCBhbmQgeSBiZWNhdXNlIGlmIHRob3NlIGNoYW5nZWQsIHdlIGtub3cgdGhlIGNoYW5nZXMgd2VyZSBtYWRlIG91dHNpZGUgQ1NTUGx1Z2luIGFuZCB3ZSBmb3JjZSBhIHJlaW50ZXJwcmV0YXRpb24gb2YgdGhlIG1hdHJpeCB2YWx1ZXMuIEFsc28sIGluIFdlYmtpdCBicm93c2VycywgaWYgdGhlIGVsZW1lbnQncyBcImRpc3BsYXlcIiBpcyBcIm5vbmVcIiwgaXRzIGNhbGN1bGF0ZWQgc3R5bGUgdmFsdWUgd2lsbCBhbHdheXMgcmV0dXJuIGVtcHR5LCBzbyBpZiB3ZSd2ZSBhbHJlYWR5IHJlY29yZGVkIHRoZSB2YWx1ZXMgaW4gdGhlIF9nc1RyYW5zZm9ybSBvYmplY3QsIHdlJ2xsIGp1c3QgcmVseSBvbiB0aG9zZS5cblx0XHRcdFx0XHRcdHZhciBrID0gKG0ubGVuZ3RoID49IDYpLFxuXHRcdFx0XHRcdFx0XHRhID0gayA/IG1bMF0gOiAxLFxuXHRcdFx0XHRcdFx0XHRiID0gbVsxXSB8fCAwLFxuXHRcdFx0XHRcdFx0XHRjID0gbVsyXSB8fCAwLFxuXHRcdFx0XHRcdFx0XHRkID0gayA/IG1bM10gOiAxO1xuXHRcdFx0XHRcdFx0dG0ueCA9IG1bNF0gfHwgMDtcblx0XHRcdFx0XHRcdHRtLnkgPSBtWzVdIHx8IDA7XG5cdFx0XHRcdFx0XHRzY2FsZVggPSBNYXRoLnNxcnQoYSAqIGEgKyBiICogYik7XG5cdFx0XHRcdFx0XHRzY2FsZVkgPSBNYXRoLnNxcnQoZCAqIGQgKyBjICogYyk7XG5cdFx0XHRcdFx0XHRyb3RhdGlvbiA9IChhIHx8IGIpID8gTWF0aC5hdGFuMihiLCBhKSAqIF9SQUQyREVHIDogdG0ucm90YXRpb24gfHwgMDsgLy9ub3RlOiBpZiBzY2FsZVggaXMgMCwgd2UgY2Fubm90IGFjY3VyYXRlbHkgbWVhc3VyZSByb3RhdGlvbi4gU2FtZSBmb3Igc2tld1ggd2l0aCBhIHNjYWxlWSBvZiAwLiBUaGVyZWZvcmUsIHdlIGRlZmF1bHQgdG8gdGhlIHByZXZpb3VzbHkgcmVjb3JkZWQgdmFsdWUgKG9yIHplcm8gaWYgdGhhdCBkb2Vzbid0IGV4aXN0KS5cblx0XHRcdFx0XHRcdHNrZXdYID0gKGMgfHwgZCkgPyBNYXRoLmF0YW4yKGMsIGQpICogX1JBRDJERUcgKyByb3RhdGlvbiA6IHRtLnNrZXdYIHx8IDA7XG5cdFx0XHRcdFx0XHRpZiAoTWF0aC5hYnMoc2tld1gpID4gOTAgJiYgTWF0aC5hYnMoc2tld1gpIDwgMjcwKSB7XG5cdFx0XHRcdFx0XHRcdGlmIChpbnZYKSB7XG5cdFx0XHRcdFx0XHRcdFx0c2NhbGVYICo9IC0xO1xuXHRcdFx0XHRcdFx0XHRcdHNrZXdYICs9IChyb3RhdGlvbiA8PSAwKSA/IDE4MCA6IC0xODA7XG5cdFx0XHRcdFx0XHRcdFx0cm90YXRpb24gKz0gKHJvdGF0aW9uIDw9IDApID8gMTgwIDogLTE4MDtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRzY2FsZVkgKj0gLTE7XG5cdFx0XHRcdFx0XHRcdFx0c2tld1ggKz0gKHNrZXdYIDw9IDApID8gMTgwIDogLTE4MDtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0dG0uc2NhbGVYID0gc2NhbGVYO1xuXHRcdFx0XHRcdFx0dG0uc2NhbGVZID0gc2NhbGVZO1xuXHRcdFx0XHRcdFx0dG0ucm90YXRpb24gPSByb3RhdGlvbjtcblx0XHRcdFx0XHRcdHRtLnNrZXdYID0gc2tld1g7XG5cdFx0XHRcdFx0XHRpZiAoX3N1cHBvcnRzM0QpIHtcblx0XHRcdFx0XHRcdFx0dG0ucm90YXRpb25YID0gdG0ucm90YXRpb25ZID0gdG0ueiA9IDA7XG5cdFx0XHRcdFx0XHRcdHRtLnBlcnNwZWN0aXZlID0gZGVmYXVsdFRyYW5zZm9ybVBlcnNwZWN0aXZlO1xuXHRcdFx0XHRcdFx0XHR0bS5zY2FsZVogPSAxO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKHRtLnN2Zykge1xuXHRcdFx0XHRcdFx0XHR0bS54IC09IHRtLnhPcmlnaW4gLSAodG0ueE9yaWdpbiAqIGEgKyB0bS55T3JpZ2luICogYyk7XG5cdFx0XHRcdFx0XHRcdHRtLnkgLT0gdG0ueU9yaWdpbiAtICh0bS54T3JpZ2luICogYiArIHRtLnlPcmlnaW4gKiBkKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dG0uek9yaWdpbiA9IHpPcmlnaW47XG5cdFx0XHRcdFx0Ly9zb21lIGJyb3dzZXJzIGhhdmUgYSBoYXJkIHRpbWUgd2l0aCB2ZXJ5IHNtYWxsIHZhbHVlcyBsaWtlIDIuNDQ5MjkzNTk4Mjk0NzA2NGUtMTYgKG5vdGljZSB0aGUgXCJlLVwiIHRvd2FyZHMgdGhlIGVuZCkgYW5kIHdvdWxkIHJlbmRlciB0aGUgb2JqZWN0IHNsaWdodGx5IG9mZi4gU28gd2Ugcm91bmQgdG8gMCBpbiB0aGVzZSBjYXNlcy4gVGhlIGNvbmRpdGlvbmFsIGxvZ2ljIGhlcmUgaXMgZmFzdGVyIHRoYW4gY2FsbGluZyBNYXRoLmFicygpLiBBbHNvLCBicm93c2VycyB0ZW5kIHRvIHJlbmRlciBhIFNMSUdIVExZIHJvdGF0ZWQgb2JqZWN0IGluIGEgZnV6enkgd2F5LCBzbyB3ZSBuZWVkIHRvIHNuYXAgdG8gZXhhY3RseSAwIHdoZW4gYXBwcm9wcmlhdGUuXG5cdFx0XHRcdFx0Zm9yIChpIGluIHRtKSB7XG5cdFx0XHRcdFx0XHRpZiAodG1baV0gPCBtaW4pIGlmICh0bVtpXSA+IC1taW4pIHtcblx0XHRcdFx0XHRcdFx0dG1baV0gPSAwO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHQvL0RFQlVHOiBfbG9nKFwicGFyc2VkIHJvdGF0aW9uIG9mIFwiICsgdC5nZXRBdHRyaWJ1dGUoXCJpZFwiKStcIjogXCIrKHRtLnJvdGF0aW9uWCkrXCIsIFwiKyh0bS5yb3RhdGlvblkpK1wiLCBcIisodG0ucm90YXRpb24pK1wiLCBzY2FsZTogXCIrdG0uc2NhbGVYK1wiLCBcIit0bS5zY2FsZVkrXCIsIFwiK3RtLnNjYWxlWitcIiwgcG9zaXRpb246IFwiK3RtLngrXCIsIFwiK3RtLnkrXCIsIFwiK3RtLnorXCIsIHBlcnNwZWN0aXZlOiBcIit0bS5wZXJzcGVjdGl2ZSsgXCIsIG9yaWdpbjogXCIrIHRtLnhPcmlnaW4rIFwiLFwiKyB0bS55T3JpZ2luKTtcblx0XHRcdFx0aWYgKHJlYykge1xuXHRcdFx0XHRcdHQuX2dzVHJhbnNmb3JtID0gdG07IC8vcmVjb3JkIHRvIHRoZSBvYmplY3QncyBfZ3NUcmFuc2Zvcm0gd2hpY2ggd2UgdXNlIHNvIHRoYXQgdHdlZW5zIGNhbiBjb250cm9sIGluZGl2aWR1YWwgcHJvcGVydGllcyBpbmRlcGVuZGVudGx5ICh3ZSBuZWVkIGFsbCB0aGUgcHJvcGVydGllcyB0byBhY2N1cmF0ZWx5IHJlY29tcG9zZSB0aGUgbWF0cml4IGluIHRoZSBzZXRSYXRpbygpIG1ldGhvZClcblx0XHRcdFx0XHRpZiAodG0uc3ZnKSB7IC8vaWYgd2UncmUgc3VwcG9zZWQgdG8gYXBwbHkgdHJhbnNmb3JtcyB0byB0aGUgU1ZHIGVsZW1lbnQncyBcInRyYW5zZm9ybVwiIGF0dHJpYnV0ZSwgbWFrZSBzdXJlIHRoZXJlIGFyZW4ndCBhbnkgQ1NTIHRyYW5zZm9ybXMgYXBwbGllZCBvciB0aGV5J2xsIG92ZXJyaWRlIHRoZSBhdHRyaWJ1dGUgb25lcy4gQWxzbyBjbGVhciB0aGUgdHJhbnNmb3JtIGF0dHJpYnV0ZSBpZiB3ZSdyZSB1c2luZyBDU1MsIGp1c3QgdG8gYmUgY2xlYW4uXG5cdFx0XHRcdFx0XHRpZiAoX3VzZVNWR1RyYW5zZm9ybUF0dHIgJiYgdC5zdHlsZVtfdHJhbnNmb3JtUHJvcF0pIHtcblx0XHRcdFx0XHRcdFx0VHdlZW5MaXRlLmRlbGF5ZWRDYWxsKDAuMDAxLCBmdW5jdGlvbigpeyAvL2lmIHdlIGFwcGx5IHRoaXMgcmlnaHQgYXdheSAoYmVmb3JlIGFueXRoaW5nIGhhcyByZW5kZXJlZCksIHdlIHJpc2sgdGhlcmUgYmVpbmcgbm8gdHJhbnNmb3JtcyBmb3IgYSBicmllZiBtb21lbnQgYW5kIGl0IGFsc28gaW50ZXJmZXJlcyB3aXRoIGFkanVzdGluZyB0aGUgdHJhbnNmb3JtT3JpZ2luIGluIGEgdHdlZW4gd2l0aCBpbW1lZGlhdGVSZW5kZXI6dHJ1ZSAoaXQnZCB0cnkgcmVhZGluZyB0aGUgbWF0cml4IGFuZCBpdCB3b3VsZG4ndCBoYXZlIHRoZSBhcHByb3ByaWF0ZSBkYXRhIGluIHBsYWNlIGJlY2F1c2Ugd2UganVzdCByZW1vdmVkIGl0KS5cblx0XHRcdFx0XHRcdFx0XHRfcmVtb3ZlUHJvcCh0LnN0eWxlLCBfdHJhbnNmb3JtUHJvcCk7XG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICghX3VzZVNWR1RyYW5zZm9ybUF0dHIgJiYgdC5nZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIikpIHtcblx0XHRcdFx0XHRcdFx0VHdlZW5MaXRlLmRlbGF5ZWRDYWxsKDAuMDAxLCBmdW5jdGlvbigpe1xuXHRcdFx0XHRcdFx0XHRcdHQucmVtb3ZlQXR0cmlidXRlKFwidHJhbnNmb3JtXCIpO1xuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRtO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly9mb3Igc2V0dGluZyAyRCB0cmFuc2Zvcm1zIGluIElFNiwgSUU3LCBhbmQgSUU4IChtdXN0IHVzZSBhIFwiZmlsdGVyXCIgdG8gZW11bGF0ZSB0aGUgYmVoYXZpb3Igb2YgbW9kZXJuIGRheSBicm93c2VyIHRyYW5zZm9ybXMpXG5cdFx0XHRfc2V0SUVUcmFuc2Zvcm1SYXRpbyA9IGZ1bmN0aW9uKHYpIHtcblx0XHRcdFx0dmFyIHQgPSB0aGlzLmRhdGEsIC8vcmVmZXJzIHRvIHRoZSBlbGVtZW50J3MgX2dzVHJhbnNmb3JtIG9iamVjdFxuXHRcdFx0XHRcdGFuZyA9IC10LnJvdGF0aW9uICogX0RFRzJSQUQsXG5cdFx0XHRcdFx0c2tldyA9IGFuZyArIHQuc2tld1ggKiBfREVHMlJBRCxcblx0XHRcdFx0XHRybmQgPSAxMDAwMDAsXG5cdFx0XHRcdFx0YSA9ICgoTWF0aC5jb3MoYW5nKSAqIHQuc2NhbGVYICogcm5kKSB8IDApIC8gcm5kLFxuXHRcdFx0XHRcdGIgPSAoKE1hdGguc2luKGFuZykgKiB0LnNjYWxlWCAqIHJuZCkgfCAwKSAvIHJuZCxcblx0XHRcdFx0XHRjID0gKChNYXRoLnNpbihza2V3KSAqIC10LnNjYWxlWSAqIHJuZCkgfCAwKSAvIHJuZCxcblx0XHRcdFx0XHRkID0gKChNYXRoLmNvcyhza2V3KSAqIHQuc2NhbGVZICogcm5kKSB8IDApIC8gcm5kLFxuXHRcdFx0XHRcdHN0eWxlID0gdGhpcy50LnN0eWxlLFxuXHRcdFx0XHRcdGNzID0gdGhpcy50LmN1cnJlbnRTdHlsZSxcblx0XHRcdFx0XHRmaWx0ZXJzLCB2YWw7XG5cdFx0XHRcdGlmICghY3MpIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0dmFsID0gYjsgLy9qdXN0IGZvciBzd2FwcGluZyB0aGUgdmFyaWFibGVzIGFuIGludmVydGluZyB0aGVtIChyZXVzZWQgXCJ2YWxcIiB0byBhdm9pZCBjcmVhdGluZyBhbm90aGVyIHZhcmlhYmxlIGluIG1lbW9yeSkuIElFJ3MgZmlsdGVyIG1hdHJpeCB1c2VzIGEgbm9uLXN0YW5kYXJkIG1hdHJpeCBjb25maWd1cmF0aW9uIChhbmdsZSBnb2VzIHRoZSBvcHBvc2l0ZSB3YXksIGFuZCBiIGFuZCBjIGFyZSByZXZlcnNlZCBhbmQgaW52ZXJ0ZWQpXG5cdFx0XHRcdGIgPSAtYztcblx0XHRcdFx0YyA9IC12YWw7XG5cdFx0XHRcdGZpbHRlcnMgPSBjcy5maWx0ZXI7XG5cdFx0XHRcdHN0eWxlLmZpbHRlciA9IFwiXCI7IC8vcmVtb3ZlIGZpbHRlcnMgc28gdGhhdCB3ZSBjYW4gYWNjdXJhdGVseSBtZWFzdXJlIG9mZnNldFdpZHRoL29mZnNldEhlaWdodFxuXHRcdFx0XHR2YXIgdyA9IHRoaXMudC5vZmZzZXRXaWR0aCxcblx0XHRcdFx0XHRoID0gdGhpcy50Lm9mZnNldEhlaWdodCxcblx0XHRcdFx0XHRjbGlwID0gKGNzLnBvc2l0aW9uICE9PSBcImFic29sdXRlXCIpLFxuXHRcdFx0XHRcdG0gPSBcInByb2dpZDpEWEltYWdlVHJhbnNmb3JtLk1pY3Jvc29mdC5NYXRyaXgoTTExPVwiICsgYSArIFwiLCBNMTI9XCIgKyBiICsgXCIsIE0yMT1cIiArIGMgKyBcIiwgTTIyPVwiICsgZCxcblx0XHRcdFx0XHRveCA9IHQueCArICh3ICogdC54UGVyY2VudCAvIDEwMCksXG5cdFx0XHRcdFx0b3kgPSB0LnkgKyAoaCAqIHQueVBlcmNlbnQgLyAxMDApLFxuXHRcdFx0XHRcdGR4LCBkeTtcblxuXHRcdFx0XHQvL2lmIHRyYW5zZm9ybU9yaWdpbiBpcyBiZWluZyB1c2VkLCBhZGp1c3QgdGhlIG9mZnNldCB4IGFuZCB5XG5cdFx0XHRcdGlmICh0Lm94ICE9IG51bGwpIHtcblx0XHRcdFx0XHRkeCA9ICgodC5veHApID8gdyAqIHQub3ggKiAwLjAxIDogdC5veCkgLSB3IC8gMjtcblx0XHRcdFx0XHRkeSA9ICgodC5veXApID8gaCAqIHQub3kgKiAwLjAxIDogdC5veSkgLSBoIC8gMjtcblx0XHRcdFx0XHRveCArPSBkeCAtIChkeCAqIGEgKyBkeSAqIGIpO1xuXHRcdFx0XHRcdG95ICs9IGR5IC0gKGR4ICogYyArIGR5ICogZCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIWNsaXApIHtcblx0XHRcdFx0XHRtICs9IFwiLCBzaXppbmdNZXRob2Q9J2F1dG8gZXhwYW5kJylcIjtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkeCA9ICh3IC8gMik7XG5cdFx0XHRcdFx0ZHkgPSAoaCAvIDIpO1xuXHRcdFx0XHRcdC8vdHJhbnNsYXRlIHRvIGVuc3VyZSB0aGF0IHRyYW5zZm9ybWF0aW9ucyBvY2N1ciBhcm91bmQgdGhlIGNvcnJlY3Qgb3JpZ2luIChkZWZhdWx0IGlzIGNlbnRlcikuXG5cdFx0XHRcdFx0bSArPSBcIiwgRHg9XCIgKyAoZHggLSAoZHggKiBhICsgZHkgKiBiKSArIG94KSArIFwiLCBEeT1cIiArIChkeSAtIChkeCAqIGMgKyBkeSAqIGQpICsgb3kpICsgXCIpXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGZpbHRlcnMuaW5kZXhPZihcIkRYSW1hZ2VUcmFuc2Zvcm0uTWljcm9zb2Z0Lk1hdHJpeChcIikgIT09IC0xKSB7XG5cdFx0XHRcdFx0c3R5bGUuZmlsdGVyID0gZmlsdGVycy5yZXBsYWNlKF9pZVNldE1hdHJpeEV4cCwgbSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3R5bGUuZmlsdGVyID0gbSArIFwiIFwiICsgZmlsdGVyczsgLy93ZSBtdXN0IGFsd2F5cyBwdXQgdGhlIHRyYW5zZm9ybS9tYXRyaXggRklSU1QgKGJlZm9yZSBhbHBoYShvcGFjaXR5PXh4KSkgdG8gYXZvaWQgYW4gSUUgYnVnIHRoYXQgc2xpY2VzIHBhcnQgb2YgdGhlIG9iamVjdCB3aGVuIHJvdGF0aW9uIGlzIGFwcGxpZWQgd2l0aCBhbHBoYS5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vYXQgdGhlIGVuZCBvciBiZWdpbm5pbmcgb2YgdGhlIHR3ZWVuLCBpZiB0aGUgbWF0cml4IGlzIG5vcm1hbCAoMSwgMCwgMCwgMSkgYW5kIG9wYWNpdHkgaXMgMTAwIChvciBkb2Vzbid0IGV4aXN0KSwgcmVtb3ZlIHRoZSBmaWx0ZXIgdG8gaW1wcm92ZSBicm93c2VyIHBlcmZvcm1hbmNlLlxuXHRcdFx0XHRpZiAodiA9PT0gMCB8fCB2ID09PSAxKSBpZiAoYSA9PT0gMSkgaWYgKGIgPT09IDApIGlmIChjID09PSAwKSBpZiAoZCA9PT0gMSkgaWYgKCFjbGlwIHx8IG0uaW5kZXhPZihcIkR4PTAsIER5PTBcIikgIT09IC0xKSBpZiAoIV9vcGFjaXR5RXhwLnRlc3QoZmlsdGVycykgfHwgcGFyc2VGbG9hdChSZWdFeHAuJDEpID09PSAxMDApIGlmIChmaWx0ZXJzLmluZGV4T2YoXCJncmFkaWVudChcIiAmJiBmaWx0ZXJzLmluZGV4T2YoXCJBbHBoYVwiKSkgPT09IC0xKSB7XG5cdFx0XHRcdFx0c3R5bGUucmVtb3ZlQXR0cmlidXRlKFwiZmlsdGVyXCIpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly93ZSBtdXN0IHNldCB0aGUgbWFyZ2lucyBBRlRFUiBhcHBseWluZyB0aGUgZmlsdGVyIGluIG9yZGVyIHRvIGF2b2lkIHNvbWUgYnVncyBpbiBJRTggdGhhdCBjb3VsZCAoaW4gcmFyZSBzY2VuYXJpb3MpIGNhdXNlIHRoZW0gdG8gYmUgaWdub3JlZCBpbnRlcm1pdHRlbnRseSAodmlicmF0aW9uKS5cblx0XHRcdFx0aWYgKCFjbGlwKSB7XG5cdFx0XHRcdFx0dmFyIG11bHQgPSAoX2llVmVycyA8IDgpID8gMSA6IC0xLCAvL2luIEludGVybmV0IEV4cGxvcmVyIDcgYW5kIGJlZm9yZSwgdGhlIGJveCBtb2RlbCBpcyBicm9rZW4sIGNhdXNpbmcgdGhlIGJyb3dzZXIgdG8gdHJlYXQgdGhlIHdpZHRoL2hlaWdodCBvZiB0aGUgYWN0dWFsIHJvdGF0ZWQgZmlsdGVyZWQgaW1hZ2UgYXMgdGhlIHdpZHRoL2hlaWdodCBvZiB0aGUgYm94IGl0c2VsZiwgYnV0IE1pY3Jvc29mdCBjb3JyZWN0ZWQgdGhhdCBpbiBJRTguIFdlIG11c3QgdXNlIGEgbmVnYXRpdmUgb2Zmc2V0IGluIElFOCBvbiB0aGUgcmlnaHQvYm90dG9tXG5cdFx0XHRcdFx0XHRtYXJnLCBwcm9wLCBkaWY7XG5cdFx0XHRcdFx0ZHggPSB0LmllT2Zmc2V0WCB8fCAwO1xuXHRcdFx0XHRcdGR5ID0gdC5pZU9mZnNldFkgfHwgMDtcblx0XHRcdFx0XHR0LmllT2Zmc2V0WCA9IE1hdGgucm91bmQoKHcgLSAoKGEgPCAwID8gLWEgOiBhKSAqIHcgKyAoYiA8IDAgPyAtYiA6IGIpICogaCkpIC8gMiArIG94KTtcblx0XHRcdFx0XHR0LmllT2Zmc2V0WSA9IE1hdGgucm91bmQoKGggLSAoKGQgPCAwID8gLWQgOiBkKSAqIGggKyAoYyA8IDAgPyAtYyA6IGMpICogdykpIC8gMiArIG95KTtcblx0XHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgNDsgaSsrKSB7XG5cdFx0XHRcdFx0XHRwcm9wID0gX21hcmdpbnNbaV07XG5cdFx0XHRcdFx0XHRtYXJnID0gY3NbcHJvcF07XG5cdFx0XHRcdFx0XHQvL3dlIG5lZWQgdG8gZ2V0IHRoZSBjdXJyZW50IG1hcmdpbiBpbiBjYXNlIGl0IGlzIGJlaW5nIHR3ZWVuZWQgc2VwYXJhdGVseSAod2Ugd2FudCB0byByZXNwZWN0IHRoYXQgdHdlZW4ncyBjaGFuZ2VzKVxuXHRcdFx0XHRcdFx0dmFsID0gKG1hcmcuaW5kZXhPZihcInB4XCIpICE9PSAtMSkgPyBwYXJzZUZsb2F0KG1hcmcpIDogX2NvbnZlcnRUb1BpeGVscyh0aGlzLnQsIHByb3AsIHBhcnNlRmxvYXQobWFyZyksIG1hcmcucmVwbGFjZShfc3VmZml4RXhwLCBcIlwiKSkgfHwgMDtcblx0XHRcdFx0XHRcdGlmICh2YWwgIT09IHRbcHJvcF0pIHtcblx0XHRcdFx0XHRcdFx0ZGlmID0gKGkgPCAyKSA/IC10LmllT2Zmc2V0WCA6IC10LmllT2Zmc2V0WTsgLy9pZiBhbm90aGVyIHR3ZWVuIGlzIGNvbnRyb2xsaW5nIGEgbWFyZ2luLCB3ZSBjYW5ub3Qgb25seSBhcHBseSB0aGUgZGlmZmVyZW5jZSBpbiB0aGUgaWVPZmZzZXRzLCBzbyB3ZSBlc3NlbnRpYWxseSB6ZXJvLW91dCB0aGUgZHggYW5kIGR5IGhlcmUgaW4gdGhhdCBjYXNlLiBXZSByZWNvcmQgdGhlIG1hcmdpbihzKSBsYXRlciBzbyB0aGF0IHdlIGNhbiBrZWVwIGNvbXBhcmluZyB0aGVtLCBtYWtpbmcgdGhpcyBjb2RlIHZlcnkgZmxleGlibGUuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRkaWYgPSAoaSA8IDIpID8gZHggLSB0LmllT2Zmc2V0WCA6IGR5IC0gdC5pZU9mZnNldFk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRzdHlsZVtwcm9wXSA9ICh0W3Byb3BdID0gTWF0aC5yb3VuZCggdmFsIC0gZGlmICogKChpID09PSAwIHx8IGkgPT09IDIpID8gMSA6IG11bHQpICkpICsgXCJweFwiO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0LyogdHJhbnNsYXRlcyBhIHN1cGVyIHNtYWxsIGRlY2ltYWwgdG8gYSBzdHJpbmcgV0lUSE9VVCBzY2llbnRpZmljIG5vdGF0aW9uXG5cdFx0XHRfc2FmZURlY2ltYWwgPSBmdW5jdGlvbihuKSB7XG5cdFx0XHRcdHZhciBzID0gKG4gPCAwID8gLW4gOiBuKSArIFwiXCIsXG5cdFx0XHRcdFx0YSA9IHMuc3BsaXQoXCJlLVwiKTtcblx0XHRcdFx0cmV0dXJuIChuIDwgMCA/IFwiLTAuXCIgOiBcIjAuXCIpICsgbmV3IEFycmF5KHBhcnNlSW50KGFbMV0sIDEwKSB8fCAwKS5qb2luKFwiMFwiKSArIGFbMF0uc3BsaXQoXCIuXCIpLmpvaW4oXCJcIik7XG5cdFx0XHR9LFxuXHRcdFx0Ki9cblxuXHRcdFx0X3NldFRyYW5zZm9ybVJhdGlvID0gX2ludGVybmFscy5zZXQzRFRyYW5zZm9ybVJhdGlvID0gX2ludGVybmFscy5zZXRUcmFuc2Zvcm1SYXRpbyA9IGZ1bmN0aW9uKHYpIHtcblx0XHRcdFx0dmFyIHQgPSB0aGlzLmRhdGEsIC8vcmVmZXJzIHRvIHRoZSBlbGVtZW50J3MgX2dzVHJhbnNmb3JtIG9iamVjdFxuXHRcdFx0XHRcdHN0eWxlID0gdGhpcy50LnN0eWxlLFxuXHRcdFx0XHRcdGFuZ2xlID0gdC5yb3RhdGlvbixcblx0XHRcdFx0XHRyb3RhdGlvblggPSB0LnJvdGF0aW9uWCxcblx0XHRcdFx0XHRyb3RhdGlvblkgPSB0LnJvdGF0aW9uWSxcblx0XHRcdFx0XHRzeCA9IHQuc2NhbGVYLFxuXHRcdFx0XHRcdHN5ID0gdC5zY2FsZVksXG5cdFx0XHRcdFx0c3ogPSB0LnNjYWxlWixcblx0XHRcdFx0XHR4ID0gdC54LFxuXHRcdFx0XHRcdHkgPSB0LnksXG5cdFx0XHRcdFx0eiA9IHQueixcblx0XHRcdFx0XHRpc1NWRyA9IHQuc3ZnLFxuXHRcdFx0XHRcdHBlcnNwZWN0aXZlID0gdC5wZXJzcGVjdGl2ZSxcblx0XHRcdFx0XHRmb3JjZTNEID0gdC5mb3JjZTNELFxuXHRcdFx0XHRcdGExMSwgYTEyLCBhMTMsIGEyMSwgYTIyLCBhMjMsIGEzMSwgYTMyLCBhMzMsIGE0MSwgYTQyLCBhNDMsXG5cdFx0XHRcdFx0ek9yaWdpbiwgbWluLCBjb3MsIHNpbiwgdDEsIHQyLCB0cmFuc2Zvcm0sIGNvbW1hLCB6ZXJvLCBza2V3LCBybmQ7XG5cdFx0XHRcdC8vY2hlY2sgdG8gc2VlIGlmIHdlIHNob3VsZCByZW5kZXIgYXMgMkQgKGFuZCBTVkdzIG11c3QgdXNlIDJEIHdoZW4gX3VzZVNWR1RyYW5zZm9ybUF0dHIgaXMgdHJ1ZSlcblx0XHRcdFx0aWYgKCgoKCh2ID09PSAxIHx8IHYgPT09IDApICYmIGZvcmNlM0QgPT09IFwiYXV0b1wiICYmICh0aGlzLnR3ZWVuLl90b3RhbFRpbWUgPT09IHRoaXMudHdlZW4uX3RvdGFsRHVyYXRpb24gfHwgIXRoaXMudHdlZW4uX3RvdGFsVGltZSkpIHx8ICFmb3JjZTNEKSAmJiAheiAmJiAhcGVyc3BlY3RpdmUgJiYgIXJvdGF0aW9uWSAmJiAhcm90YXRpb25YKSB8fCAoX3VzZVNWR1RyYW5zZm9ybUF0dHIgJiYgaXNTVkcpIHx8ICFfc3VwcG9ydHMzRCkgeyAvL29uIHRoZSBmaW5hbCByZW5kZXIgKHdoaWNoIGNvdWxkIGJlIDAgZm9yIGEgZnJvbSB0d2VlbiksIGlmIHRoZXJlIGFyZSBubyAzRCBhc3BlY3RzLCByZW5kZXIgaW4gMkQgdG8gZnJlZSB1cCBtZW1vcnkgYW5kIGltcHJvdmUgcGVyZm9ybWFuY2UgZXNwZWNpYWxseSBvbiBtb2JpbGUgZGV2aWNlcy4gQ2hlY2sgdGhlIHR3ZWVuJ3MgdG90YWxUaW1lL3RvdGFsRHVyYXRpb24gdG9vIGluIG9yZGVyIHRvIG1ha2Ugc3VyZSBpdCBkb2Vzbid0IGhhcHBlbiBiZXR3ZWVuIHJlcGVhdHMgaWYgaXQncyBhIHJlcGVhdGluZyB0d2Vlbi5cblxuXHRcdFx0XHRcdC8vMkRcblx0XHRcdFx0XHRpZiAoYW5nbGUgfHwgdC5za2V3WCB8fCBpc1NWRykge1xuXHRcdFx0XHRcdFx0YW5nbGUgKj0gX0RFRzJSQUQ7XG5cdFx0XHRcdFx0XHRza2V3ID0gdC5za2V3WCAqIF9ERUcyUkFEO1xuXHRcdFx0XHRcdFx0cm5kID0gMTAwMDAwO1xuXHRcdFx0XHRcdFx0YTExID0gTWF0aC5jb3MoYW5nbGUpICogc3g7XG5cdFx0XHRcdFx0XHRhMjEgPSBNYXRoLnNpbihhbmdsZSkgKiBzeDtcblx0XHRcdFx0XHRcdGExMiA9IE1hdGguc2luKGFuZ2xlIC0gc2tldykgKiAtc3k7XG5cdFx0XHRcdFx0XHRhMjIgPSBNYXRoLmNvcyhhbmdsZSAtIHNrZXcpICogc3k7XG5cdFx0XHRcdFx0XHRpZiAoc2tldyAmJiB0LnNrZXdUeXBlID09PSBcInNpbXBsZVwiKSB7IC8vYnkgZGVmYXVsdCwgd2UgY29tcGVuc2F0ZSBza2V3aW5nIG9uIHRoZSBvdGhlciBheGlzIHRvIG1ha2UgaXQgbG9vayBtb3JlIG5hdHVyYWwsIGJ1dCB5b3UgY2FuIHNldCB0aGUgc2tld1R5cGUgdG8gXCJzaW1wbGVcIiB0byB1c2UgdGhlIHVuY29tcGVuc2F0ZWQgc2tld2luZyB0aGF0IENTUyBkb2VzXG5cdFx0XHRcdFx0XHRcdHQxID0gTWF0aC50YW4oc2tldyk7XG5cdFx0XHRcdFx0XHRcdHQxID0gTWF0aC5zcXJ0KDEgKyB0MSAqIHQxKTtcblx0XHRcdFx0XHRcdFx0YTEyICo9IHQxO1xuXHRcdFx0XHRcdFx0XHRhMjIgKj0gdDE7XG5cdFx0XHRcdFx0XHRcdGlmICh0LnNrZXdZKSB7XG5cdFx0XHRcdFx0XHRcdFx0YTExICo9IHQxO1xuXHRcdFx0XHRcdFx0XHRcdGEyMSAqPSB0MTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKGlzU1ZHKSB7XG5cdFx0XHRcdFx0XHRcdHggKz0gdC54T3JpZ2luIC0gKHQueE9yaWdpbiAqIGExMSArIHQueU9yaWdpbiAqIGExMikgKyB0LnhPZmZzZXQ7XG5cdFx0XHRcdFx0XHRcdHkgKz0gdC55T3JpZ2luIC0gKHQueE9yaWdpbiAqIGEyMSArIHQueU9yaWdpbiAqIGEyMikgKyB0LnlPZmZzZXQ7XG5cdFx0XHRcdFx0XHRcdGlmIChfdXNlU1ZHVHJhbnNmb3JtQXR0ciAmJiAodC54UGVyY2VudCB8fCB0LnlQZXJjZW50KSkgeyAvL1RoZSBTVkcgc3BlYyBkb2Vzbid0IHN1cHBvcnQgcGVyY2VudGFnZS1iYXNlZCB0cmFuc2xhdGlvbiBpbiB0aGUgXCJ0cmFuc2Zvcm1cIiBhdHRyaWJ1dGUsIHNvIHdlIG1lcmdlIGl0IGludG8gdGhlIG1hdHJpeCB0byBzaW11bGF0ZSBpdC5cblx0XHRcdFx0XHRcdFx0XHRtaW4gPSB0aGlzLnQuZ2V0QkJveCgpO1xuXHRcdFx0XHRcdFx0XHRcdHggKz0gdC54UGVyY2VudCAqIDAuMDEgKiBtaW4ud2lkdGg7XG5cdFx0XHRcdFx0XHRcdFx0eSArPSB0LnlQZXJjZW50ICogMC4wMSAqIG1pbi5oZWlnaHQ7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0bWluID0gMC4wMDAwMDE7XG5cdFx0XHRcdFx0XHRcdGlmICh4IDwgbWluKSBpZiAoeCA+IC1taW4pIHtcblx0XHRcdFx0XHRcdFx0XHR4ID0gMDtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRpZiAoeSA8IG1pbikgaWYgKHkgPiAtbWluKSB7XG5cdFx0XHRcdFx0XHRcdFx0eSA9IDA7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHRyYW5zZm9ybSA9ICgoKGExMSAqIHJuZCkgfCAwKSAvIHJuZCkgKyBcIixcIiArICgoKGEyMSAqIHJuZCkgfCAwKSAvIHJuZCkgKyBcIixcIiArICgoKGExMiAqIHJuZCkgfCAwKSAvIHJuZCkgKyBcIixcIiArICgoKGEyMiAqIHJuZCkgfCAwKSAvIHJuZCkgKyBcIixcIiArIHggKyBcIixcIiArIHkgKyBcIilcIjtcblx0XHRcdFx0XHRcdGlmIChpc1NWRyAmJiBfdXNlU1ZHVHJhbnNmb3JtQXR0cikge1xuXHRcdFx0XHRcdFx0XHR0aGlzLnQuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIFwibWF0cml4KFwiICsgdHJhbnNmb3JtKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vc29tZSBicm93c2VycyBoYXZlIGEgaGFyZCB0aW1lIHdpdGggdmVyeSBzbWFsbCB2YWx1ZXMgbGlrZSAyLjQ0OTI5MzU5ODI5NDcwNjRlLTE2IChub3RpY2UgdGhlIFwiZS1cIiB0b3dhcmRzIHRoZSBlbmQpIGFuZCB3b3VsZCByZW5kZXIgdGhlIG9iamVjdCBzbGlnaHRseSBvZmYuIFNvIHdlIHJvdW5kIHRvIDUgZGVjaW1hbCBwbGFjZXMuXG5cdFx0XHRcdFx0XHRcdHN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9ICgodC54UGVyY2VudCB8fCB0LnlQZXJjZW50KSA/IFwidHJhbnNsYXRlKFwiICsgdC54UGVyY2VudCArIFwiJSxcIiArIHQueVBlcmNlbnQgKyBcIiUpIG1hdHJpeChcIiA6IFwibWF0cml4KFwiKSArIHRyYW5zZm9ybTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c3R5bGVbX3RyYW5zZm9ybVByb3BdID0gKCh0LnhQZXJjZW50IHx8IHQueVBlcmNlbnQpID8gXCJ0cmFuc2xhdGUoXCIgKyB0LnhQZXJjZW50ICsgXCIlLFwiICsgdC55UGVyY2VudCArIFwiJSkgbWF0cml4KFwiIDogXCJtYXRyaXgoXCIpICsgc3ggKyBcIiwwLDAsXCIgKyBzeSArIFwiLFwiICsgeCArIFwiLFwiICsgeSArIFwiKVwiO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoX2lzRmlyZWZveCkgeyAvL0ZpcmVmb3ggaGFzIGEgYnVnIChhdCBsZWFzdCBpbiB2MjUpIHRoYXQgY2F1c2VzIGl0IHRvIHJlbmRlciB0aGUgdHJhbnNwYXJlbnQgcGFydCBvZiAzMi1iaXQgUE5HIGltYWdlcyBhcyBibGFjayB3aGVuIGRpc3BsYXllZCBpbnNpZGUgYW4gaWZyYW1lIGFuZCB0aGUgM0Qgc2NhbGUgaXMgdmVyeSBzbWFsbCBhbmQgZG9lc24ndCBjaGFuZ2Ugc3VmZmljaWVudGx5IGVub3VnaCBiZXR3ZWVuIHJlbmRlcnMgKGxpa2UgaWYgeW91IHVzZSBhIFBvd2VyNC5lYXNlSW5PdXQgdG8gc2NhbGUgZnJvbSAwIHRvIDEgd2hlcmUgdGhlIGJlZ2lubmluZyB2YWx1ZXMgb25seSBjaGFuZ2UgYSB0aW55IGFtb3VudCB0byBiZWdpbiB0aGUgdHdlZW4gYmVmb3JlIGFjY2VsZXJhdGluZykuIEluIHRoaXMgY2FzZSwgd2UgZm9yY2UgdGhlIHNjYWxlIHRvIGJlIDAuMDAwMDIgaW5zdGVhZCB3aGljaCBpcyB2aXN1YWxseSB0aGUgc2FtZSBidXQgd29ya3MgYXJvdW5kIHRoZSBGaXJlZm94IGlzc3VlLlxuXHRcdFx0XHRcdG1pbiA9IDAuMDAwMTtcblx0XHRcdFx0XHRpZiAoc3ggPCBtaW4gJiYgc3ggPiAtbWluKSB7XG5cdFx0XHRcdFx0XHRzeCA9IHN6ID0gMC4wMDAwMjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHN5IDwgbWluICYmIHN5ID4gLW1pbikge1xuXHRcdFx0XHRcdFx0c3kgPSBzeiA9IDAuMDAwMDI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChwZXJzcGVjdGl2ZSAmJiAhdC56ICYmICF0LnJvdGF0aW9uWCAmJiAhdC5yb3RhdGlvblkpIHsgLy9GaXJlZm94IGhhcyBhIGJ1ZyB0aGF0IGNhdXNlcyBlbGVtZW50cyB0byBoYXZlIGFuIG9kZCBzdXBlci10aGluLCBicm9rZW4vZG90dGVkIGJsYWNrIGJvcmRlciBvbiBlbGVtZW50cyB0aGF0IGhhdmUgYSBwZXJzcGVjdGl2ZSBzZXQgYnV0IGFyZW4ndCB1dGlsaXppbmcgM0Qgc3BhY2UgKG5vIHJvdGF0aW9uWCwgcm90YXRpb25ZLCBvciB6KS5cblx0XHRcdFx0XHRcdHBlcnNwZWN0aXZlID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGFuZ2xlIHx8IHQuc2tld1gpIHtcblx0XHRcdFx0XHRhbmdsZSAqPSBfREVHMlJBRDtcblx0XHRcdFx0XHRjb3MgPSBhMTEgPSBNYXRoLmNvcyhhbmdsZSk7XG5cdFx0XHRcdFx0c2luID0gYTIxID0gTWF0aC5zaW4oYW5nbGUpO1xuXHRcdFx0XHRcdGlmICh0LnNrZXdYKSB7XG5cdFx0XHRcdFx0XHRhbmdsZSAtPSB0LnNrZXdYICogX0RFRzJSQUQ7XG5cdFx0XHRcdFx0XHRjb3MgPSBNYXRoLmNvcyhhbmdsZSk7XG5cdFx0XHRcdFx0XHRzaW4gPSBNYXRoLnNpbihhbmdsZSk7XG5cdFx0XHRcdFx0XHRpZiAodC5za2V3VHlwZSA9PT0gXCJzaW1wbGVcIikgeyAvL2J5IGRlZmF1bHQsIHdlIGNvbXBlbnNhdGUgc2tld2luZyBvbiB0aGUgb3RoZXIgYXhpcyB0byBtYWtlIGl0IGxvb2sgbW9yZSBuYXR1cmFsLCBidXQgeW91IGNhbiBzZXQgdGhlIHNrZXdUeXBlIHRvIFwic2ltcGxlXCIgdG8gdXNlIHRoZSB1bmNvbXBlbnNhdGVkIHNrZXdpbmcgdGhhdCBDU1MgZG9lc1xuXHRcdFx0XHRcdFx0XHR0MSA9IE1hdGgudGFuKHQuc2tld1ggKiBfREVHMlJBRCk7XG5cdFx0XHRcdFx0XHRcdHQxID0gTWF0aC5zcXJ0KDEgKyB0MSAqIHQxKTtcblx0XHRcdFx0XHRcdFx0Y29zICo9IHQxO1xuXHRcdFx0XHRcdFx0XHRzaW4gKj0gdDE7XG5cdFx0XHRcdFx0XHRcdGlmICh0LnNrZXdZKSB7XG5cdFx0XHRcdFx0XHRcdFx0YTExICo9IHQxO1xuXHRcdFx0XHRcdFx0XHRcdGEyMSAqPSB0MTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRhMTIgPSAtc2luO1xuXHRcdFx0XHRcdGEyMiA9IGNvcztcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCFyb3RhdGlvblkgJiYgIXJvdGF0aW9uWCAmJiBzeiA9PT0gMSAmJiAhcGVyc3BlY3RpdmUgJiYgIWlzU1ZHKSB7IC8vaWYgd2UncmUgb25seSB0cmFuc2xhdGluZyBhbmQvb3IgMkQgc2NhbGluZywgdGhpcyBpcyBmYXN0ZXIuLi5cblx0XHRcdFx0XHRzdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSAoKHQueFBlcmNlbnQgfHwgdC55UGVyY2VudCkgPyBcInRyYW5zbGF0ZShcIiArIHQueFBlcmNlbnQgKyBcIiUsXCIgKyB0LnlQZXJjZW50ICsgXCIlKSB0cmFuc2xhdGUzZChcIiA6IFwidHJhbnNsYXRlM2QoXCIpICsgeCArIFwicHgsXCIgKyB5ICsgXCJweCxcIiArIHogK1wicHgpXCIgKyAoKHN4ICE9PSAxIHx8IHN5ICE9PSAxKSA/IFwiIHNjYWxlKFwiICsgc3ggKyBcIixcIiArIHN5ICsgXCIpXCIgOiBcIlwiKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0YTExID0gYTIyID0gMTtcblx0XHRcdFx0XHRhMTIgPSBhMjEgPSAwO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIEtFWSAgSU5ERVggICBBRkZFQ1RTXG5cdFx0XHRcdC8vIGExMSAgMCAgICAgICByb3RhdGlvbiwgcm90YXRpb25ZLCBzY2FsZVhcblx0XHRcdFx0Ly8gYTIxICAxICAgICAgIHJvdGF0aW9uLCByb3RhdGlvblksIHNjYWxlWFxuXHRcdFx0XHQvLyBhMzEgIDIgICAgICAgcm90YXRpb25ZLCBzY2FsZVhcblx0XHRcdFx0Ly8gYTQxICAzICAgICAgIHJvdGF0aW9uWSwgc2NhbGVYXG5cdFx0XHRcdC8vIGExMiAgNCAgICAgICByb3RhdGlvbiwgc2tld1gsIHJvdGF0aW9uWCwgc2NhbGVZXG5cdFx0XHRcdC8vIGEyMiAgNSAgICAgICByb3RhdGlvbiwgc2tld1gsIHJvdGF0aW9uWCwgc2NhbGVZXG5cdFx0XHRcdC8vIGEzMiAgNiAgICAgICByb3RhdGlvblgsIHNjYWxlWVxuXHRcdFx0XHQvLyBhNDIgIDcgICAgICAgcm90YXRpb25YLCBzY2FsZVlcblx0XHRcdFx0Ly8gYTEzICA4ICAgICAgIHJvdGF0aW9uWSwgcm90YXRpb25YLCBzY2FsZVpcblx0XHRcdFx0Ly8gYTIzICA5ICAgICAgIHJvdGF0aW9uWSwgcm90YXRpb25YLCBzY2FsZVpcblx0XHRcdFx0Ly8gYTMzICAxMCAgICAgIHJvdGF0aW9uWSwgcm90YXRpb25YLCBzY2FsZVpcblx0XHRcdFx0Ly8gYTQzICAxMSAgICAgIHJvdGF0aW9uWSwgcm90YXRpb25YLCBwZXJzcGVjdGl2ZSwgc2NhbGVaXG5cdFx0XHRcdC8vIGExNCAgMTIgICAgICB4LCB6T3JpZ2luLCBzdmdPcmlnaW5cblx0XHRcdFx0Ly8gYTI0ICAxMyAgICAgIHksIHpPcmlnaW4sIHN2Z09yaWdpblxuXHRcdFx0XHQvLyBhMzQgIDE0ICAgICAgeiwgek9yaWdpblxuXHRcdFx0XHQvLyBhNDQgIDE1XG5cdFx0XHRcdC8vIHJvdGF0aW9uOiBNYXRoLmF0YW4yKGEyMSwgYTExKVxuXHRcdFx0XHQvLyByb3RhdGlvblk6IE1hdGguYXRhbjIoYTEzLCBhMzMpIChvciBNYXRoLmF0YW4yKGExMywgYTExKSlcblx0XHRcdFx0Ly8gcm90YXRpb25YOiBNYXRoLmF0YW4yKGEzMiwgYTMzKVxuXHRcdFx0XHRhMzMgPSAxO1xuXHRcdFx0XHRhMTMgPSBhMjMgPSBhMzEgPSBhMzIgPSBhNDEgPSBhNDIgPSAwO1xuXHRcdFx0XHRhNDMgPSAocGVyc3BlY3RpdmUpID8gLTEgLyBwZXJzcGVjdGl2ZSA6IDA7XG5cdFx0XHRcdHpPcmlnaW4gPSB0LnpPcmlnaW47XG5cdFx0XHRcdG1pbiA9IDAuMDAwMDAxOyAvL3RocmVzaG9sZCBiZWxvdyB3aGljaCBicm93c2VycyB1c2Ugc2NpZW50aWZpYyBub3RhdGlvbiB3aGljaCB3b24ndCB3b3JrLlxuXHRcdFx0XHRjb21tYSA9IFwiLFwiO1xuXHRcdFx0XHR6ZXJvID0gXCIwXCI7XG5cdFx0XHRcdGFuZ2xlID0gcm90YXRpb25ZICogX0RFRzJSQUQ7XG5cdFx0XHRcdGlmIChhbmdsZSkge1xuXHRcdFx0XHRcdGNvcyA9IE1hdGguY29zKGFuZ2xlKTtcblx0XHRcdFx0XHRzaW4gPSBNYXRoLnNpbihhbmdsZSk7XG5cdFx0XHRcdFx0YTMxID0gLXNpbjtcblx0XHRcdFx0XHRhNDEgPSBhNDMqLXNpbjtcblx0XHRcdFx0XHRhMTMgPSBhMTEqc2luO1xuXHRcdFx0XHRcdGEyMyA9IGEyMSpzaW47XG5cdFx0XHRcdFx0YTMzID0gY29zO1xuXHRcdFx0XHRcdGE0MyAqPSBjb3M7XG5cdFx0XHRcdFx0YTExICo9IGNvcztcblx0XHRcdFx0XHRhMjEgKj0gY29zO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGFuZ2xlID0gcm90YXRpb25YICogX0RFRzJSQUQ7XG5cdFx0XHRcdGlmIChhbmdsZSkge1xuXHRcdFx0XHRcdGNvcyA9IE1hdGguY29zKGFuZ2xlKTtcblx0XHRcdFx0XHRzaW4gPSBNYXRoLnNpbihhbmdsZSk7XG5cdFx0XHRcdFx0dDEgPSBhMTIqY29zK2ExMypzaW47XG5cdFx0XHRcdFx0dDIgPSBhMjIqY29zK2EyMypzaW47XG5cdFx0XHRcdFx0YTMyID0gYTMzKnNpbjtcblx0XHRcdFx0XHRhNDIgPSBhNDMqc2luO1xuXHRcdFx0XHRcdGExMyA9IGExMiotc2luK2ExMypjb3M7XG5cdFx0XHRcdFx0YTIzID0gYTIyKi1zaW4rYTIzKmNvcztcblx0XHRcdFx0XHRhMzMgPSBhMzMqY29zO1xuXHRcdFx0XHRcdGE0MyA9IGE0Mypjb3M7XG5cdFx0XHRcdFx0YTEyID0gdDE7XG5cdFx0XHRcdFx0YTIyID0gdDI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHN6ICE9PSAxKSB7XG5cdFx0XHRcdFx0YTEzKj1zejtcblx0XHRcdFx0XHRhMjMqPXN6O1xuXHRcdFx0XHRcdGEzMyo9c3o7XG5cdFx0XHRcdFx0YTQzKj1zejtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoc3kgIT09IDEpIHtcblx0XHRcdFx0XHRhMTIqPXN5O1xuXHRcdFx0XHRcdGEyMio9c3k7XG5cdFx0XHRcdFx0YTMyKj1zeTtcblx0XHRcdFx0XHRhNDIqPXN5O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChzeCAhPT0gMSkge1xuXHRcdFx0XHRcdGExMSo9c3g7XG5cdFx0XHRcdFx0YTIxKj1zeDtcblx0XHRcdFx0XHRhMzEqPXN4O1xuXHRcdFx0XHRcdGE0MSo9c3g7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoek9yaWdpbiB8fCBpc1NWRykge1xuXHRcdFx0XHRcdGlmICh6T3JpZ2luKSB7XG5cdFx0XHRcdFx0XHR4ICs9IGExMyotek9yaWdpbjtcblx0XHRcdFx0XHRcdHkgKz0gYTIzKi16T3JpZ2luO1xuXHRcdFx0XHRcdFx0eiArPSBhMzMqLXpPcmlnaW4rek9yaWdpbjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKGlzU1ZHKSB7IC8vZHVlIHRvIGJ1Z3MgaW4gc29tZSBicm93c2Vycywgd2UgbmVlZCB0byBtYW5hZ2UgdGhlIHRyYW5zZm9ybS1vcmlnaW4gb2YgU1ZHIG1hbnVhbGx5XG5cdFx0XHRcdFx0XHR4ICs9IHQueE9yaWdpbiAtICh0LnhPcmlnaW4gKiBhMTEgKyB0LnlPcmlnaW4gKiBhMTIpICsgdC54T2Zmc2V0O1xuXHRcdFx0XHRcdFx0eSArPSB0LnlPcmlnaW4gLSAodC54T3JpZ2luICogYTIxICsgdC55T3JpZ2luICogYTIyKSArIHQueU9mZnNldDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHggPCBtaW4gJiYgeCA+IC1taW4pIHtcblx0XHRcdFx0XHRcdHggPSB6ZXJvO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoeSA8IG1pbiAmJiB5ID4gLW1pbikge1xuXHRcdFx0XHRcdFx0eSA9IHplcm87XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICh6IDwgbWluICYmIHogPiAtbWluKSB7XG5cdFx0XHRcdFx0XHR6ID0gMDsgLy9kb24ndCB1c2Ugc3RyaW5nIGJlY2F1c2Ugd2UgY2FsY3VsYXRlIHBlcnNwZWN0aXZlIGxhdGVyIGFuZCBuZWVkIHRoZSBudW1iZXIuXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly9vcHRpbWl6ZWQgd2F5IG9mIGNvbmNhdGVuYXRpbmcgYWxsIHRoZSB2YWx1ZXMgaW50byBhIHN0cmluZy4gSWYgd2UgZG8gaXQgYWxsIGluIG9uZSBzaG90LCBpdCdzIHNsb3dlciBiZWNhdXNlIG9mIHRoZSB3YXkgYnJvd3NlcnMgaGF2ZSB0byBjcmVhdGUgdGVtcCBzdHJpbmdzIGFuZCB0aGUgd2F5IGl0IGFmZmVjdHMgbWVtb3J5LiBJZiB3ZSBkbyBpdCBwaWVjZS1ieS1waWVjZSB3aXRoICs9LCBpdCdzIGEgYml0IHNsb3dlciB0b28uIFdlIGZvdW5kIHRoYXQgZG9pbmcgaXQgaW4gdGhlc2Ugc2l6ZWQgY2h1bmtzIHdvcmtzIGJlc3Qgb3ZlcmFsbDpcblx0XHRcdFx0dHJhbnNmb3JtID0gKCh0LnhQZXJjZW50IHx8IHQueVBlcmNlbnQpID8gXCJ0cmFuc2xhdGUoXCIgKyB0LnhQZXJjZW50ICsgXCIlLFwiICsgdC55UGVyY2VudCArIFwiJSkgbWF0cml4M2QoXCIgOiBcIm1hdHJpeDNkKFwiKTtcblx0XHRcdFx0dHJhbnNmb3JtICs9ICgoYTExIDwgbWluICYmIGExMSA+IC1taW4pID8gemVybyA6IGExMSkgKyBjb21tYSArICgoYTIxIDwgbWluICYmIGEyMSA+IC1taW4pID8gemVybyA6IGEyMSkgKyBjb21tYSArICgoYTMxIDwgbWluICYmIGEzMSA+IC1taW4pID8gemVybyA6IGEzMSk7XG5cdFx0XHRcdHRyYW5zZm9ybSArPSBjb21tYSArICgoYTQxIDwgbWluICYmIGE0MSA+IC1taW4pID8gemVybyA6IGE0MSkgKyBjb21tYSArICgoYTEyIDwgbWluICYmIGExMiA+IC1taW4pID8gemVybyA6IGExMikgKyBjb21tYSArICgoYTIyIDwgbWluICYmIGEyMiA+IC1taW4pID8gemVybyA6IGEyMik7XG5cdFx0XHRcdGlmIChyb3RhdGlvblggfHwgcm90YXRpb25ZKSB7IC8vcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uIChvZnRlbiB0aGVyZSdzIG5vIHJvdGF0aW9uWCBvciByb3RhdGlvblksIHNvIHdlIGNhbiBza2lwIHRoZXNlIGNhbGN1bGF0aW9ucylcblx0XHRcdFx0XHR0cmFuc2Zvcm0gKz0gY29tbWEgKyAoKGEzMiA8IG1pbiAmJiBhMzIgPiAtbWluKSA/IHplcm8gOiBhMzIpICsgY29tbWEgKyAoKGE0MiA8IG1pbiAmJiBhNDIgPiAtbWluKSA/IHplcm8gOiBhNDIpICsgY29tbWEgKyAoKGExMyA8IG1pbiAmJiBhMTMgPiAtbWluKSA/IHplcm8gOiBhMTMpO1xuXHRcdFx0XHRcdHRyYW5zZm9ybSArPSBjb21tYSArICgoYTIzIDwgbWluICYmIGEyMyA+IC1taW4pID8gemVybyA6IGEyMykgKyBjb21tYSArICgoYTMzIDwgbWluICYmIGEzMyA+IC1taW4pID8gemVybyA6IGEzMykgKyBjb21tYSArICgoYTQzIDwgbWluICYmIGE0MyA+IC1taW4pID8gemVybyA6IGE0MykgKyBjb21tYTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0cmFuc2Zvcm0gKz0gXCIsMCwwLDAsMCwxLDAsXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0dHJhbnNmb3JtICs9IHggKyBjb21tYSArIHkgKyBjb21tYSArIHogKyBjb21tYSArIChwZXJzcGVjdGl2ZSA/ICgxICsgKC16IC8gcGVyc3BlY3RpdmUpKSA6IDEpICsgXCIpXCI7XG5cblx0XHRcdFx0c3R5bGVbX3RyYW5zZm9ybVByb3BdID0gdHJhbnNmb3JtO1xuXHRcdFx0fTtcblxuXHRcdHAgPSBUcmFuc2Zvcm0ucHJvdG90eXBlO1xuXHRcdHAueCA9IHAueSA9IHAueiA9IHAuc2tld1ggPSBwLnNrZXdZID0gcC5yb3RhdGlvbiA9IHAucm90YXRpb25YID0gcC5yb3RhdGlvblkgPSBwLnpPcmlnaW4gPSBwLnhQZXJjZW50ID0gcC55UGVyY2VudCA9IHAueE9mZnNldCA9IHAueU9mZnNldCA9IDA7XG5cdFx0cC5zY2FsZVggPSBwLnNjYWxlWSA9IHAuc2NhbGVaID0gMTtcblxuXHRcdF9yZWdpc3RlckNvbXBsZXhTcGVjaWFsUHJvcChcInRyYW5zZm9ybSxzY2FsZSxzY2FsZVgsc2NhbGVZLHNjYWxlWix4LHkseixyb3RhdGlvbixyb3RhdGlvblgscm90YXRpb25ZLHJvdGF0aW9uWixza2V3WCxza2V3WSxzaG9ydFJvdGF0aW9uLHNob3J0Um90YXRpb25YLHNob3J0Um90YXRpb25ZLHNob3J0Um90YXRpb25aLHRyYW5zZm9ybU9yaWdpbixzdmdPcmlnaW4sdHJhbnNmb3JtUGVyc3BlY3RpdmUsZGlyZWN0aW9uYWxSb3RhdGlvbixwYXJzZVRyYW5zZm9ybSxmb3JjZTNELHNrZXdUeXBlLHhQZXJjZW50LHlQZXJjZW50LHNtb290aE9yaWdpblwiLCB7cGFyc2VyOmZ1bmN0aW9uKHQsIGUsIHAsIGNzc3AsIHB0LCBwbHVnaW4sIHZhcnMpIHtcblx0XHRcdGlmIChjc3NwLl9sYXN0UGFyc2VkVHJhbnNmb3JtID09PSB2YXJzKSB7IHJldHVybiBwdDsgfSAvL29ubHkgbmVlZCB0byBwYXJzZSB0aGUgdHJhbnNmb3JtIG9uY2UsIGFuZCBvbmx5IGlmIHRoZSBicm93c2VyIHN1cHBvcnRzIGl0LlxuXHRcdFx0Y3NzcC5fbGFzdFBhcnNlZFRyYW5zZm9ybSA9IHZhcnM7XG5cdFx0XHR2YXIgb3JpZ2luYWxHU1RyYW5zZm9ybSA9IHQuX2dzVHJhbnNmb3JtLFxuXHRcdFx0XHRzdHlsZSA9IHQuc3R5bGUsXG5cdFx0XHRcdG1pbiA9IDAuMDAwMDAxLFxuXHRcdFx0XHRpID0gX3RyYW5zZm9ybVByb3BzLmxlbmd0aCxcblx0XHRcdFx0diA9IHZhcnMsXG5cdFx0XHRcdGVuZFJvdGF0aW9ucyA9IHt9LFxuXHRcdFx0XHR0cmFuc2Zvcm1PcmlnaW5TdHJpbmcgPSBcInRyYW5zZm9ybU9yaWdpblwiLFxuXHRcdFx0XHRtMSwgbTIsIHNrZXdZLCBjb3B5LCBvcmlnLCBoYXMzRCwgaGFzQ2hhbmdlLCBkciwgeCwgeTtcblx0XHRcdGlmICh2YXJzLmRpc3BsYXkpIHsgLy9pZiB0aGUgdXNlciBpcyBzZXR0aW5nIGRpc3BsYXkgZHVyaW5nIHRoaXMgdHdlZW4sIGl0IG1heSBub3QgYmUgaW5zdGFudGlhdGVkIHlldCBidXQgd2UgbXVzdCBmb3JjZSBpdCBoZXJlIGluIG9yZGVyIHRvIGdldCBhY2N1cmF0ZSByZWFkaW5ncy4gSWYgZGlzcGxheSBpcyBcIm5vbmVcIiwgc29tZSBicm93c2VycyByZWZ1c2UgdG8gcmVwb3J0IHRoZSB0cmFuc2Zvcm0gcHJvcGVydGllcyBjb3JyZWN0bHkuXG5cdFx0XHRcdGNvcHkgPSBfZ2V0U3R5bGUodCwgXCJkaXNwbGF5XCIpO1xuXHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuXHRcdFx0XHRtMSA9IF9nZXRUcmFuc2Zvcm0odCwgX2NzLCB0cnVlLCB2YXJzLnBhcnNlVHJhbnNmb3JtKTtcblx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IGNvcHk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtMSA9IF9nZXRUcmFuc2Zvcm0odCwgX2NzLCB0cnVlLCB2YXJzLnBhcnNlVHJhbnNmb3JtKTtcblx0XHRcdH1cblx0XHRcdGNzc3AuX3RyYW5zZm9ybSA9IG0xO1xuXHRcdFx0aWYgKHR5cGVvZih2LnRyYW5zZm9ybSkgPT09IFwic3RyaW5nXCIgJiYgX3RyYW5zZm9ybVByb3ApIHsgLy9mb3IgdmFsdWVzIGxpa2UgdHJhbnNmb3JtOlwicm90YXRlKDYwZGVnKSBzY2FsZSgwLjUsIDAuOClcIlxuXHRcdFx0XHRjb3B5ID0gX3RlbXBEaXYuc3R5bGU7IC8vZG9uJ3QgdXNlIHRoZSBvcmlnaW5hbCB0YXJnZXQgYmVjYXVzZSBpdCBtaWdodCBiZSBTVkcgaW4gd2hpY2ggY2FzZSBzb21lIGJyb3dzZXJzIGRvbid0IHJlcG9ydCBjb21wdXRlZCBzdHlsZSBjb3JyZWN0bHkuXG5cdFx0XHRcdGNvcHlbX3RyYW5zZm9ybVByb3BdID0gdi50cmFuc2Zvcm07XG5cdFx0XHRcdGNvcHkuZGlzcGxheSA9IFwiYmxvY2tcIjsgLy9pZiBkaXNwbGF5IGlzIFwibm9uZVwiLCB0aGUgYnJvd3NlciBvZnRlbiByZWZ1c2VzIHRvIHJlcG9ydCB0aGUgdHJhbnNmb3JtIHByb3BlcnRpZXMgY29ycmVjdGx5LlxuXHRcdFx0XHRjb3B5LnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuXHRcdFx0XHRfZG9jLmJvZHkuYXBwZW5kQ2hpbGQoX3RlbXBEaXYpO1xuXHRcdFx0XHRtMiA9IF9nZXRUcmFuc2Zvcm0oX3RlbXBEaXYsIG51bGwsIGZhbHNlKTtcblx0XHRcdFx0X2RvYy5ib2R5LnJlbW92ZUNoaWxkKF90ZW1wRGl2KTtcblx0XHRcdFx0aWYgKCFtMi5wZXJzcGVjdGl2ZSkge1xuXHRcdFx0XHRcdG0yLnBlcnNwZWN0aXZlID0gbTEucGVyc3BlY3RpdmU7IC8vdHdlZW5pbmcgdG8gbm8gcGVyc3BlY3RpdmUgZ2l2ZXMgdmVyeSB1bmludHVpdGl2ZSByZXN1bHRzIC0ganVzdCBrZWVwIHRoZSBzYW1lIHBlcnNwZWN0aXZlIGluIHRoYXQgY2FzZS5cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodi54UGVyY2VudCAhPSBudWxsKSB7XG5cdFx0XHRcdFx0bTIueFBlcmNlbnQgPSBfcGFyc2VWYWwodi54UGVyY2VudCwgbTEueFBlcmNlbnQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh2LnlQZXJjZW50ICE9IG51bGwpIHtcblx0XHRcdFx0XHRtMi55UGVyY2VudCA9IF9wYXJzZVZhbCh2LnlQZXJjZW50LCBtMS55UGVyY2VudCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAodHlwZW9mKHYpID09PSBcIm9iamVjdFwiKSB7IC8vZm9yIHZhbHVlcyBsaWtlIHNjYWxlWCwgc2NhbGVZLCByb3RhdGlvbiwgeCwgeSwgc2tld1gsIGFuZCBza2V3WSBvciB0cmFuc2Zvcm06ey4uLn0gKG9iamVjdClcblx0XHRcdFx0bTIgPSB7c2NhbGVYOl9wYXJzZVZhbCgodi5zY2FsZVggIT0gbnVsbCkgPyB2LnNjYWxlWCA6IHYuc2NhbGUsIG0xLnNjYWxlWCksXG5cdFx0XHRcdFx0c2NhbGVZOl9wYXJzZVZhbCgodi5zY2FsZVkgIT0gbnVsbCkgPyB2LnNjYWxlWSA6IHYuc2NhbGUsIG0xLnNjYWxlWSksXG5cdFx0XHRcdFx0c2NhbGVaOl9wYXJzZVZhbCh2LnNjYWxlWiwgbTEuc2NhbGVaKSxcblx0XHRcdFx0XHR4Ol9wYXJzZVZhbCh2LngsIG0xLngpLFxuXHRcdFx0XHRcdHk6X3BhcnNlVmFsKHYueSwgbTEueSksXG5cdFx0XHRcdFx0ejpfcGFyc2VWYWwodi56LCBtMS56KSxcblx0XHRcdFx0XHR4UGVyY2VudDpfcGFyc2VWYWwodi54UGVyY2VudCwgbTEueFBlcmNlbnQpLFxuXHRcdFx0XHRcdHlQZXJjZW50Ol9wYXJzZVZhbCh2LnlQZXJjZW50LCBtMS55UGVyY2VudCksXG5cdFx0XHRcdFx0cGVyc3BlY3RpdmU6X3BhcnNlVmFsKHYudHJhbnNmb3JtUGVyc3BlY3RpdmUsIG0xLnBlcnNwZWN0aXZlKX07XG5cdFx0XHRcdGRyID0gdi5kaXJlY3Rpb25hbFJvdGF0aW9uO1xuXHRcdFx0XHRpZiAoZHIgIT0gbnVsbCkge1xuXHRcdFx0XHRcdGlmICh0eXBlb2YoZHIpID09PSBcIm9iamVjdFwiKSB7XG5cdFx0XHRcdFx0XHRmb3IgKGNvcHkgaW4gZHIpIHtcblx0XHRcdFx0XHRcdFx0dltjb3B5XSA9IGRyW2NvcHldO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR2LnJvdGF0aW9uID0gZHI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh0eXBlb2Yodi54KSA9PT0gXCJzdHJpbmdcIiAmJiB2LnguaW5kZXhPZihcIiVcIikgIT09IC0xKSB7XG5cdFx0XHRcdFx0bTIueCA9IDA7XG5cdFx0XHRcdFx0bTIueFBlcmNlbnQgPSBfcGFyc2VWYWwodi54LCBtMS54UGVyY2VudCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHR5cGVvZih2LnkpID09PSBcInN0cmluZ1wiICYmIHYueS5pbmRleE9mKFwiJVwiKSAhPT0gLTEpIHtcblx0XHRcdFx0XHRtMi55ID0gMDtcblx0XHRcdFx0XHRtMi55UGVyY2VudCA9IF9wYXJzZVZhbCh2LnksIG0xLnlQZXJjZW50KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdG0yLnJvdGF0aW9uID0gX3BhcnNlQW5nbGUoKFwicm90YXRpb25cIiBpbiB2KSA/IHYucm90YXRpb24gOiAoXCJzaG9ydFJvdGF0aW9uXCIgaW4gdikgPyB2LnNob3J0Um90YXRpb24gKyBcIl9zaG9ydFwiIDogKFwicm90YXRpb25aXCIgaW4gdikgPyB2LnJvdGF0aW9uWiA6IG0xLnJvdGF0aW9uLCBtMS5yb3RhdGlvbiwgXCJyb3RhdGlvblwiLCBlbmRSb3RhdGlvbnMpO1xuXHRcdFx0XHRpZiAoX3N1cHBvcnRzM0QpIHtcblx0XHRcdFx0XHRtMi5yb3RhdGlvblggPSBfcGFyc2VBbmdsZSgoXCJyb3RhdGlvblhcIiBpbiB2KSA/IHYucm90YXRpb25YIDogKFwic2hvcnRSb3RhdGlvblhcIiBpbiB2KSA/IHYuc2hvcnRSb3RhdGlvblggKyBcIl9zaG9ydFwiIDogbTEucm90YXRpb25YIHx8IDAsIG0xLnJvdGF0aW9uWCwgXCJyb3RhdGlvblhcIiwgZW5kUm90YXRpb25zKTtcblx0XHRcdFx0XHRtMi5yb3RhdGlvblkgPSBfcGFyc2VBbmdsZSgoXCJyb3RhdGlvbllcIiBpbiB2KSA/IHYucm90YXRpb25ZIDogKFwic2hvcnRSb3RhdGlvbllcIiBpbiB2KSA/IHYuc2hvcnRSb3RhdGlvblkgKyBcIl9zaG9ydFwiIDogbTEucm90YXRpb25ZIHx8IDAsIG0xLnJvdGF0aW9uWSwgXCJyb3RhdGlvbllcIiwgZW5kUm90YXRpb25zKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRtMi5za2V3WCA9ICh2LnNrZXdYID09IG51bGwpID8gbTEuc2tld1ggOiBfcGFyc2VBbmdsZSh2LnNrZXdYLCBtMS5za2V3WCk7XG5cblx0XHRcdFx0Ly9ub3RlOiBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucywgd2UgY29tYmluZSBhbGwgc2tld2luZyBpbnRvIHRoZSBza2V3WCBhbmQgcm90YXRpb24gdmFsdWVzLCBpZ25vcmluZyBza2V3WSBidXQgd2UgbXVzdCBzdGlsbCByZWNvcmQgaXQgc28gdGhhdCB3ZSBjYW4gZGlzY2VybiBob3cgbXVjaCBvZiB0aGUgb3ZlcmFsbCBza2V3IGlzIGF0dHJpYnV0ZWQgdG8gc2tld1ggdnMuIHNrZXdZLiBPdGhlcndpc2UsIGlmIHRoZSBza2V3WSB3b3VsZCBhbHdheXMgYWN0IHJlbGF0aXZlICh0d2VlbiBza2V3WSB0byAxMGRlZywgZm9yIGV4YW1wbGUsIG11bHRpcGxlIHRpbWVzIGFuZCBpZiB3ZSBhbHdheXMgY29tYmluZSB0aGluZ3MgaW50byBza2V3WCwgd2UgY2FuJ3QgcmVtZW1iZXIgdGhhdCBza2V3WSB3YXMgMTAgZnJvbSBsYXN0IHRpbWUpLiBSZW1lbWJlciwgYSBza2V3WSBvZiAxMCBkZWdyZWVzIGxvb2tzIHRoZSBzYW1lIGFzIGEgcm90YXRpb24gb2YgMTAgZGVncmVlcyBwbHVzIGEgc2tld1ggb2YgLTEwIGRlZ3JlZXMuXG5cdFx0XHRcdG0yLnNrZXdZID0gKHYuc2tld1kgPT0gbnVsbCkgPyBtMS5za2V3WSA6IF9wYXJzZUFuZ2xlKHYuc2tld1ksIG0xLnNrZXdZKTtcblx0XHRcdFx0aWYgKChza2V3WSA9IG0yLnNrZXdZIC0gbTEuc2tld1kpKSB7XG5cdFx0XHRcdFx0bTIuc2tld1ggKz0gc2tld1k7XG5cdFx0XHRcdFx0bTIucm90YXRpb24gKz0gc2tld1k7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmIChfc3VwcG9ydHMzRCAmJiB2LmZvcmNlM0QgIT0gbnVsbCkge1xuXHRcdFx0XHRtMS5mb3JjZTNEID0gdi5mb3JjZTNEO1xuXHRcdFx0XHRoYXNDaGFuZ2UgPSB0cnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRtMS5za2V3VHlwZSA9IHYuc2tld1R5cGUgfHwgbTEuc2tld1R5cGUgfHwgQ1NTUGx1Z2luLmRlZmF1bHRTa2V3VHlwZTtcblxuXHRcdFx0aGFzM0QgPSAobTEuZm9yY2UzRCB8fCBtMS56IHx8IG0xLnJvdGF0aW9uWCB8fCBtMS5yb3RhdGlvblkgfHwgbTIueiB8fCBtMi5yb3RhdGlvblggfHwgbTIucm90YXRpb25ZIHx8IG0yLnBlcnNwZWN0aXZlKTtcblx0XHRcdGlmICghaGFzM0QgJiYgdi5zY2FsZSAhPSBudWxsKSB7XG5cdFx0XHRcdG0yLnNjYWxlWiA9IDE7IC8vbm8gbmVlZCB0byB0d2VlbiBzY2FsZVouXG5cdFx0XHR9XG5cblx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRwID0gX3RyYW5zZm9ybVByb3BzW2ldO1xuXHRcdFx0XHRvcmlnID0gbTJbcF0gLSBtMVtwXTtcblx0XHRcdFx0aWYgKG9yaWcgPiBtaW4gfHwgb3JpZyA8IC1taW4gfHwgdltwXSAhPSBudWxsIHx8IF9mb3JjZVBUW3BdICE9IG51bGwpIHtcblx0XHRcdFx0XHRoYXNDaGFuZ2UgPSB0cnVlO1xuXHRcdFx0XHRcdHB0ID0gbmV3IENTU1Byb3BUd2VlbihtMSwgcCwgbTFbcF0sIG9yaWcsIHB0KTtcblx0XHRcdFx0XHRpZiAocCBpbiBlbmRSb3RhdGlvbnMpIHtcblx0XHRcdFx0XHRcdHB0LmUgPSBlbmRSb3RhdGlvbnNbcF07IC8vZGlyZWN0aW9uYWwgcm90YXRpb25zIHR5cGljYWxseSBoYXZlIGNvbXBlbnNhdGVkIHZhbHVlcyBkdXJpbmcgdGhlIHR3ZWVuLCBidXQgd2UgbmVlZCB0byBtYWtlIHN1cmUgdGhleSBlbmQgYXQgZXhhY3RseSB3aGF0IHRoZSB1c2VyIHJlcXVlc3RlZFxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwdC54czAgPSAwOyAvL2Vuc3VyZXMgdGhlIHZhbHVlIHN0YXlzIG51bWVyaWMgaW4gc2V0UmF0aW8oKVxuXHRcdFx0XHRcdHB0LnBsdWdpbiA9IHBsdWdpbjtcblx0XHRcdFx0XHRjc3NwLl9vdmVyd3JpdGVQcm9wcy5wdXNoKHB0Lm4pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdG9yaWcgPSB2LnRyYW5zZm9ybU9yaWdpbjtcblx0XHRcdGlmIChtMS5zdmcgJiYgKG9yaWcgfHwgdi5zdmdPcmlnaW4pKSB7XG5cdFx0XHRcdHggPSBtMS54T2Zmc2V0OyAvL3doZW4gd2UgY2hhbmdlIHRoZSBvcmlnaW4sIGluIG9yZGVyIHRvIHByZXZlbnQgdGhpbmdzIGZyb20ganVtcGluZyB3ZSBhZGp1c3QgdGhlIHgveSBzbyB3ZSBtdXN0IHJlY29yZCB0aG9zZSBoZXJlIHNvIHRoYXQgd2UgY2FuIGNyZWF0ZSBQcm9wVHdlZW5zIGZvciB0aGVtIGFuZCBmbGlwIHRoZW0gYXQgdGhlIHNhbWUgdGltZSBhcyB0aGUgb3JpZ2luXG5cdFx0XHRcdHkgPSBtMS55T2Zmc2V0O1xuXHRcdFx0XHRfcGFyc2VTVkdPcmlnaW4odCwgX3BhcnNlUG9zaXRpb24ob3JpZyksIG0yLCB2LnN2Z09yaWdpbiwgdi5zbW9vdGhPcmlnaW4pO1xuXHRcdFx0XHRwdCA9IF9hZGROb25Ud2VlbmluZ051bWVyaWNQVChtMSwgXCJ4T3JpZ2luXCIsIChvcmlnaW5hbEdTVHJhbnNmb3JtID8gbTEgOiBtMikueE9yaWdpbiwgbTIueE9yaWdpbiwgcHQsIHRyYW5zZm9ybU9yaWdpblN0cmluZyk7IC8vbm90ZTogaWYgdGhlcmUgd2Fzbid0IGEgdHJhbnNmb3JtT3JpZ2luIGRlZmluZWQgeWV0LCBqdXN0IHN0YXJ0IHdpdGggdGhlIGRlc3RpbmF0aW9uIG9uZTsgaXQncyB3YXN0ZWZ1bCBvdGhlcndpc2UsIGFuZCBpdCBjYXVzZXMgcHJvYmxlbXMgd2l0aCBmcm9tVG8oKSB0d2VlbnMuIEZvciBleGFtcGxlLCBUd2VlbkxpdGUudG8oXCIjd2hlZWxcIiwgMywge3JvdGF0aW9uOjE4MCwgdHJhbnNmb3JtT3JpZ2luOlwiNTAlIDUwJVwiLCBkZWxheToxfSk7IFR3ZWVuTGl0ZS5mcm9tVG8oXCIjd2hlZWxcIiwgMywge3NjYWxlOjAuNSwgdHJhbnNmb3JtT3JpZ2luOlwiNTAlIDUwJVwifSwge3NjYWxlOjEsIGRlbGF5OjJ9KTsgd291bGQgY2F1c2UgYSBqdW1wIHdoZW4gdGhlIGZyb20gdmFsdWVzIHJldmVydCBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSAybmQgdHdlZW4uXG5cdFx0XHRcdHB0ID0gX2FkZE5vblR3ZWVuaW5nTnVtZXJpY1BUKG0xLCBcInlPcmlnaW5cIiwgKG9yaWdpbmFsR1NUcmFuc2Zvcm0gPyBtMSA6IG0yKS55T3JpZ2luLCBtMi55T3JpZ2luLCBwdCwgdHJhbnNmb3JtT3JpZ2luU3RyaW5nKTtcblx0XHRcdFx0aWYgKHggIT09IG0xLnhPZmZzZXQgfHwgeSAhPT0gbTEueU9mZnNldCkge1xuXHRcdFx0XHRcdHB0ID0gX2FkZE5vblR3ZWVuaW5nTnVtZXJpY1BUKG0xLCBcInhPZmZzZXRcIiwgKG9yaWdpbmFsR1NUcmFuc2Zvcm0gPyB4IDogbTEueE9mZnNldCksIG0xLnhPZmZzZXQsIHB0LCB0cmFuc2Zvcm1PcmlnaW5TdHJpbmcpO1xuXHRcdFx0XHRcdHB0ID0gX2FkZE5vblR3ZWVuaW5nTnVtZXJpY1BUKG0xLCBcInlPZmZzZXRcIiwgKG9yaWdpbmFsR1NUcmFuc2Zvcm0gPyB5IDogbTEueU9mZnNldCksIG0xLnlPZmZzZXQsIHB0LCB0cmFuc2Zvcm1PcmlnaW5TdHJpbmcpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdG9yaWcgPSBfdXNlU1ZHVHJhbnNmb3JtQXR0ciA/IG51bGwgOiBcIjBweCAwcHhcIjsgLy9jZXJ0YWluIGJyb3dzZXJzIChsaWtlIGZpcmVmb3gpIGNvbXBsZXRlbHkgYm90Y2ggdHJhbnNmb3JtLW9yaWdpbiwgc28gd2UgbXVzdCByZW1vdmUgaXQgdG8gcHJldmVudCBpdCBmcm9tIGNvbnRhbWluYXRpbmcgdHJhbnNmb3Jtcy4gV2UgbWFuYWdlIGl0IG91cnNlbHZlcyB3aXRoIHhPcmlnaW4gYW5kIHlPcmlnaW5cblx0XHRcdH1cblx0XHRcdGlmIChvcmlnIHx8IChfc3VwcG9ydHMzRCAmJiBoYXMzRCAmJiBtMS56T3JpZ2luKSkgeyAvL2lmIGFueXRoaW5nIDNEIGlzIGhhcHBlbmluZyBhbmQgdGhlcmUncyBhIHRyYW5zZm9ybU9yaWdpbiB3aXRoIGEgeiBjb21wb25lbnQgdGhhdCdzIG5vbi16ZXJvLCB3ZSBtdXN0IGVuc3VyZSB0aGF0IHRoZSB0cmFuc2Zvcm1PcmlnaW4ncyB6LWNvbXBvbmVudCBpcyBzZXQgdG8gMCBzbyB0aGF0IHdlIGNhbiBtYW51YWxseSBkbyB0aG9zZSBjYWxjdWxhdGlvbnMgdG8gZ2V0IGFyb3VuZCBTYWZhcmkgYnVncy4gRXZlbiBpZiB0aGUgdXNlciBkaWRuJ3Qgc3BlY2lmaWNhbGx5IGRlZmluZSBhIFwidHJhbnNmb3JtT3JpZ2luXCIgaW4gdGhpcyBwYXJ0aWN1bGFyIHR3ZWVuIChtYXliZSB0aGV5IGRpZCBpdCB2aWEgY3NzIGRpcmVjdGx5KS5cblx0XHRcdFx0aWYgKF90cmFuc2Zvcm1Qcm9wKSB7XG5cdFx0XHRcdFx0aGFzQ2hhbmdlID0gdHJ1ZTtcblx0XHRcdFx0XHRwID0gX3RyYW5zZm9ybU9yaWdpblByb3A7XG5cdFx0XHRcdFx0b3JpZyA9IChvcmlnIHx8IF9nZXRTdHlsZSh0LCBwLCBfY3MsIGZhbHNlLCBcIjUwJSA1MCVcIikpICsgXCJcIjsgLy9jYXN0IGFzIHN0cmluZyB0byBhdm9pZCBlcnJvcnNcblx0XHRcdFx0XHRwdCA9IG5ldyBDU1NQcm9wVHdlZW4oc3R5bGUsIHAsIDAsIDAsIHB0LCAtMSwgdHJhbnNmb3JtT3JpZ2luU3RyaW5nKTtcblx0XHRcdFx0XHRwdC5iID0gc3R5bGVbcF07XG5cdFx0XHRcdFx0cHQucGx1Z2luID0gcGx1Z2luO1xuXHRcdFx0XHRcdGlmIChfc3VwcG9ydHMzRCkge1xuXHRcdFx0XHRcdFx0Y29weSA9IG0xLnpPcmlnaW47XG5cdFx0XHRcdFx0XHRvcmlnID0gb3JpZy5zcGxpdChcIiBcIik7XG5cdFx0XHRcdFx0XHRtMS56T3JpZ2luID0gKChvcmlnLmxlbmd0aCA+IDIgJiYgIShjb3B5ICE9PSAwICYmIG9yaWdbMl0gPT09IFwiMHB4XCIpKSA/IHBhcnNlRmxvYXQob3JpZ1syXSkgOiBjb3B5KSB8fCAwOyAvL1NhZmFyaSBkb2Vzbid0IGhhbmRsZSB0aGUgeiBwYXJ0IG9mIHRyYW5zZm9ybU9yaWdpbiBjb3JyZWN0bHksIHNvIHdlJ2xsIG1hbnVhbGx5IGhhbmRsZSBpdCBpbiB0aGUgX3NldDNEVHJhbnNmb3JtUmF0aW8oKSBtZXRob2QuXG5cdFx0XHRcdFx0XHRwdC54czAgPSBwdC5lID0gb3JpZ1swXSArIFwiIFwiICsgKG9yaWdbMV0gfHwgXCI1MCVcIikgKyBcIiAwcHhcIjsgLy93ZSBtdXN0IGRlZmluZSBhIHogdmFsdWUgb2YgMHB4IHNwZWNpZmljYWxseSBvdGhlcndpc2UgaU9TIDUgU2FmYXJpIHdpbGwgc3RpY2sgd2l0aCB0aGUgb2xkIG9uZSAoaWYgb25lIHdhcyBkZWZpbmVkKSFcblx0XHRcdFx0XHRcdHB0ID0gbmV3IENTU1Byb3BUd2VlbihtMSwgXCJ6T3JpZ2luXCIsIDAsIDAsIHB0LCAtMSwgcHQubik7IC8vd2UgbXVzdCBjcmVhdGUgYSBDU1NQcm9wVHdlZW4gZm9yIHRoZSBfZ3NUcmFuc2Zvcm0uek9yaWdpbiBzbyB0aGF0IGl0IGdldHMgcmVzZXQgcHJvcGVybHkgYXQgdGhlIGJlZ2lubmluZyBpZiB0aGUgdHdlZW4gcnVucyBiYWNrd2FyZCAoYXMgb3Bwb3NlZCB0byBqdXN0IHNldHRpbmcgbTEuek9yaWdpbiBoZXJlKVxuXHRcdFx0XHRcdFx0cHQuYiA9IGNvcHk7XG5cdFx0XHRcdFx0XHRwdC54czAgPSBwdC5lID0gbTEuek9yaWdpbjtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cHQueHMwID0gcHQuZSA9IG9yaWc7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly9mb3Igb2xkZXIgdmVyc2lvbnMgb2YgSUUgKDYtOCksIHdlIG5lZWQgdG8gbWFudWFsbHkgY2FsY3VsYXRlIHRoaW5ncyBpbnNpZGUgdGhlIHNldFJhdGlvKCkgZnVuY3Rpb24uIFdlIHJlY29yZCBvcmlnaW4geCBhbmQgeSAob3ggYW5kIG95KSBhbmQgd2hldGhlciBvciBub3QgdGhlIHZhbHVlcyBhcmUgcGVyY2VudGFnZXMgKG94cCBhbmQgb3lwKS5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRfcGFyc2VQb3NpdGlvbihvcmlnICsgXCJcIiwgbTEpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoaGFzQ2hhbmdlKSB7XG5cdFx0XHRcdGNzc3AuX3RyYW5zZm9ybVR5cGUgPSAoIShtMS5zdmcgJiYgX3VzZVNWR1RyYW5zZm9ybUF0dHIpICYmIChoYXMzRCB8fCB0aGlzLl90cmFuc2Zvcm1UeXBlID09PSAzKSkgPyAzIDogMjsgLy9xdWlja2VyIHRoYW4gY2FsbGluZyBjc3NwLl9lbmFibGVUcmFuc2Zvcm1zKCk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcHQ7XG5cdFx0fSwgcHJlZml4OnRydWV9KTtcblxuXHRcdF9yZWdpc3RlckNvbXBsZXhTcGVjaWFsUHJvcChcImJveFNoYWRvd1wiLCB7ZGVmYXVsdFZhbHVlOlwiMHB4IDBweCAwcHggMHB4ICM5OTlcIiwgcHJlZml4OnRydWUsIGNvbG9yOnRydWUsIG11bHRpOnRydWUsIGtleXdvcmQ6XCJpbnNldFwifSk7XG5cblx0XHRfcmVnaXN0ZXJDb21wbGV4U3BlY2lhbFByb3AoXCJib3JkZXJSYWRpdXNcIiwge2RlZmF1bHRWYWx1ZTpcIjBweFwiLCBwYXJzZXI6ZnVuY3Rpb24odCwgZSwgcCwgY3NzcCwgcHQsIHBsdWdpbikge1xuXHRcdFx0ZSA9IHRoaXMuZm9ybWF0KGUpO1xuXHRcdFx0dmFyIHByb3BzID0gW1wiYm9yZGVyVG9wTGVmdFJhZGl1c1wiLFwiYm9yZGVyVG9wUmlnaHRSYWRpdXNcIixcImJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzXCIsXCJib3JkZXJCb3R0b21MZWZ0UmFkaXVzXCJdLFxuXHRcdFx0XHRzdHlsZSA9IHQuc3R5bGUsXG5cdFx0XHRcdGVhMSwgaSwgZXMyLCBiczIsIGJzLCBlcywgYm4sIGVuLCB3LCBoLCBlc2Z4LCBic2Z4LCByZWwsIGhuLCB2biwgZW07XG5cdFx0XHR3ID0gcGFyc2VGbG9hdCh0Lm9mZnNldFdpZHRoKTtcblx0XHRcdGggPSBwYXJzZUZsb2F0KHQub2Zmc2V0SGVpZ2h0KTtcblx0XHRcdGVhMSA9IGUuc3BsaXQoXCIgXCIpO1xuXHRcdFx0Zm9yIChpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IC8vaWYgd2UncmUgZGVhbGluZyB3aXRoIHBlcmNlbnRhZ2VzLCB3ZSBtdXN0IGNvbnZlcnQgdGhpbmdzIHNlcGFyYXRlbHkgZm9yIHRoZSBob3Jpem9udGFsIGFuZCB2ZXJ0aWNhbCBheGlzIVxuXHRcdFx0XHRpZiAodGhpcy5wLmluZGV4T2YoXCJib3JkZXJcIikpIHsgLy9vbGRlciBicm93c2VycyB1c2VkIGEgcHJlZml4XG5cdFx0XHRcdFx0cHJvcHNbaV0gPSBfY2hlY2tQcm9wUHJlZml4KHByb3BzW2ldKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRicyA9IGJzMiA9IF9nZXRTdHlsZSh0LCBwcm9wc1tpXSwgX2NzLCBmYWxzZSwgXCIwcHhcIik7XG5cdFx0XHRcdGlmIChicy5pbmRleE9mKFwiIFwiKSAhPT0gLTEpIHtcblx0XHRcdFx0XHRiczIgPSBicy5zcGxpdChcIiBcIik7XG5cdFx0XHRcdFx0YnMgPSBiczJbMF07XG5cdFx0XHRcdFx0YnMyID0gYnMyWzFdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVzID0gZXMyID0gZWExW2ldO1xuXHRcdFx0XHRibiA9IHBhcnNlRmxvYXQoYnMpO1xuXHRcdFx0XHRic2Z4ID0gYnMuc3Vic3RyKChibiArIFwiXCIpLmxlbmd0aCk7XG5cdFx0XHRcdHJlbCA9IChlcy5jaGFyQXQoMSkgPT09IFwiPVwiKTtcblx0XHRcdFx0aWYgKHJlbCkge1xuXHRcdFx0XHRcdGVuID0gcGFyc2VJbnQoZXMuY2hhckF0KDApK1wiMVwiLCAxMCk7XG5cdFx0XHRcdFx0ZXMgPSBlcy5zdWJzdHIoMik7XG5cdFx0XHRcdFx0ZW4gKj0gcGFyc2VGbG9hdChlcyk7XG5cdFx0XHRcdFx0ZXNmeCA9IGVzLnN1YnN0cigoZW4gKyBcIlwiKS5sZW5ndGggLSAoZW4gPCAwID8gMSA6IDApKSB8fCBcIlwiO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVuID0gcGFyc2VGbG9hdChlcyk7XG5cdFx0XHRcdFx0ZXNmeCA9IGVzLnN1YnN0cigoZW4gKyBcIlwiKS5sZW5ndGgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChlc2Z4ID09PSBcIlwiKSB7XG5cdFx0XHRcdFx0ZXNmeCA9IF9zdWZmaXhNYXBbcF0gfHwgYnNmeDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoZXNmeCAhPT0gYnNmeCkge1xuXHRcdFx0XHRcdGhuID0gX2NvbnZlcnRUb1BpeGVscyh0LCBcImJvcmRlckxlZnRcIiwgYm4sIGJzZngpOyAvL2hvcml6b250YWwgbnVtYmVyICh3ZSB1c2UgYSBib2d1cyBcImJvcmRlckxlZnRcIiBwcm9wZXJ0eSBqdXN0IGJlY2F1c2UgdGhlIF9jb252ZXJ0VG9QaXhlbHMoKSBtZXRob2Qgc2VhcmNoZXMgZm9yIHRoZSBrZXl3b3JkcyBcIkxlZnRcIiwgXCJSaWdodFwiLCBcIlRvcFwiLCBhbmQgXCJCb3R0b21cIiB0byBkZXRlcm1pbmUgb2YgaXQncyBhIGhvcml6b250YWwgb3IgdmVydGljYWwgcHJvcGVydHksIGFuZCB3ZSBuZWVkIFwiYm9yZGVyXCIgaW4gdGhlIG5hbWUgc28gdGhhdCBpdCBrbm93cyBpdCBzaG91bGQgbWVhc3VyZSByZWxhdGl2ZSB0byB0aGUgZWxlbWVudCBpdHNlbGYsIG5vdCBpdHMgcGFyZW50LlxuXHRcdFx0XHRcdHZuID0gX2NvbnZlcnRUb1BpeGVscyh0LCBcImJvcmRlclRvcFwiLCBibiwgYnNmeCk7IC8vdmVydGljYWwgbnVtYmVyXG5cdFx0XHRcdFx0aWYgKGVzZnggPT09IFwiJVwiKSB7XG5cdFx0XHRcdFx0XHRicyA9IChobiAvIHcgKiAxMDApICsgXCIlXCI7XG5cdFx0XHRcdFx0XHRiczIgPSAodm4gLyBoICogMTAwKSArIFwiJVwiO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoZXNmeCA9PT0gXCJlbVwiKSB7XG5cdFx0XHRcdFx0XHRlbSA9IF9jb252ZXJ0VG9QaXhlbHModCwgXCJib3JkZXJMZWZ0XCIsIDEsIFwiZW1cIik7XG5cdFx0XHRcdFx0XHRicyA9IChobiAvIGVtKSArIFwiZW1cIjtcblx0XHRcdFx0XHRcdGJzMiA9ICh2biAvIGVtKSArIFwiZW1cIjtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0YnMgPSBobiArIFwicHhcIjtcblx0XHRcdFx0XHRcdGJzMiA9IHZuICsgXCJweFwiO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAocmVsKSB7XG5cdFx0XHRcdFx0XHRlcyA9IChwYXJzZUZsb2F0KGJzKSArIGVuKSArIGVzZng7XG5cdFx0XHRcdFx0XHRlczIgPSAocGFyc2VGbG9hdChiczIpICsgZW4pICsgZXNmeDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cHQgPSBfcGFyc2VDb21wbGV4KHN0eWxlLCBwcm9wc1tpXSwgYnMgKyBcIiBcIiArIGJzMiwgZXMgKyBcIiBcIiArIGVzMiwgZmFsc2UsIFwiMHB4XCIsIHB0KTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBwdDtcblx0XHR9LCBwcmVmaXg6dHJ1ZSwgZm9ybWF0dGVyOl9nZXRGb3JtYXR0ZXIoXCIwcHggMHB4IDBweCAwcHhcIiwgZmFsc2UsIHRydWUpfSk7XG5cdFx0X3JlZ2lzdGVyQ29tcGxleFNwZWNpYWxQcm9wKFwiYmFja2dyb3VuZFBvc2l0aW9uXCIsIHtkZWZhdWx0VmFsdWU6XCIwIDBcIiwgcGFyc2VyOmZ1bmN0aW9uKHQsIGUsIHAsIGNzc3AsIHB0LCBwbHVnaW4pIHtcblx0XHRcdHZhciBicCA9IFwiYmFja2dyb3VuZC1wb3NpdGlvblwiLFxuXHRcdFx0XHRjcyA9IChfY3MgfHwgX2dldENvbXB1dGVkU3R5bGUodCwgbnVsbCkpLFxuXHRcdFx0XHRicyA9IHRoaXMuZm9ybWF0KCAoKGNzKSA/IF9pZVZlcnMgPyBjcy5nZXRQcm9wZXJ0eVZhbHVlKGJwICsgXCIteFwiKSArIFwiIFwiICsgY3MuZ2V0UHJvcGVydHlWYWx1ZShicCArIFwiLXlcIikgOiBjcy5nZXRQcm9wZXJ0eVZhbHVlKGJwKSA6IHQuY3VycmVudFN0eWxlLmJhY2tncm91bmRQb3NpdGlvblggKyBcIiBcIiArIHQuY3VycmVudFN0eWxlLmJhY2tncm91bmRQb3NpdGlvblkpIHx8IFwiMCAwXCIpLCAvL0ludGVybmV0IEV4cGxvcmVyIGRvZXNuJ3QgcmVwb3J0IGJhY2tncm91bmQtcG9zaXRpb24gY29ycmVjdGx5IC0gd2UgbXVzdCBxdWVyeSBiYWNrZ3JvdW5kLXBvc2l0aW9uLXggYW5kIGJhY2tncm91bmQtcG9zaXRpb24teSBhbmQgY29tYmluZSB0aGVtIChldmVuIGluIElFMTApLiBCZWZvcmUgSUU5LCB3ZSBtdXN0IGRvIHRoZSBzYW1lIHdpdGggdGhlIGN1cnJlbnRTdHlsZSBvYmplY3QgYW5kIHVzZSBjYW1lbENhc2Vcblx0XHRcdFx0ZXMgPSB0aGlzLmZvcm1hdChlKSxcblx0XHRcdFx0YmEsIGVhLCBpLCBwY3QsIG92ZXJsYXAsIHNyYztcblx0XHRcdGlmICgoYnMuaW5kZXhPZihcIiVcIikgIT09IC0xKSAhPT0gKGVzLmluZGV4T2YoXCIlXCIpICE9PSAtMSkpIHtcblx0XHRcdFx0c3JjID0gX2dldFN0eWxlKHQsIFwiYmFja2dyb3VuZEltYWdlXCIpLnJlcGxhY2UoX3VybEV4cCwgXCJcIik7XG5cdFx0XHRcdGlmIChzcmMgJiYgc3JjICE9PSBcIm5vbmVcIikge1xuXHRcdFx0XHRcdGJhID0gYnMuc3BsaXQoXCIgXCIpO1xuXHRcdFx0XHRcdGVhID0gZXMuc3BsaXQoXCIgXCIpO1xuXHRcdFx0XHRcdF90ZW1wSW1nLnNldEF0dHJpYnV0ZShcInNyY1wiLCBzcmMpOyAvL3NldCB0aGUgdGVtcCBJTUcncyBzcmMgdG8gdGhlIGJhY2tncm91bmQtaW1hZ2Ugc28gdGhhdCB3ZSBjYW4gbWVhc3VyZSBpdHMgd2lkdGgvaGVpZ2h0XG5cdFx0XHRcdFx0aSA9IDI7XG5cdFx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0XHRicyA9IGJhW2ldO1xuXHRcdFx0XHRcdFx0cGN0ID0gKGJzLmluZGV4T2YoXCIlXCIpICE9PSAtMSk7XG5cdFx0XHRcdFx0XHRpZiAocGN0ICE9PSAoZWFbaV0uaW5kZXhPZihcIiVcIikgIT09IC0xKSkge1xuXHRcdFx0XHRcdFx0XHRvdmVybGFwID0gKGkgPT09IDApID8gdC5vZmZzZXRXaWR0aCAtIF90ZW1wSW1nLndpZHRoIDogdC5vZmZzZXRIZWlnaHQgLSBfdGVtcEltZy5oZWlnaHQ7XG5cdFx0XHRcdFx0XHRcdGJhW2ldID0gcGN0ID8gKHBhcnNlRmxvYXQoYnMpIC8gMTAwICogb3ZlcmxhcCkgKyBcInB4XCIgOiAocGFyc2VGbG9hdChicykgLyBvdmVybGFwICogMTAwKSArIFwiJVwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicyA9IGJhLmpvaW4oXCIgXCIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcy5wYXJzZUNvbXBsZXgodC5zdHlsZSwgYnMsIGVzLCBwdCwgcGx1Z2luKTtcblx0XHR9LCBmb3JtYXR0ZXI6X3BhcnNlUG9zaXRpb259KTtcblx0XHRfcmVnaXN0ZXJDb21wbGV4U3BlY2lhbFByb3AoXCJiYWNrZ3JvdW5kU2l6ZVwiLCB7ZGVmYXVsdFZhbHVlOlwiMCAwXCIsIGZvcm1hdHRlcjpfcGFyc2VQb3NpdGlvbn0pO1xuXHRcdF9yZWdpc3RlckNvbXBsZXhTcGVjaWFsUHJvcChcInBlcnNwZWN0aXZlXCIsIHtkZWZhdWx0VmFsdWU6XCIwcHhcIiwgcHJlZml4OnRydWV9KTtcblx0XHRfcmVnaXN0ZXJDb21wbGV4U3BlY2lhbFByb3AoXCJwZXJzcGVjdGl2ZU9yaWdpblwiLCB7ZGVmYXVsdFZhbHVlOlwiNTAlIDUwJVwiLCBwcmVmaXg6dHJ1ZX0pO1xuXHRcdF9yZWdpc3RlckNvbXBsZXhTcGVjaWFsUHJvcChcInRyYW5zZm9ybVN0eWxlXCIsIHtwcmVmaXg6dHJ1ZX0pO1xuXHRcdF9yZWdpc3RlckNvbXBsZXhTcGVjaWFsUHJvcChcImJhY2tmYWNlVmlzaWJpbGl0eVwiLCB7cHJlZml4OnRydWV9KTtcblx0XHRfcmVnaXN0ZXJDb21wbGV4U3BlY2lhbFByb3AoXCJ1c2VyU2VsZWN0XCIsIHtwcmVmaXg6dHJ1ZX0pO1xuXHRcdF9yZWdpc3RlckNvbXBsZXhTcGVjaWFsUHJvcChcIm1hcmdpblwiLCB7cGFyc2VyOl9nZXRFZGdlUGFyc2VyKFwibWFyZ2luVG9wLG1hcmdpblJpZ2h0LG1hcmdpbkJvdHRvbSxtYXJnaW5MZWZ0XCIpfSk7XG5cdFx0X3JlZ2lzdGVyQ29tcGxleFNwZWNpYWxQcm9wKFwicGFkZGluZ1wiLCB7cGFyc2VyOl9nZXRFZGdlUGFyc2VyKFwicGFkZGluZ1RvcCxwYWRkaW5nUmlnaHQscGFkZGluZ0JvdHRvbSxwYWRkaW5nTGVmdFwiKX0pO1xuXHRcdF9yZWdpc3RlckNvbXBsZXhTcGVjaWFsUHJvcChcImNsaXBcIiwge2RlZmF1bHRWYWx1ZTpcInJlY3QoMHB4LDBweCwwcHgsMHB4KVwiLCBwYXJzZXI6ZnVuY3Rpb24odCwgZSwgcCwgY3NzcCwgcHQsIHBsdWdpbil7XG5cdFx0XHR2YXIgYiwgY3MsIGRlbGltO1xuXHRcdFx0aWYgKF9pZVZlcnMgPCA5KSB7IC8vSUU4IGFuZCBlYXJsaWVyIGRvbid0IHJlcG9ydCBhIFwiY2xpcFwiIHZhbHVlIGluIHRoZSBjdXJyZW50U3R5bGUgLSBpbnN0ZWFkLCB0aGUgdmFsdWVzIGFyZSBzcGxpdCBhcGFydCBpbnRvIGNsaXBUb3AsIGNsaXBSaWdodCwgY2xpcEJvdHRvbSwgYW5kIGNsaXBMZWZ0LiBBbHNvLCBpbiBJRTcgYW5kIGVhcmxpZXIsIHRoZSB2YWx1ZXMgaW5zaWRlIHJlY3QoKSBhcmUgc3BhY2UtZGVsaW1pdGVkLCBub3QgY29tbWEtZGVsaW1pdGVkLlxuXHRcdFx0XHRjcyA9IHQuY3VycmVudFN0eWxlO1xuXHRcdFx0XHRkZWxpbSA9IF9pZVZlcnMgPCA4ID8gXCIgXCIgOiBcIixcIjtcblx0XHRcdFx0YiA9IFwicmVjdChcIiArIGNzLmNsaXBUb3AgKyBkZWxpbSArIGNzLmNsaXBSaWdodCArIGRlbGltICsgY3MuY2xpcEJvdHRvbSArIGRlbGltICsgY3MuY2xpcExlZnQgKyBcIilcIjtcblx0XHRcdFx0ZSA9IHRoaXMuZm9ybWF0KGUpLnNwbGl0KFwiLFwiKS5qb2luKGRlbGltKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGIgPSB0aGlzLmZvcm1hdChfZ2V0U3R5bGUodCwgdGhpcy5wLCBfY3MsIGZhbHNlLCB0aGlzLmRmbHQpKTtcblx0XHRcdFx0ZSA9IHRoaXMuZm9ybWF0KGUpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXMucGFyc2VDb21wbGV4KHQuc3R5bGUsIGIsIGUsIHB0LCBwbHVnaW4pO1xuXHRcdH19KTtcblx0XHRfcmVnaXN0ZXJDb21wbGV4U3BlY2lhbFByb3AoXCJ0ZXh0U2hhZG93XCIsIHtkZWZhdWx0VmFsdWU6XCIwcHggMHB4IDBweCAjOTk5XCIsIGNvbG9yOnRydWUsIG11bHRpOnRydWV9KTtcblx0XHRfcmVnaXN0ZXJDb21wbGV4U3BlY2lhbFByb3AoXCJhdXRvUm91bmQsc3RyaWN0VW5pdHNcIiwge3BhcnNlcjpmdW5jdGlvbih0LCBlLCBwLCBjc3NwLCBwdCkge3JldHVybiBwdDt9fSk7IC8vanVzdCBzbyB0aGF0IHdlIGNhbiBpZ25vcmUgdGhlc2UgcHJvcGVydGllcyAobm90IHR3ZWVuIHRoZW0pXG5cdFx0X3JlZ2lzdGVyQ29tcGxleFNwZWNpYWxQcm9wKFwiYm9yZGVyXCIsIHtkZWZhdWx0VmFsdWU6XCIwcHggc29saWQgIzAwMFwiLCBwYXJzZXI6ZnVuY3Rpb24odCwgZSwgcCwgY3NzcCwgcHQsIHBsdWdpbikge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5wYXJzZUNvbXBsZXgodC5zdHlsZSwgdGhpcy5mb3JtYXQoX2dldFN0eWxlKHQsIFwiYm9yZGVyVG9wV2lkdGhcIiwgX2NzLCBmYWxzZSwgXCIwcHhcIikgKyBcIiBcIiArIF9nZXRTdHlsZSh0LCBcImJvcmRlclRvcFN0eWxlXCIsIF9jcywgZmFsc2UsIFwic29saWRcIikgKyBcIiBcIiArIF9nZXRTdHlsZSh0LCBcImJvcmRlclRvcENvbG9yXCIsIF9jcywgZmFsc2UsIFwiIzAwMFwiKSksIHRoaXMuZm9ybWF0KGUpLCBwdCwgcGx1Z2luKTtcblx0XHRcdH0sIGNvbG9yOnRydWUsIGZvcm1hdHRlcjpmdW5jdGlvbih2KSB7XG5cdFx0XHRcdHZhciBhID0gdi5zcGxpdChcIiBcIik7XG5cdFx0XHRcdHJldHVybiBhWzBdICsgXCIgXCIgKyAoYVsxXSB8fCBcInNvbGlkXCIpICsgXCIgXCIgKyAodi5tYXRjaChfY29sb3JFeHApIHx8IFtcIiMwMDBcIl0pWzBdO1xuXHRcdFx0fX0pO1xuXHRcdF9yZWdpc3RlckNvbXBsZXhTcGVjaWFsUHJvcChcImJvcmRlcldpZHRoXCIsIHtwYXJzZXI6X2dldEVkZ2VQYXJzZXIoXCJib3JkZXJUb3BXaWR0aCxib3JkZXJSaWdodFdpZHRoLGJvcmRlckJvdHRvbVdpZHRoLGJvcmRlckxlZnRXaWR0aFwiKX0pOyAvL0ZpcmVmb3ggZG9lc24ndCBwaWNrIHVwIG9uIGJvcmRlcldpZHRoIHNldCBpbiBzdHlsZSBzaGVldHMgKG9ubHkgaW5saW5lKS5cblx0XHRfcmVnaXN0ZXJDb21wbGV4U3BlY2lhbFByb3AoXCJmbG9hdCxjc3NGbG9hdCxzdHlsZUZsb2F0XCIsIHtwYXJzZXI6ZnVuY3Rpb24odCwgZSwgcCwgY3NzcCwgcHQsIHBsdWdpbikge1xuXHRcdFx0dmFyIHMgPSB0LnN0eWxlLFxuXHRcdFx0XHRwcm9wID0gKFwiY3NzRmxvYXRcIiBpbiBzKSA/IFwiY3NzRmxvYXRcIiA6IFwic3R5bGVGbG9hdFwiO1xuXHRcdFx0cmV0dXJuIG5ldyBDU1NQcm9wVHdlZW4ocywgcHJvcCwgMCwgMCwgcHQsIC0xLCBwLCBmYWxzZSwgMCwgc1twcm9wXSwgZSk7XG5cdFx0fX0pO1xuXG5cdFx0Ly9vcGFjaXR5LXJlbGF0ZWRcblx0XHR2YXIgX3NldElFT3BhY2l0eVJhdGlvID0gZnVuY3Rpb24odikge1xuXHRcdFx0XHR2YXIgdCA9IHRoaXMudCwgLy9yZWZlcnMgdG8gdGhlIGVsZW1lbnQncyBzdHlsZSBwcm9wZXJ0eVxuXHRcdFx0XHRcdGZpbHRlcnMgPSB0LmZpbHRlciB8fCBfZ2V0U3R5bGUodGhpcy5kYXRhLCBcImZpbHRlclwiKSB8fCBcIlwiLFxuXHRcdFx0XHRcdHZhbCA9ICh0aGlzLnMgKyB0aGlzLmMgKiB2KSB8IDAsXG5cdFx0XHRcdFx0c2tpcDtcblx0XHRcdFx0aWYgKHZhbCA9PT0gMTAwKSB7IC8vZm9yIG9sZGVyIHZlcnNpb25zIG9mIElFIHRoYXQgbmVlZCB0byB1c2UgYSBmaWx0ZXIgdG8gYXBwbHkgb3BhY2l0eSwgd2Ugc2hvdWxkIHJlbW92ZSB0aGUgZmlsdGVyIGlmIG9wYWNpdHkgaGl0cyAxIGluIG9yZGVyIHRvIGltcHJvdmUgcGVyZm9ybWFuY2UsIGJ1dCBtYWtlIHN1cmUgdGhlcmUgaXNuJ3QgYSB0cmFuc2Zvcm0gKG1hdHJpeCkgb3IgZ3JhZGllbnQgaW4gdGhlIGZpbHRlcnMuXG5cdFx0XHRcdFx0aWYgKGZpbHRlcnMuaW5kZXhPZihcImF0cml4KFwiKSA9PT0gLTEgJiYgZmlsdGVycy5pbmRleE9mKFwicmFkaWVudChcIikgPT09IC0xICYmIGZpbHRlcnMuaW5kZXhPZihcIm9hZGVyKFwiKSA9PT0gLTEpIHtcblx0XHRcdFx0XHRcdHQucmVtb3ZlQXR0cmlidXRlKFwiZmlsdGVyXCIpO1xuXHRcdFx0XHRcdFx0c2tpcCA9ICghX2dldFN0eWxlKHRoaXMuZGF0YSwgXCJmaWx0ZXJcIikpOyAvL2lmIGEgY2xhc3MgaXMgYXBwbGllZCB0aGF0IGhhcyBhbiBhbHBoYSBmaWx0ZXIsIGl0IHdpbGwgdGFrZSBlZmZlY3QgKHdlIGRvbid0IHdhbnQgdGhhdCksIHNvIHJlLWFwcGx5IG91ciBhbHBoYSBmaWx0ZXIgaW4gdGhhdCBjYXNlLiBXZSBtdXN0IGZpcnN0IHJlbW92ZSBpdCBhbmQgdGhlbiBjaGVjay5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dC5maWx0ZXIgPSBmaWx0ZXJzLnJlcGxhY2UoX2FscGhhRmlsdGVyRXhwLCBcIlwiKTtcblx0XHRcdFx0XHRcdHNraXAgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIXNraXApIHtcblx0XHRcdFx0XHRpZiAodGhpcy54bjEpIHtcblx0XHRcdFx0XHRcdHQuZmlsdGVyID0gZmlsdGVycyA9IGZpbHRlcnMgfHwgKFwiYWxwaGEob3BhY2l0eT1cIiArIHZhbCArIFwiKVwiKTsgLy93b3JrcyBhcm91bmQgYnVnIGluIElFNy84IHRoYXQgcHJldmVudHMgY2hhbmdlcyB0byBcInZpc2liaWxpdHlcIiBmcm9tIGJlaW5nIGFwcGxpZWQgcHJvcGVybHkgaWYgdGhlIGZpbHRlciBpcyBjaGFuZ2VkIHRvIGEgZGlmZmVyZW50IGFscGhhIG9uIHRoZSBzYW1lIGZyYW1lLlxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoZmlsdGVycy5pbmRleE9mKFwicGFjaXR5XCIpID09PSAtMSkgeyAvL29ubHkgdXNlZCBpZiBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCB0aGUgc3RhbmRhcmQgb3BhY2l0eSBzdHlsZSBwcm9wZXJ0eSAoSUUgNyBhbmQgOCkuIFdlIG9taXQgdGhlIFwiT1wiIHRvIGF2b2lkIGNhc2Utc2Vuc2l0aXZpdHkgaXNzdWVzXG5cdFx0XHRcdFx0XHRpZiAodmFsICE9PSAwIHx8ICF0aGlzLnhuMSkgeyAvL2J1Z3MgaW4gSUU3Lzggd29uJ3QgcmVuZGVyIHRoZSBmaWx0ZXIgcHJvcGVybHkgaWYgb3BhY2l0eSBpcyBBRERFRCBvbiB0aGUgc2FtZSBmcmFtZS9yZW5kZXIgYXMgXCJ2aXNpYmlsaXR5XCIgY2hhbmdlcyAodGhpcy54bjEgaXMgMSBpZiB0aGlzIHR3ZWVuIGlzIGFuIFwiYXV0b0FscGhhXCIgdHdlZW4pXG5cdFx0XHRcdFx0XHRcdHQuZmlsdGVyID0gZmlsdGVycyArIFwiIGFscGhhKG9wYWNpdHk9XCIgKyB2YWwgKyBcIilcIjsgLy93ZSByb3VuZCB0aGUgdmFsdWUgYmVjYXVzZSBvdGhlcndpc2UsIGJ1Z3MgaW4gSUU3LzggY2FuIHByZXZlbnQgXCJ2aXNpYmlsaXR5XCIgY2hhbmdlcyBmcm9tIGJlaW5nIGFwcGxpZWQgcHJvcGVybHkuXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHQuZmlsdGVyID0gZmlsdGVycy5yZXBsYWNlKF9vcGFjaXR5RXhwLCBcIm9wYWNpdHk9XCIgKyB2YWwpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRfcmVnaXN0ZXJDb21wbGV4U3BlY2lhbFByb3AoXCJvcGFjaXR5LGFscGhhLGF1dG9BbHBoYVwiLCB7ZGVmYXVsdFZhbHVlOlwiMVwiLCBwYXJzZXI6ZnVuY3Rpb24odCwgZSwgcCwgY3NzcCwgcHQsIHBsdWdpbikge1xuXHRcdFx0dmFyIGIgPSBwYXJzZUZsb2F0KF9nZXRTdHlsZSh0LCBcIm9wYWNpdHlcIiwgX2NzLCBmYWxzZSwgXCIxXCIpKSxcblx0XHRcdFx0c3R5bGUgPSB0LnN0eWxlLFxuXHRcdFx0XHRpc0F1dG9BbHBoYSA9IChwID09PSBcImF1dG9BbHBoYVwiKTtcblx0XHRcdGlmICh0eXBlb2YoZSkgPT09IFwic3RyaW5nXCIgJiYgZS5jaGFyQXQoMSkgPT09IFwiPVwiKSB7XG5cdFx0XHRcdGUgPSAoKGUuY2hhckF0KDApID09PSBcIi1cIikgPyAtMSA6IDEpICogcGFyc2VGbG9hdChlLnN1YnN0cigyKSkgKyBiO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGlzQXV0b0FscGhhICYmIGIgPT09IDEgJiYgX2dldFN0eWxlKHQsIFwidmlzaWJpbGl0eVwiLCBfY3MpID09PSBcImhpZGRlblwiICYmIGUgIT09IDApIHsgLy9pZiB2aXNpYmlsaXR5IGlzIGluaXRpYWxseSBzZXQgdG8gXCJoaWRkZW5cIiwgd2Ugc2hvdWxkIGludGVycHJldCB0aGF0IGFzIGludGVudCB0byBtYWtlIG9wYWNpdHkgMCAoYSBjb252ZW5pZW5jZSlcblx0XHRcdFx0YiA9IDA7XG5cdFx0XHR9XG5cdFx0XHRpZiAoX3N1cHBvcnRzT3BhY2l0eSkge1xuXHRcdFx0XHRwdCA9IG5ldyBDU1NQcm9wVHdlZW4oc3R5bGUsIFwib3BhY2l0eVwiLCBiLCBlIC0gYiwgcHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHQgPSBuZXcgQ1NTUHJvcFR3ZWVuKHN0eWxlLCBcIm9wYWNpdHlcIiwgYiAqIDEwMCwgKGUgLSBiKSAqIDEwMCwgcHQpO1xuXHRcdFx0XHRwdC54bjEgPSBpc0F1dG9BbHBoYSA/IDEgOiAwOyAvL3dlIG5lZWQgdG8gcmVjb3JkIHdoZXRoZXIgb3Igbm90IHRoaXMgaXMgYW4gYXV0b0FscGhhIHNvIHRoYXQgaW4gdGhlIHNldFJhdGlvKCksIHdlIGtub3cgdG8gZHVwbGljYXRlIHRoZSBzZXR0aW5nIG9mIHRoZSBhbHBoYSBpbiBvcmRlciB0byB3b3JrIGFyb3VuZCBhIGJ1ZyBpbiBJRTcgYW5kIElFOCB0aGF0IHByZXZlbnRzIGNoYW5nZXMgdG8gXCJ2aXNpYmlsaXR5XCIgZnJvbSB0YWtpbmcgZWZmZWN0IGlmIHRoZSBmaWx0ZXIgaXMgY2hhbmdlZCB0byBhIGRpZmZlcmVudCBhbHBoYShvcGFjaXR5KSBhdCB0aGUgc2FtZSB0aW1lLiBTZXR0aW5nIGl0IHRvIHRoZSBTQU1FIHZhbHVlIGZpcnN0LCB0aGVuIHRoZSBuZXcgdmFsdWUgd29ya3MgYXJvdW5kIHRoZSBJRTcvOCBidWcuXG5cdFx0XHRcdHN0eWxlLnpvb20gPSAxOyAvL2hlbHBzIGNvcnJlY3QgYW4gSUUgaXNzdWUuXG5cdFx0XHRcdHB0LnR5cGUgPSAyO1xuXHRcdFx0XHRwdC5iID0gXCJhbHBoYShvcGFjaXR5PVwiICsgcHQucyArIFwiKVwiO1xuXHRcdFx0XHRwdC5lID0gXCJhbHBoYShvcGFjaXR5PVwiICsgKHB0LnMgKyBwdC5jKSArIFwiKVwiO1xuXHRcdFx0XHRwdC5kYXRhID0gdDtcblx0XHRcdFx0cHQucGx1Z2luID0gcGx1Z2luO1xuXHRcdFx0XHRwdC5zZXRSYXRpbyA9IF9zZXRJRU9wYWNpdHlSYXRpbztcblx0XHRcdH1cblx0XHRcdGlmIChpc0F1dG9BbHBoYSkgeyAvL3dlIGhhdmUgdG8gY3JlYXRlIHRoZSBcInZpc2liaWxpdHlcIiBQcm9wVHdlZW4gYWZ0ZXIgdGhlIG9wYWNpdHkgb25lIGluIHRoZSBsaW5rZWQgbGlzdCBzbyB0aGF0IHRoZXkgcnVuIGluIHRoZSBvcmRlciB0aGF0IHdvcmtzIHByb3Blcmx5IGluIElFOCBhbmQgZWFybGllclxuXHRcdFx0XHRwdCA9IG5ldyBDU1NQcm9wVHdlZW4oc3R5bGUsIFwidmlzaWJpbGl0eVwiLCAwLCAwLCBwdCwgLTEsIG51bGwsIGZhbHNlLCAwLCAoKGIgIT09IDApID8gXCJpbmhlcml0XCIgOiBcImhpZGRlblwiKSwgKChlID09PSAwKSA/IFwiaGlkZGVuXCIgOiBcImluaGVyaXRcIikpO1xuXHRcdFx0XHRwdC54czAgPSBcImluaGVyaXRcIjtcblx0XHRcdFx0Y3NzcC5fb3ZlcndyaXRlUHJvcHMucHVzaChwdC5uKTtcblx0XHRcdFx0Y3NzcC5fb3ZlcndyaXRlUHJvcHMucHVzaChwKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBwdDtcblx0XHR9fSk7XG5cblxuXHRcdHZhciBfcmVtb3ZlUHJvcCA9IGZ1bmN0aW9uKHMsIHApIHtcblx0XHRcdFx0aWYgKHApIHtcblx0XHRcdFx0XHRpZiAocy5yZW1vdmVQcm9wZXJ0eSkge1xuXHRcdFx0XHRcdFx0aWYgKHAuc3Vic3RyKDAsMikgPT09IFwibXNcIiB8fCBwLnN1YnN0cigwLDYpID09PSBcIndlYmtpdFwiKSB7IC8vTWljcm9zb2Z0IGFuZCBzb21lIFdlYmtpdCBicm93c2VycyBkb24ndCBjb25mb3JtIHRvIHRoZSBzdGFuZGFyZCBvZiBjYXBpdGFsaXppbmcgdGhlIGZpcnN0IHByZWZpeCBjaGFyYWN0ZXIsIHNvIHdlIGFkanVzdCBzbyB0aGF0IHdoZW4gd2UgcHJlZml4IHRoZSBjYXBzIHdpdGggYSBkYXNoLCBpdCdzIGNvcnJlY3QgKG90aGVyd2lzZSBpdCdkIGJlIFwibXMtdHJhbnNmb3JtXCIgaW5zdGVhZCBvZiBcIi1tcy10cmFuc2Zvcm1cIiBmb3IgSUU5LCBmb3IgZXhhbXBsZSlcblx0XHRcdFx0XHRcdFx0cCA9IFwiLVwiICsgcDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHMucmVtb3ZlUHJvcGVydHkocC5yZXBsYWNlKF9jYXBzRXhwLCBcIi0kMVwiKS50b0xvd2VyQ2FzZSgpKTtcblx0XHRcdFx0XHR9IGVsc2UgeyAvL25vdGU6IG9sZCB2ZXJzaW9ucyBvZiBJRSB1c2UgXCJyZW1vdmVBdHRyaWJ1dGUoKVwiIGluc3RlYWQgb2YgXCJyZW1vdmVQcm9wZXJ0eSgpXCJcblx0XHRcdFx0XHRcdHMucmVtb3ZlQXR0cmlidXRlKHApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdF9zZXRDbGFzc05hbWVSYXRpbyA9IGZ1bmN0aW9uKHYpIHtcblx0XHRcdFx0dGhpcy50Ll9nc0NsYXNzUFQgPSB0aGlzO1xuXHRcdFx0XHRpZiAodiA9PT0gMSB8fCB2ID09PSAwKSB7XG5cdFx0XHRcdFx0dGhpcy50LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsICh2ID09PSAwKSA/IHRoaXMuYiA6IHRoaXMuZSk7XG5cdFx0XHRcdFx0dmFyIG1wdCA9IHRoaXMuZGF0YSwgLy9maXJzdCBNaW5pUHJvcFR3ZWVuXG5cdFx0XHRcdFx0XHRzID0gdGhpcy50LnN0eWxlO1xuXHRcdFx0XHRcdHdoaWxlIChtcHQpIHtcblx0XHRcdFx0XHRcdGlmICghbXB0LnYpIHtcblx0XHRcdFx0XHRcdFx0X3JlbW92ZVByb3AocywgbXB0LnApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0c1ttcHQucF0gPSBtcHQudjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1wdCA9IG1wdC5fbmV4dDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHYgPT09IDEgJiYgdGhpcy50Ll9nc0NsYXNzUFQgPT09IHRoaXMpIHtcblx0XHRcdFx0XHRcdHRoaXMudC5fZ3NDbGFzc1BUID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSBpZiAodGhpcy50LmdldEF0dHJpYnV0ZShcImNsYXNzXCIpICE9PSB0aGlzLmUpIHtcblx0XHRcdFx0XHR0aGlzLnQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgdGhpcy5lKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRfcmVnaXN0ZXJDb21wbGV4U3BlY2lhbFByb3AoXCJjbGFzc05hbWVcIiwge3BhcnNlcjpmdW5jdGlvbih0LCBlLCBwLCBjc3NwLCBwdCwgcGx1Z2luLCB2YXJzKSB7XG5cdFx0XHR2YXIgYiA9IHQuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIiwgLy9kb24ndCB1c2UgdC5jbGFzc05hbWUgYmVjYXVzZSBpdCBkb2Vzbid0IHdvcmsgY29uc2lzdGVudGx5IG9uIFNWRyBlbGVtZW50czsgZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgYW5kIHNldEF0dHJpYnV0ZShcImNsYXNzXCIsIHZhbHVlXCIpIGlzIG1vcmUgcmVsaWFibGUuXG5cdFx0XHRcdGNzc1RleHQgPSB0LnN0eWxlLmNzc1RleHQsXG5cdFx0XHRcdGRpZkRhdGEsIGJzLCBjbnB0LCBjbnB0TG9va3VwLCBtcHQ7XG5cdFx0XHRwdCA9IGNzc3AuX2NsYXNzTmFtZVBUID0gbmV3IENTU1Byb3BUd2Vlbih0LCBwLCAwLCAwLCBwdCwgMik7XG5cdFx0XHRwdC5zZXRSYXRpbyA9IF9zZXRDbGFzc05hbWVSYXRpbztcblx0XHRcdHB0LnByID0gLTExO1xuXHRcdFx0X2hhc1ByaW9yaXR5ID0gdHJ1ZTtcblx0XHRcdHB0LmIgPSBiO1xuXHRcdFx0YnMgPSBfZ2V0QWxsU3R5bGVzKHQsIF9jcyk7XG5cdFx0XHQvL2lmIHRoZXJlJ3MgYSBjbGFzc05hbWUgdHdlZW4gYWxyZWFkeSBvcGVyYXRpbmcgb24gdGhlIHRhcmdldCwgZm9yY2UgaXQgdG8gaXRzIGVuZCBzbyB0aGF0IHRoZSBuZWNlc3NhcnkgaW5saW5lIHN0eWxlcyBhcmUgcmVtb3ZlZCBhbmQgdGhlIGNsYXNzIG5hbWUgaXMgYXBwbGllZCBiZWZvcmUgd2UgZGV0ZXJtaW5lIHRoZSBlbmQgc3RhdGUgKHdlIGRvbid0IHdhbnQgaW5saW5lIHN0eWxlcyBpbnRlcmZlcmluZyB0aGF0IHdlcmUgdGhlcmUganVzdCBmb3IgY2xhc3Mtc3BlY2lmaWMgdmFsdWVzKVxuXHRcdFx0Y25wdCA9IHQuX2dzQ2xhc3NQVDtcblx0XHRcdGlmIChjbnB0KSB7XG5cdFx0XHRcdGNucHRMb29rdXAgPSB7fTtcblx0XHRcdFx0bXB0ID0gY25wdC5kYXRhOyAvL2ZpcnN0IE1pbmlQcm9wVHdlZW4gd2hpY2ggc3RvcmVzIHRoZSBpbmxpbmUgc3R5bGVzIC0gd2UgbmVlZCB0byBmb3JjZSB0aGVzZSBzbyB0aGF0IHRoZSBpbmxpbmUgc3R5bGVzIGRvbid0IGNvbnRhbWluYXRlIHRoaW5ncy4gT3RoZXJ3aXNlLCB0aGVyZSdzIGEgc21hbGwgY2hhbmNlIHRoYXQgYSB0d2VlbiBjb3VsZCBzdGFydCBhbmQgdGhlIGlubGluZSB2YWx1ZXMgbWF0Y2ggdGhlIGRlc3RpbmF0aW9uIHZhbHVlcyBhbmQgdGhleSBuZXZlciBnZXQgY2xlYW5lZC5cblx0XHRcdFx0d2hpbGUgKG1wdCkge1xuXHRcdFx0XHRcdGNucHRMb29rdXBbbXB0LnBdID0gMTtcblx0XHRcdFx0XHRtcHQgPSBtcHQuX25leHQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y25wdC5zZXRSYXRpbygxKTtcblx0XHRcdH1cblx0XHRcdHQuX2dzQ2xhc3NQVCA9IHB0O1xuXHRcdFx0cHQuZSA9IChlLmNoYXJBdCgxKSAhPT0gXCI9XCIpID8gZSA6IGIucmVwbGFjZShuZXcgUmVnRXhwKFwiXFxcXHMqXFxcXGJcIiArIGUuc3Vic3RyKDIpICsgXCJcXFxcYlwiKSwgXCJcIikgKyAoKGUuY2hhckF0KDApID09PSBcIitcIikgPyBcIiBcIiArIGUuc3Vic3RyKDIpIDogXCJcIik7XG5cdFx0XHR0LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIHB0LmUpO1xuXHRcdFx0ZGlmRGF0YSA9IF9jc3NEaWYodCwgYnMsIF9nZXRBbGxTdHlsZXModCksIHZhcnMsIGNucHRMb29rdXApO1xuXHRcdFx0dC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBiKTtcblx0XHRcdHB0LmRhdGEgPSBkaWZEYXRhLmZpcnN0TVBUO1xuXHRcdFx0dC5zdHlsZS5jc3NUZXh0ID0gY3NzVGV4dDsgLy93ZSByZWNvcmRlZCBjc3NUZXh0IGJlZm9yZSB3ZSBzd2FwcGVkIGNsYXNzZXMgYW5kIHJhbiBfZ2V0QWxsU3R5bGVzKCkgYmVjYXVzZSBpbiBjYXNlcyB3aGVuIGEgY2xhc3NOYW1lIHR3ZWVuIGlzIG92ZXJ3cml0dGVuLCB3ZSByZW1vdmUgYWxsIHRoZSByZWxhdGVkIHR3ZWVuaW5nIHByb3BlcnRpZXMgZnJvbSB0aGF0IGNsYXNzIGNoYW5nZSAob3RoZXJ3aXNlIGNsYXNzLXNwZWNpZmljIHN0dWZmIGNhbid0IG92ZXJyaWRlIHByb3BlcnRpZXMgd2UndmUgZGlyZWN0bHkgc2V0IG9uIHRoZSB0YXJnZXQncyBzdHlsZSBvYmplY3QgZHVlIHRvIHNwZWNpZmljaXR5KS5cblx0XHRcdHB0ID0gcHQueGZpcnN0ID0gY3NzcC5wYXJzZSh0LCBkaWZEYXRhLmRpZnMsIHB0LCBwbHVnaW4pOyAvL3dlIHJlY29yZCB0aGUgQ1NTUHJvcFR3ZWVuIGFzIHRoZSB4Zmlyc3Qgc28gdGhhdCB3ZSBjYW4gaGFuZGxlIG92ZXJ3cml0aW5nIHByb3BlcnRseSAoaWYgXCJjbGFzc05hbWVcIiBnZXRzIG92ZXJ3cml0dGVuLCB3ZSBtdXN0IGtpbGwgYWxsIHRoZSBwcm9wZXJ0aWVzIGFzc29jaWF0ZWQgd2l0aCB0aGUgY2xhc3NOYW1lIHBhcnQgb2YgdGhlIHR3ZWVuLCBzbyB3ZSBjYW4gbG9vcCB0aHJvdWdoIGZyb20geGZpcnN0IHRvIHRoZSBwdCBpdHNlbGYpXG5cdFx0XHRyZXR1cm4gcHQ7XG5cdFx0fX0pO1xuXG5cblx0XHR2YXIgX3NldENsZWFyUHJvcHNSYXRpbyA9IGZ1bmN0aW9uKHYpIHtcblx0XHRcdGlmICh2ID09PSAxIHx8IHYgPT09IDApIGlmICh0aGlzLmRhdGEuX3RvdGFsVGltZSA9PT0gdGhpcy5kYXRhLl90b3RhbER1cmF0aW9uICYmIHRoaXMuZGF0YS5kYXRhICE9PSBcImlzRnJvbVN0YXJ0XCIpIHsgLy90aGlzLmRhdGEgcmVmZXJzIHRvIHRoZSB0d2Vlbi4gT25seSBjbGVhciBhdCB0aGUgRU5EIG9mIHRoZSB0d2VlbiAocmVtZW1iZXIsIGZyb20oKSB0d2VlbnMgbWFrZSB0aGUgcmF0aW8gZ28gZnJvbSAxIHRvIDAsIHNvIHdlIGNhbid0IGp1c3QgY2hlY2sgdGhhdCBhbmQgaWYgdGhlIHR3ZWVuIGlzIHRoZSB6ZXJvLWR1cmF0aW9uIG9uZSB0aGF0J3MgY3JlYXRlZCBpbnRlcm5hbGx5IHRvIHJlbmRlciB0aGUgc3RhcnRpbmcgdmFsdWVzIGluIGEgZnJvbSgpIHR3ZWVuLCBpZ25vcmUgdGhhdCBiZWNhdXNlIG90aGVyd2lzZSwgZm9yIGV4YW1wbGUsIGZyb20oLi4ue2hlaWdodDoxMDAsIGNsZWFyUHJvcHM6XCJoZWlnaHRcIiwgZGVsYXk6MX0pIHdvdWxkIHdpcGUgdGhlIGhlaWdodCBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSB0d2VlbiBhbmQgYWZ0ZXIgMSBzZWNvbmQsIGl0J2Qga2ljayBiYWNrIGluKS5cblx0XHRcdFx0dmFyIHMgPSB0aGlzLnQuc3R5bGUsXG5cdFx0XHRcdFx0dHJhbnNmb3JtUGFyc2UgPSBfc3BlY2lhbFByb3BzLnRyYW5zZm9ybS5wYXJzZSxcblx0XHRcdFx0XHRhLCBwLCBpLCBjbGVhclRyYW5zZm9ybSwgdHJhbnNmb3JtO1xuXHRcdFx0XHRpZiAodGhpcy5lID09PSBcImFsbFwiKSB7XG5cdFx0XHRcdFx0cy5jc3NUZXh0ID0gXCJcIjtcblx0XHRcdFx0XHRjbGVhclRyYW5zZm9ybSA9IHRydWU7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0YSA9IHRoaXMuZS5zcGxpdChcIiBcIikuam9pbihcIlwiKS5zcGxpdChcIixcIik7XG5cdFx0XHRcdFx0aSA9IGEubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdFx0cCA9IGFbaV07XG5cdFx0XHRcdFx0XHRpZiAoX3NwZWNpYWxQcm9wc1twXSkge1xuXHRcdFx0XHRcdFx0XHRpZiAoX3NwZWNpYWxQcm9wc1twXS5wYXJzZSA9PT0gdHJhbnNmb3JtUGFyc2UpIHtcblx0XHRcdFx0XHRcdFx0XHRjbGVhclRyYW5zZm9ybSA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0cCA9IChwID09PSBcInRyYW5zZm9ybU9yaWdpblwiKSA/IF90cmFuc2Zvcm1PcmlnaW5Qcm9wIDogX3NwZWNpYWxQcm9wc1twXS5wOyAvL2Vuc3VyZXMgdGhhdCBzcGVjaWFsIHByb3BlcnRpZXMgdXNlIHRoZSBwcm9wZXIgYnJvd3Nlci1zcGVjaWZpYyBwcm9wZXJ0eSBuYW1lLCBsaWtlIFwic2NhbGVYXCIgbWlnaHQgYmUgXCItd2Via2l0LXRyYW5zZm9ybVwiIG9yIFwiYm94U2hhZG93XCIgbWlnaHQgYmUgXCItbW96LWJveC1zaGFkb3dcIlxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRfcmVtb3ZlUHJvcChzLCBwKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGNsZWFyVHJhbnNmb3JtKSB7XG5cdFx0XHRcdFx0X3JlbW92ZVByb3AocywgX3RyYW5zZm9ybVByb3ApO1xuXHRcdFx0XHRcdHRyYW5zZm9ybSA9IHRoaXMudC5fZ3NUcmFuc2Zvcm07XG5cdFx0XHRcdFx0aWYgKHRyYW5zZm9ybSkge1xuXHRcdFx0XHRcdFx0aWYgKHRyYW5zZm9ybS5zdmcpIHtcblx0XHRcdFx0XHRcdFx0dGhpcy50LnJlbW92ZUF0dHJpYnV0ZShcImRhdGEtc3ZnLW9yaWdpblwiKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGRlbGV0ZSB0aGlzLnQuX2dzVHJhbnNmb3JtO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cdFx0fTtcblx0XHRfcmVnaXN0ZXJDb21wbGV4U3BlY2lhbFByb3AoXCJjbGVhclByb3BzXCIsIHtwYXJzZXI6ZnVuY3Rpb24odCwgZSwgcCwgY3NzcCwgcHQpIHtcblx0XHRcdHB0ID0gbmV3IENTU1Byb3BUd2Vlbih0LCBwLCAwLCAwLCBwdCwgMik7XG5cdFx0XHRwdC5zZXRSYXRpbyA9IF9zZXRDbGVhclByb3BzUmF0aW87XG5cdFx0XHRwdC5lID0gZTtcblx0XHRcdHB0LnByID0gLTEwO1xuXHRcdFx0cHQuZGF0YSA9IGNzc3AuX3R3ZWVuO1xuXHRcdFx0X2hhc1ByaW9yaXR5ID0gdHJ1ZTtcblx0XHRcdHJldHVybiBwdDtcblx0XHR9fSk7XG5cblx0XHRwID0gXCJiZXppZXIsdGhyb3dQcm9wcyxwaHlzaWNzUHJvcHMscGh5c2ljczJEXCIuc3BsaXQoXCIsXCIpO1xuXHRcdGkgPSBwLmxlbmd0aDtcblx0XHR3aGlsZSAoaS0tKSB7XG5cdFx0XHRfcmVnaXN0ZXJQbHVnaW5Qcm9wKHBbaV0pO1xuXHRcdH1cblxuXG5cblxuXG5cblxuXG5cdFx0cCA9IENTU1BsdWdpbi5wcm90b3R5cGU7XG5cdFx0cC5fZmlyc3RQVCA9IHAuX2xhc3RQYXJzZWRUcmFuc2Zvcm0gPSBwLl90cmFuc2Zvcm0gPSBudWxsO1xuXG5cdFx0Ly9nZXRzIGNhbGxlZCB3aGVuIHRoZSB0d2VlbiByZW5kZXJzIGZvciB0aGUgZmlyc3QgdGltZS4gVGhpcyBraWNrcyBldmVyeXRoaW5nIG9mZiwgcmVjb3JkaW5nIHN0YXJ0L2VuZCB2YWx1ZXMsIGV0Yy5cblx0XHRwLl9vbkluaXRUd2VlbiA9IGZ1bmN0aW9uKHRhcmdldCwgdmFycywgdHdlZW4pIHtcblx0XHRcdGlmICghdGFyZ2V0Lm5vZGVUeXBlKSB7IC8vY3NzIGlzIG9ubHkgZm9yIGRvbSBlbGVtZW50c1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl90YXJnZXQgPSB0YXJnZXQ7XG5cdFx0XHR0aGlzLl90d2VlbiA9IHR3ZWVuO1xuXHRcdFx0dGhpcy5fdmFycyA9IHZhcnM7XG5cdFx0XHRfYXV0b1JvdW5kID0gdmFycy5hdXRvUm91bmQ7XG5cdFx0XHRfaGFzUHJpb3JpdHkgPSBmYWxzZTtcblx0XHRcdF9zdWZmaXhNYXAgPSB2YXJzLnN1ZmZpeE1hcCB8fCBDU1NQbHVnaW4uc3VmZml4TWFwO1xuXHRcdFx0X2NzID0gX2dldENvbXB1dGVkU3R5bGUodGFyZ2V0LCBcIlwiKTtcblx0XHRcdF9vdmVyd3JpdGVQcm9wcyA9IHRoaXMuX292ZXJ3cml0ZVByb3BzO1xuXHRcdFx0dmFyIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuXHRcdFx0XHR2LCBwdCwgcHQyLCBmaXJzdCwgbGFzdCwgbmV4dCwgekluZGV4LCB0cHQsIHRocmVlRDtcblx0XHRcdGlmIChfcmVxU2FmYXJpRml4KSBpZiAoc3R5bGUuekluZGV4ID09PSBcIlwiKSB7XG5cdFx0XHRcdHYgPSBfZ2V0U3R5bGUodGFyZ2V0LCBcInpJbmRleFwiLCBfY3MpO1xuXHRcdFx0XHRpZiAodiA9PT0gXCJhdXRvXCIgfHwgdiA9PT0gXCJcIikge1xuXHRcdFx0XHRcdC8vY29ycmVjdHMgYSBidWcgaW4gW25vbi1BbmRyb2lkXSBTYWZhcmkgdGhhdCBwcmV2ZW50cyBpdCBmcm9tIHJlcGFpbnRpbmcgZWxlbWVudHMgaW4gdGhlaXIgbmV3IHBvc2l0aW9ucyBpZiB0aGV5IGRvbid0IGhhdmUgYSB6SW5kZXggc2V0LiBXZSBhbHNvIGNhbid0IGp1c3QgYXBwbHkgdGhpcyBpbnNpZGUgX3BhcnNlVHJhbnNmb3JtKCkgYmVjYXVzZSBhbnl0aGluZyB0aGF0J3MgbW92ZWQgaW4gYW55IHdheSAobGlrZSB1c2luZyBcImxlZnRcIiBvciBcInRvcFwiIGluc3RlYWQgb2YgdHJhbnNmb3JtcyBsaWtlIFwieFwiIGFuZCBcInlcIikgY2FuIGJlIGFmZmVjdGVkLCBzbyBpdCBpcyBiZXN0IHRvIGVuc3VyZSB0aGF0IGFueXRoaW5nIHRoYXQncyB0d2VlbmluZyBoYXMgYSB6LWluZGV4LiBTZXR0aW5nIFwiV2Via2l0UGVyc3BlY3RpdmVcIiB0byBhIG5vbi16ZXJvIHZhbHVlIHdvcmtlZCB0b28gZXhjZXB0IHRoYXQgb24gaU9TIFNhZmFyaSB0aGluZ3Mgd291bGQgZmxpY2tlciByYW5kb21seS4gUGx1cyB6SW5kZXggaXMgbGVzcyBtZW1vcnktaW50ZW5zaXZlLlxuXHRcdFx0XHRcdHRoaXMuX2FkZExhenlTZXQoc3R5bGUsIFwiekluZGV4XCIsIDApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICh0eXBlb2YodmFycykgPT09IFwic3RyaW5nXCIpIHtcblx0XHRcdFx0Zmlyc3QgPSBzdHlsZS5jc3NUZXh0O1xuXHRcdFx0XHR2ID0gX2dldEFsbFN0eWxlcyh0YXJnZXQsIF9jcyk7XG5cdFx0XHRcdHN0eWxlLmNzc1RleHQgPSBmaXJzdCArIFwiO1wiICsgdmFycztcblx0XHRcdFx0diA9IF9jc3NEaWYodGFyZ2V0LCB2LCBfZ2V0QWxsU3R5bGVzKHRhcmdldCkpLmRpZnM7XG5cdFx0XHRcdGlmICghX3N1cHBvcnRzT3BhY2l0eSAmJiBfb3BhY2l0eVZhbEV4cC50ZXN0KHZhcnMpKSB7XG5cdFx0XHRcdFx0di5vcGFjaXR5ID0gcGFyc2VGbG9hdCggUmVnRXhwLiQxICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dmFycyA9IHY7XG5cdFx0XHRcdHN0eWxlLmNzc1RleHQgPSBmaXJzdDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHZhcnMuY2xhc3NOYW1lKSB7IC8vY2xhc3NOYW1lIHR3ZWVucyB3aWxsIGNvbWJpbmUgYW55IGRpZmZlcmVuY2VzIHRoZXkgZmluZCBpbiB0aGUgY3NzIHdpdGggdGhlIHZhcnMgdGhhdCBhcmUgcGFzc2VkIGluLCBzbyB7Y2xhc3NOYW1lOlwibXlDbGFzc1wiLCBzY2FsZTowLjUsIGxlZnQ6MjB9IHdvdWxkIHdvcmsuXG5cdFx0XHRcdHRoaXMuX2ZpcnN0UFQgPSBwdCA9IF9zcGVjaWFsUHJvcHMuY2xhc3NOYW1lLnBhcnNlKHRhcmdldCwgdmFycy5jbGFzc05hbWUsIFwiY2xhc3NOYW1lXCIsIHRoaXMsIG51bGwsIG51bGwsIHZhcnMpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5fZmlyc3RQVCA9IHB0ID0gdGhpcy5wYXJzZSh0YXJnZXQsIHZhcnMsIG51bGwpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodGhpcy5fdHJhbnNmb3JtVHlwZSkge1xuXHRcdFx0XHR0aHJlZUQgPSAodGhpcy5fdHJhbnNmb3JtVHlwZSA9PT0gMyk7XG5cdFx0XHRcdGlmICghX3RyYW5zZm9ybVByb3ApIHtcblx0XHRcdFx0XHRzdHlsZS56b29tID0gMTsgLy9oZWxwcyBjb3JyZWN0IGFuIElFIGlzc3VlLlxuXHRcdFx0XHR9IGVsc2UgaWYgKF9pc1NhZmFyaSkge1xuXHRcdFx0XHRcdF9yZXFTYWZhcmlGaXggPSB0cnVlO1xuXHRcdFx0XHRcdC8vaWYgekluZGV4IGlzbid0IHNldCwgaU9TIFNhZmFyaSBkb2Vzbid0IHJlcGFpbnQgdGhpbmdzIGNvcnJlY3RseSBzb21ldGltZXMgKHNlZW1pbmdseSBhdCByYW5kb20pLlxuXHRcdFx0XHRcdGlmIChzdHlsZS56SW5kZXggPT09IFwiXCIpIHtcblx0XHRcdFx0XHRcdHpJbmRleCA9IF9nZXRTdHlsZSh0YXJnZXQsIFwiekluZGV4XCIsIF9jcyk7XG5cdFx0XHRcdFx0XHRpZiAoekluZGV4ID09PSBcImF1dG9cIiB8fCB6SW5kZXggPT09IFwiXCIpIHtcblx0XHRcdFx0XHRcdFx0dGhpcy5fYWRkTGF6eVNldChzdHlsZSwgXCJ6SW5kZXhcIiwgMCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vU2V0dGluZyBXZWJraXRCYWNrZmFjZVZpc2liaWxpdHkgY29ycmVjdHMgMyBidWdzOlxuXHRcdFx0XHRcdC8vIDEpIFtub24tQW5kcm9pZF0gU2FmYXJpIHNraXBzIHJlbmRlcmluZyBjaGFuZ2VzIHRvIFwidG9wXCIgYW5kIFwibGVmdFwiIHRoYXQgYXJlIG1hZGUgb24gdGhlIHNhbWUgZnJhbWUvcmVuZGVyIGFzIGEgdHJhbnNmb3JtIHVwZGF0ZS5cblx0XHRcdFx0XHQvLyAyKSBpT1MgU2FmYXJpIHNvbWV0aW1lcyBuZWdsZWN0cyB0byByZXBhaW50IGVsZW1lbnRzIGluIHRoZWlyIG5ldyBwb3NpdGlvbnMuIFNldHRpbmcgXCJXZWJraXRQZXJzcGVjdGl2ZVwiIHRvIGEgbm9uLXplcm8gdmFsdWUgd29ya2VkIHRvbyBleGNlcHQgdGhhdCBvbiBpT1MgU2FmYXJpIHRoaW5ncyB3b3VsZCBmbGlja2VyIHJhbmRvbWx5LlxuXHRcdFx0XHRcdC8vIDMpIFNhZmFyaSBzb21ldGltZXMgZGlzcGxheWVkIG9kZCBhcnRpZmFjdHMgd2hlbiB0d2VlbmluZyB0aGUgdHJhbnNmb3JtIChvciBXZWJraXRUcmFuc2Zvcm0pIHByb3BlcnR5LCBsaWtlIGdob3N0cyBvZiB0aGUgZWRnZXMgb2YgdGhlIGVsZW1lbnQgcmVtYWluZWQuIERlZmluaXRlbHkgYSBicm93c2VyIGJ1Zy5cblx0XHRcdFx0XHQvL05vdGU6IHdlIGFsbG93IHRoZSB1c2VyIHRvIG92ZXJyaWRlIHRoZSBhdXRvLXNldHRpbmcgYnkgZGVmaW5pbmcgV2Via2l0QmFja2ZhY2VWaXNpYmlsaXR5IGluIHRoZSB2YXJzIG9mIHRoZSB0d2Vlbi5cblx0XHRcdFx0XHRpZiAoX2lzU2FmYXJpTFQ2KSB7XG5cdFx0XHRcdFx0XHR0aGlzLl9hZGRMYXp5U2V0KHN0eWxlLCBcIldlYmtpdEJhY2tmYWNlVmlzaWJpbGl0eVwiLCB0aGlzLl92YXJzLldlYmtpdEJhY2tmYWNlVmlzaWJpbGl0eSB8fCAodGhyZWVEID8gXCJ2aXNpYmxlXCIgOiBcImhpZGRlblwiKSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHB0MiA9IHB0O1xuXHRcdFx0XHR3aGlsZSAocHQyICYmIHB0Mi5fbmV4dCkge1xuXHRcdFx0XHRcdHB0MiA9IHB0Mi5fbmV4dDtcblx0XHRcdFx0fVxuXHRcdFx0XHR0cHQgPSBuZXcgQ1NTUHJvcFR3ZWVuKHRhcmdldCwgXCJ0cmFuc2Zvcm1cIiwgMCwgMCwgbnVsbCwgMik7XG5cdFx0XHRcdHRoaXMuX2xpbmtDU1NQKHRwdCwgbnVsbCwgcHQyKTtcblx0XHRcdFx0dHB0LnNldFJhdGlvID0gX3RyYW5zZm9ybVByb3AgPyBfc2V0VHJhbnNmb3JtUmF0aW8gOiBfc2V0SUVUcmFuc2Zvcm1SYXRpbztcblx0XHRcdFx0dHB0LmRhdGEgPSB0aGlzLl90cmFuc2Zvcm0gfHwgX2dldFRyYW5zZm9ybSh0YXJnZXQsIF9jcywgdHJ1ZSk7XG5cdFx0XHRcdHRwdC50d2VlbiA9IHR3ZWVuO1xuXHRcdFx0XHR0cHQucHIgPSAtMTsgLy9lbnN1cmVzIHRoYXQgdGhlIHRyYW5zZm9ybXMgZ2V0IGFwcGxpZWQgYWZ0ZXIgdGhlIGNvbXBvbmVudHMgYXJlIHVwZGF0ZWQuXG5cdFx0XHRcdF9vdmVyd3JpdGVQcm9wcy5wb3AoKTsgLy93ZSBkb24ndCB3YW50IHRvIGZvcmNlIHRoZSBvdmVyd3JpdGUgb2YgYWxsIFwidHJhbnNmb3JtXCIgdHdlZW5zIG9mIHRoZSB0YXJnZXQgLSB3ZSBvbmx5IGNhcmUgYWJvdXQgaW5kaXZpZHVhbCB0cmFuc2Zvcm0gcHJvcGVydGllcyBsaWtlIHNjYWxlWCwgcm90YXRpb24sIGV0Yy4gVGhlIENTU1Byb3BUd2VlbiBjb25zdHJ1Y3RvciBhdXRvbWF0aWNhbGx5IGFkZHMgdGhlIHByb3BlcnR5IHRvIF9vdmVyd3JpdGVQcm9wcyB3aGljaCBpcyB3aHkgd2UgbmVlZCB0byBwb3AoKSBoZXJlLlxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoX2hhc1ByaW9yaXR5KSB7XG5cdFx0XHRcdC8vcmVvcmRlcnMgdGhlIGxpbmtlZCBsaXN0IGluIG9yZGVyIG9mIHByIChwcmlvcml0eSlcblx0XHRcdFx0d2hpbGUgKHB0KSB7XG5cdFx0XHRcdFx0bmV4dCA9IHB0Ll9uZXh0O1xuXHRcdFx0XHRcdHB0MiA9IGZpcnN0O1xuXHRcdFx0XHRcdHdoaWxlIChwdDIgJiYgcHQyLnByID4gcHQucHIpIHtcblx0XHRcdFx0XHRcdHB0MiA9IHB0Mi5fbmV4dDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKChwdC5fcHJldiA9IHB0MiA/IHB0Mi5fcHJldiA6IGxhc3QpKSB7XG5cdFx0XHRcdFx0XHRwdC5fcHJldi5fbmV4dCA9IHB0O1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRmaXJzdCA9IHB0O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoKHB0Ll9uZXh0ID0gcHQyKSkge1xuXHRcdFx0XHRcdFx0cHQyLl9wcmV2ID0gcHQ7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGxhc3QgPSBwdDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cHQgPSBuZXh0O1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuX2ZpcnN0UFQgPSBmaXJzdDtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH07XG5cblxuXHRcdHAucGFyc2UgPSBmdW5jdGlvbih0YXJnZXQsIHZhcnMsIHB0LCBwbHVnaW4pIHtcblx0XHRcdHZhciBzdHlsZSA9IHRhcmdldC5zdHlsZSxcblx0XHRcdFx0cCwgc3AsIGJuLCBlbiwgYnMsIGVzLCBic2Z4LCBlc2Z4LCBpc1N0ciwgcmVsO1xuXHRcdFx0Zm9yIChwIGluIHZhcnMpIHtcblx0XHRcdFx0ZXMgPSB2YXJzW3BdOyAvL2VuZGluZyB2YWx1ZSBzdHJpbmdcblx0XHRcdFx0c3AgPSBfc3BlY2lhbFByb3BzW3BdOyAvL1NwZWNpYWxQcm9wIGxvb2t1cC5cblx0XHRcdFx0aWYgKHNwKSB7XG5cdFx0XHRcdFx0cHQgPSBzcC5wYXJzZSh0YXJnZXQsIGVzLCBwLCB0aGlzLCBwdCwgcGx1Z2luLCB2YXJzKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGJzID0gX2dldFN0eWxlKHRhcmdldCwgcCwgX2NzKSArIFwiXCI7XG5cdFx0XHRcdFx0aXNTdHIgPSAodHlwZW9mKGVzKSA9PT0gXCJzdHJpbmdcIik7XG5cdFx0XHRcdFx0aWYgKHAgPT09IFwiY29sb3JcIiB8fCBwID09PSBcImZpbGxcIiB8fCBwID09PSBcInN0cm9rZVwiIHx8IHAuaW5kZXhPZihcIkNvbG9yXCIpICE9PSAtMSB8fCAoaXNTdHIgJiYgX3JnYmhzbEV4cC50ZXN0KGVzKSkpIHsgLy9PcGVyYSB1c2VzIGJhY2tncm91bmQ6IHRvIGRlZmluZSBjb2xvciBzb21ldGltZXMgaW4gYWRkaXRpb24gdG8gYmFja2dyb3VuZENvbG9yOlxuXHRcdFx0XHRcdFx0aWYgKCFpc1N0cikge1xuXHRcdFx0XHRcdFx0XHRlcyA9IF9wYXJzZUNvbG9yKGVzKTtcblx0XHRcdFx0XHRcdFx0ZXMgPSAoKGVzLmxlbmd0aCA+IDMpID8gXCJyZ2JhKFwiIDogXCJyZ2IoXCIpICsgZXMuam9pbihcIixcIikgKyBcIilcIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHB0ID0gX3BhcnNlQ29tcGxleChzdHlsZSwgcCwgYnMsIGVzLCB0cnVlLCBcInRyYW5zcGFyZW50XCIsIHB0LCAwLCBwbHVnaW4pO1xuXG5cdFx0XHRcdFx0fSBlbHNlIGlmIChpc1N0ciAmJiAoZXMuaW5kZXhPZihcIiBcIikgIT09IC0xIHx8IGVzLmluZGV4T2YoXCIsXCIpICE9PSAtMSkpIHtcblx0XHRcdFx0XHRcdHB0ID0gX3BhcnNlQ29tcGxleChzdHlsZSwgcCwgYnMsIGVzLCB0cnVlLCBudWxsLCBwdCwgMCwgcGx1Z2luKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRibiA9IHBhcnNlRmxvYXQoYnMpO1xuXHRcdFx0XHRcdFx0YnNmeCA9IChibiB8fCBibiA9PT0gMCkgPyBicy5zdWJzdHIoKGJuICsgXCJcIikubGVuZ3RoKSA6IFwiXCI7IC8vcmVtZW1iZXIsIGJzIGNvdWxkIGJlIG5vbi1udW1lcmljIGxpa2UgXCJub3JtYWxcIiBmb3IgZm9udFdlaWdodCwgc28gd2Ugc2hvdWxkIGRlZmF1bHQgdG8gYSBibGFuayBzdWZmaXggaW4gdGhhdCBjYXNlLlxuXG5cdFx0XHRcdFx0XHRpZiAoYnMgPT09IFwiXCIgfHwgYnMgPT09IFwiYXV0b1wiKSB7XG5cdFx0XHRcdFx0XHRcdGlmIChwID09PSBcIndpZHRoXCIgfHwgcCA9PT0gXCJoZWlnaHRcIikge1xuXHRcdFx0XHRcdFx0XHRcdGJuID0gX2dldERpbWVuc2lvbih0YXJnZXQsIHAsIF9jcyk7XG5cdFx0XHRcdFx0XHRcdFx0YnNmeCA9IFwicHhcIjtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmIChwID09PSBcImxlZnRcIiB8fCBwID09PSBcInRvcFwiKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ym4gPSBfY2FsY3VsYXRlT2Zmc2V0KHRhcmdldCwgcCwgX2NzKTtcblx0XHRcdFx0XHRcdFx0XHRic2Z4ID0gXCJweFwiO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGJuID0gKHAgIT09IFwib3BhY2l0eVwiKSA/IDAgOiAxO1xuXHRcdFx0XHRcdFx0XHRcdGJzZnggPSBcIlwiO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHJlbCA9IChpc1N0ciAmJiBlcy5jaGFyQXQoMSkgPT09IFwiPVwiKTtcblx0XHRcdFx0XHRcdGlmIChyZWwpIHtcblx0XHRcdFx0XHRcdFx0ZW4gPSBwYXJzZUludChlcy5jaGFyQXQoMCkgKyBcIjFcIiwgMTApO1xuXHRcdFx0XHRcdFx0XHRlcyA9IGVzLnN1YnN0cigyKTtcblx0XHRcdFx0XHRcdFx0ZW4gKj0gcGFyc2VGbG9hdChlcyk7XG5cdFx0XHRcdFx0XHRcdGVzZnggPSBlcy5yZXBsYWNlKF9zdWZmaXhFeHAsIFwiXCIpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0ZW4gPSBwYXJzZUZsb2F0KGVzKTtcblx0XHRcdFx0XHRcdFx0ZXNmeCA9IGlzU3RyID8gZXMucmVwbGFjZShfc3VmZml4RXhwLCBcIlwiKSA6IFwiXCI7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGlmIChlc2Z4ID09PSBcIlwiKSB7XG5cdFx0XHRcdFx0XHRcdGVzZnggPSAocCBpbiBfc3VmZml4TWFwKSA/IF9zdWZmaXhNYXBbcF0gOiBic2Z4OyAvL3BvcHVsYXRlIHRoZSBlbmQgc3VmZml4LCBwcmlvcml0aXppbmcgdGhlIG1hcCwgdGhlbiBpZiBub25lIGlzIGZvdW5kLCB1c2UgdGhlIGJlZ2lubmluZyBzdWZmaXguXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGVzID0gKGVuIHx8IGVuID09PSAwKSA/IChyZWwgPyBlbiArIGJuIDogZW4pICsgZXNmeCA6IHZhcnNbcF07IC8vZW5zdXJlcyB0aGF0IGFueSArPSBvciAtPSBwcmVmaXhlcyBhcmUgdGFrZW4gY2FyZSBvZi4gUmVjb3JkIHRoZSBlbmQgdmFsdWUgYmVmb3JlIG5vcm1hbGl6aW5nIHRoZSBzdWZmaXggYmVjYXVzZSB3ZSBhbHdheXMgd2FudCB0byBlbmQgdGhlIHR3ZWVuIG9uIGV4YWN0bHkgd2hhdCB0aGV5IGludGVuZGVkIGV2ZW4gaWYgaXQgZG9lc24ndCBtYXRjaCB0aGUgYmVnaW5uaW5nIHZhbHVlJ3Mgc3VmZml4LlxuXG5cdFx0XHRcdFx0XHQvL2lmIHRoZSBiZWdpbm5pbmcvZW5kaW5nIHN1ZmZpeGVzIGRvbid0IG1hdGNoLCBub3JtYWxpemUgdGhlbS4uLlxuXHRcdFx0XHRcdFx0aWYgKGJzZnggIT09IGVzZngpIGlmIChlc2Z4ICE9PSBcIlwiKSBpZiAoZW4gfHwgZW4gPT09IDApIGlmIChibikgeyAvL25vdGU6IGlmIHRoZSBiZWdpbm5pbmcgdmFsdWUgKGJuKSBpcyAwLCB3ZSBkb24ndCBuZWVkIHRvIGNvbnZlcnQgdW5pdHMhXG5cdFx0XHRcdFx0XHRcdGJuID0gX2NvbnZlcnRUb1BpeGVscyh0YXJnZXQsIHAsIGJuLCBic2Z4KTtcblx0XHRcdFx0XHRcdFx0aWYgKGVzZnggPT09IFwiJVwiKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ym4gLz0gX2NvbnZlcnRUb1BpeGVscyh0YXJnZXQsIHAsIDEwMCwgXCIlXCIpIC8gMTAwO1xuXHRcdFx0XHRcdFx0XHRcdGlmICh2YXJzLnN0cmljdFVuaXRzICE9PSB0cnVlKSB7IC8vc29tZSBicm93c2VycyByZXBvcnQgb25seSBcInB4XCIgdmFsdWVzIGluc3RlYWQgb2YgYWxsb3dpbmcgXCIlXCIgd2l0aCBnZXRDb21wdXRlZFN0eWxlKCksIHNvIHdlIGFzc3VtZSB0aGF0IGlmIHdlJ3JlIHR3ZWVuaW5nIHRvIGEgJSwgd2Ugc2hvdWxkIHN0YXJ0IHRoZXJlIHRvbyB1bmxlc3Mgc3RyaWN0VW5pdHM6dHJ1ZSBpcyBkZWZpbmVkLiBUaGlzIGFwcHJvYWNoIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHJlc3BvbnNpdmUgZGVzaWducyB0aGF0IHVzZSBmcm9tKCkgdHdlZW5zLlxuXHRcdFx0XHRcdFx0XHRcdFx0YnMgPSBibiArIFwiJVwiO1xuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKGVzZnggPT09IFwiZW1cIiB8fCBlc2Z4ID09PSBcInJlbVwiKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ym4gLz0gX2NvbnZlcnRUb1BpeGVscyh0YXJnZXQsIHAsIDEsIGVzZngpO1xuXG5cdFx0XHRcdFx0XHRcdC8vb3RoZXJ3aXNlIGNvbnZlcnQgdG8gcGl4ZWxzLlxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKGVzZnggIT09IFwicHhcIikge1xuXHRcdFx0XHRcdFx0XHRcdGVuID0gX2NvbnZlcnRUb1BpeGVscyh0YXJnZXQsIHAsIGVuLCBlc2Z4KTtcblx0XHRcdFx0XHRcdFx0XHRlc2Z4ID0gXCJweFwiOyAvL3dlIGRvbid0IHVzZSBic2Z4IGFmdGVyIHRoaXMsIHNvIHdlIGRvbid0IG5lZWQgdG8gc2V0IGl0IHRvIHB4IHRvby5cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRpZiAocmVsKSBpZiAoZW4gfHwgZW4gPT09IDApIHtcblx0XHRcdFx0XHRcdFx0XHRlcyA9IChlbiArIGJuKSArIGVzZng7IC8vdGhlIGNoYW5nZXMgd2UgbWFkZSBhZmZlY3QgcmVsYXRpdmUgY2FsY3VsYXRpb25zLCBzbyBhZGp1c3QgdGhlIGVuZCB2YWx1ZSBoZXJlLlxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGlmIChyZWwpIHtcblx0XHRcdFx0XHRcdFx0ZW4gKz0gYm47XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGlmICgoYm4gfHwgYm4gPT09IDApICYmIChlbiB8fCBlbiA9PT0gMCkpIHsgLy9mYXN0ZXIgdGhhbiBpc05hTigpLiBBbHNvLCBwcmV2aW91c2x5IHdlIHJlcXVpcmVkIGVuICE9PSBibiBidXQgdGhhdCBkb2Vzbid0IHJlYWxseSBnYWluIG11Y2ggcGVyZm9ybWFuY2UgYW5kIGl0IHByZXZlbnRzIF9wYXJzZVRvUHJveHkoKSBmcm9tIHdvcmtpbmcgcHJvcGVybHkgaWYgYmVnaW5uaW5nIGFuZCBlbmRpbmcgdmFsdWVzIG1hdGNoIGJ1dCBuZWVkIHRvIGdldCB0d2VlbmVkIGJ5IGFuIGV4dGVybmFsIHBsdWdpbiBhbnl3YXkuIEZvciBleGFtcGxlLCBhIGJlemllciB0d2VlbiB3aGVyZSB0aGUgdGFyZ2V0IHN0YXJ0cyBhdCBsZWZ0OjAgYW5kIGhhcyB0aGVzZSBwb2ludHM6IFt7bGVmdDo1MH0se2xlZnQ6MH1dIHdvdWxkbid0IHdvcmsgcHJvcGVybHkgYmVjYXVzZSB3aGVuIHBhcnNpbmcgdGhlIGxhc3QgcG9pbnQsIGl0J2QgbWF0Y2ggdGhlIGZpcnN0IChjdXJyZW50KSBvbmUgYW5kIGEgbm9uLXR3ZWVuaW5nIENTU1Byb3BUd2VlbiB3b3VsZCBiZSByZWNvcmRlZCB3aGVuIHdlIGFjdHVhbGx5IG5lZWQgYSBub3JtYWwgdHdlZW4gKHR5cGU6MCkgc28gdGhhdCB0aGluZ3MgZ2V0IHVwZGF0ZWQgZHVyaW5nIHRoZSB0d2VlbiBwcm9wZXJseS5cblx0XHRcdFx0XHRcdFx0cHQgPSBuZXcgQ1NTUHJvcFR3ZWVuKHN0eWxlLCBwLCBibiwgZW4gLSBibiwgcHQsIDAsIHAsIChfYXV0b1JvdW5kICE9PSBmYWxzZSAmJiAoZXNmeCA9PT0gXCJweFwiIHx8IHAgPT09IFwiekluZGV4XCIpKSwgMCwgYnMsIGVzKTtcblx0XHRcdFx0XHRcdFx0cHQueHMwID0gZXNmeDtcblx0XHRcdFx0XHRcdFx0Ly9ERUJVRzogX2xvZyhcInR3ZWVuIFwiK3ArXCIgZnJvbSBcIitwdC5iK1wiIChcIitibitlc2Z4K1wiKSB0byBcIitwdC5lK1wiIHdpdGggc3VmZml4OiBcIitwdC54czApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmIChzdHlsZVtwXSA9PT0gdW5kZWZpbmVkIHx8ICFlcyAmJiAoZXMgKyBcIlwiID09PSBcIk5hTlwiIHx8IGVzID09IG51bGwpKSB7XG5cdFx0XHRcdFx0XHRcdF9sb2coXCJpbnZhbGlkIFwiICsgcCArIFwiIHR3ZWVuIHZhbHVlOiBcIiArIHZhcnNbcF0pO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cHQgPSBuZXcgQ1NTUHJvcFR3ZWVuKHN0eWxlLCBwLCBlbiB8fCBibiB8fCAwLCAwLCBwdCwgLTEsIHAsIGZhbHNlLCAwLCBicywgZXMpO1xuXHRcdFx0XHRcdFx0XHRwdC54czAgPSAoZXMgPT09IFwibm9uZVwiICYmIChwID09PSBcImRpc3BsYXlcIiB8fCBwLmluZGV4T2YoXCJTdHlsZVwiKSAhPT0gLTEpKSA/IGJzIDogZXM7IC8vaW50ZXJtZWRpYXRlIHZhbHVlIHNob3VsZCB0eXBpY2FsbHkgYmUgc2V0IGltbWVkaWF0ZWx5IChlbmQgdmFsdWUpIGV4Y2VwdCBmb3IgXCJkaXNwbGF5XCIgb3IgdGhpbmdzIGxpa2UgYm9yZGVyVG9wU3R5bGUsIGJvcmRlckJvdHRvbVN0eWxlLCBldGMuIHdoaWNoIHNob3VsZCB1c2UgdGhlIGJlZ2lubmluZyB2YWx1ZSBkdXJpbmcgdGhlIHR3ZWVuLlxuXHRcdFx0XHRcdFx0XHQvL0RFQlVHOiBfbG9nKFwibm9uLXR3ZWVuaW5nIHZhbHVlIFwiK3ArXCI6IFwiK3B0LnhzMCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChwbHVnaW4pIGlmIChwdCAmJiAhcHQucGx1Z2luKSB7XG5cdFx0XHRcdFx0cHQucGx1Z2luID0gcGx1Z2luO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcHQ7XG5cdFx0fTtcblxuXG5cdFx0Ly9nZXRzIGNhbGxlZCBldmVyeSB0aW1lIHRoZSB0d2VlbiB1cGRhdGVzLCBwYXNzaW5nIHRoZSBuZXcgcmF0aW8gKHR5cGljYWxseSBhIHZhbHVlIGJldHdlZW4gMCBhbmQgMSwgYnV0IG5vdCBhbHdheXMgKGZvciBleGFtcGxlLCBpZiBhbiBFbGFzdGljLmVhc2VPdXQgaXMgdXNlZCwgdGhlIHZhbHVlIGNhbiBqdW1wIGFib3ZlIDEgbWlkLXR3ZWVuKS4gSXQgd2lsbCBhbHdheXMgc3RhcnQgYW5kIDAgYW5kIGVuZCBhdCAxLlxuXHRcdHAuc2V0UmF0aW8gPSBmdW5jdGlvbih2KSB7XG5cdFx0XHR2YXIgcHQgPSB0aGlzLl9maXJzdFBULFxuXHRcdFx0XHRtaW4gPSAwLjAwMDAwMSxcblx0XHRcdFx0dmFsLCBzdHIsIGk7XG5cdFx0XHQvL2F0IHRoZSBlbmQgb2YgdGhlIHR3ZWVuLCB3ZSBzZXQgdGhlIHZhbHVlcyB0byBleGFjdGx5IHdoYXQgd2UgcmVjZWl2ZWQgaW4gb3JkZXIgdG8gbWFrZSBzdXJlIG5vbi10d2VlbmluZyB2YWx1ZXMgKGxpa2UgXCJwb3NpdGlvblwiIG9yIFwiZmxvYXRcIiBvciB3aGF0ZXZlcikgYXJlIHNldCBhbmQgc28gdGhhdCBpZiB0aGUgYmVnaW5uaW5nL2VuZGluZyBzdWZmaXhlcyAodW5pdHMpIGRpZG4ndCBtYXRjaCBhbmQgd2Ugbm9ybWFsaXplZCB0byBweCwgdGhlIHZhbHVlIHRoYXQgdGhlIHVzZXIgcGFzc2VkIGluIGlzIHVzZWQgaGVyZS4gV2UgY2hlY2sgdG8gc2VlIGlmIHRoZSB0d2VlbiBpcyBhdCBpdHMgYmVnaW5uaW5nIGluIGNhc2UgaXQncyBhIGZyb20oKSB0d2VlbiBpbiB3aGljaCBjYXNlIHRoZSByYXRpbyB3aWxsIGFjdHVhbGx5IGdvIGZyb20gMSB0byAwIG92ZXIgdGhlIGNvdXJzZSBvZiB0aGUgdHdlZW4gKGJhY2t3YXJkcykuXG5cdFx0XHRpZiAodiA9PT0gMSAmJiAodGhpcy5fdHdlZW4uX3RpbWUgPT09IHRoaXMuX3R3ZWVuLl9kdXJhdGlvbiB8fCB0aGlzLl90d2Vlbi5fdGltZSA9PT0gMCkpIHtcblx0XHRcdFx0d2hpbGUgKHB0KSB7XG5cdFx0XHRcdFx0aWYgKHB0LnR5cGUgIT09IDIpIHtcblx0XHRcdFx0XHRcdGlmIChwdC5yICYmIHB0LnR5cGUgIT09IC0xKSB7XG5cdFx0XHRcdFx0XHRcdHZhbCA9IE1hdGgucm91bmQocHQucyArIHB0LmMpO1xuXHRcdFx0XHRcdFx0XHRpZiAoIXB0LnR5cGUpIHtcblx0XHRcdFx0XHRcdFx0XHRwdC50W3B0LnBdID0gdmFsICsgcHQueHMwO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKHB0LnR5cGUgPT09IDEpIHsgLy9jb21wbGV4IHZhbHVlIChvbmUgdGhhdCB0eXBpY2FsbHkgaGFzIG11bHRpcGxlIG51bWJlcnMgaW5zaWRlIGEgc3RyaW5nLCBsaWtlIFwicmVjdCg1cHgsMTBweCwyMHB4LDI1cHgpXCJcblx0XHRcdFx0XHRcdFx0XHRpID0gcHQubDtcblx0XHRcdFx0XHRcdFx0XHRzdHIgPSBwdC54czAgKyB2YWwgKyBwdC54czE7XG5cdFx0XHRcdFx0XHRcdFx0Zm9yIChpID0gMTsgaSA8IHB0Lmw7IGkrKykge1xuXHRcdFx0XHRcdFx0XHRcdFx0c3RyICs9IHB0W1wieG5cIitpXSArIHB0W1wieHNcIisoaSsxKV07XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdHB0LnRbcHQucF0gPSBzdHI7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHB0LnRbcHQucF0gPSBwdC5lO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRwdC5zZXRSYXRpbyh2KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cHQgPSBwdC5fbmV4dDtcblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2UgaWYgKHYgfHwgISh0aGlzLl90d2Vlbi5fdGltZSA9PT0gdGhpcy5fdHdlZW4uX2R1cmF0aW9uIHx8IHRoaXMuX3R3ZWVuLl90aW1lID09PSAwKSB8fCB0aGlzLl90d2Vlbi5fcmF3UHJldlRpbWUgPT09IC0wLjAwMDAwMSkge1xuXHRcdFx0XHR3aGlsZSAocHQpIHtcblx0XHRcdFx0XHR2YWwgPSBwdC5jICogdiArIHB0LnM7XG5cdFx0XHRcdFx0aWYgKHB0LnIpIHtcblx0XHRcdFx0XHRcdHZhbCA9IE1hdGgucm91bmQodmFsKTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHZhbCA8IG1pbikgaWYgKHZhbCA+IC1taW4pIHtcblx0XHRcdFx0XHRcdHZhbCA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICghcHQudHlwZSkge1xuXHRcdFx0XHRcdFx0cHQudFtwdC5wXSA9IHZhbCArIHB0LnhzMDtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHB0LnR5cGUgPT09IDEpIHsgLy9jb21wbGV4IHZhbHVlIChvbmUgdGhhdCB0eXBpY2FsbHkgaGFzIG11bHRpcGxlIG51bWJlcnMgaW5zaWRlIGEgc3RyaW5nLCBsaWtlIFwicmVjdCg1cHgsMTBweCwyMHB4LDI1cHgpXCJcblx0XHRcdFx0XHRcdGkgPSBwdC5sO1xuXHRcdFx0XHRcdFx0aWYgKGkgPT09IDIpIHtcblx0XHRcdFx0XHRcdFx0cHQudFtwdC5wXSA9IHB0LnhzMCArIHZhbCArIHB0LnhzMSArIHB0LnhuMSArIHB0LnhzMjtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoaSA9PT0gMykge1xuXHRcdFx0XHRcdFx0XHRwdC50W3B0LnBdID0gcHQueHMwICsgdmFsICsgcHQueHMxICsgcHQueG4xICsgcHQueHMyICsgcHQueG4yICsgcHQueHMzO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmIChpID09PSA0KSB7XG5cdFx0XHRcdFx0XHRcdHB0LnRbcHQucF0gPSBwdC54czAgKyB2YWwgKyBwdC54czEgKyBwdC54bjEgKyBwdC54czIgKyBwdC54bjIgKyBwdC54czMgKyBwdC54bjMgKyBwdC54czQ7XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKGkgPT09IDUpIHtcblx0XHRcdFx0XHRcdFx0cHQudFtwdC5wXSA9IHB0LnhzMCArIHZhbCArIHB0LnhzMSArIHB0LnhuMSArIHB0LnhzMiArIHB0LnhuMiArIHB0LnhzMyArIHB0LnhuMyArIHB0LnhzNCArIHB0LnhuNCArIHB0LnhzNTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHN0ciA9IHB0LnhzMCArIHZhbCArIHB0LnhzMTtcblx0XHRcdFx0XHRcdFx0Zm9yIChpID0gMTsgaSA8IHB0Lmw7IGkrKykge1xuXHRcdFx0XHRcdFx0XHRcdHN0ciArPSBwdFtcInhuXCIraV0gKyBwdFtcInhzXCIrKGkrMSldO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHB0LnRbcHQucF0gPSBzdHI7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9IGVsc2UgaWYgKHB0LnR5cGUgPT09IC0xKSB7IC8vbm9uLXR3ZWVuaW5nIHZhbHVlXG5cdFx0XHRcdFx0XHRwdC50W3B0LnBdID0gcHQueHMwO1xuXG5cdFx0XHRcdFx0fSBlbHNlIGlmIChwdC5zZXRSYXRpbykgeyAvL2N1c3RvbSBzZXRSYXRpbygpIGZvciB0aGluZ3MgbGlrZSBTcGVjaWFsUHJvcHMsIGV4dGVybmFsIHBsdWdpbnMsIGV0Yy5cblx0XHRcdFx0XHRcdHB0LnNldFJhdGlvKHYpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwdCA9IHB0Ll9uZXh0O1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vaWYgdGhlIHR3ZWVuIGlzIHJldmVyc2VkIGFsbCB0aGUgd2F5IGJhY2sgdG8gdGhlIGJlZ2lubmluZywgd2UgbmVlZCB0byByZXN0b3JlIHRoZSBvcmlnaW5hbCB2YWx1ZXMgd2hpY2ggbWF5IGhhdmUgZGlmZmVyZW50IHVuaXRzIChsaWtlICUgaW5zdGVhZCBvZiBweCBvciBlbSBvciB3aGF0ZXZlcikuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aGlsZSAocHQpIHtcblx0XHRcdFx0XHRpZiAocHQudHlwZSAhPT0gMikge1xuXHRcdFx0XHRcdFx0cHQudFtwdC5wXSA9IHB0LmI7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHB0LnNldFJhdGlvKHYpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwdCA9IHB0Ll9uZXh0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogRm9yY2VzIHJlbmRlcmluZyBvZiB0aGUgdGFyZ2V0J3MgdHJhbnNmb3JtcyAocm90YXRpb24sIHNjYWxlLCBldGMuKSB3aGVuZXZlciB0aGUgQ1NTUGx1Z2luJ3Mgc2V0UmF0aW8oKSBpcyBjYWxsZWQuXG5cdFx0ICogQmFzaWNhbGx5LCB0aGlzIHRlbGxzIHRoZSBDU1NQbHVnaW4gdG8gY3JlYXRlIGEgQ1NTUHJvcFR3ZWVuICh0eXBlIDIpIGFmdGVyIGluc3RhbnRpYXRpb24gdGhhdCBydW5zIGxhc3QgaW4gdGhlIGxpbmtlZFxuXHRcdCAqIGxpc3QgYW5kIGNhbGxzIHRoZSBhcHByb3ByaWF0ZSAoM0Qgb3IgMkQpIHJlbmRlcmluZyBmdW5jdGlvbi4gV2Ugc2VwYXJhdGUgdGhpcyBpbnRvIGl0cyBvd24gbWV0aG9kIHNvIHRoYXQgd2UgY2FuIGNhbGxcblx0XHQgKiBpdCBmcm9tIG90aGVyIHBsdWdpbnMgbGlrZSBCZXppZXJQbHVnaW4gaWYsIGZvciBleGFtcGxlLCBpdCBuZWVkcyB0byBhcHBseSBhbiBhdXRvUm90YXRpb24gYW5kIHRoaXMgQ1NTUGx1Z2luXG5cdFx0ICogZG9lc24ndCBoYXZlIGFueSB0cmFuc2Zvcm0tcmVsYXRlZCBwcm9wZXJ0aWVzIG9mIGl0cyBvd24uIFlvdSBjYW4gY2FsbCB0aGlzIG1ldGhvZCBhcyBtYW55IHRpbWVzIGFzIHlvdVxuXHRcdCAqIHdhbnQgYW5kIGl0IHdvbid0IGNyZWF0ZSBkdXBsaWNhdGUgQ1NTUHJvcFR3ZWVucy5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7Ym9vbGVhbn0gdGhyZWVEIGlmIHRydWUsIGl0IHNob3VsZCBhcHBseSAzRCB0d2VlbnMgKG90aGVyd2lzZSwganVzdCAyRCBvbmVzIGFyZSBmaW5lIGFuZCB0eXBpY2FsbHkgZmFzdGVyKVxuXHRcdCAqL1xuXHRcdHAuX2VuYWJsZVRyYW5zZm9ybXMgPSBmdW5jdGlvbih0aHJlZUQpIHtcblx0XHRcdHRoaXMuX3RyYW5zZm9ybSA9IHRoaXMuX3RyYW5zZm9ybSB8fCBfZ2V0VHJhbnNmb3JtKHRoaXMuX3RhcmdldCwgX2NzLCB0cnVlKTsgLy9lbnN1cmVzIHRoYXQgdGhlIGVsZW1lbnQgaGFzIGEgX2dzVHJhbnNmb3JtIHByb3BlcnR5IHdpdGggdGhlIGFwcHJvcHJpYXRlIHZhbHVlcy5cblx0XHRcdHRoaXMuX3RyYW5zZm9ybVR5cGUgPSAoISh0aGlzLl90cmFuc2Zvcm0uc3ZnICYmIF91c2VTVkdUcmFuc2Zvcm1BdHRyKSAmJiAodGhyZWVEIHx8IHRoaXMuX3RyYW5zZm9ybVR5cGUgPT09IDMpKSA/IDMgOiAyO1xuXHRcdH07XG5cblx0XHR2YXIgbGF6eVNldCA9IGZ1bmN0aW9uKHYpIHtcblx0XHRcdHRoaXMudFt0aGlzLnBdID0gdGhpcy5lO1xuXHRcdFx0dGhpcy5kYXRhLl9saW5rQ1NTUCh0aGlzLCB0aGlzLl9uZXh0LCBudWxsLCB0cnVlKTsgLy93ZSBwdXJwb3NlZnVsbHkga2VlcCB0aGlzLl9uZXh0IGV2ZW4gdGhvdWdoIGl0J2QgbWFrZSBzZW5zZSB0byBudWxsIGl0LCBidXQgdGhpcyBpcyBhIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbiwgYXMgdGhpcyBoYXBwZW5zIGR1cmluZyB0aGUgd2hpbGUgKHB0KSB7fSBsb29wIGluIHNldFJhdGlvKCkgYXQgdGhlIGJvdHRvbSBvZiB3aGljaCBpdCBzZXRzIHB0ID0gcHQuX25leHQsIHNvIGlmIHdlIG51bGwgaXQsIHRoZSBsaW5rZWQgbGlzdCB3aWxsIGJlIGJyb2tlbiBpbiB0aGF0IGxvb3AuXG5cdFx0fTtcblx0XHQvKiogQHByaXZhdGUgR2l2ZXMgdXMgYSB3YXkgdG8gc2V0IGEgdmFsdWUgb24gdGhlIGZpcnN0IHJlbmRlciAoYW5kIG9ubHkgdGhlIGZpcnN0IHJlbmRlcikuICoqL1xuXHRcdHAuX2FkZExhenlTZXQgPSBmdW5jdGlvbih0LCBwLCB2KSB7XG5cdFx0XHR2YXIgcHQgPSB0aGlzLl9maXJzdFBUID0gbmV3IENTU1Byb3BUd2Vlbih0LCBwLCAwLCAwLCB0aGlzLl9maXJzdFBULCAyKTtcblx0XHRcdHB0LmUgPSB2O1xuXHRcdFx0cHQuc2V0UmF0aW8gPSBsYXp5U2V0O1xuXHRcdFx0cHQuZGF0YSA9IHRoaXM7XG5cdFx0fTtcblxuXHRcdC8qKiBAcHJpdmF0ZSAqKi9cblx0XHRwLl9saW5rQ1NTUCA9IGZ1bmN0aW9uKHB0LCBuZXh0LCBwcmV2LCByZW1vdmUpIHtcblx0XHRcdGlmIChwdCkge1xuXHRcdFx0XHRpZiAobmV4dCkge1xuXHRcdFx0XHRcdG5leHQuX3ByZXYgPSBwdDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAocHQuX25leHQpIHtcblx0XHRcdFx0XHRwdC5fbmV4dC5fcHJldiA9IHB0Ll9wcmV2O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChwdC5fcHJldikge1xuXHRcdFx0XHRcdHB0Ll9wcmV2Ll9uZXh0ID0gcHQuX25leHQ7XG5cdFx0XHRcdH0gZWxzZSBpZiAodGhpcy5fZmlyc3RQVCA9PT0gcHQpIHtcblx0XHRcdFx0XHR0aGlzLl9maXJzdFBUID0gcHQuX25leHQ7XG5cdFx0XHRcdFx0cmVtb3ZlID0gdHJ1ZTsgLy9qdXN0IHRvIHByZXZlbnQgcmVzZXR0aW5nIHRoaXMuX2ZpcnN0UFQgNSBsaW5lcyBkb3duIGluIGNhc2UgcHQuX25leHQgaXMgbnVsbC4gKG9wdGltaXplZCBmb3Igc3BlZWQpXG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHByZXYpIHtcblx0XHRcdFx0XHRwcmV2Ll9uZXh0ID0gcHQ7XG5cdFx0XHRcdH0gZWxzZSBpZiAoIXJlbW92ZSAmJiB0aGlzLl9maXJzdFBUID09PSBudWxsKSB7XG5cdFx0XHRcdFx0dGhpcy5fZmlyc3RQVCA9IHB0O1xuXHRcdFx0XHR9XG5cdFx0XHRcdHB0Ll9uZXh0ID0gbmV4dDtcblx0XHRcdFx0cHQuX3ByZXYgPSBwcmV2O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHB0O1xuXHRcdH07XG5cblx0XHQvL3dlIG5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgaWYgYWxwaGEgb3IgYXV0b0FscGhhIGlzIGtpbGxlZCwgb3BhY2l0eSBpcyB0b28uIEFuZCBhdXRvQWxwaGEgYWZmZWN0cyB0aGUgXCJ2aXNpYmlsaXR5XCIgcHJvcGVydHkuXG5cdFx0cC5fa2lsbCA9IGZ1bmN0aW9uKGxvb2t1cCkge1xuXHRcdFx0dmFyIGNvcHkgPSBsb29rdXAsXG5cdFx0XHRcdHB0LCBwLCB4Zmlyc3Q7XG5cdFx0XHRpZiAobG9va3VwLmF1dG9BbHBoYSB8fCBsb29rdXAuYWxwaGEpIHtcblx0XHRcdFx0Y29weSA9IHt9O1xuXHRcdFx0XHRmb3IgKHAgaW4gbG9va3VwKSB7IC8vY29weSB0aGUgbG9va3VwIHNvIHRoYXQgd2UncmUgbm90IGNoYW5naW5nIHRoZSBvcmlnaW5hbCB3aGljaCBtYXkgYmUgcGFzc2VkIGVsc2V3aGVyZS5cblx0XHRcdFx0XHRjb3B5W3BdID0gbG9va3VwW3BdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvcHkub3BhY2l0eSA9IDE7XG5cdFx0XHRcdGlmIChjb3B5LmF1dG9BbHBoYSkge1xuXHRcdFx0XHRcdGNvcHkudmlzaWJpbGl0eSA9IDE7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmIChsb29rdXAuY2xhc3NOYW1lICYmIChwdCA9IHRoaXMuX2NsYXNzTmFtZVBUKSkgeyAvL2ZvciBjbGFzc05hbWUgdHdlZW5zLCB3ZSBuZWVkIHRvIGtpbGwgYW55IGFzc29jaWF0ZWQgQ1NTUHJvcFR3ZWVucyB0b287IGEgbGlua2VkIGxpc3Qgc3RhcnRzIGF0IHRoZSBjbGFzc05hbWUncyBcInhmaXJzdFwiLlxuXHRcdFx0XHR4Zmlyc3QgPSBwdC54Zmlyc3Q7XG5cdFx0XHRcdGlmICh4Zmlyc3QgJiYgeGZpcnN0Ll9wcmV2KSB7XG5cdFx0XHRcdFx0dGhpcy5fbGlua0NTU1AoeGZpcnN0Ll9wcmV2LCBwdC5fbmV4dCwgeGZpcnN0Ll9wcmV2Ll9wcmV2KTsgLy9icmVhayBvZmYgdGhlIHByZXZcblx0XHRcdFx0fSBlbHNlIGlmICh4Zmlyc3QgPT09IHRoaXMuX2ZpcnN0UFQpIHtcblx0XHRcdFx0XHR0aGlzLl9maXJzdFBUID0gcHQuX25leHQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHB0Ll9uZXh0KSB7XG5cdFx0XHRcdFx0dGhpcy5fbGlua0NTU1AocHQuX25leHQsIHB0Ll9uZXh0Ll9uZXh0LCB4Zmlyc3QuX3ByZXYpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuX2NsYXNzTmFtZVBUID0gbnVsbDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBUd2VlblBsdWdpbi5wcm90b3R5cGUuX2tpbGwuY2FsbCh0aGlzLCBjb3B5KTtcblx0XHR9O1xuXG5cblxuXHRcdC8vdXNlZCBieSBjYXNjYWRlVG8oKSBmb3IgZ2F0aGVyaW5nIGFsbCB0aGUgc3R5bGUgcHJvcGVydGllcyBvZiBlYWNoIGNoaWxkIGVsZW1lbnQgaW50byBhbiBhcnJheSBmb3IgY29tcGFyaXNvbi5cblx0XHR2YXIgX2dldENoaWxkU3R5bGVzID0gZnVuY3Rpb24oZSwgcHJvcHMsIHRhcmdldHMpIHtcblx0XHRcdFx0dmFyIGNoaWxkcmVuLCBpLCBjaGlsZCwgdHlwZTtcblx0XHRcdFx0aWYgKGUuc2xpY2UpIHtcblx0XHRcdFx0XHRpID0gZS5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0XHRfZ2V0Q2hpbGRTdHlsZXMoZVtpXSwgcHJvcHMsIHRhcmdldHMpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0Y2hpbGRyZW4gPSBlLmNoaWxkTm9kZXM7XG5cdFx0XHRcdGkgPSBjaGlsZHJlbi5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdGNoaWxkID0gY2hpbGRyZW5baV07XG5cdFx0XHRcdFx0dHlwZSA9IGNoaWxkLnR5cGU7XG5cdFx0XHRcdFx0aWYgKGNoaWxkLnN0eWxlKSB7XG5cdFx0XHRcdFx0XHRwcm9wcy5wdXNoKF9nZXRBbGxTdHlsZXMoY2hpbGQpKTtcblx0XHRcdFx0XHRcdGlmICh0YXJnZXRzKSB7XG5cdFx0XHRcdFx0XHRcdHRhcmdldHMucHVzaChjaGlsZCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICgodHlwZSA9PT0gMSB8fCB0eXBlID09PSA5IHx8IHR5cGUgPT09IDExKSAmJiBjaGlsZC5jaGlsZE5vZGVzLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0X2dldENoaWxkU3R5bGVzKGNoaWxkLCBwcm9wcywgdGFyZ2V0cyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogVHlwaWNhbGx5IG9ubHkgdXNlZnVsIGZvciBjbGFzc05hbWUgdHdlZW5zIHRoYXQgbWF5IGFmZmVjdCBjaGlsZCBlbGVtZW50cywgdGhpcyBtZXRob2QgY3JlYXRlcyBhIFR3ZWVuTGl0ZVxuXHRcdCAqIGFuZCB0aGVuIGNvbXBhcmVzIHRoZSBzdHlsZSBwcm9wZXJ0aWVzIG9mIGFsbCB0aGUgdGFyZ2V0J3MgY2hpbGQgZWxlbWVudHMgYXQgdGhlIHR3ZWVuJ3Mgc3RhcnQgYW5kIGVuZCwgYW5kXG5cdFx0ICogaWYgYW55IGFyZSBkaWZmZXJlbnQsIGl0IGFsc28gY3JlYXRlcyB0d2VlbnMgZm9yIHRob3NlIGFuZCByZXR1cm5zIGFuIGFycmF5IGNvbnRhaW5pbmcgQUxMIG9mIHRoZSByZXN1bHRpbmdcblx0XHQgKiB0d2VlbnMgKHNvIHRoYXQgeW91IGNhbiBlYXNpbHkgYWRkKCkgdGhlbSB0byBhIFRpbWVsaW5lTGl0ZSwgZm9yIGV4YW1wbGUpLiBUaGUgcmVhc29uIHRoaXMgZnVuY3Rpb25hbGl0eSBpc1xuXHRcdCAqIHdyYXBwZWQgaW50byBhIHNlcGFyYXRlIHN0YXRpYyBtZXRob2Qgb2YgQ1NTUGx1Z2luIGluc3RlYWQgb2YgYmVpbmcgaW50ZWdyYXRlZCBpbnRvIGFsbCByZWd1bGFyIGNsYXNzTmFtZSB0d2VlbnNcblx0XHQgKiBpcyBiZWNhdXNlIGl0IGNyZWF0ZXMgZW50aXJlbHkgbmV3IHR3ZWVucyB0aGF0IG1heSBoYXZlIGNvbXBsZXRlbHkgZGlmZmVyZW50IHRhcmdldHMgdGhhbiB0aGUgb3JpZ2luYWwgdHdlZW4sXG5cdFx0ICogc28gaWYgdGhleSB3ZXJlIGFsbCBsdW1wZWQgaW50byB0aGUgb3JpZ2luYWwgdHdlZW4gaW5zdGFuY2UsIGl0IHdvdWxkIGJlIGluY29uc2lzdGVudCB3aXRoIHRoZSByZXN0IG9mIHRoZSBBUElcblx0XHQgKiBhbmQgaXQgd291bGQgY3JlYXRlIG90aGVyIHByb2JsZW1zLiBGb3IgZXhhbXBsZTpcblx0XHQgKiAgLSBJZiBJIGNyZWF0ZSBhIHR3ZWVuIG9mIGVsZW1lbnRBLCB0aGF0IHR3ZWVuIGluc3RhbmNlIG1heSBzdWRkZW5seSBjaGFuZ2UgaXRzIHRhcmdldCB0byBpbmNsdWRlIDUwIG90aGVyIGVsZW1lbnRzICh1bmludHVpdGl2ZSBpZiBJIHNwZWNpZmljYWxseSBkZWZpbmVkIHRoZSB0YXJnZXQgSSB3YW50ZWQpXG5cdFx0ICogIC0gV2UgY2FuJ3QganVzdCBjcmVhdGUgbmV3IGluZGVwZW5kZW50IHR3ZWVucyBiZWNhdXNlIG90aGVyd2lzZSwgd2hhdCBoYXBwZW5zIGlmIHRoZSBvcmlnaW5hbC9wYXJlbnQgdHdlZW4gaXMgcmV2ZXJzZWQgb3IgcGF1c2Ugb3IgZHJvcHBlZCBpbnRvIGEgVGltZWxpbmVMaXRlIGZvciB0aWdodCBjb250cm9sPyBZb3UnZCBleHBlY3QgdGhhdCB0d2VlbidzIGJlaGF2aW9yIHRvIGFmZmVjdCBhbGwgdGhlIG90aGVycy5cblx0XHQgKiAgLSBBbmFseXppbmcgZXZlcnkgc3R5bGUgcHJvcGVydHkgb2YgZXZlcnkgY2hpbGQgYmVmb3JlIGFuZCBhZnRlciB0aGUgdHdlZW4gaXMgYW4gZXhwZW5zaXZlIG9wZXJhdGlvbiB3aGVuIHRoZXJlIGFyZSBtYW55IGNoaWxkcmVuLCBzbyB0aGlzIGJlaGF2aW9yIHNob3VsZG4ndCBiZSBpbXBvc2VkIG9uIGFsbCBjbGFzc05hbWUgdHdlZW5zIGJ5IGRlZmF1bHQsIGVzcGVjaWFsbHkgc2luY2UgaXQncyBwcm9iYWJseSByYXJlIHRoYXQgdGhpcyBleHRyYSBmdW5jdGlvbmFsaXR5IGlzIG5lZWRlZC5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXQgb2JqZWN0IHRvIGJlIHR3ZWVuZWRcblx0XHQgKiBAcGFyYW0ge251bWJlcn0gRHVyYXRpb24gaW4gc2Vjb25kcyAob3IgZnJhbWVzIGZvciBmcmFtZXMtYmFzZWQgdHdlZW5zKVxuXHRcdCAqIEBwYXJhbSB7T2JqZWN0fSBPYmplY3QgY29udGFpbmluZyB0aGUgZW5kIHZhbHVlcywgbGlrZSB7Y2xhc3NOYW1lOlwibmV3Q2xhc3NcIiwgZWFzZTpMaW5lYXIuZWFzZU5vbmV9XG5cdFx0ICogQHJldHVybiB7QXJyYXl9IEFuIGFycmF5IG9mIFR3ZWVuTGl0ZSBpbnN0YW5jZXNcblx0XHQgKi9cblx0XHRDU1NQbHVnaW4uY2FzY2FkZVRvID0gZnVuY3Rpb24odGFyZ2V0LCBkdXJhdGlvbiwgdmFycykge1xuXHRcdFx0dmFyIHR3ZWVuID0gVHdlZW5MaXRlLnRvKHRhcmdldCwgZHVyYXRpb24sIHZhcnMpLFxuXHRcdFx0XHRyZXN1bHRzID0gW3R3ZWVuXSxcblx0XHRcdFx0YiA9IFtdLFxuXHRcdFx0XHRlID0gW10sXG5cdFx0XHRcdHRhcmdldHMgPSBbXSxcblx0XHRcdFx0X3Jlc2VydmVkUHJvcHMgPSBUd2VlbkxpdGUuX2ludGVybmFscy5yZXNlcnZlZFByb3BzLFxuXHRcdFx0XHRpLCBkaWZzLCBwLCBmcm9tO1xuXHRcdFx0dGFyZ2V0ID0gdHdlZW4uX3RhcmdldHMgfHwgdHdlZW4udGFyZ2V0O1xuXHRcdFx0X2dldENoaWxkU3R5bGVzKHRhcmdldCwgYiwgdGFyZ2V0cyk7XG5cdFx0XHR0d2Vlbi5yZW5kZXIoZHVyYXRpb24sIHRydWUsIHRydWUpO1xuXHRcdFx0X2dldENoaWxkU3R5bGVzKHRhcmdldCwgZSk7XG5cdFx0XHR0d2Vlbi5yZW5kZXIoMCwgdHJ1ZSwgdHJ1ZSk7XG5cdFx0XHR0d2Vlbi5fZW5hYmxlZCh0cnVlKTtcblx0XHRcdGkgPSB0YXJnZXRzLmxlbmd0aDtcblx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRkaWZzID0gX2Nzc0RpZih0YXJnZXRzW2ldLCBiW2ldLCBlW2ldKTtcblx0XHRcdFx0aWYgKGRpZnMuZmlyc3RNUFQpIHtcblx0XHRcdFx0XHRkaWZzID0gZGlmcy5kaWZzO1xuXHRcdFx0XHRcdGZvciAocCBpbiB2YXJzKSB7XG5cdFx0XHRcdFx0XHRpZiAoX3Jlc2VydmVkUHJvcHNbcF0pIHtcblx0XHRcdFx0XHRcdFx0ZGlmc1twXSA9IHZhcnNbcF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGZyb20gPSB7fTtcblx0XHRcdFx0XHRmb3IgKHAgaW4gZGlmcykge1xuXHRcdFx0XHRcdFx0ZnJvbVtwXSA9IGJbaV1bcF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJlc3VsdHMucHVzaChUd2VlbkxpdGUuZnJvbVRvKHRhcmdldHNbaV0sIGR1cmF0aW9uLCBmcm9tLCBkaWZzKSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdH07XG5cblx0XHRUd2VlblBsdWdpbi5hY3RpdmF0ZShbQ1NTUGx1Z2luXSk7XG5cdFx0cmV0dXJuIENTU1BsdWdpbjtcblxuXHR9LCB0cnVlKTtcblxuXHRcblx0XG5cdFxuXHRcblx0XG5cdFxuXHRcblx0XG5cdFxuXHRcbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBSb3VuZFByb3BzUGx1Z2luXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblx0KGZ1bmN0aW9uKCkge1xuXG5cdFx0dmFyIFJvdW5kUHJvcHNQbHVnaW4gPSBfZ3NTY29wZS5fZ3NEZWZpbmUucGx1Z2luKHtcblx0XHRcdFx0cHJvcE5hbWU6IFwicm91bmRQcm9wc1wiLFxuXHRcdFx0XHR2ZXJzaW9uOiBcIjEuNVwiLFxuXHRcdFx0XHRwcmlvcml0eTogLTEsXG5cdFx0XHRcdEFQSTogMixcblxuXHRcdFx0XHQvL2NhbGxlZCB3aGVuIHRoZSB0d2VlbiByZW5kZXJzIGZvciB0aGUgZmlyc3QgdGltZS4gVGhpcyBpcyB3aGVyZSBpbml0aWFsIHZhbHVlcyBzaG91bGQgYmUgcmVjb3JkZWQgYW5kIGFueSBzZXR1cCByb3V0aW5lcyBzaG91bGQgcnVuLlxuXHRcdFx0XHRpbml0OiBmdW5jdGlvbih0YXJnZXQsIHZhbHVlLCB0d2Vlbikge1xuXHRcdFx0XHRcdHRoaXMuX3R3ZWVuID0gdHdlZW47XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0fSksXG5cdFx0XHRfcm91bmRMaW5rZWRMaXN0ID0gZnVuY3Rpb24obm9kZSkge1xuXHRcdFx0XHR3aGlsZSAobm9kZSkge1xuXHRcdFx0XHRcdGlmICghbm9kZS5mICYmICFub2RlLmJsb2IpIHtcblx0XHRcdFx0XHRcdG5vZGUuciA9IDE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG5vZGUgPSBub2RlLl9uZXh0O1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0cCA9IFJvdW5kUHJvcHNQbHVnaW4ucHJvdG90eXBlO1xuXG5cdFx0cC5fb25Jbml0QWxsUHJvcHMgPSBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0d2VlbiA9IHRoaXMuX3R3ZWVuLFxuXHRcdFx0XHRycCA9ICh0d2Vlbi52YXJzLnJvdW5kUHJvcHMuam9pbikgPyB0d2Vlbi52YXJzLnJvdW5kUHJvcHMgOiB0d2Vlbi52YXJzLnJvdW5kUHJvcHMuc3BsaXQoXCIsXCIpLFxuXHRcdFx0XHRpID0gcnAubGVuZ3RoLFxuXHRcdFx0XHRsb29rdXAgPSB7fSxcblx0XHRcdFx0cnB0ID0gdHdlZW4uX3Byb3BMb29rdXAucm91bmRQcm9wcyxcblx0XHRcdFx0cHJvcCwgcHQsIG5leHQ7XG5cdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0bG9va3VwW3JwW2ldXSA9IDE7XG5cdFx0XHR9XG5cdFx0XHRpID0gcnAubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdHByb3AgPSBycFtpXTtcblx0XHRcdFx0cHQgPSB0d2Vlbi5fZmlyc3RQVDtcblx0XHRcdFx0d2hpbGUgKHB0KSB7XG5cdFx0XHRcdFx0bmV4dCA9IHB0Ll9uZXh0OyAvL3JlY29yZCBoZXJlLCBiZWNhdXNlIGl0IG1heSBnZXQgcmVtb3ZlZFxuXHRcdFx0XHRcdGlmIChwdC5wZykge1xuXHRcdFx0XHRcdFx0cHQudC5fcm91bmRQcm9wcyhsb29rdXAsIHRydWUpO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAocHQubiA9PT0gcHJvcCkge1xuXHRcdFx0XHRcdFx0aWYgKHB0LmYgPT09IDIgJiYgcHQudCkgeyAvL2EgYmxvYiAodGV4dCBjb250YWluaW5nIG11bHRpcGxlIG51bWVyaWMgdmFsdWVzKVxuXHRcdFx0XHRcdFx0XHRfcm91bmRMaW5rZWRMaXN0KHB0LnQuX2ZpcnN0UFQpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0dGhpcy5fYWRkKHB0LnQsIHByb3AsIHB0LnMsIHB0LmMpO1xuXHRcdFx0XHRcdFx0XHQvL3JlbW92ZSBmcm9tIGxpbmtlZCBsaXN0XG5cdFx0XHRcdFx0XHRcdGlmIChuZXh0KSB7XG5cdFx0XHRcdFx0XHRcdFx0bmV4dC5fcHJldiA9IHB0Ll9wcmV2O1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGlmIChwdC5fcHJldikge1xuXHRcdFx0XHRcdFx0XHRcdHB0Ll9wcmV2Ll9uZXh0ID0gbmV4dDtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICh0d2Vlbi5fZmlyc3RQVCA9PT0gcHQpIHtcblx0XHRcdFx0XHRcdFx0XHR0d2Vlbi5fZmlyc3RQVCA9IG5leHQ7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cHQuX25leHQgPSBwdC5fcHJldiA9IG51bGw7XG5cdFx0XHRcdFx0XHRcdHR3ZWVuLl9wcm9wTG9va3VwW3Byb3BdID0gcnB0O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwdCA9IG5leHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXG5cdFx0cC5fYWRkID0gZnVuY3Rpb24odGFyZ2V0LCBwLCBzLCBjKSB7XG5cdFx0XHR0aGlzLl9hZGRUd2Vlbih0YXJnZXQsIHAsIHMsIHMgKyBjLCBwLCB0cnVlKTtcblx0XHRcdHRoaXMuX292ZXJ3cml0ZVByb3BzLnB1c2gocCk7XG5cdFx0fTtcblxuXHR9KCkpO1xuXG5cblxuXG5cblxuXG5cblxuXG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQXR0clBsdWdpblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cblx0KGZ1bmN0aW9uKCkge1xuXG5cdFx0X2dzU2NvcGUuX2dzRGVmaW5lLnBsdWdpbih7XG5cdFx0XHRwcm9wTmFtZTogXCJhdHRyXCIsXG5cdFx0XHRBUEk6IDIsXG5cdFx0XHR2ZXJzaW9uOiBcIjAuNS4wXCIsXG5cblx0XHRcdC8vY2FsbGVkIHdoZW4gdGhlIHR3ZWVuIHJlbmRlcnMgZm9yIHRoZSBmaXJzdCB0aW1lLiBUaGlzIGlzIHdoZXJlIGluaXRpYWwgdmFsdWVzIHNob3VsZCBiZSByZWNvcmRlZCBhbmQgYW55IHNldHVwIHJvdXRpbmVzIHNob3VsZCBydW4uXG5cdFx0XHRpbml0OiBmdW5jdGlvbih0YXJnZXQsIHZhbHVlLCB0d2Vlbikge1xuXHRcdFx0XHR2YXIgcDtcblx0XHRcdFx0aWYgKHR5cGVvZih0YXJnZXQuc2V0QXR0cmlidXRlKSAhPT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGZvciAocCBpbiB2YWx1ZSkge1xuXHRcdFx0XHRcdHRoaXMuX2FkZFR3ZWVuKHRhcmdldCwgXCJzZXRBdHRyaWJ1dGVcIiwgdGFyZ2V0LmdldEF0dHJpYnV0ZShwKSArIFwiXCIsIHZhbHVlW3BdICsgXCJcIiwgcCwgZmFsc2UsIHApO1xuXHRcdFx0XHRcdHRoaXMuX292ZXJ3cml0ZVByb3BzLnB1c2gocCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cblx0XHR9KTtcblxuXHR9KCkpO1xuXG5cblxuXG5cblxuXG5cblxuXG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogRGlyZWN0aW9uYWxSb3RhdGlvblBsdWdpblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cdF9nc1Njb3BlLl9nc0RlZmluZS5wbHVnaW4oe1xuXHRcdHByb3BOYW1lOiBcImRpcmVjdGlvbmFsUm90YXRpb25cIixcblx0XHR2ZXJzaW9uOiBcIjAuMi4xXCIsXG5cdFx0QVBJOiAyLFxuXG5cdFx0Ly9jYWxsZWQgd2hlbiB0aGUgdHdlZW4gcmVuZGVycyBmb3IgdGhlIGZpcnN0IHRpbWUuIFRoaXMgaXMgd2hlcmUgaW5pdGlhbCB2YWx1ZXMgc2hvdWxkIGJlIHJlY29yZGVkIGFuZCBhbnkgc2V0dXAgcm91dGluZXMgc2hvdWxkIHJ1bi5cblx0XHRpbml0OiBmdW5jdGlvbih0YXJnZXQsIHZhbHVlLCB0d2Vlbikge1xuXHRcdFx0aWYgKHR5cGVvZih2YWx1ZSkgIT09IFwib2JqZWN0XCIpIHtcblx0XHRcdFx0dmFsdWUgPSB7cm90YXRpb246dmFsdWV9O1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5maW5hbHMgPSB7fTtcblx0XHRcdHZhciBjYXAgPSAodmFsdWUudXNlUmFkaWFucyA9PT0gdHJ1ZSkgPyBNYXRoLlBJICogMiA6IDM2MCxcblx0XHRcdFx0bWluID0gMC4wMDAwMDEsXG5cdFx0XHRcdHAsIHYsIHN0YXJ0LCBlbmQsIGRpZiwgc3BsaXQ7XG5cdFx0XHRmb3IgKHAgaW4gdmFsdWUpIHtcblx0XHRcdFx0aWYgKHAgIT09IFwidXNlUmFkaWFuc1wiKSB7XG5cdFx0XHRcdFx0c3BsaXQgPSAodmFsdWVbcF0gKyBcIlwiKS5zcGxpdChcIl9cIik7XG5cdFx0XHRcdFx0diA9IHNwbGl0WzBdO1xuXHRcdFx0XHRcdHN0YXJ0ID0gcGFyc2VGbG9hdCggKHR5cGVvZih0YXJnZXRbcF0pICE9PSBcImZ1bmN0aW9uXCIpID8gdGFyZ2V0W3BdIDogdGFyZ2V0WyAoKHAuaW5kZXhPZihcInNldFwiKSB8fCB0eXBlb2YodGFyZ2V0W1wiZ2V0XCIgKyBwLnN1YnN0cigzKV0pICE9PSBcImZ1bmN0aW9uXCIpID8gcCA6IFwiZ2V0XCIgKyBwLnN1YnN0cigzKSkgXSgpICk7XG5cdFx0XHRcdFx0ZW5kID0gdGhpcy5maW5hbHNbcF0gPSAodHlwZW9mKHYpID09PSBcInN0cmluZ1wiICYmIHYuY2hhckF0KDEpID09PSBcIj1cIikgPyBzdGFydCArIHBhcnNlSW50KHYuY2hhckF0KDApICsgXCIxXCIsIDEwKSAqIE51bWJlcih2LnN1YnN0cigyKSkgOiBOdW1iZXIodikgfHwgMDtcblx0XHRcdFx0XHRkaWYgPSBlbmQgLSBzdGFydDtcblx0XHRcdFx0XHRpZiAoc3BsaXQubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHR2ID0gc3BsaXQuam9pbihcIl9cIik7XG5cdFx0XHRcdFx0XHRpZiAodi5pbmRleE9mKFwic2hvcnRcIikgIT09IC0xKSB7XG5cdFx0XHRcdFx0XHRcdGRpZiA9IGRpZiAlIGNhcDtcblx0XHRcdFx0XHRcdFx0aWYgKGRpZiAhPT0gZGlmICUgKGNhcCAvIDIpKSB7XG5cdFx0XHRcdFx0XHRcdFx0ZGlmID0gKGRpZiA8IDApID8gZGlmICsgY2FwIDogZGlmIC0gY2FwO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAodi5pbmRleE9mKFwiX2N3XCIpICE9PSAtMSAmJiBkaWYgPCAwKSB7XG5cdFx0XHRcdFx0XHRcdGRpZiA9ICgoZGlmICsgY2FwICogOTk5OTk5OTk5OSkgJSBjYXApIC0gKChkaWYgLyBjYXApIHwgMCkgKiBjYXA7XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKHYuaW5kZXhPZihcImNjd1wiKSAhPT0gLTEgJiYgZGlmID4gMCkge1xuXHRcdFx0XHRcdFx0XHRkaWYgPSAoKGRpZiAtIGNhcCAqIDk5OTk5OTk5OTkpICUgY2FwKSAtICgoZGlmIC8gY2FwKSB8IDApICogY2FwO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoZGlmID4gbWluIHx8IGRpZiA8IC1taW4pIHtcblx0XHRcdFx0XHRcdHRoaXMuX2FkZFR3ZWVuKHRhcmdldCwgcCwgc3RhcnQsIHN0YXJ0ICsgZGlmLCBwKTtcblx0XHRcdFx0XHRcdHRoaXMuX292ZXJ3cml0ZVByb3BzLnB1c2gocCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly9jYWxsZWQgZWFjaCB0aW1lIHRoZSB2YWx1ZXMgc2hvdWxkIGJlIHVwZGF0ZWQsIGFuZCB0aGUgcmF0aW8gZ2V0cyBwYXNzZWQgYXMgdGhlIG9ubHkgcGFyYW1ldGVyICh0eXBpY2FsbHkgaXQncyBhIHZhbHVlIGJldHdlZW4gMCBhbmQgMSwgYnV0IGl0IGNhbiBleGNlZWQgdGhvc2Ugd2hlbiB1c2luZyBhbiBlYXNlIGxpa2UgRWxhc3RpYy5lYXNlT3V0IG9yIEJhY2suZWFzZU91dCwgZXRjLilcblx0XHRzZXQ6IGZ1bmN0aW9uKHJhdGlvKSB7XG5cdFx0XHR2YXIgcHQ7XG5cdFx0XHRpZiAocmF0aW8gIT09IDEpIHtcblx0XHRcdFx0dGhpcy5fc3VwZXIuc2V0UmF0aW8uY2FsbCh0aGlzLCByYXRpbyk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdCA9IHRoaXMuX2ZpcnN0UFQ7XG5cdFx0XHRcdHdoaWxlIChwdCkge1xuXHRcdFx0XHRcdGlmIChwdC5mKSB7XG5cdFx0XHRcdFx0XHRwdC50W3B0LnBdKHRoaXMuZmluYWxzW3B0LnBdKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cHQudFtwdC5wXSA9IHRoaXMuZmluYWxzW3B0LnBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwdCA9IHB0Ll9uZXh0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdH0pLl9hdXRvQ1NTID0gdHJ1ZTtcblxuXG5cblxuXG5cblxuXHRcblx0XG5cdFxuXHRcbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBFYXNlUGFja1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cdF9nc1Njb3BlLl9nc0RlZmluZShcImVhc2luZy5CYWNrXCIsIFtcImVhc2luZy5FYXNlXCJdLCBmdW5jdGlvbihFYXNlKSB7XG5cdFx0XG5cdFx0dmFyIHcgPSAoX2dzU2NvcGUuR3JlZW5Tb2NrR2xvYmFscyB8fCBfZ3NTY29wZSksXG5cdFx0XHRncyA9IHcuY29tLmdyZWVuc29jayxcblx0XHRcdF8yUEkgPSBNYXRoLlBJICogMixcblx0XHRcdF9IQUxGX1BJID0gTWF0aC5QSSAvIDIsXG5cdFx0XHRfY2xhc3MgPSBncy5fY2xhc3MsXG5cdFx0XHRfY3JlYXRlID0gZnVuY3Rpb24obiwgZikge1xuXHRcdFx0XHR2YXIgQyA9IF9jbGFzcyhcImVhc2luZy5cIiArIG4sIGZ1bmN0aW9uKCl7fSwgdHJ1ZSksXG5cdFx0XHRcdFx0cCA9IEMucHJvdG90eXBlID0gbmV3IEVhc2UoKTtcblx0XHRcdFx0cC5jb25zdHJ1Y3RvciA9IEM7XG5cdFx0XHRcdHAuZ2V0UmF0aW8gPSBmO1xuXHRcdFx0XHRyZXR1cm4gQztcblx0XHRcdH0sXG5cdFx0XHRfZWFzZVJlZyA9IEVhc2UucmVnaXN0ZXIgfHwgZnVuY3Rpb24oKXt9LCAvL3B1dCBhbiBlbXB0eSBmdW5jdGlvbiBpbiBwbGFjZSBqdXN0IGFzIGEgc2FmZXR5IG1lYXN1cmUgaW4gY2FzZSBzb21lb25lIGxvYWRzIGFuIE9MRCB2ZXJzaW9uIG9mIFR3ZWVuTGl0ZS5qcyB3aGVyZSBFYXNlLnJlZ2lzdGVyIGRvZXNuJ3QgZXhpc3QuXG5cdFx0XHRfd3JhcCA9IGZ1bmN0aW9uKG5hbWUsIEVhc2VPdXQsIEVhc2VJbiwgRWFzZUluT3V0LCBhbGlhc2VzKSB7XG5cdFx0XHRcdHZhciBDID0gX2NsYXNzKFwiZWFzaW5nLlwiK25hbWUsIHtcblx0XHRcdFx0XHRlYXNlT3V0Om5ldyBFYXNlT3V0KCksXG5cdFx0XHRcdFx0ZWFzZUluOm5ldyBFYXNlSW4oKSxcblx0XHRcdFx0XHRlYXNlSW5PdXQ6bmV3IEVhc2VJbk91dCgpXG5cdFx0XHRcdH0sIHRydWUpO1xuXHRcdFx0XHRfZWFzZVJlZyhDLCBuYW1lKTtcblx0XHRcdFx0cmV0dXJuIEM7XG5cdFx0XHR9LFxuXHRcdFx0RWFzZVBvaW50ID0gZnVuY3Rpb24odGltZSwgdmFsdWUsIG5leHQpIHtcblx0XHRcdFx0dGhpcy50ID0gdGltZTtcblx0XHRcdFx0dGhpcy52ID0gdmFsdWU7XG5cdFx0XHRcdGlmIChuZXh0KSB7XG5cdFx0XHRcdFx0dGhpcy5uZXh0ID0gbmV4dDtcblx0XHRcdFx0XHRuZXh0LnByZXYgPSB0aGlzO1xuXHRcdFx0XHRcdHRoaXMuYyA9IG5leHQudiAtIHZhbHVlO1xuXHRcdFx0XHRcdHRoaXMuZ2FwID0gbmV4dC50IC0gdGltZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0Ly9CYWNrXG5cdFx0XHRfY3JlYXRlQmFjayA9IGZ1bmN0aW9uKG4sIGYpIHtcblx0XHRcdFx0dmFyIEMgPSBfY2xhc3MoXCJlYXNpbmcuXCIgKyBuLCBmdW5jdGlvbihvdmVyc2hvb3QpIHtcblx0XHRcdFx0XHRcdHRoaXMuX3AxID0gKG92ZXJzaG9vdCB8fCBvdmVyc2hvb3QgPT09IDApID8gb3ZlcnNob290IDogMS43MDE1ODtcblx0XHRcdFx0XHRcdHRoaXMuX3AyID0gdGhpcy5fcDEgKiAxLjUyNTtcblx0XHRcdFx0XHR9LCB0cnVlKSxcblx0XHRcdFx0XHRwID0gQy5wcm90b3R5cGUgPSBuZXcgRWFzZSgpO1xuXHRcdFx0XHRwLmNvbnN0cnVjdG9yID0gQztcblx0XHRcdFx0cC5nZXRSYXRpbyA9IGY7XG5cdFx0XHRcdHAuY29uZmlnID0gZnVuY3Rpb24ob3ZlcnNob290KSB7XG5cdFx0XHRcdFx0cmV0dXJuIG5ldyBDKG92ZXJzaG9vdCk7XG5cdFx0XHRcdH07XG5cdFx0XHRcdHJldHVybiBDO1xuXHRcdFx0fSxcblxuXHRcdFx0QmFjayA9IF93cmFwKFwiQmFja1wiLFxuXHRcdFx0XHRfY3JlYXRlQmFjayhcIkJhY2tPdXRcIiwgZnVuY3Rpb24ocCkge1xuXHRcdFx0XHRcdHJldHVybiAoKHAgPSBwIC0gMSkgKiBwICogKCh0aGlzLl9wMSArIDEpICogcCArIHRoaXMuX3AxKSArIDEpO1xuXHRcdFx0XHR9KSxcblx0XHRcdFx0X2NyZWF0ZUJhY2soXCJCYWNrSW5cIiwgZnVuY3Rpb24ocCkge1xuXHRcdFx0XHRcdHJldHVybiBwICogcCAqICgodGhpcy5fcDEgKyAxKSAqIHAgLSB0aGlzLl9wMSk7XG5cdFx0XHRcdH0pLFxuXHRcdFx0XHRfY3JlYXRlQmFjayhcIkJhY2tJbk91dFwiLCBmdW5jdGlvbihwKSB7XG5cdFx0XHRcdFx0cmV0dXJuICgocCAqPSAyKSA8IDEpID8gMC41ICogcCAqIHAgKiAoKHRoaXMuX3AyICsgMSkgKiBwIC0gdGhpcy5fcDIpIDogMC41ICogKChwIC09IDIpICogcCAqICgodGhpcy5fcDIgKyAxKSAqIHAgKyB0aGlzLl9wMikgKyAyKTtcblx0XHRcdFx0fSlcblx0XHRcdCksXG5cblxuXHRcdFx0Ly9TbG93TW9cblx0XHRcdFNsb3dNbyA9IF9jbGFzcyhcImVhc2luZy5TbG93TW9cIiwgZnVuY3Rpb24obGluZWFyUmF0aW8sIHBvd2VyLCB5b3lvTW9kZSkge1xuXHRcdFx0XHRwb3dlciA9IChwb3dlciB8fCBwb3dlciA9PT0gMCkgPyBwb3dlciA6IDAuNztcblx0XHRcdFx0aWYgKGxpbmVhclJhdGlvID09IG51bGwpIHtcblx0XHRcdFx0XHRsaW5lYXJSYXRpbyA9IDAuNztcblx0XHRcdFx0fSBlbHNlIGlmIChsaW5lYXJSYXRpbyA+IDEpIHtcblx0XHRcdFx0XHRsaW5lYXJSYXRpbyA9IDE7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy5fcCA9IChsaW5lYXJSYXRpbyAhPT0gMSkgPyBwb3dlciA6IDA7XG5cdFx0XHRcdHRoaXMuX3AxID0gKDEgLSBsaW5lYXJSYXRpbykgLyAyO1xuXHRcdFx0XHR0aGlzLl9wMiA9IGxpbmVhclJhdGlvO1xuXHRcdFx0XHR0aGlzLl9wMyA9IHRoaXMuX3AxICsgdGhpcy5fcDI7XG5cdFx0XHRcdHRoaXMuX2NhbGNFbmQgPSAoeW95b01vZGUgPT09IHRydWUpO1xuXHRcdFx0fSwgdHJ1ZSksXG5cdFx0XHRwID0gU2xvd01vLnByb3RvdHlwZSA9IG5ldyBFYXNlKCksXG5cdFx0XHRTdGVwcGVkRWFzZSwgUm91Z2hFYXNlLCBfY3JlYXRlRWxhc3RpYztcblxuXHRcdHAuY29uc3RydWN0b3IgPSBTbG93TW87XG5cdFx0cC5nZXRSYXRpbyA9IGZ1bmN0aW9uKHApIHtcblx0XHRcdHZhciByID0gcCArICgwLjUgLSBwKSAqIHRoaXMuX3A7XG5cdFx0XHRpZiAocCA8IHRoaXMuX3AxKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLl9jYWxjRW5kID8gMSAtICgocCA9IDEgLSAocCAvIHRoaXMuX3AxKSkgKiBwKSA6IHIgLSAoKHAgPSAxIC0gKHAgLyB0aGlzLl9wMSkpICogcCAqIHAgKiBwICogcik7XG5cdFx0XHR9IGVsc2UgaWYgKHAgPiB0aGlzLl9wMykge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5fY2FsY0VuZCA/IDEgLSAocCA9IChwIC0gdGhpcy5fcDMpIC8gdGhpcy5fcDEpICogcCA6IHIgKyAoKHAgLSByKSAqIChwID0gKHAgLSB0aGlzLl9wMykgLyB0aGlzLl9wMSkgKiBwICogcCAqIHApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXMuX2NhbGNFbmQgPyAxIDogcjtcblx0XHR9O1xuXHRcdFNsb3dNby5lYXNlID0gbmV3IFNsb3dNbygwLjcsIDAuNyk7XG5cblx0XHRwLmNvbmZpZyA9IFNsb3dNby5jb25maWcgPSBmdW5jdGlvbihsaW5lYXJSYXRpbywgcG93ZXIsIHlveW9Nb2RlKSB7XG5cdFx0XHRyZXR1cm4gbmV3IFNsb3dNbyhsaW5lYXJSYXRpbywgcG93ZXIsIHlveW9Nb2RlKTtcblx0XHR9O1xuXG5cblx0XHQvL1N0ZXBwZWRFYXNlXG5cdFx0U3RlcHBlZEVhc2UgPSBfY2xhc3MoXCJlYXNpbmcuU3RlcHBlZEVhc2VcIiwgZnVuY3Rpb24oc3RlcHMpIHtcblx0XHRcdFx0c3RlcHMgPSBzdGVwcyB8fCAxO1xuXHRcdFx0XHR0aGlzLl9wMSA9IDEgLyBzdGVwcztcblx0XHRcdFx0dGhpcy5fcDIgPSBzdGVwcyArIDE7XG5cdFx0XHR9LCB0cnVlKTtcblx0XHRwID0gU3RlcHBlZEVhc2UucHJvdG90eXBlID0gbmV3IEVhc2UoKTtcblx0XHRwLmNvbnN0cnVjdG9yID0gU3RlcHBlZEVhc2U7XG5cdFx0cC5nZXRSYXRpbyA9IGZ1bmN0aW9uKHApIHtcblx0XHRcdGlmIChwIDwgMCkge1xuXHRcdFx0XHRwID0gMDtcblx0XHRcdH0gZWxzZSBpZiAocCA+PSAxKSB7XG5cdFx0XHRcdHAgPSAwLjk5OTk5OTk5OTtcblx0XHRcdH1cblx0XHRcdHJldHVybiAoKHRoaXMuX3AyICogcCkgPj4gMCkgKiB0aGlzLl9wMTtcblx0XHR9O1xuXHRcdHAuY29uZmlnID0gU3RlcHBlZEVhc2UuY29uZmlnID0gZnVuY3Rpb24oc3RlcHMpIHtcblx0XHRcdHJldHVybiBuZXcgU3RlcHBlZEVhc2Uoc3RlcHMpO1xuXHRcdH07XG5cblxuXHRcdC8vUm91Z2hFYXNlXG5cdFx0Um91Z2hFYXNlID0gX2NsYXNzKFwiZWFzaW5nLlJvdWdoRWFzZVwiLCBmdW5jdGlvbih2YXJzKSB7XG5cdFx0XHR2YXJzID0gdmFycyB8fCB7fTtcblx0XHRcdHZhciB0YXBlciA9IHZhcnMudGFwZXIgfHwgXCJub25lXCIsXG5cdFx0XHRcdGEgPSBbXSxcblx0XHRcdFx0Y250ID0gMCxcblx0XHRcdFx0cG9pbnRzID0gKHZhcnMucG9pbnRzIHx8IDIwKSB8IDAsXG5cdFx0XHRcdGkgPSBwb2ludHMsXG5cdFx0XHRcdHJhbmRvbWl6ZSA9ICh2YXJzLnJhbmRvbWl6ZSAhPT0gZmFsc2UpLFxuXHRcdFx0XHRjbGFtcCA9ICh2YXJzLmNsYW1wID09PSB0cnVlKSxcblx0XHRcdFx0dGVtcGxhdGUgPSAodmFycy50ZW1wbGF0ZSBpbnN0YW5jZW9mIEVhc2UpID8gdmFycy50ZW1wbGF0ZSA6IG51bGwsXG5cdFx0XHRcdHN0cmVuZ3RoID0gKHR5cGVvZih2YXJzLnN0cmVuZ3RoKSA9PT0gXCJudW1iZXJcIikgPyB2YXJzLnN0cmVuZ3RoICogMC40IDogMC40LFxuXHRcdFx0XHR4LCB5LCBidW1wLCBpbnZYLCBvYmosIHBudDtcblx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHR4ID0gcmFuZG9taXplID8gTWF0aC5yYW5kb20oKSA6ICgxIC8gcG9pbnRzKSAqIGk7XG5cdFx0XHRcdHkgPSB0ZW1wbGF0ZSA/IHRlbXBsYXRlLmdldFJhdGlvKHgpIDogeDtcblx0XHRcdFx0aWYgKHRhcGVyID09PSBcIm5vbmVcIikge1xuXHRcdFx0XHRcdGJ1bXAgPSBzdHJlbmd0aDtcblx0XHRcdFx0fSBlbHNlIGlmICh0YXBlciA9PT0gXCJvdXRcIikge1xuXHRcdFx0XHRcdGludlggPSAxIC0geDtcblx0XHRcdFx0XHRidW1wID0gaW52WCAqIGludlggKiBzdHJlbmd0aDtcblx0XHRcdFx0fSBlbHNlIGlmICh0YXBlciA9PT0gXCJpblwiKSB7XG5cdFx0XHRcdFx0YnVtcCA9IHggKiB4ICogc3RyZW5ndGg7XG5cdFx0XHRcdH0gZWxzZSBpZiAoeCA8IDAuNSkgeyAgLy9cImJvdGhcIiAoc3RhcnQpXG5cdFx0XHRcdFx0aW52WCA9IHggKiAyO1xuXHRcdFx0XHRcdGJ1bXAgPSBpbnZYICogaW52WCAqIDAuNSAqIHN0cmVuZ3RoO1xuXHRcdFx0XHR9IGVsc2Uge1x0XHRcdFx0Ly9cImJvdGhcIiAoZW5kKVxuXHRcdFx0XHRcdGludlggPSAoMSAtIHgpICogMjtcblx0XHRcdFx0XHRidW1wID0gaW52WCAqIGludlggKiAwLjUgKiBzdHJlbmd0aDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAocmFuZG9taXplKSB7XG5cdFx0XHRcdFx0eSArPSAoTWF0aC5yYW5kb20oKSAqIGJ1bXApIC0gKGJ1bXAgKiAwLjUpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKGkgJSAyKSB7XG5cdFx0XHRcdFx0eSArPSBidW1wICogMC41O1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHkgLT0gYnVtcCAqIDAuNTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoY2xhbXApIHtcblx0XHRcdFx0XHRpZiAoeSA+IDEpIHtcblx0XHRcdFx0XHRcdHkgPSAxO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoeSA8IDApIHtcblx0XHRcdFx0XHRcdHkgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRhW2NudCsrXSA9IHt4OngsIHk6eX07XG5cdFx0XHR9XG5cdFx0XHRhLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0XHRyZXR1cm4gYS54IC0gYi54O1xuXHRcdFx0fSk7XG5cblx0XHRcdHBudCA9IG5ldyBFYXNlUG9pbnQoMSwgMSwgbnVsbCk7XG5cdFx0XHRpID0gcG9pbnRzO1xuXHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdG9iaiA9IGFbaV07XG5cdFx0XHRcdHBudCA9IG5ldyBFYXNlUG9pbnQob2JqLngsIG9iai55LCBwbnQpO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLl9wcmV2ID0gbmV3IEVhc2VQb2ludCgwLCAwLCAocG50LnQgIT09IDApID8gcG50IDogcG50Lm5leHQpO1xuXHRcdH0sIHRydWUpO1xuXHRcdHAgPSBSb3VnaEVhc2UucHJvdG90eXBlID0gbmV3IEVhc2UoKTtcblx0XHRwLmNvbnN0cnVjdG9yID0gUm91Z2hFYXNlO1xuXHRcdHAuZ2V0UmF0aW8gPSBmdW5jdGlvbihwKSB7XG5cdFx0XHR2YXIgcG50ID0gdGhpcy5fcHJldjtcblx0XHRcdGlmIChwID4gcG50LnQpIHtcblx0XHRcdFx0d2hpbGUgKHBudC5uZXh0ICYmIHAgPj0gcG50LnQpIHtcblx0XHRcdFx0XHRwbnQgPSBwbnQubmV4dDtcblx0XHRcdFx0fVxuXHRcdFx0XHRwbnQgPSBwbnQucHJldjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdoaWxlIChwbnQucHJldiAmJiBwIDw9IHBudC50KSB7XG5cdFx0XHRcdFx0cG50ID0gcG50LnByZXY7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHRoaXMuX3ByZXYgPSBwbnQ7XG5cdFx0XHRyZXR1cm4gKHBudC52ICsgKChwIC0gcG50LnQpIC8gcG50LmdhcCkgKiBwbnQuYyk7XG5cdFx0fTtcblx0XHRwLmNvbmZpZyA9IGZ1bmN0aW9uKHZhcnMpIHtcblx0XHRcdHJldHVybiBuZXcgUm91Z2hFYXNlKHZhcnMpO1xuXHRcdH07XG5cdFx0Um91Z2hFYXNlLmVhc2UgPSBuZXcgUm91Z2hFYXNlKCk7XG5cblxuXHRcdC8vQm91bmNlXG5cdFx0X3dyYXAoXCJCb3VuY2VcIixcblx0XHRcdF9jcmVhdGUoXCJCb3VuY2VPdXRcIiwgZnVuY3Rpb24ocCkge1xuXHRcdFx0XHRpZiAocCA8IDEgLyAyLjc1KSB7XG5cdFx0XHRcdFx0cmV0dXJuIDcuNTYyNSAqIHAgKiBwO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHAgPCAyIC8gMi43NSkge1xuXHRcdFx0XHRcdHJldHVybiA3LjU2MjUgKiAocCAtPSAxLjUgLyAyLjc1KSAqIHAgKyAwLjc1O1xuXHRcdFx0XHR9IGVsc2UgaWYgKHAgPCAyLjUgLyAyLjc1KSB7XG5cdFx0XHRcdFx0cmV0dXJuIDcuNTYyNSAqIChwIC09IDIuMjUgLyAyLjc1KSAqIHAgKyAwLjkzNzU7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIDcuNTYyNSAqIChwIC09IDIuNjI1IC8gMi43NSkgKiBwICsgMC45ODQzNzU7XG5cdFx0XHR9KSxcblx0XHRcdF9jcmVhdGUoXCJCb3VuY2VJblwiLCBmdW5jdGlvbihwKSB7XG5cdFx0XHRcdGlmICgocCA9IDEgLSBwKSA8IDEgLyAyLjc1KSB7XG5cdFx0XHRcdFx0cmV0dXJuIDEgLSAoNy41NjI1ICogcCAqIHApO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHAgPCAyIC8gMi43NSkge1xuXHRcdFx0XHRcdHJldHVybiAxIC0gKDcuNTYyNSAqIChwIC09IDEuNSAvIDIuNzUpICogcCArIDAuNzUpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHAgPCAyLjUgLyAyLjc1KSB7XG5cdFx0XHRcdFx0cmV0dXJuIDEgLSAoNy41NjI1ICogKHAgLT0gMi4yNSAvIDIuNzUpICogcCArIDAuOTM3NSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIDEgLSAoNy41NjI1ICogKHAgLT0gMi42MjUgLyAyLjc1KSAqIHAgKyAwLjk4NDM3NSk7XG5cdFx0XHR9KSxcblx0XHRcdF9jcmVhdGUoXCJCb3VuY2VJbk91dFwiLCBmdW5jdGlvbihwKSB7XG5cdFx0XHRcdHZhciBpbnZlcnQgPSAocCA8IDAuNSk7XG5cdFx0XHRcdGlmIChpbnZlcnQpIHtcblx0XHRcdFx0XHRwID0gMSAtIChwICogMik7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cCA9IChwICogMikgLSAxO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChwIDwgMSAvIDIuNzUpIHtcblx0XHRcdFx0XHRwID0gNy41NjI1ICogcCAqIHA7XG5cdFx0XHRcdH0gZWxzZSBpZiAocCA8IDIgLyAyLjc1KSB7XG5cdFx0XHRcdFx0cCA9IDcuNTYyNSAqIChwIC09IDEuNSAvIDIuNzUpICogcCArIDAuNzU7XG5cdFx0XHRcdH0gZWxzZSBpZiAocCA8IDIuNSAvIDIuNzUpIHtcblx0XHRcdFx0XHRwID0gNy41NjI1ICogKHAgLT0gMi4yNSAvIDIuNzUpICogcCArIDAuOTM3NTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRwID0gNy41NjI1ICogKHAgLT0gMi42MjUgLyAyLjc1KSAqIHAgKyAwLjk4NDM3NTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gaW52ZXJ0ID8gKDEgLSBwKSAqIDAuNSA6IHAgKiAwLjUgKyAwLjU7XG5cdFx0XHR9KVxuXHRcdCk7XG5cblxuXHRcdC8vQ0lSQ1xuXHRcdF93cmFwKFwiQ2lyY1wiLFxuXHRcdFx0X2NyZWF0ZShcIkNpcmNPdXRcIiwgZnVuY3Rpb24ocCkge1xuXHRcdFx0XHRyZXR1cm4gTWF0aC5zcXJ0KDEgLSAocCA9IHAgLSAxKSAqIHApO1xuXHRcdFx0fSksXG5cdFx0XHRfY3JlYXRlKFwiQ2lyY0luXCIsIGZ1bmN0aW9uKHApIHtcblx0XHRcdFx0cmV0dXJuIC0oTWF0aC5zcXJ0KDEgLSAocCAqIHApKSAtIDEpO1xuXHRcdFx0fSksXG5cdFx0XHRfY3JlYXRlKFwiQ2lyY0luT3V0XCIsIGZ1bmN0aW9uKHApIHtcblx0XHRcdFx0cmV0dXJuICgocCo9MikgPCAxKSA/IC0wLjUgKiAoTWF0aC5zcXJ0KDEgLSBwICogcCkgLSAxKSA6IDAuNSAqIChNYXRoLnNxcnQoMSAtIChwIC09IDIpICogcCkgKyAxKTtcblx0XHRcdH0pXG5cdFx0KTtcblxuXG5cdFx0Ly9FbGFzdGljXG5cdFx0X2NyZWF0ZUVsYXN0aWMgPSBmdW5jdGlvbihuLCBmLCBkZWYpIHtcblx0XHRcdHZhciBDID0gX2NsYXNzKFwiZWFzaW5nLlwiICsgbiwgZnVuY3Rpb24oYW1wbGl0dWRlLCBwZXJpb2QpIHtcblx0XHRcdFx0XHR0aGlzLl9wMSA9IChhbXBsaXR1ZGUgPj0gMSkgPyBhbXBsaXR1ZGUgOiAxOyAvL25vdGU6IGlmIGFtcGxpdHVkZSBpcyA8IDEsIHdlIHNpbXBseSBhZGp1c3QgdGhlIHBlcmlvZCBmb3IgYSBtb3JlIG5hdHVyYWwgZmVlbC4gT3RoZXJ3aXNlIHRoZSBtYXRoIGRvZXNuJ3Qgd29yayByaWdodCBhbmQgdGhlIGN1cnZlIHN0YXJ0cyBhdCAxLlxuXHRcdFx0XHRcdHRoaXMuX3AyID0gKHBlcmlvZCB8fCBkZWYpIC8gKGFtcGxpdHVkZSA8IDEgPyBhbXBsaXR1ZGUgOiAxKTtcblx0XHRcdFx0XHR0aGlzLl9wMyA9IHRoaXMuX3AyIC8gXzJQSSAqIChNYXRoLmFzaW4oMSAvIHRoaXMuX3AxKSB8fCAwKTtcblx0XHRcdFx0XHR0aGlzLl9wMiA9IF8yUEkgLyB0aGlzLl9wMjsgLy9wcmVjYWxjdWxhdGUgdG8gb3B0aW1pemVcblx0XHRcdFx0fSwgdHJ1ZSksXG5cdFx0XHRcdHAgPSBDLnByb3RvdHlwZSA9IG5ldyBFYXNlKCk7XG5cdFx0XHRwLmNvbnN0cnVjdG9yID0gQztcblx0XHRcdHAuZ2V0UmF0aW8gPSBmO1xuXHRcdFx0cC5jb25maWcgPSBmdW5jdGlvbihhbXBsaXR1ZGUsIHBlcmlvZCkge1xuXHRcdFx0XHRyZXR1cm4gbmV3IEMoYW1wbGl0dWRlLCBwZXJpb2QpO1xuXHRcdFx0fTtcblx0XHRcdHJldHVybiBDO1xuXHRcdH07XG5cdFx0X3dyYXAoXCJFbGFzdGljXCIsXG5cdFx0XHRfY3JlYXRlRWxhc3RpYyhcIkVsYXN0aWNPdXRcIiwgZnVuY3Rpb24ocCkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5fcDEgKiBNYXRoLnBvdygyLCAtMTAgKiBwKSAqIE1hdGguc2luKCAocCAtIHRoaXMuX3AzKSAqIHRoaXMuX3AyICkgKyAxO1xuXHRcdFx0fSwgMC4zKSxcblx0XHRcdF9jcmVhdGVFbGFzdGljKFwiRWxhc3RpY0luXCIsIGZ1bmN0aW9uKHApIHtcblx0XHRcdFx0cmV0dXJuIC0odGhpcy5fcDEgKiBNYXRoLnBvdygyLCAxMCAqIChwIC09IDEpKSAqIE1hdGguc2luKCAocCAtIHRoaXMuX3AzKSAqIHRoaXMuX3AyICkpO1xuXHRcdFx0fSwgMC4zKSxcblx0XHRcdF9jcmVhdGVFbGFzdGljKFwiRWxhc3RpY0luT3V0XCIsIGZ1bmN0aW9uKHApIHtcblx0XHRcdFx0cmV0dXJuICgocCAqPSAyKSA8IDEpID8gLTAuNSAqICh0aGlzLl9wMSAqIE1hdGgucG93KDIsIDEwICogKHAgLT0gMSkpICogTWF0aC5zaW4oIChwIC0gdGhpcy5fcDMpICogdGhpcy5fcDIpKSA6IHRoaXMuX3AxICogTWF0aC5wb3coMiwgLTEwICoocCAtPSAxKSkgKiBNYXRoLnNpbiggKHAgLSB0aGlzLl9wMykgKiB0aGlzLl9wMiApICogMC41ICsgMTtcblx0XHRcdH0sIDAuNDUpXG5cdFx0KTtcblxuXG5cdFx0Ly9FeHBvXG5cdFx0X3dyYXAoXCJFeHBvXCIsXG5cdFx0XHRfY3JlYXRlKFwiRXhwb091dFwiLCBmdW5jdGlvbihwKSB7XG5cdFx0XHRcdHJldHVybiAxIC0gTWF0aC5wb3coMiwgLTEwICogcCk7XG5cdFx0XHR9KSxcblx0XHRcdF9jcmVhdGUoXCJFeHBvSW5cIiwgZnVuY3Rpb24ocCkge1xuXHRcdFx0XHRyZXR1cm4gTWF0aC5wb3coMiwgMTAgKiAocCAtIDEpKSAtIDAuMDAxO1xuXHRcdFx0fSksXG5cdFx0XHRfY3JlYXRlKFwiRXhwb0luT3V0XCIsIGZ1bmN0aW9uKHApIHtcblx0XHRcdFx0cmV0dXJuICgocCAqPSAyKSA8IDEpID8gMC41ICogTWF0aC5wb3coMiwgMTAgKiAocCAtIDEpKSA6IDAuNSAqICgyIC0gTWF0aC5wb3coMiwgLTEwICogKHAgLSAxKSkpO1xuXHRcdFx0fSlcblx0XHQpO1xuXG5cblx0XHQvL1NpbmVcblx0XHRfd3JhcChcIlNpbmVcIixcblx0XHRcdF9jcmVhdGUoXCJTaW5lT3V0XCIsIGZ1bmN0aW9uKHApIHtcblx0XHRcdFx0cmV0dXJuIE1hdGguc2luKHAgKiBfSEFMRl9QSSk7XG5cdFx0XHR9KSxcblx0XHRcdF9jcmVhdGUoXCJTaW5lSW5cIiwgZnVuY3Rpb24ocCkge1xuXHRcdFx0XHRyZXR1cm4gLU1hdGguY29zKHAgKiBfSEFMRl9QSSkgKyAxO1xuXHRcdFx0fSksXG5cdFx0XHRfY3JlYXRlKFwiU2luZUluT3V0XCIsIGZ1bmN0aW9uKHApIHtcblx0XHRcdFx0cmV0dXJuIC0wLjUgKiAoTWF0aC5jb3MoTWF0aC5QSSAqIHApIC0gMSk7XG5cdFx0XHR9KVxuXHRcdCk7XG5cblx0XHRfY2xhc3MoXCJlYXNpbmcuRWFzZUxvb2t1cFwiLCB7XG5cdFx0XHRcdGZpbmQ6ZnVuY3Rpb24ocykge1xuXHRcdFx0XHRcdHJldHVybiBFYXNlLm1hcFtzXTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgdHJ1ZSk7XG5cblx0XHQvL3JlZ2lzdGVyIHRoZSBub24tc3RhbmRhcmQgZWFzZXNcblx0XHRfZWFzZVJlZyh3LlNsb3dNbywgXCJTbG93TW9cIiwgXCJlYXNlLFwiKTtcblx0XHRfZWFzZVJlZyhSb3VnaEVhc2UsIFwiUm91Z2hFYXNlXCIsIFwiZWFzZSxcIik7XG5cdFx0X2Vhc2VSZWcoU3RlcHBlZEVhc2UsIFwiU3RlcHBlZEVhc2VcIiwgXCJlYXNlLFwiKTtcblxuXHRcdHJldHVybiBCYWNrO1xuXHRcdFxuXHR9LCB0cnVlKTtcblxuXG59KTtcblxuaWYgKF9nc1Njb3BlLl9nc0RlZmluZSkgeyBfZ3NTY29wZS5fZ3NRdWV1ZS5wb3AoKSgpOyB9IC8vbmVjZXNzYXJ5IGluIGNhc2UgVHdlZW5MaXRlIHdhcyBhbHJlYWR5IGxvYWRlZCBzZXBhcmF0ZWx5LlxuXG5cblxuXG5cblxuXG5cblxuXG5cbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCYXNlIGNsYXNzZXMgbGlrZSBUd2VlbkxpdGUsIFNpbXBsZVRpbWVsaW5lLCBFYXNlLCBUaWNrZXIsIGV0Yy5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuKGZ1bmN0aW9uKHdpbmRvdywgbW9kdWxlTmFtZSkge1xuXG5cdFx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFx0dmFyIF9nbG9iYWxzID0gd2luZG93LkdyZWVuU29ja0dsb2JhbHMgPSB3aW5kb3cuR3JlZW5Tb2NrR2xvYmFscyB8fCB3aW5kb3c7XG5cdFx0aWYgKF9nbG9iYWxzLlR3ZWVuTGl0ZSkge1xuXHRcdFx0cmV0dXJuOyAvL2luIGNhc2UgdGhlIGNvcmUgc2V0IG9mIGNsYXNzZXMgaXMgYWxyZWFkeSBsb2FkZWQsIGRvbid0IGluc3RhbnRpYXRlIHR3aWNlLlxuXHRcdH1cblx0XHR2YXIgX25hbWVzcGFjZSA9IGZ1bmN0aW9uKG5zKSB7XG5cdFx0XHRcdHZhciBhID0gbnMuc3BsaXQoXCIuXCIpLFxuXHRcdFx0XHRcdHAgPSBfZ2xvYmFscywgaTtcblx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRwW2FbaV1dID0gcCA9IHBbYVtpXV0gfHwge307XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHA7XG5cdFx0XHR9LFxuXHRcdFx0Z3MgPSBfbmFtZXNwYWNlKFwiY29tLmdyZWVuc29ja1wiKSxcblx0XHRcdF90aW55TnVtID0gMC4wMDAwMDAwMDAxLFxuXHRcdFx0X3NsaWNlID0gZnVuY3Rpb24oYSkgeyAvL2Rvbid0IHVzZSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0YXJnZXQsIDApIGJlY2F1c2UgdGhhdCBkb2Vzbid0IHdvcmsgaW4gSUU4IHdpdGggYSBOb2RlTGlzdCB0aGF0J3MgcmV0dXJuZWQgYnkgcXVlcnlTZWxlY3RvckFsbCgpXG5cdFx0XHRcdHZhciBiID0gW10sXG5cdFx0XHRcdFx0bCA9IGEubGVuZ3RoLFxuXHRcdFx0XHRcdGk7XG5cdFx0XHRcdGZvciAoaSA9IDA7IGkgIT09IGw7IGIucHVzaChhW2krK10pKSB7fVxuXHRcdFx0XHRyZXR1cm4gYjtcblx0XHRcdH0sXG5cdFx0XHRfZW1wdHlGdW5jID0gZnVuY3Rpb24oKSB7fSxcblx0XHRcdF9pc0FycmF5ID0gKGZ1bmN0aW9uKCkgeyAvL3dvcmtzIGFyb3VuZCBpc3N1ZXMgaW4gaWZyYW1lIGVudmlyb25tZW50cyB3aGVyZSB0aGUgQXJyYXkgZ2xvYmFsIGlzbid0IHNoYXJlZCwgdGh1cyBpZiB0aGUgb2JqZWN0IG9yaWdpbmF0ZXMgaW4gYSBkaWZmZXJlbnQgd2luZG93L2lmcmFtZSwgXCIob2JqIGluc3RhbmNlb2YgQXJyYXkpXCIgd2lsbCBldmFsdWF0ZSBmYWxzZS4gV2UgYWRkZWQgc29tZSBzcGVlZCBvcHRpbWl6YXRpb25zIHRvIGF2b2lkIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCgpIHVubGVzcyBpdCdzIGFic29sdXRlbHkgbmVjZXNzYXJ5IGJlY2F1c2UgaXQncyBWRVJZIHNsb3cgKGxpa2UgMjB4IHNsb3dlcilcblx0XHRcdFx0dmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyxcblx0XHRcdFx0XHRhcnJheSA9IHRvU3RyaW5nLmNhbGwoW10pO1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24ob2JqKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9iaiAhPSBudWxsICYmIChvYmogaW5zdGFuY2VvZiBBcnJheSB8fCAodHlwZW9mKG9iaikgPT09IFwib2JqZWN0XCIgJiYgISFvYmoucHVzaCAmJiB0b1N0cmluZy5jYWxsKG9iaikgPT09IGFycmF5KSk7XG5cdFx0XHRcdH07XG5cdFx0XHR9KCkpLFxuXHRcdFx0YSwgaSwgcCwgX3RpY2tlciwgX3RpY2tlckFjdGl2ZSxcblx0XHRcdF9kZWZMb29rdXAgPSB7fSxcblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBAY29uc3RydWN0b3Jcblx0XHRcdCAqIERlZmluZXMgYSBHcmVlblNvY2sgY2xhc3MsIG9wdGlvbmFsbHkgd2l0aCBhbiBhcnJheSBvZiBkZXBlbmRlbmNpZXMgdGhhdCBtdXN0IGJlIGluc3RhbnRpYXRlZCBmaXJzdCBhbmQgcGFzc2VkIGludG8gdGhlIGRlZmluaXRpb24uXG5cdFx0XHQgKiBUaGlzIGFsbG93cyB1c2VycyB0byBsb2FkIEdyZWVuU29jayBKUyBmaWxlcyBpbiBhbnkgb3JkZXIgZXZlbiBpZiB0aGV5IGhhdmUgaW50ZXJkZXBlbmRlbmNpZXMgKGxpa2UgQ1NTUGx1Z2luIGV4dGVuZHMgVHdlZW5QbHVnaW4gd2hpY2ggaXNcblx0XHRcdCAqIGluc2lkZSBUd2VlbkxpdGUuanMsIGJ1dCBpZiBDU1NQbHVnaW4gaXMgbG9hZGVkIGZpcnN0LCBpdCBzaG91bGQgd2FpdCB0byBydW4gaXRzIGNvZGUgdW50aWwgVHdlZW5MaXRlLmpzIGxvYWRzIGFuZCBpbnN0YW50aWF0ZXMgVHdlZW5QbHVnaW5cblx0XHRcdCAqIGFuZCB0aGVuIHBhc3MgVHdlZW5QbHVnaW4gdG8gQ1NTUGx1Z2luJ3MgZGVmaW5pdGlvbikuIFRoaXMgaXMgYWxsIGRvbmUgYXV0b21hdGljYWxseSBhbmQgaW50ZXJuYWxseS5cblx0XHRcdCAqXG5cdFx0XHQgKiBFdmVyeSBkZWZpbml0aW9uIHdpbGwgYmUgYWRkZWQgdG8gYSBcImNvbS5ncmVlbnNvY2tcIiBnbG9iYWwgb2JqZWN0ICh0eXBpY2FsbHkgd2luZG93LCBidXQgaWYgYSB3aW5kb3cuR3JlZW5Tb2NrR2xvYmFscyBvYmplY3QgaXMgZm91bmQsXG5cdFx0XHQgKiBpdCB3aWxsIGdvIHRoZXJlIGFzIG9mIHYxLjcpLiBGb3IgZXhhbXBsZSwgVHdlZW5MaXRlIHdpbGwgYmUgZm91bmQgYXQgd2luZG93LmNvbS5ncmVlbnNvY2suVHdlZW5MaXRlIGFuZCBzaW5jZSBpdCdzIGEgZ2xvYmFsIGNsYXNzIHRoYXQgc2hvdWxkIGJlIGF2YWlsYWJsZSBhbnl3aGVyZSxcblx0XHRcdCAqIGl0IGlzIEFMU08gcmVmZXJlbmNlZCBhdCB3aW5kb3cuVHdlZW5MaXRlLiBIb3dldmVyIHNvbWUgY2xhc3NlcyBhcmVuJ3QgY29uc2lkZXJlZCBnbG9iYWwsIGxpa2UgdGhlIGJhc2UgY29tLmdyZWVuc29jay5jb3JlLkFuaW1hdGlvbiBjbGFzcywgc29cblx0XHRcdCAqIHRob3NlIHdpbGwgb25seSBiZSBhdCB0aGUgcGFja2FnZSBsaWtlIHdpbmRvdy5jb20uZ3JlZW5zb2NrLmNvcmUuQW5pbWF0aW9uLiBBZ2FpbiwgaWYgeW91IGRlZmluZSBhIEdyZWVuU29ja0dsb2JhbHMgb2JqZWN0IG9uIHRoZSB3aW5kb3csIGV2ZXJ5dGhpbmdcblx0XHRcdCAqIGdldHMgdHVja2VkIG5lYXRseSBpbnNpZGUgdGhlcmUgaW5zdGVhZCBvZiBvbiB0aGUgd2luZG93IGRpcmVjdGx5LiBUaGlzIGFsbG93cyB5b3UgdG8gZG8gYWR2YW5jZWQgdGhpbmdzIGxpa2UgbG9hZCBtdWx0aXBsZSB2ZXJzaW9ucyBvZiBHcmVlblNvY2tcblx0XHRcdCAqIGZpbGVzIGFuZCBwdXQgdGhlbSBpbnRvIGRpc3RpbmN0IG9iamVjdHMgKGltYWdpbmUgYSBiYW5uZXIgYWQgdXNlcyBhIG5ld2VyIHZlcnNpb24gYnV0IHRoZSBtYWluIHNpdGUgdXNlcyBhbiBvbGRlciBvbmUpLiBJbiB0aGF0IGNhc2UsIHlvdSBjb3VsZFxuXHRcdFx0ICogc2FuZGJveCB0aGUgYmFubmVyIG9uZSBsaWtlOlxuXHRcdFx0ICpcblx0XHRcdCAqIDxzY3JpcHQ+XG5cdFx0XHQgKiAgICAgdmFyIGdzID0gd2luZG93LkdyZWVuU29ja0dsb2JhbHMgPSB7fTsgLy90aGUgbmV3ZXIgdmVyc2lvbiB3ZSdyZSBhYm91dCB0byBsb2FkIGNvdWxkIG5vdyBiZSByZWZlcmVuY2VkIGluIGEgXCJnc1wiIG9iamVjdCwgbGlrZSBncy5Ud2VlbkxpdGUudG8oLi4uKS4gVXNlIHdoYXRldmVyIGFsaWFzIHlvdSB3YW50IGFzIGxvbmcgYXMgaXQncyB1bmlxdWUsIFwiZ3NcIiBvciBcImJhbm5lclwiIG9yIHdoYXRldmVyLlxuXHRcdFx0ICogPC9zY3JpcHQ+XG5cdFx0XHQgKiA8c2NyaXB0IHNyYz1cImpzL2dyZWVuc29jay92MS43L1R3ZWVuTWF4LmpzXCI+PC9zY3JpcHQ+XG5cdFx0XHQgKiA8c2NyaXB0PlxuXHRcdFx0ICogICAgIHdpbmRvdy5HcmVlblNvY2tHbG9iYWxzID0gd2luZG93Ll9nc1F1ZXVlID0gd2luZG93Ll9nc0RlZmluZSA9IG51bGw7IC8vcmVzZXQgaXQgYmFjayB0byBudWxsIChhbG9uZyB3aXRoIHRoZSBzcGVjaWFsIF9nc1F1ZXVlIHZhcmlhYmxlKSBzbyB0aGF0IHRoZSBuZXh0IGxvYWQgb2YgVHdlZW5NYXggYWZmZWN0cyB0aGUgd2luZG93IGFuZCB3ZSBjYW4gcmVmZXJlbmNlIHRoaW5ncyBkaXJlY3RseSBsaWtlIFR3ZWVuTGl0ZS50byguLi4pXG5cdFx0XHQgKiA8L3NjcmlwdD5cblx0XHRcdCAqIDxzY3JpcHQgc3JjPVwianMvZ3JlZW5zb2NrL3YxLjYvVHdlZW5NYXguanNcIj48L3NjcmlwdD5cblx0XHRcdCAqIDxzY3JpcHQ+XG5cdFx0XHQgKiAgICAgZ3MuVHdlZW5MaXRlLnRvKC4uLik7IC8vd291bGQgdXNlIHYxLjdcblx0XHRcdCAqICAgICBUd2VlbkxpdGUudG8oLi4uKTsgLy93b3VsZCB1c2UgdjEuNlxuXHRcdFx0ICogPC9zY3JpcHQ+XG5cdFx0XHQgKlxuXHRcdFx0ICogQHBhcmFtIHshc3RyaW5nfSBucyBUaGUgbmFtZXNwYWNlIG9mIHRoZSBjbGFzcyBkZWZpbml0aW9uLCBsZWF2aW5nIG9mZiBcImNvbS5ncmVlbnNvY2suXCIgYXMgdGhhdCdzIGFzc3VtZWQuIEZvciBleGFtcGxlLCBcIlR3ZWVuTGl0ZVwiIG9yIFwicGx1Z2lucy5DU1NQbHVnaW5cIiBvciBcImVhc2luZy5CYWNrXCIuXG5cdFx0XHQgKiBAcGFyYW0geyFBcnJheS48c3RyaW5nPn0gZGVwZW5kZW5jaWVzIEFuIGFycmF5IG9mIGRlcGVuZGVuY2llcyAoZGVzY3JpYmVkIGFzIHRoZWlyIG5hbWVzcGFjZXMgbWludXMgXCJjb20uZ3JlZW5zb2NrLlwiIHByZWZpeCkuIEZvciBleGFtcGxlIFtcIlR3ZWVuTGl0ZVwiLFwicGx1Z2lucy5Ud2VlblBsdWdpblwiLFwiY29yZS5BbmltYXRpb25cIl1cblx0XHRcdCAqIEBwYXJhbSB7IWZ1bmN0aW9uKCk6T2JqZWN0fSBmdW5jIFRoZSBmdW5jdGlvbiB0aGF0IHNob3VsZCBiZSBjYWxsZWQgYW5kIHBhc3NlZCB0aGUgcmVzb2x2ZWQgZGVwZW5kZW5jaWVzIHdoaWNoIHdpbGwgcmV0dXJuIHRoZSBhY3R1YWwgY2xhc3MgZm9yIHRoaXMgZGVmaW5pdGlvbi5cblx0XHRcdCAqIEBwYXJhbSB7Ym9vbGVhbj19IGdsb2JhbCBJZiB0cnVlLCB0aGUgY2xhc3Mgd2lsbCBiZSBhZGRlZCB0byB0aGUgZ2xvYmFsIHNjb3BlICh0eXBpY2FsbHkgd2luZG93IHVubGVzcyB5b3UgZGVmaW5lIGEgd2luZG93LkdyZWVuU29ja0dsb2JhbHMgb2JqZWN0KVxuXHRcdFx0ICovXG5cdFx0XHREZWZpbml0aW9uID0gZnVuY3Rpb24obnMsIGRlcGVuZGVuY2llcywgZnVuYywgZ2xvYmFsKSB7XG5cdFx0XHRcdHRoaXMuc2MgPSAoX2RlZkxvb2t1cFtuc10pID8gX2RlZkxvb2t1cFtuc10uc2MgOiBbXTsgLy9zdWJjbGFzc2VzXG5cdFx0XHRcdF9kZWZMb29rdXBbbnNdID0gdGhpcztcblx0XHRcdFx0dGhpcy5nc0NsYXNzID0gbnVsbDtcblx0XHRcdFx0dGhpcy5mdW5jID0gZnVuYztcblx0XHRcdFx0dmFyIF9jbGFzc2VzID0gW107XG5cdFx0XHRcdHRoaXMuY2hlY2sgPSBmdW5jdGlvbihpbml0KSB7XG5cdFx0XHRcdFx0dmFyIGkgPSBkZXBlbmRlbmNpZXMubGVuZ3RoLFxuXHRcdFx0XHRcdFx0bWlzc2luZyA9IGksXG5cdFx0XHRcdFx0XHRjdXIsIGEsIG4sIGNsLCBoYXNNb2R1bGU7XG5cdFx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0XHRpZiAoKGN1ciA9IF9kZWZMb29rdXBbZGVwZW5kZW5jaWVzW2ldXSB8fCBuZXcgRGVmaW5pdGlvbihkZXBlbmRlbmNpZXNbaV0sIFtdKSkuZ3NDbGFzcykge1xuXHRcdFx0XHRcdFx0XHRfY2xhc3Nlc1tpXSA9IGN1ci5nc0NsYXNzO1xuXHRcdFx0XHRcdFx0XHRtaXNzaW5nLS07XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKGluaXQpIHtcblx0XHRcdFx0XHRcdFx0Y3VyLnNjLnB1c2godGhpcyk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChtaXNzaW5nID09PSAwICYmIGZ1bmMpIHtcblx0XHRcdFx0XHRcdGEgPSAoXCJjb20uZ3JlZW5zb2NrLlwiICsgbnMpLnNwbGl0KFwiLlwiKTtcblx0XHRcdFx0XHRcdG4gPSBhLnBvcCgpO1xuXHRcdFx0XHRcdFx0Y2wgPSBfbmFtZXNwYWNlKGEuam9pbihcIi5cIikpW25dID0gdGhpcy5nc0NsYXNzID0gZnVuYy5hcHBseShmdW5jLCBfY2xhc3Nlcyk7XG5cblx0XHRcdFx0XHRcdC8vZXhwb3J0cyB0byBtdWx0aXBsZSBlbnZpcm9ubWVudHNcblx0XHRcdFx0XHRcdGlmIChnbG9iYWwpIHtcblx0XHRcdFx0XHRcdFx0X2dsb2JhbHNbbl0gPSBjbDsgLy9wcm92aWRlcyBhIHdheSB0byBhdm9pZCBnbG9iYWwgbmFtZXNwYWNlIHBvbGx1dGlvbi4gQnkgZGVmYXVsdCwgdGhlIG1haW4gY2xhc3NlcyBsaWtlIFR3ZWVuTGl0ZSwgUG93ZXIxLCBTdHJvbmcsIGV0Yy4gYXJlIGFkZGVkIHRvIHdpbmRvdyB1bmxlc3MgYSBHcmVlblNvY2tHbG9iYWxzIGlzIGRlZmluZWQuIFNvIGlmIHlvdSB3YW50IHRvIGhhdmUgdGhpbmdzIGFkZGVkIHRvIGEgY3VzdG9tIG9iamVjdCBpbnN0ZWFkLCBqdXN0IGRvIHNvbWV0aGluZyBsaWtlIHdpbmRvdy5HcmVlblNvY2tHbG9iYWxzID0ge30gYmVmb3JlIGxvYWRpbmcgYW55IEdyZWVuU29jayBmaWxlcy4gWW91IGNhbiBldmVuIHNldCB1cCBhbiBhbGlhcyBsaWtlIHdpbmRvdy5HcmVlblNvY2tHbG9iYWxzID0gd2luZG93cy5ncyA9IHt9IHNvIHRoYXQgeW91IGNhbiBhY2Nlc3MgZXZlcnl0aGluZyBsaWtlIGdzLlR3ZWVuTGl0ZS4gQWxzbyByZW1lbWJlciB0aGF0IEFMTCBjbGFzc2VzIGFyZSBhZGRlZCB0byB0aGUgd2luZG93LmNvbS5ncmVlbnNvY2sgb2JqZWN0IChpbiB0aGVpciByZXNwZWN0aXZlIHBhY2thZ2VzLCBsaWtlIGNvbS5ncmVlbnNvY2suZWFzaW5nLlBvd2VyMSwgY29tLmdyZWVuc29jay5Ud2VlbkxpdGUsIGV0Yy4pXG5cdFx0XHRcdFx0XHRcdGhhc01vZHVsZSA9ICh0eXBlb2YobW9kdWxlKSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBtb2R1bGUuZXhwb3J0cyk7XG5cdFx0XHRcdFx0XHRcdGlmICghaGFzTW9kdWxlICYmIHR5cGVvZihkZWZpbmUpID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCl7IC8vQU1EXG5cdFx0XHRcdFx0XHRcdFx0ZGVmaW5lKCh3aW5kb3cuR3JlZW5Tb2NrQU1EUGF0aCA/IHdpbmRvdy5HcmVlblNvY2tBTURQYXRoICsgXCIvXCIgOiBcIlwiKSArIG5zLnNwbGl0KFwiLlwiKS5wb3AoKSwgW10sIGZ1bmN0aW9uKCkgeyByZXR1cm4gY2w7IH0pO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKG5zID09PSBtb2R1bGVOYW1lICYmIGhhc01vZHVsZSl7IC8vbm9kZVxuXHRcdFx0XHRcdFx0XHRcdG1vZHVsZS5leHBvcnRzID0gY2w7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGZvciAoaSA9IDA7IGkgPCB0aGlzLnNjLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0XHRcdHRoaXMuc2NbaV0uY2hlY2soKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHRcdHRoaXMuY2hlY2sodHJ1ZSk7XG5cdFx0XHR9LFxuXG5cdFx0XHQvL3VzZWQgdG8gY3JlYXRlIERlZmluaXRpb24gaW5zdGFuY2VzICh3aGljaCBiYXNpY2FsbHkgcmVnaXN0ZXJzIGEgY2xhc3MgdGhhdCBoYXMgZGVwZW5kZW5jaWVzKS5cblx0XHRcdF9nc0RlZmluZSA9IHdpbmRvdy5fZ3NEZWZpbmUgPSBmdW5jdGlvbihucywgZGVwZW5kZW5jaWVzLCBmdW5jLCBnbG9iYWwpIHtcblx0XHRcdFx0cmV0dXJuIG5ldyBEZWZpbml0aW9uKG5zLCBkZXBlbmRlbmNpZXMsIGZ1bmMsIGdsb2JhbCk7XG5cdFx0XHR9LFxuXG5cdFx0XHQvL2EgcXVpY2sgd2F5IHRvIGNyZWF0ZSBhIGNsYXNzIHRoYXQgZG9lc24ndCBoYXZlIGFueSBkZXBlbmRlbmNpZXMuIFJldHVybnMgdGhlIGNsYXNzLCBidXQgZmlyc3QgcmVnaXN0ZXJzIGl0IGluIHRoZSBHcmVlblNvY2sgbmFtZXNwYWNlIHNvIHRoYXQgb3RoZXIgY2xhc3NlcyBjYW4gZ3JhYiBpdCAob3RoZXIgY2xhc3NlcyBtaWdodCBiZSBkZXBlbmRlbnQgb24gdGhlIGNsYXNzKS5cblx0XHRcdF9jbGFzcyA9IGdzLl9jbGFzcyA9IGZ1bmN0aW9uKG5zLCBmdW5jLCBnbG9iYWwpIHtcblx0XHRcdFx0ZnVuYyA9IGZ1bmMgfHwgZnVuY3Rpb24oKSB7fTtcblx0XHRcdFx0X2dzRGVmaW5lKG5zLCBbXSwgZnVuY3Rpb24oKXsgcmV0dXJuIGZ1bmM7IH0sIGdsb2JhbCk7XG5cdFx0XHRcdHJldHVybiBmdW5jO1xuXHRcdFx0fTtcblxuXHRcdF9nc0RlZmluZS5nbG9iYWxzID0gX2dsb2JhbHM7XG5cblxuXG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogRWFzZVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cdFx0dmFyIF9iYXNlUGFyYW1zID0gWzAsIDAsIDEsIDFdLFxuXHRcdFx0X2JsYW5rQXJyYXkgPSBbXSxcblx0XHRcdEVhc2UgPSBfY2xhc3MoXCJlYXNpbmcuRWFzZVwiLCBmdW5jdGlvbihmdW5jLCBleHRyYVBhcmFtcywgdHlwZSwgcG93ZXIpIHtcblx0XHRcdFx0dGhpcy5fZnVuYyA9IGZ1bmM7XG5cdFx0XHRcdHRoaXMuX3R5cGUgPSB0eXBlIHx8IDA7XG5cdFx0XHRcdHRoaXMuX3Bvd2VyID0gcG93ZXIgfHwgMDtcblx0XHRcdFx0dGhpcy5fcGFyYW1zID0gZXh0cmFQYXJhbXMgPyBfYmFzZVBhcmFtcy5jb25jYXQoZXh0cmFQYXJhbXMpIDogX2Jhc2VQYXJhbXM7XG5cdFx0XHR9LCB0cnVlKSxcblx0XHRcdF9lYXNlTWFwID0gRWFzZS5tYXAgPSB7fSxcblx0XHRcdF9lYXNlUmVnID0gRWFzZS5yZWdpc3RlciA9IGZ1bmN0aW9uKGVhc2UsIG5hbWVzLCB0eXBlcywgY3JlYXRlKSB7XG5cdFx0XHRcdHZhciBuYSA9IG5hbWVzLnNwbGl0KFwiLFwiKSxcblx0XHRcdFx0XHRpID0gbmEubGVuZ3RoLFxuXHRcdFx0XHRcdHRhID0gKHR5cGVzIHx8IFwiZWFzZUluLGVhc2VPdXQsZWFzZUluT3V0XCIpLnNwbGl0KFwiLFwiKSxcblx0XHRcdFx0XHRlLCBuYW1lLCBqLCB0eXBlO1xuXHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRuYW1lID0gbmFbaV07XG5cdFx0XHRcdFx0ZSA9IGNyZWF0ZSA/IF9jbGFzcyhcImVhc2luZy5cIituYW1lLCBudWxsLCB0cnVlKSA6IGdzLmVhc2luZ1tuYW1lXSB8fCB7fTtcblx0XHRcdFx0XHRqID0gdGEubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICgtLWogPiAtMSkge1xuXHRcdFx0XHRcdFx0dHlwZSA9IHRhW2pdO1xuXHRcdFx0XHRcdFx0X2Vhc2VNYXBbbmFtZSArIFwiLlwiICsgdHlwZV0gPSBfZWFzZU1hcFt0eXBlICsgbmFtZV0gPSBlW3R5cGVdID0gZWFzZS5nZXRSYXRpbyA/IGVhc2UgOiBlYXNlW3R5cGVdIHx8IG5ldyBlYXNlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0cCA9IEVhc2UucHJvdG90eXBlO1xuXHRcdHAuX2NhbGNFbmQgPSBmYWxzZTtcblx0XHRwLmdldFJhdGlvID0gZnVuY3Rpb24ocCkge1xuXHRcdFx0aWYgKHRoaXMuX2Z1bmMpIHtcblx0XHRcdFx0dGhpcy5fcGFyYW1zWzBdID0gcDtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX2Z1bmMuYXBwbHkobnVsbCwgdGhpcy5fcGFyYW1zKTtcblx0XHRcdH1cblx0XHRcdHZhciB0ID0gdGhpcy5fdHlwZSxcblx0XHRcdFx0cHcgPSB0aGlzLl9wb3dlcixcblx0XHRcdFx0ciA9ICh0ID09PSAxKSA/IDEgLSBwIDogKHQgPT09IDIpID8gcCA6IChwIDwgMC41KSA/IHAgKiAyIDogKDEgLSBwKSAqIDI7XG5cdFx0XHRpZiAocHcgPT09IDEpIHtcblx0XHRcdFx0ciAqPSByO1xuXHRcdFx0fSBlbHNlIGlmIChwdyA9PT0gMikge1xuXHRcdFx0XHRyICo9IHIgKiByO1xuXHRcdFx0fSBlbHNlIGlmIChwdyA9PT0gMykge1xuXHRcdFx0XHRyICo9IHIgKiByICogcjtcblx0XHRcdH0gZWxzZSBpZiAocHcgPT09IDQpIHtcblx0XHRcdFx0ciAqPSByICogciAqIHIgKiByO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuICh0ID09PSAxKSA/IDEgLSByIDogKHQgPT09IDIpID8gciA6IChwIDwgMC41KSA/IHIgLyAyIDogMSAtIChyIC8gMik7XG5cdFx0fTtcblxuXHRcdC8vY3JlYXRlIGFsbCB0aGUgc3RhbmRhcmQgZWFzZXMgbGlrZSBMaW5lYXIsIFF1YWQsIEN1YmljLCBRdWFydCwgUXVpbnQsIFN0cm9uZywgUG93ZXIwLCBQb3dlcjEsIFBvd2VyMiwgUG93ZXIzLCBhbmQgUG93ZXI0IChlYWNoIHdpdGggZWFzZUluLCBlYXNlT3V0LCBhbmQgZWFzZUluT3V0KVxuXHRcdGEgPSBbXCJMaW5lYXJcIixcIlF1YWRcIixcIkN1YmljXCIsXCJRdWFydFwiLFwiUXVpbnQsU3Ryb25nXCJdO1xuXHRcdGkgPSBhLmxlbmd0aDtcblx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdHAgPSBhW2ldK1wiLFBvd2VyXCIraTtcblx0XHRcdF9lYXNlUmVnKG5ldyBFYXNlKG51bGwsbnVsbCwxLGkpLCBwLCBcImVhc2VPdXRcIiwgdHJ1ZSk7XG5cdFx0XHRfZWFzZVJlZyhuZXcgRWFzZShudWxsLG51bGwsMixpKSwgcCwgXCJlYXNlSW5cIiArICgoaSA9PT0gMCkgPyBcIixlYXNlTm9uZVwiIDogXCJcIikpO1xuXHRcdFx0X2Vhc2VSZWcobmV3IEVhc2UobnVsbCxudWxsLDMsaSksIHAsIFwiZWFzZUluT3V0XCIpO1xuXHRcdH1cblx0XHRfZWFzZU1hcC5saW5lYXIgPSBncy5lYXNpbmcuTGluZWFyLmVhc2VJbjtcblx0XHRfZWFzZU1hcC5zd2luZyA9IGdzLmVhc2luZy5RdWFkLmVhc2VJbk91dDsgLy9mb3IgalF1ZXJ5IGZvbGtzXG5cblxuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEV2ZW50RGlzcGF0Y2hlclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cdFx0dmFyIEV2ZW50RGlzcGF0Y2hlciA9IF9jbGFzcyhcImV2ZW50cy5FdmVudERpc3BhdGNoZXJcIiwgZnVuY3Rpb24odGFyZ2V0KSB7XG5cdFx0XHR0aGlzLl9saXN0ZW5lcnMgPSB7fTtcblx0XHRcdHRoaXMuX2V2ZW50VGFyZ2V0ID0gdGFyZ2V0IHx8IHRoaXM7XG5cdFx0fSk7XG5cdFx0cCA9IEV2ZW50RGlzcGF0Y2hlci5wcm90b3R5cGU7XG5cblx0XHRwLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbih0eXBlLCBjYWxsYmFjaywgc2NvcGUsIHVzZVBhcmFtLCBwcmlvcml0eSkge1xuXHRcdFx0cHJpb3JpdHkgPSBwcmlvcml0eSB8fCAwO1xuXHRcdFx0dmFyIGxpc3QgPSB0aGlzLl9saXN0ZW5lcnNbdHlwZV0sXG5cdFx0XHRcdGluZGV4ID0gMCxcblx0XHRcdFx0bGlzdGVuZXIsIGk7XG5cdFx0XHRpZiAobGlzdCA9PSBudWxsKSB7XG5cdFx0XHRcdHRoaXMuX2xpc3RlbmVyc1t0eXBlXSA9IGxpc3QgPSBbXTtcblx0XHRcdH1cblx0XHRcdGkgPSBsaXN0Lmxlbmd0aDtcblx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRsaXN0ZW5lciA9IGxpc3RbaV07XG5cdFx0XHRcdGlmIChsaXN0ZW5lci5jID09PSBjYWxsYmFjayAmJiBsaXN0ZW5lci5zID09PSBzY29wZSkge1xuXHRcdFx0XHRcdGxpc3Quc3BsaWNlKGksIDEpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKGluZGV4ID09PSAwICYmIGxpc3RlbmVyLnByIDwgcHJpb3JpdHkpIHtcblx0XHRcdFx0XHRpbmRleCA9IGkgKyAxO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRsaXN0LnNwbGljZShpbmRleCwgMCwge2M6Y2FsbGJhY2ssIHM6c2NvcGUsIHVwOnVzZVBhcmFtLCBwcjpwcmlvcml0eX0pO1xuXHRcdFx0aWYgKHRoaXMgPT09IF90aWNrZXIgJiYgIV90aWNrZXJBY3RpdmUpIHtcblx0XHRcdFx0X3RpY2tlci53YWtlKCk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHAucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKHR5cGUsIGNhbGxiYWNrKSB7XG5cdFx0XHR2YXIgbGlzdCA9IHRoaXMuX2xpc3RlbmVyc1t0eXBlXSwgaTtcblx0XHRcdGlmIChsaXN0KSB7XG5cdFx0XHRcdGkgPSBsaXN0Lmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0aWYgKGxpc3RbaV0uYyA9PT0gY2FsbGJhY2spIHtcblx0XHRcdFx0XHRcdGxpc3Quc3BsaWNlKGksIDEpO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRwLmRpc3BhdGNoRXZlbnQgPSBmdW5jdGlvbih0eXBlKSB7XG5cdFx0XHR2YXIgbGlzdCA9IHRoaXMuX2xpc3RlbmVyc1t0eXBlXSxcblx0XHRcdFx0aSwgdCwgbGlzdGVuZXI7XG5cdFx0XHRpZiAobGlzdCkge1xuXHRcdFx0XHRpID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdHQgPSB0aGlzLl9ldmVudFRhcmdldDtcblx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0bGlzdGVuZXIgPSBsaXN0W2ldO1xuXHRcdFx0XHRcdGlmIChsaXN0ZW5lcikge1xuXHRcdFx0XHRcdFx0aWYgKGxpc3RlbmVyLnVwKSB7XG5cdFx0XHRcdFx0XHRcdGxpc3RlbmVyLmMuY2FsbChsaXN0ZW5lci5zIHx8IHQsIHt0eXBlOnR5cGUsIHRhcmdldDp0fSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRsaXN0ZW5lci5jLmNhbGwobGlzdGVuZXIucyB8fCB0KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXG5cbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBUaWNrZXJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuIFx0XHR2YXIgX3JlcUFuaW1GcmFtZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUsXG5cdFx0XHRfY2FuY2VsQW5pbUZyYW1lID0gd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lLFxuXHRcdFx0X2dldFRpbWUgPSBEYXRlLm5vdyB8fCBmdW5jdGlvbigpIHtyZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7fSxcblx0XHRcdF9sYXN0VXBkYXRlID0gX2dldFRpbWUoKTtcblxuXHRcdC8vbm93IHRyeSB0byBkZXRlcm1pbmUgdGhlIHJlcXVlc3RBbmltYXRpb25GcmFtZSBhbmQgY2FuY2VsQW5pbWF0aW9uRnJhbWUgZnVuY3Rpb25zIGFuZCBpZiBub25lIGFyZSBmb3VuZCwgd2UnbGwgdXNlIGEgc2V0VGltZW91dCgpL2NsZWFyVGltZW91dCgpIHBvbHlmaWxsLlxuXHRcdGEgPSBbXCJtc1wiLFwibW96XCIsXCJ3ZWJraXRcIixcIm9cIl07XG5cdFx0aSA9IGEubGVuZ3RoO1xuXHRcdHdoaWxlICgtLWkgPiAtMSAmJiAhX3JlcUFuaW1GcmFtZSkge1xuXHRcdFx0X3JlcUFuaW1GcmFtZSA9IHdpbmRvd1thW2ldICsgXCJSZXF1ZXN0QW5pbWF0aW9uRnJhbWVcIl07XG5cdFx0XHRfY2FuY2VsQW5pbUZyYW1lID0gd2luZG93W2FbaV0gKyBcIkNhbmNlbEFuaW1hdGlvbkZyYW1lXCJdIHx8IHdpbmRvd1thW2ldICsgXCJDYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWVcIl07XG5cdFx0fVxuXG5cdFx0X2NsYXNzKFwiVGlja2VyXCIsIGZ1bmN0aW9uKGZwcywgdXNlUkFGKSB7XG5cdFx0XHR2YXIgX3NlbGYgPSB0aGlzLFxuXHRcdFx0XHRfc3RhcnRUaW1lID0gX2dldFRpbWUoKSxcblx0XHRcdFx0X3VzZVJBRiA9ICh1c2VSQUYgIT09IGZhbHNlICYmIF9yZXFBbmltRnJhbWUpLFxuXHRcdFx0XHRfbGFnVGhyZXNob2xkID0gNTAwLFxuXHRcdFx0XHRfYWRqdXN0ZWRMYWcgPSAzMyxcblx0XHRcdFx0X3RpY2tXb3JkID0gXCJ0aWNrXCIsIC8vaGVscHMgcmVkdWNlIGdjIGJ1cmRlblxuXHRcdFx0XHRfZnBzLCBfcmVxLCBfaWQsIF9nYXAsIF9uZXh0VGltZSxcblx0XHRcdFx0X3RpY2sgPSBmdW5jdGlvbihtYW51YWwpIHtcblx0XHRcdFx0XHR2YXIgZWxhcHNlZCA9IF9nZXRUaW1lKCkgLSBfbGFzdFVwZGF0ZSxcblx0XHRcdFx0XHRcdG92ZXJsYXAsIGRpc3BhdGNoO1xuXHRcdFx0XHRcdGlmIChlbGFwc2VkID4gX2xhZ1RocmVzaG9sZCkge1xuXHRcdFx0XHRcdFx0X3N0YXJ0VGltZSArPSBlbGFwc2VkIC0gX2FkanVzdGVkTGFnO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRfbGFzdFVwZGF0ZSArPSBlbGFwc2VkO1xuXHRcdFx0XHRcdF9zZWxmLnRpbWUgPSAoX2xhc3RVcGRhdGUgLSBfc3RhcnRUaW1lKSAvIDEwMDA7XG5cdFx0XHRcdFx0b3ZlcmxhcCA9IF9zZWxmLnRpbWUgLSBfbmV4dFRpbWU7XG5cdFx0XHRcdFx0aWYgKCFfZnBzIHx8IG92ZXJsYXAgPiAwIHx8IG1hbnVhbCA9PT0gdHJ1ZSkge1xuXHRcdFx0XHRcdFx0X3NlbGYuZnJhbWUrKztcblx0XHRcdFx0XHRcdF9uZXh0VGltZSArPSBvdmVybGFwICsgKG92ZXJsYXAgPj0gX2dhcCA/IDAuMDA0IDogX2dhcCAtIG92ZXJsYXApO1xuXHRcdFx0XHRcdFx0ZGlzcGF0Y2ggPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAobWFudWFsICE9PSB0cnVlKSB7IC8vbWFrZSBzdXJlIHRoZSByZXF1ZXN0IGlzIG1hZGUgYmVmb3JlIHdlIGRpc3BhdGNoIHRoZSBcInRpY2tcIiBldmVudCBzbyB0aGF0IHRpbWluZyBpcyBtYWludGFpbmVkLiBPdGhlcndpc2UsIGlmIHByb2Nlc3NpbmcgdGhlIFwidGlja1wiIHJlcXVpcmVzIGEgYnVuY2ggb2YgdGltZSAobGlrZSAxNW1zKSBhbmQgd2UncmUgdXNpbmcgYSBzZXRUaW1lb3V0KCkgdGhhdCdzIGJhc2VkIG9uIDE2LjdtcywgaXQnZCB0ZWNobmljYWxseSB0YWtlIDMxLjdtcyBiZXR3ZWVuIGZyYW1lcyBvdGhlcndpc2UuXG5cdFx0XHRcdFx0XHRfaWQgPSBfcmVxKF90aWNrKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKGRpc3BhdGNoKSB7XG5cdFx0XHRcdFx0XHRfc2VsZi5kaXNwYXRjaEV2ZW50KF90aWNrV29yZCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXG5cdFx0XHRFdmVudERpc3BhdGNoZXIuY2FsbChfc2VsZik7XG5cdFx0XHRfc2VsZi50aW1lID0gX3NlbGYuZnJhbWUgPSAwO1xuXHRcdFx0X3NlbGYudGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRfdGljayh0cnVlKTtcblx0XHRcdH07XG5cblx0XHRcdF9zZWxmLmxhZ1Ntb290aGluZyA9IGZ1bmN0aW9uKHRocmVzaG9sZCwgYWRqdXN0ZWRMYWcpIHtcblx0XHRcdFx0X2xhZ1RocmVzaG9sZCA9IHRocmVzaG9sZCB8fCAoMSAvIF90aW55TnVtKTsgLy96ZXJvIHNob3VsZCBiZSBpbnRlcnByZXRlZCBhcyBiYXNpY2FsbHkgdW5saW1pdGVkXG5cdFx0XHRcdF9hZGp1c3RlZExhZyA9IE1hdGgubWluKGFkanVzdGVkTGFnLCBfbGFnVGhyZXNob2xkLCAwKTtcblx0XHRcdH07XG5cblx0XHRcdF9zZWxmLnNsZWVwID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmIChfaWQgPT0gbnVsbCkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIV91c2VSQUYgfHwgIV9jYW5jZWxBbmltRnJhbWUpIHtcblx0XHRcdFx0XHRjbGVhclRpbWVvdXQoX2lkKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRfY2FuY2VsQW5pbUZyYW1lKF9pZCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0X3JlcSA9IF9lbXB0eUZ1bmM7XG5cdFx0XHRcdF9pZCA9IG51bGw7XG5cdFx0XHRcdGlmIChfc2VsZiA9PT0gX3RpY2tlcikge1xuXHRcdFx0XHRcdF90aWNrZXJBY3RpdmUgPSBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdFx0X3NlbGYud2FrZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoX2lkICE9PSBudWxsKSB7XG5cdFx0XHRcdFx0X3NlbGYuc2xlZXAoKTtcblx0XHRcdFx0fSBlbHNlIGlmIChfc2VsZi5mcmFtZSA+IDEwKSB7IC8vZG9uJ3QgdHJpZ2dlciBsYWdTbW9vdGhpbmcgaWYgd2UncmUganVzdCB3YWtpbmcgdXAsIGFuZCBtYWtlIHN1cmUgdGhhdCBhdCBsZWFzdCAxMCBmcmFtZXMgaGF2ZSBlbGFwc2VkIGJlY2F1c2Ugb2YgdGhlIGlPUyBidWcgdGhhdCB3ZSB3b3JrIGFyb3VuZCBiZWxvdyB3aXRoIHRoZSAxLjUtc2Vjb25kIHNldFRpbW91dCgpLlxuXHRcdFx0XHRcdF9sYXN0VXBkYXRlID0gX2dldFRpbWUoKSAtIF9sYWdUaHJlc2hvbGQgKyA1O1xuXHRcdFx0XHR9XG5cdFx0XHRcdF9yZXEgPSAoX2ZwcyA9PT0gMCkgPyBfZW1wdHlGdW5jIDogKCFfdXNlUkFGIHx8ICFfcmVxQW5pbUZyYW1lKSA/IGZ1bmN0aW9uKGYpIHsgcmV0dXJuIHNldFRpbWVvdXQoZiwgKChfbmV4dFRpbWUgLSBfc2VsZi50aW1lKSAqIDEwMDAgKyAxKSB8IDApOyB9IDogX3JlcUFuaW1GcmFtZTtcblx0XHRcdFx0aWYgKF9zZWxmID09PSBfdGlja2VyKSB7XG5cdFx0XHRcdFx0X3RpY2tlckFjdGl2ZSA9IHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0X3RpY2soMik7XG5cdFx0XHR9O1xuXG5cdFx0XHRfc2VsZi5mcHMgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0XHRpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRcdFx0XHRyZXR1cm4gX2Zwcztcblx0XHRcdFx0fVxuXHRcdFx0XHRfZnBzID0gdmFsdWU7XG5cdFx0XHRcdF9nYXAgPSAxIC8gKF9mcHMgfHwgNjApO1xuXHRcdFx0XHRfbmV4dFRpbWUgPSB0aGlzLnRpbWUgKyBfZ2FwO1xuXHRcdFx0XHRfc2VsZi53YWtlKCk7XG5cdFx0XHR9O1xuXG5cdFx0XHRfc2VsZi51c2VSQUYgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0XHRpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRcdFx0XHRyZXR1cm4gX3VzZVJBRjtcblx0XHRcdFx0fVxuXHRcdFx0XHRfc2VsZi5zbGVlcCgpO1xuXHRcdFx0XHRfdXNlUkFGID0gdmFsdWU7XG5cdFx0XHRcdF9zZWxmLmZwcyhfZnBzKTtcblx0XHRcdH07XG5cdFx0XHRfc2VsZi5mcHMoZnBzKTtcblxuXHRcdFx0Ly9hIGJ1ZyBpbiBpT1MgNiBTYWZhcmkgb2NjYXNpb25hbGx5IHByZXZlbnRzIHRoZSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgZnJvbSB3b3JraW5nIGluaXRpYWxseSwgc28gd2UgdXNlIGEgMS41LXNlY29uZCB0aW1lb3V0IHRoYXQgYXV0b21hdGljYWxseSBmYWxscyBiYWNrIHRvIHNldFRpbWVvdXQoKSBpZiBpdCBzZW5zZXMgdGhpcyBjb25kaXRpb24uXG5cdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoX3VzZVJBRiAmJiBfc2VsZi5mcmFtZSA8IDUpIHtcblx0XHRcdFx0XHRfc2VsZi51c2VSQUYoZmFsc2UpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCAxNTAwKTtcblx0XHR9KTtcblxuXHRcdHAgPSBncy5UaWNrZXIucHJvdG90eXBlID0gbmV3IGdzLmV2ZW50cy5FdmVudERpc3BhdGNoZXIoKTtcblx0XHRwLmNvbnN0cnVjdG9yID0gZ3MuVGlja2VyO1xuXG5cbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBBbmltYXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXHRcdHZhciBBbmltYXRpb24gPSBfY2xhc3MoXCJjb3JlLkFuaW1hdGlvblwiLCBmdW5jdGlvbihkdXJhdGlvbiwgdmFycykge1xuXHRcdFx0XHR0aGlzLnZhcnMgPSB2YXJzID0gdmFycyB8fCB7fTtcblx0XHRcdFx0dGhpcy5fZHVyYXRpb24gPSB0aGlzLl90b3RhbER1cmF0aW9uID0gZHVyYXRpb24gfHwgMDtcblx0XHRcdFx0dGhpcy5fZGVsYXkgPSBOdW1iZXIodmFycy5kZWxheSkgfHwgMDtcblx0XHRcdFx0dGhpcy5fdGltZVNjYWxlID0gMTtcblx0XHRcdFx0dGhpcy5fYWN0aXZlID0gKHZhcnMuaW1tZWRpYXRlUmVuZGVyID09PSB0cnVlKTtcblx0XHRcdFx0dGhpcy5kYXRhID0gdmFycy5kYXRhO1xuXHRcdFx0XHR0aGlzLl9yZXZlcnNlZCA9ICh2YXJzLnJldmVyc2VkID09PSB0cnVlKTtcblxuXHRcdFx0XHRpZiAoIV9yb290VGltZWxpbmUpIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCFfdGlja2VyQWN0aXZlKSB7IC8vc29tZSBicm93c2VycyAobGlrZSBpT1MgNiBTYWZhcmkpIHNodXQgZG93biBKYXZhU2NyaXB0IGV4ZWN1dGlvbiB3aGVuIHRoZSB0YWIgaXMgZGlzYWJsZWQgYW5kIHRoZXkgW29jY2FzaW9uYWxseV0gbmVnbGVjdCB0byBzdGFydCB1cCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgYWdhaW4gd2hlbiByZXR1cm5pbmcgLSB0aGlzIGNvZGUgZW5zdXJlcyB0aGF0IHRoZSBlbmdpbmUgc3RhcnRzIHVwIGFnYWluIHByb3Blcmx5LlxuXHRcdFx0XHRcdF90aWNrZXIud2FrZSgpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIHRsID0gdGhpcy52YXJzLnVzZUZyYW1lcyA/IF9yb290RnJhbWVzVGltZWxpbmUgOiBfcm9vdFRpbWVsaW5lO1xuXHRcdFx0XHR0bC5hZGQodGhpcywgdGwuX3RpbWUpO1xuXG5cdFx0XHRcdGlmICh0aGlzLnZhcnMucGF1c2VkKSB7XG5cdFx0XHRcdFx0dGhpcy5wYXVzZWQodHJ1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0X3RpY2tlciA9IEFuaW1hdGlvbi50aWNrZXIgPSBuZXcgZ3MuVGlja2VyKCk7XG5cdFx0cCA9IEFuaW1hdGlvbi5wcm90b3R5cGU7XG5cdFx0cC5fZGlydHkgPSBwLl9nYyA9IHAuX2luaXR0ZWQgPSBwLl9wYXVzZWQgPSBmYWxzZTtcblx0XHRwLl90b3RhbFRpbWUgPSBwLl90aW1lID0gMDtcblx0XHRwLl9yYXdQcmV2VGltZSA9IC0xO1xuXHRcdHAuX25leHQgPSBwLl9sYXN0ID0gcC5fb25VcGRhdGUgPSBwLl90aW1lbGluZSA9IHAudGltZWxpbmUgPSBudWxsO1xuXHRcdHAuX3BhdXNlZCA9IGZhbHNlO1xuXG5cblx0XHQvL3NvbWUgYnJvd3NlcnMgKGxpa2UgaU9TKSBvY2Nhc2lvbmFsbHkgZHJvcCB0aGUgcmVxdWVzdEFuaW1hdGlvbkZyYW1lIGV2ZW50IHdoZW4gdGhlIHVzZXIgc3dpdGNoZXMgdG8gYSBkaWZmZXJlbnQgdGFiIGFuZCB0aGVuIGNvbWVzIGJhY2sgYWdhaW4sIHNvIHdlIHVzZSBhIDItc2Vjb25kIHNldFRpbWVvdXQoKSB0byBzZW5zZSBpZi93aGVuIHRoYXQgY29uZGl0aW9uIG9jY3VycyBhbmQgdGhlbiB3YWtlKCkgdGhlIHRpY2tlci5cblx0XHR2YXIgX2NoZWNrVGltZW91dCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoX3RpY2tlckFjdGl2ZSAmJiBfZ2V0VGltZSgpIC0gX2xhc3RVcGRhdGUgPiAyMDAwKSB7XG5cdFx0XHRcdFx0X3RpY2tlci53YWtlKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0c2V0VGltZW91dChfY2hlY2tUaW1lb3V0LCAyMDAwKTtcblx0XHRcdH07XG5cdFx0X2NoZWNrVGltZW91dCgpO1xuXG5cblx0XHRwLnBsYXkgPSBmdW5jdGlvbihmcm9tLCBzdXBwcmVzc0V2ZW50cykge1xuXHRcdFx0aWYgKGZyb20gIT0gbnVsbCkge1xuXHRcdFx0XHR0aGlzLnNlZWsoZnJvbSwgc3VwcHJlc3NFdmVudHMpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXMucmV2ZXJzZWQoZmFsc2UpLnBhdXNlZChmYWxzZSk7XG5cdFx0fTtcblxuXHRcdHAucGF1c2UgPSBmdW5jdGlvbihhdFRpbWUsIHN1cHByZXNzRXZlbnRzKSB7XG5cdFx0XHRpZiAoYXRUaW1lICE9IG51bGwpIHtcblx0XHRcdFx0dGhpcy5zZWVrKGF0VGltZSwgc3VwcHJlc3NFdmVudHMpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXMucGF1c2VkKHRydWUpO1xuXHRcdH07XG5cblx0XHRwLnJlc3VtZSA9IGZ1bmN0aW9uKGZyb20sIHN1cHByZXNzRXZlbnRzKSB7XG5cdFx0XHRpZiAoZnJvbSAhPSBudWxsKSB7XG5cdFx0XHRcdHRoaXMuc2Vlayhmcm9tLCBzdXBwcmVzc0V2ZW50cyk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcy5wYXVzZWQoZmFsc2UpO1xuXHRcdH07XG5cblx0XHRwLnNlZWsgPSBmdW5jdGlvbih0aW1lLCBzdXBwcmVzc0V2ZW50cykge1xuXHRcdFx0cmV0dXJuIHRoaXMudG90YWxUaW1lKE51bWJlcih0aW1lKSwgc3VwcHJlc3NFdmVudHMgIT09IGZhbHNlKTtcblx0XHR9O1xuXG5cdFx0cC5yZXN0YXJ0ID0gZnVuY3Rpb24oaW5jbHVkZURlbGF5LCBzdXBwcmVzc0V2ZW50cykge1xuXHRcdFx0cmV0dXJuIHRoaXMucmV2ZXJzZWQoZmFsc2UpLnBhdXNlZChmYWxzZSkudG90YWxUaW1lKGluY2x1ZGVEZWxheSA/IC10aGlzLl9kZWxheSA6IDAsIChzdXBwcmVzc0V2ZW50cyAhPT0gZmFsc2UpLCB0cnVlKTtcblx0XHR9O1xuXG5cdFx0cC5yZXZlcnNlID0gZnVuY3Rpb24oZnJvbSwgc3VwcHJlc3NFdmVudHMpIHtcblx0XHRcdGlmIChmcm9tICE9IG51bGwpIHtcblx0XHRcdFx0dGhpcy5zZWVrKChmcm9tIHx8IHRoaXMudG90YWxEdXJhdGlvbigpKSwgc3VwcHJlc3NFdmVudHMpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXMucmV2ZXJzZWQodHJ1ZSkucGF1c2VkKGZhbHNlKTtcblx0XHR9O1xuXG5cdFx0cC5yZW5kZXIgPSBmdW5jdGlvbih0aW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpIHtcblx0XHRcdC8vc3R1YiAtIHdlIG92ZXJyaWRlIHRoaXMgbWV0aG9kIGluIHN1YmNsYXNzZXMuXG5cdFx0fTtcblxuXHRcdHAuaW52YWxpZGF0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy5fdGltZSA9IHRoaXMuX3RvdGFsVGltZSA9IDA7XG5cdFx0XHR0aGlzLl9pbml0dGVkID0gdGhpcy5fZ2MgPSBmYWxzZTtcblx0XHRcdHRoaXMuX3Jhd1ByZXZUaW1lID0gLTE7XG5cdFx0XHRpZiAodGhpcy5fZ2MgfHwgIXRoaXMudGltZWxpbmUpIHtcblx0XHRcdFx0dGhpcy5fZW5hYmxlZCh0cnVlKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH07XG5cblx0XHRwLmlzQWN0aXZlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdGwgPSB0aGlzLl90aW1lbGluZSwgLy90aGUgMiByb290IHRpbWVsaW5lcyB3b24ndCBoYXZlIGEgX3RpbWVsaW5lOyB0aGV5J3JlIGFsd2F5cyBhY3RpdmUuXG5cdFx0XHRcdHN0YXJ0VGltZSA9IHRoaXMuX3N0YXJ0VGltZSxcblx0XHRcdFx0cmF3VGltZTtcblx0XHRcdHJldHVybiAoIXRsIHx8ICghdGhpcy5fZ2MgJiYgIXRoaXMuX3BhdXNlZCAmJiB0bC5pc0FjdGl2ZSgpICYmIChyYXdUaW1lID0gdGwucmF3VGltZSgpKSA+PSBzdGFydFRpbWUgJiYgcmF3VGltZSA8IHN0YXJ0VGltZSArIHRoaXMudG90YWxEdXJhdGlvbigpIC8gdGhpcy5fdGltZVNjYWxlKSk7XG5cdFx0fTtcblxuXHRcdHAuX2VuYWJsZWQgPSBmdW5jdGlvbiAoZW5hYmxlZCwgaWdub3JlVGltZWxpbmUpIHtcblx0XHRcdGlmICghX3RpY2tlckFjdGl2ZSkge1xuXHRcdFx0XHRfdGlja2VyLndha2UoKTtcblx0XHRcdH1cblx0XHRcdHRoaXMuX2djID0gIWVuYWJsZWQ7XG5cdFx0XHR0aGlzLl9hY3RpdmUgPSB0aGlzLmlzQWN0aXZlKCk7XG5cdFx0XHRpZiAoaWdub3JlVGltZWxpbmUgIT09IHRydWUpIHtcblx0XHRcdFx0aWYgKGVuYWJsZWQgJiYgIXRoaXMudGltZWxpbmUpIHtcblx0XHRcdFx0XHR0aGlzLl90aW1lbGluZS5hZGQodGhpcywgdGhpcy5fc3RhcnRUaW1lIC0gdGhpcy5fZGVsYXkpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKCFlbmFibGVkICYmIHRoaXMudGltZWxpbmUpIHtcblx0XHRcdFx0XHR0aGlzLl90aW1lbGluZS5fcmVtb3ZlKHRoaXMsIHRydWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXG5cdFx0cC5fa2lsbCA9IGZ1bmN0aW9uKHZhcnMsIHRhcmdldCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuX2VuYWJsZWQoZmFsc2UsIGZhbHNlKTtcblx0XHR9O1xuXG5cdFx0cC5raWxsID0gZnVuY3Rpb24odmFycywgdGFyZ2V0KSB7XG5cdFx0XHR0aGlzLl9raWxsKHZhcnMsIHRhcmdldCk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9O1xuXG5cdFx0cC5fdW5jYWNoZSA9IGZ1bmN0aW9uKGluY2x1ZGVTZWxmKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSBpbmNsdWRlU2VsZiA/IHRoaXMgOiB0aGlzLnRpbWVsaW5lO1xuXHRcdFx0d2hpbGUgKHR3ZWVuKSB7XG5cdFx0XHRcdHR3ZWVuLl9kaXJ0eSA9IHRydWU7XG5cdFx0XHRcdHR3ZWVuID0gdHdlZW4udGltZWxpbmU7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9O1xuXG5cdFx0cC5fc3dhcFNlbGZJblBhcmFtcyA9IGZ1bmN0aW9uKHBhcmFtcykge1xuXHRcdFx0dmFyIGkgPSBwYXJhbXMubGVuZ3RoLFxuXHRcdFx0XHRjb3B5ID0gcGFyYW1zLmNvbmNhdCgpO1xuXHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdGlmIChwYXJhbXNbaV0gPT09IFwie3NlbGZ9XCIpIHtcblx0XHRcdFx0XHRjb3B5W2ldID0gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGNvcHk7XG5cdFx0fTtcblxuXHRcdHAuX2NhbGxiYWNrID0gZnVuY3Rpb24odHlwZSkge1xuXHRcdFx0dmFyIHYgPSB0aGlzLnZhcnM7XG5cdFx0XHR2W3R5cGVdLmFwcGx5KHZbdHlwZSArIFwiU2NvcGVcIl0gfHwgdi5jYWxsYmFja1Njb3BlIHx8IHRoaXMsIHZbdHlwZSArIFwiUGFyYW1zXCJdIHx8IF9ibGFua0FycmF5KTtcblx0XHR9O1xuXG4vLy0tLS1BbmltYXRpb24gZ2V0dGVycy9zZXR0ZXJzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cblx0XHRwLmV2ZW50Q2FsbGJhY2sgPSBmdW5jdGlvbih0eXBlLCBjYWxsYmFjaywgcGFyYW1zLCBzY29wZSkge1xuXHRcdFx0aWYgKCh0eXBlIHx8IFwiXCIpLnN1YnN0cigwLDIpID09PSBcIm9uXCIpIHtcblx0XHRcdFx0dmFyIHYgPSB0aGlzLnZhcnM7XG5cdFx0XHRcdGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZbdHlwZV07XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGNhbGxiYWNrID09IG51bGwpIHtcblx0XHRcdFx0XHRkZWxldGUgdlt0eXBlXTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR2W3R5cGVdID0gY2FsbGJhY2s7XG5cdFx0XHRcdFx0dlt0eXBlICsgXCJQYXJhbXNcIl0gPSAoX2lzQXJyYXkocGFyYW1zKSAmJiBwYXJhbXMuam9pbihcIlwiKS5pbmRleE9mKFwie3NlbGZ9XCIpICE9PSAtMSkgPyB0aGlzLl9zd2FwU2VsZkluUGFyYW1zKHBhcmFtcykgOiBwYXJhbXM7XG5cdFx0XHRcdFx0dlt0eXBlICsgXCJTY29wZVwiXSA9IHNjb3BlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh0eXBlID09PSBcIm9uVXBkYXRlXCIpIHtcblx0XHRcdFx0XHR0aGlzLl9vblVwZGF0ZSA9IGNhbGxiYWNrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9O1xuXG5cdFx0cC5kZWxheSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHRpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX2RlbGF5O1xuXHRcdFx0fVxuXHRcdFx0aWYgKHRoaXMuX3RpbWVsaW5lLnNtb290aENoaWxkVGltaW5nKSB7XG5cdFx0XHRcdHRoaXMuc3RhcnRUaW1lKCB0aGlzLl9zdGFydFRpbWUgKyB2YWx1ZSAtIHRoaXMuX2RlbGF5ICk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9kZWxheSA9IHZhbHVlO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fTtcblxuXHRcdHAuZHVyYXRpb24gPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0XHRcdHRoaXMuX2RpcnR5ID0gZmFsc2U7XG5cdFx0XHRcdHJldHVybiB0aGlzLl9kdXJhdGlvbjtcblx0XHRcdH1cblx0XHRcdHRoaXMuX2R1cmF0aW9uID0gdGhpcy5fdG90YWxEdXJhdGlvbiA9IHZhbHVlO1xuXHRcdFx0dGhpcy5fdW5jYWNoZSh0cnVlKTsgLy90cnVlIGluIGNhc2UgaXQncyBhIFR3ZWVuTWF4IG9yIFRpbWVsaW5lTWF4IHRoYXQgaGFzIGEgcmVwZWF0IC0gd2UnbGwgbmVlZCB0byByZWZyZXNoIHRoZSB0b3RhbER1cmF0aW9uLlxuXHRcdFx0aWYgKHRoaXMuX3RpbWVsaW5lLnNtb290aENoaWxkVGltaW5nKSBpZiAodGhpcy5fdGltZSA+IDApIGlmICh0aGlzLl90aW1lIDwgdGhpcy5fZHVyYXRpb24pIGlmICh2YWx1ZSAhPT0gMCkge1xuXHRcdFx0XHR0aGlzLnRvdGFsVGltZSh0aGlzLl90b3RhbFRpbWUgKiAodmFsdWUgLyB0aGlzLl9kdXJhdGlvbiksIHRydWUpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fTtcblxuXHRcdHAudG90YWxEdXJhdGlvbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHR0aGlzLl9kaXJ0eSA9IGZhbHNlO1xuXHRcdFx0cmV0dXJuICghYXJndW1lbnRzLmxlbmd0aCkgPyB0aGlzLl90b3RhbER1cmF0aW9uIDogdGhpcy5kdXJhdGlvbih2YWx1ZSk7XG5cdFx0fTtcblxuXHRcdHAudGltZSA9IGZ1bmN0aW9uKHZhbHVlLCBzdXBwcmVzc0V2ZW50cykge1xuXHRcdFx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLl90aW1lO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHRoaXMuX2RpcnR5KSB7XG5cdFx0XHRcdHRoaXMudG90YWxEdXJhdGlvbigpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXMudG90YWxUaW1lKCh2YWx1ZSA+IHRoaXMuX2R1cmF0aW9uKSA/IHRoaXMuX2R1cmF0aW9uIDogdmFsdWUsIHN1cHByZXNzRXZlbnRzKTtcblx0XHR9O1xuXG5cdFx0cC50b3RhbFRpbWUgPSBmdW5jdGlvbih0aW1lLCBzdXBwcmVzc0V2ZW50cywgdW5jYXBwZWQpIHtcblx0XHRcdGlmICghX3RpY2tlckFjdGl2ZSkge1xuXHRcdFx0XHRfdGlja2VyLndha2UoKTtcblx0XHRcdH1cblx0XHRcdGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5fdG90YWxUaW1lO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHRoaXMuX3RpbWVsaW5lKSB7XG5cdFx0XHRcdGlmICh0aW1lIDwgMCAmJiAhdW5jYXBwZWQpIHtcblx0XHRcdFx0XHR0aW1lICs9IHRoaXMudG90YWxEdXJhdGlvbigpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh0aGlzLl90aW1lbGluZS5zbW9vdGhDaGlsZFRpbWluZykge1xuXHRcdFx0XHRcdGlmICh0aGlzLl9kaXJ0eSkge1xuXHRcdFx0XHRcdFx0dGhpcy50b3RhbER1cmF0aW9uKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHZhciB0b3RhbER1cmF0aW9uID0gdGhpcy5fdG90YWxEdXJhdGlvbixcblx0XHRcdFx0XHRcdHRsID0gdGhpcy5fdGltZWxpbmU7XG5cdFx0XHRcdFx0aWYgKHRpbWUgPiB0b3RhbER1cmF0aW9uICYmICF1bmNhcHBlZCkge1xuXHRcdFx0XHRcdFx0dGltZSA9IHRvdGFsRHVyYXRpb247XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRoaXMuX3N0YXJ0VGltZSA9ICh0aGlzLl9wYXVzZWQgPyB0aGlzLl9wYXVzZVRpbWUgOiB0bC5fdGltZSkgLSAoKCF0aGlzLl9yZXZlcnNlZCA/IHRpbWUgOiB0b3RhbER1cmF0aW9uIC0gdGltZSkgLyB0aGlzLl90aW1lU2NhbGUpO1xuXHRcdFx0XHRcdGlmICghdGwuX2RpcnR5KSB7IC8vZm9yIHBlcmZvcm1hbmNlIGltcHJvdmVtZW50LiBJZiB0aGUgcGFyZW50J3MgY2FjaGUgaXMgYWxyZWFkeSBkaXJ0eSwgaXQgYWxyZWFkeSB0b29rIGNhcmUgb2YgbWFya2luZyB0aGUgYW5jZXN0b3JzIGFzIGRpcnR5IHRvbywgc28gc2tpcCB0aGUgZnVuY3Rpb24gY2FsbCBoZXJlLlxuXHRcdFx0XHRcdFx0dGhpcy5fdW5jYWNoZShmYWxzZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vaW4gY2FzZSBhbnkgb2YgdGhlIGFuY2VzdG9yIHRpbWVsaW5lcyBoYWQgY29tcGxldGVkIGJ1dCBzaG91bGQgbm93IGJlIGVuYWJsZWQsIHdlIHNob3VsZCByZXNldCB0aGVpciB0b3RhbFRpbWUoKSB3aGljaCB3aWxsIGFsc28gZW5zdXJlIHRoYXQgdGhleSdyZSBsaW5lZCB1cCBwcm9wZXJseSBhbmQgZW5hYmxlZC4gU2tpcCBmb3IgYW5pbWF0aW9ucyB0aGF0IGFyZSBvbiB0aGUgcm9vdCAod2FzdGVmdWwpLiBFeGFtcGxlOiBhIFRpbWVsaW5lTGl0ZS5leHBvcnRSb290KCkgaXMgcGVyZm9ybWVkIHdoZW4gdGhlcmUncyBhIHBhdXNlZCB0d2VlbiBvbiB0aGUgcm9vdCwgdGhlIGV4cG9ydCB3aWxsIG5vdCBjb21wbGV0ZSB1bnRpbCB0aGF0IHR3ZWVuIGlzIHVucGF1c2VkLCBidXQgaW1hZ2luZSBhIGNoaWxkIGdldHMgcmVzdGFydGVkIGxhdGVyLCBhZnRlciBhbGwgW3VucGF1c2VkXSB0d2VlbnMgaGF2ZSBjb21wbGV0ZWQuIFRoZSBzdGFydFRpbWUgb2YgdGhhdCBjaGlsZCB3b3VsZCBnZXQgcHVzaGVkIG91dCwgYnV0IG9uZSBvZiB0aGUgYW5jZXN0b3JzIG1heSBoYXZlIGNvbXBsZXRlZC5cblx0XHRcdFx0XHRpZiAodGwuX3RpbWVsaW5lKSB7XG5cdFx0XHRcdFx0XHR3aGlsZSAodGwuX3RpbWVsaW5lKSB7XG5cdFx0XHRcdFx0XHRcdGlmICh0bC5fdGltZWxpbmUuX3RpbWUgIT09ICh0bC5fc3RhcnRUaW1lICsgdGwuX3RvdGFsVGltZSkgLyB0bC5fdGltZVNjYWxlKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGwudG90YWxUaW1lKHRsLl90b3RhbFRpbWUsIHRydWUpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHRsID0gdGwuX3RpbWVsaW5lO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodGhpcy5fZ2MpIHtcblx0XHRcdFx0XHR0aGlzLl9lbmFibGVkKHRydWUsIGZhbHNlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodGhpcy5fdG90YWxUaW1lICE9PSB0aW1lIHx8IHRoaXMuX2R1cmF0aW9uID09PSAwKSB7XG5cdFx0XHRcdFx0aWYgKF9sYXp5VHdlZW5zLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0X2xhenlSZW5kZXIoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGhpcy5yZW5kZXIodGltZSwgc3VwcHJlc3NFdmVudHMsIGZhbHNlKTtcblx0XHRcdFx0XHRpZiAoX2xhenlUd2VlbnMubGVuZ3RoKSB7IC8vaW4gY2FzZSByZW5kZXJpbmcgY2F1c2VkIGFueSB0d2VlbnMgdG8gbGF6eS1pbml0LCB3ZSBzaG91bGQgcmVuZGVyIHRoZW0gYmVjYXVzZSB0eXBpY2FsbHkgd2hlbiBzb21lb25lIGNhbGxzIHNlZWsoKSBvciB0aW1lKCkgb3IgcHJvZ3Jlc3MoKSwgdGhleSBleHBlY3QgYW4gaW1tZWRpYXRlIHJlbmRlci5cblx0XHRcdFx0XHRcdF9sYXp5UmVuZGVyKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9O1xuXG5cdFx0cC5wcm9ncmVzcyA9IHAudG90YWxQcm9ncmVzcyA9IGZ1bmN0aW9uKHZhbHVlLCBzdXBwcmVzc0V2ZW50cykge1xuXHRcdFx0dmFyIGR1cmF0aW9uID0gdGhpcy5kdXJhdGlvbigpO1xuXHRcdFx0cmV0dXJuICghYXJndW1lbnRzLmxlbmd0aCkgPyAoZHVyYXRpb24gPyB0aGlzLl90aW1lIC8gZHVyYXRpb24gOiB0aGlzLnJhdGlvKSA6IHRoaXMudG90YWxUaW1lKGR1cmF0aW9uICogdmFsdWUsIHN1cHByZXNzRXZlbnRzKTtcblx0XHR9O1xuXG5cdFx0cC5zdGFydFRpbWUgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLl9zdGFydFRpbWU7XG5cdFx0XHR9XG5cdFx0XHRpZiAodmFsdWUgIT09IHRoaXMuX3N0YXJ0VGltZSkge1xuXHRcdFx0XHR0aGlzLl9zdGFydFRpbWUgPSB2YWx1ZTtcblx0XHRcdFx0aWYgKHRoaXMudGltZWxpbmUpIGlmICh0aGlzLnRpbWVsaW5lLl9zb3J0Q2hpbGRyZW4pIHtcblx0XHRcdFx0XHR0aGlzLnRpbWVsaW5lLmFkZCh0aGlzLCB2YWx1ZSAtIHRoaXMuX2RlbGF5KTsgLy9lbnN1cmVzIHRoYXQgYW55IG5lY2Vzc2FyeSByZS1zZXF1ZW5jaW5nIG9mIEFuaW1hdGlvbnMgaW4gdGhlIHRpbWVsaW5lIG9jY3VycyB0byBtYWtlIHN1cmUgdGhlIHJlbmRlcmluZyBvcmRlciBpcyBjb3JyZWN0LlxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9O1xuXG5cdFx0cC5lbmRUaW1lID0gZnVuY3Rpb24oaW5jbHVkZVJlcGVhdHMpIHtcblx0XHRcdHJldHVybiB0aGlzLl9zdGFydFRpbWUgKyAoKGluY2x1ZGVSZXBlYXRzICE9IGZhbHNlKSA/IHRoaXMudG90YWxEdXJhdGlvbigpIDogdGhpcy5kdXJhdGlvbigpKSAvIHRoaXMuX3RpbWVTY2FsZTtcblx0XHR9O1xuXG5cdFx0cC50aW1lU2NhbGUgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLl90aW1lU2NhbGU7XG5cdFx0XHR9XG5cdFx0XHR2YWx1ZSA9IHZhbHVlIHx8IF90aW55TnVtOyAvL2Nhbid0IGFsbG93IHplcm8gYmVjYXVzZSBpdCdsbCB0aHJvdyB0aGUgbWF0aCBvZmZcblx0XHRcdGlmICh0aGlzLl90aW1lbGluZSAmJiB0aGlzLl90aW1lbGluZS5zbW9vdGhDaGlsZFRpbWluZykge1xuXHRcdFx0XHR2YXIgcGF1c2VUaW1lID0gdGhpcy5fcGF1c2VUaW1lLFxuXHRcdFx0XHRcdHQgPSAocGF1c2VUaW1lIHx8IHBhdXNlVGltZSA9PT0gMCkgPyBwYXVzZVRpbWUgOiB0aGlzLl90aW1lbGluZS50b3RhbFRpbWUoKTtcblx0XHRcdFx0dGhpcy5fc3RhcnRUaW1lID0gdCAtICgodCAtIHRoaXMuX3N0YXJ0VGltZSkgKiB0aGlzLl90aW1lU2NhbGUgLyB2YWx1ZSk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl90aW1lU2NhbGUgPSB2YWx1ZTtcblx0XHRcdHJldHVybiB0aGlzLl91bmNhY2hlKGZhbHNlKTtcblx0XHR9O1xuXG5cdFx0cC5yZXZlcnNlZCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHRpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX3JldmVyc2VkO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHZhbHVlICE9IHRoaXMuX3JldmVyc2VkKSB7XG5cdFx0XHRcdHRoaXMuX3JldmVyc2VkID0gdmFsdWU7XG5cdFx0XHRcdHRoaXMudG90YWxUaW1lKCgodGhpcy5fdGltZWxpbmUgJiYgIXRoaXMuX3RpbWVsaW5lLnNtb290aENoaWxkVGltaW5nKSA/IHRoaXMudG90YWxEdXJhdGlvbigpIC0gdGhpcy5fdG90YWxUaW1lIDogdGhpcy5fdG90YWxUaW1lKSwgdHJ1ZSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9O1xuXG5cdFx0cC5wYXVzZWQgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLl9wYXVzZWQ7XG5cdFx0XHR9XG5cdFx0XHR2YXIgdGwgPSB0aGlzLl90aW1lbGluZSxcblx0XHRcdFx0cmF3LCBlbGFwc2VkO1xuXHRcdFx0aWYgKHZhbHVlICE9IHRoaXMuX3BhdXNlZCkgaWYgKHRsKSB7XG5cdFx0XHRcdGlmICghX3RpY2tlckFjdGl2ZSAmJiAhdmFsdWUpIHtcblx0XHRcdFx0XHRfdGlja2VyLndha2UoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyYXcgPSB0bC5yYXdUaW1lKCk7XG5cdFx0XHRcdGVsYXBzZWQgPSByYXcgLSB0aGlzLl9wYXVzZVRpbWU7XG5cdFx0XHRcdGlmICghdmFsdWUgJiYgdGwuc21vb3RoQ2hpbGRUaW1pbmcpIHtcblx0XHRcdFx0XHR0aGlzLl9zdGFydFRpbWUgKz0gZWxhcHNlZDtcblx0XHRcdFx0XHR0aGlzLl91bmNhY2hlKGZhbHNlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLl9wYXVzZVRpbWUgPSB2YWx1ZSA/IHJhdyA6IG51bGw7XG5cdFx0XHRcdHRoaXMuX3BhdXNlZCA9IHZhbHVlO1xuXHRcdFx0XHR0aGlzLl9hY3RpdmUgPSB0aGlzLmlzQWN0aXZlKCk7XG5cdFx0XHRcdGlmICghdmFsdWUgJiYgZWxhcHNlZCAhPT0gMCAmJiB0aGlzLl9pbml0dGVkICYmIHRoaXMuZHVyYXRpb24oKSkge1xuXHRcdFx0XHRcdHJhdyA9IHRsLnNtb290aENoaWxkVGltaW5nID8gdGhpcy5fdG90YWxUaW1lIDogKHJhdyAtIHRoaXMuX3N0YXJ0VGltZSkgLyB0aGlzLl90aW1lU2NhbGU7XG5cdFx0XHRcdFx0dGhpcy5yZW5kZXIocmF3LCAocmF3ID09PSB0aGlzLl90b3RhbFRpbWUpLCB0cnVlKTsgLy9pbiBjYXNlIHRoZSB0YXJnZXQncyBwcm9wZXJ0aWVzIGNoYW5nZWQgdmlhIHNvbWUgb3RoZXIgdHdlZW4gb3IgbWFudWFsIHVwZGF0ZSBieSB0aGUgdXNlciwgd2Ugc2hvdWxkIGZvcmNlIGEgcmVuZGVyLlxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAodGhpcy5fZ2MgJiYgIXZhbHVlKSB7XG5cdFx0XHRcdHRoaXMuX2VuYWJsZWQodHJ1ZSwgZmFsc2UpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fTtcblxuXG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogU2ltcGxlVGltZWxpbmVcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXHRcdHZhciBTaW1wbGVUaW1lbGluZSA9IF9jbGFzcyhcImNvcmUuU2ltcGxlVGltZWxpbmVcIiwgZnVuY3Rpb24odmFycykge1xuXHRcdFx0QW5pbWF0aW9uLmNhbGwodGhpcywgMCwgdmFycyk7XG5cdFx0XHR0aGlzLmF1dG9SZW1vdmVDaGlsZHJlbiA9IHRoaXMuc21vb3RoQ2hpbGRUaW1pbmcgPSB0cnVlO1xuXHRcdH0pO1xuXG5cdFx0cCA9IFNpbXBsZVRpbWVsaW5lLnByb3RvdHlwZSA9IG5ldyBBbmltYXRpb24oKTtcblx0XHRwLmNvbnN0cnVjdG9yID0gU2ltcGxlVGltZWxpbmU7XG5cdFx0cC5raWxsKCkuX2djID0gZmFsc2U7XG5cdFx0cC5fZmlyc3QgPSBwLl9sYXN0ID0gcC5fcmVjZW50ID0gbnVsbDtcblx0XHRwLl9zb3J0Q2hpbGRyZW4gPSBmYWxzZTtcblxuXHRcdHAuYWRkID0gcC5pbnNlcnQgPSBmdW5jdGlvbihjaGlsZCwgcG9zaXRpb24sIGFsaWduLCBzdGFnZ2VyKSB7XG5cdFx0XHR2YXIgcHJldlR3ZWVuLCBzdDtcblx0XHRcdGNoaWxkLl9zdGFydFRpbWUgPSBOdW1iZXIocG9zaXRpb24gfHwgMCkgKyBjaGlsZC5fZGVsYXk7XG5cdFx0XHRpZiAoY2hpbGQuX3BhdXNlZCkgaWYgKHRoaXMgIT09IGNoaWxkLl90aW1lbGluZSkgeyAvL3dlIG9ubHkgYWRqdXN0IHRoZSBfcGF1c2VUaW1lIGlmIGl0IHdhc24ndCBpbiB0aGlzIHRpbWVsaW5lIGFscmVhZHkuIFJlbWVtYmVyLCBzb21ldGltZXMgYSB0d2VlbiB3aWxsIGJlIGluc2VydGVkIGFnYWluIGludG8gdGhlIHNhbWUgdGltZWxpbmUgd2hlbiBpdHMgc3RhcnRUaW1lIGlzIGNoYW5nZWQgc28gdGhhdCB0aGUgdHdlZW5zIGluIHRoZSBUaW1lbGluZUxpdGUvTWF4IGFyZSByZS1vcmRlcmVkIHByb3Blcmx5IGluIHRoZSBsaW5rZWQgbGlzdCAoc28gZXZlcnl0aGluZyByZW5kZXJzIGluIHRoZSBwcm9wZXIgb3JkZXIpLlxuXHRcdFx0XHRjaGlsZC5fcGF1c2VUaW1lID0gY2hpbGQuX3N0YXJ0VGltZSArICgodGhpcy5yYXdUaW1lKCkgLSBjaGlsZC5fc3RhcnRUaW1lKSAvIGNoaWxkLl90aW1lU2NhbGUpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGNoaWxkLnRpbWVsaW5lKSB7XG5cdFx0XHRcdGNoaWxkLnRpbWVsaW5lLl9yZW1vdmUoY2hpbGQsIHRydWUpOyAvL3JlbW92ZXMgZnJvbSBleGlzdGluZyB0aW1lbGluZSBzbyB0aGF0IGl0IGNhbiBiZSBwcm9wZXJseSBhZGRlZCB0byB0aGlzIG9uZS5cblx0XHRcdH1cblx0XHRcdGNoaWxkLnRpbWVsaW5lID0gY2hpbGQuX3RpbWVsaW5lID0gdGhpcztcblx0XHRcdGlmIChjaGlsZC5fZ2MpIHtcblx0XHRcdFx0Y2hpbGQuX2VuYWJsZWQodHJ1ZSwgdHJ1ZSk7XG5cdFx0XHR9XG5cdFx0XHRwcmV2VHdlZW4gPSB0aGlzLl9sYXN0O1xuXHRcdFx0aWYgKHRoaXMuX3NvcnRDaGlsZHJlbikge1xuXHRcdFx0XHRzdCA9IGNoaWxkLl9zdGFydFRpbWU7XG5cdFx0XHRcdHdoaWxlIChwcmV2VHdlZW4gJiYgcHJldlR3ZWVuLl9zdGFydFRpbWUgPiBzdCkge1xuXHRcdFx0XHRcdHByZXZUd2VlbiA9IHByZXZUd2Vlbi5fcHJldjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKHByZXZUd2Vlbikge1xuXHRcdFx0XHRjaGlsZC5fbmV4dCA9IHByZXZUd2Vlbi5fbmV4dDtcblx0XHRcdFx0cHJldlR3ZWVuLl9uZXh0ID0gY2hpbGQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjaGlsZC5fbmV4dCA9IHRoaXMuX2ZpcnN0O1xuXHRcdFx0XHR0aGlzLl9maXJzdCA9IGNoaWxkO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGNoaWxkLl9uZXh0KSB7XG5cdFx0XHRcdGNoaWxkLl9uZXh0Ll9wcmV2ID0gY2hpbGQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLl9sYXN0ID0gY2hpbGQ7XG5cdFx0XHR9XG5cdFx0XHRjaGlsZC5fcHJldiA9IHByZXZUd2Vlbjtcblx0XHRcdHRoaXMuX3JlY2VudCA9IGNoaWxkO1xuXHRcdFx0aWYgKHRoaXMuX3RpbWVsaW5lKSB7XG5cdFx0XHRcdHRoaXMuX3VuY2FjaGUodHJ1ZSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9O1xuXG5cdFx0cC5fcmVtb3ZlID0gZnVuY3Rpb24odHdlZW4sIHNraXBEaXNhYmxlKSB7XG5cdFx0XHRpZiAodHdlZW4udGltZWxpbmUgPT09IHRoaXMpIHtcblx0XHRcdFx0aWYgKCFza2lwRGlzYWJsZSkge1xuXHRcdFx0XHRcdHR3ZWVuLl9lbmFibGVkKGZhbHNlLCB0cnVlKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICh0d2Vlbi5fcHJldikge1xuXHRcdFx0XHRcdHR3ZWVuLl9wcmV2Ll9uZXh0ID0gdHdlZW4uX25leHQ7XG5cdFx0XHRcdH0gZWxzZSBpZiAodGhpcy5fZmlyc3QgPT09IHR3ZWVuKSB7XG5cdFx0XHRcdFx0dGhpcy5fZmlyc3QgPSB0d2Vlbi5fbmV4dDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodHdlZW4uX25leHQpIHtcblx0XHRcdFx0XHR0d2Vlbi5fbmV4dC5fcHJldiA9IHR3ZWVuLl9wcmV2O1xuXHRcdFx0XHR9IGVsc2UgaWYgKHRoaXMuX2xhc3QgPT09IHR3ZWVuKSB7XG5cdFx0XHRcdFx0dGhpcy5fbGFzdCA9IHR3ZWVuLl9wcmV2O1xuXHRcdFx0XHR9XG5cdFx0XHRcdHR3ZWVuLl9uZXh0ID0gdHdlZW4uX3ByZXYgPSB0d2Vlbi50aW1lbGluZSA9IG51bGw7XG5cdFx0XHRcdGlmICh0d2VlbiA9PT0gdGhpcy5fcmVjZW50KSB7XG5cdFx0XHRcdFx0dGhpcy5fcmVjZW50ID0gdGhpcy5fbGFzdDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICh0aGlzLl90aW1lbGluZSkge1xuXHRcdFx0XHRcdHRoaXMuX3VuY2FjaGUodHJ1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH07XG5cblx0XHRwLnJlbmRlciA9IGZ1bmN0aW9uKHRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkge1xuXHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5fZmlyc3QsXG5cdFx0XHRcdG5leHQ7XG5cdFx0XHR0aGlzLl90b3RhbFRpbWUgPSB0aGlzLl90aW1lID0gdGhpcy5fcmF3UHJldlRpbWUgPSB0aW1lO1xuXHRcdFx0d2hpbGUgKHR3ZWVuKSB7XG5cdFx0XHRcdG5leHQgPSB0d2Vlbi5fbmV4dDsgLy9yZWNvcmQgaXQgaGVyZSBiZWNhdXNlIHRoZSB2YWx1ZSBjb3VsZCBjaGFuZ2UgYWZ0ZXIgcmVuZGVyaW5nLi4uXG5cdFx0XHRcdGlmICh0d2Vlbi5fYWN0aXZlIHx8ICh0aW1lID49IHR3ZWVuLl9zdGFydFRpbWUgJiYgIXR3ZWVuLl9wYXVzZWQpKSB7XG5cdFx0XHRcdFx0aWYgKCF0d2Vlbi5fcmV2ZXJzZWQpIHtcblx0XHRcdFx0XHRcdHR3ZWVuLnJlbmRlcigodGltZSAtIHR3ZWVuLl9zdGFydFRpbWUpICogdHdlZW4uX3RpbWVTY2FsZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dHdlZW4ucmVuZGVyKCgoIXR3ZWVuLl9kaXJ0eSkgPyB0d2Vlbi5fdG90YWxEdXJhdGlvbiA6IHR3ZWVuLnRvdGFsRHVyYXRpb24oKSkgLSAoKHRpbWUgLSB0d2Vlbi5fc3RhcnRUaW1lKSAqIHR3ZWVuLl90aW1lU2NhbGUpLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHR0d2VlbiA9IG5leHQ7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHAucmF3VGltZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCFfdGlja2VyQWN0aXZlKSB7XG5cdFx0XHRcdF90aWNrZXIud2FrZSgpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXMuX3RvdGFsVGltZTtcblx0XHR9O1xuXG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogVHdlZW5MaXRlXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblx0XHR2YXIgVHdlZW5MaXRlID0gX2NsYXNzKFwiVHdlZW5MaXRlXCIsIGZ1bmN0aW9uKHRhcmdldCwgZHVyYXRpb24sIHZhcnMpIHtcblx0XHRcdFx0QW5pbWF0aW9uLmNhbGwodGhpcywgZHVyYXRpb24sIHZhcnMpO1xuXHRcdFx0XHR0aGlzLnJlbmRlciA9IFR3ZWVuTGl0ZS5wcm90b3R5cGUucmVuZGVyOyAvL3NwZWVkIG9wdGltaXphdGlvbiAoYXZvaWQgcHJvdG90eXBlIGxvb2t1cCBvbiB0aGlzIFwiaG90XCIgbWV0aG9kKVxuXG5cdFx0XHRcdGlmICh0YXJnZXQgPT0gbnVsbCkge1xuXHRcdFx0XHRcdHRocm93IFwiQ2Fubm90IHR3ZWVuIGEgbnVsbCB0YXJnZXQuXCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0aGlzLnRhcmdldCA9IHRhcmdldCA9ICh0eXBlb2YodGFyZ2V0KSAhPT0gXCJzdHJpbmdcIikgPyB0YXJnZXQgOiBUd2VlbkxpdGUuc2VsZWN0b3IodGFyZ2V0KSB8fCB0YXJnZXQ7XG5cblx0XHRcdFx0dmFyIGlzU2VsZWN0b3IgPSAodGFyZ2V0LmpxdWVyeSB8fCAodGFyZ2V0Lmxlbmd0aCAmJiB0YXJnZXQgIT09IHdpbmRvdyAmJiB0YXJnZXRbMF0gJiYgKHRhcmdldFswXSA9PT0gd2luZG93IHx8ICh0YXJnZXRbMF0ubm9kZVR5cGUgJiYgdGFyZ2V0WzBdLnN0eWxlICYmICF0YXJnZXQubm9kZVR5cGUpKSkpLFxuXHRcdFx0XHRcdG92ZXJ3cml0ZSA9IHRoaXMudmFycy5vdmVyd3JpdGUsXG5cdFx0XHRcdFx0aSwgdGFyZywgdGFyZ2V0cztcblxuXHRcdFx0XHR0aGlzLl9vdmVyd3JpdGUgPSBvdmVyd3JpdGUgPSAob3ZlcndyaXRlID09IG51bGwpID8gX292ZXJ3cml0ZUxvb2t1cFtUd2VlbkxpdGUuZGVmYXVsdE92ZXJ3cml0ZV0gOiAodHlwZW9mKG92ZXJ3cml0ZSkgPT09IFwibnVtYmVyXCIpID8gb3ZlcndyaXRlID4+IDAgOiBfb3ZlcndyaXRlTG9va3VwW292ZXJ3cml0ZV07XG5cblx0XHRcdFx0aWYgKChpc1NlbGVjdG9yIHx8IHRhcmdldCBpbnN0YW5jZW9mIEFycmF5IHx8ICh0YXJnZXQucHVzaCAmJiBfaXNBcnJheSh0YXJnZXQpKSkgJiYgdHlwZW9mKHRhcmdldFswXSkgIT09IFwibnVtYmVyXCIpIHtcblx0XHRcdFx0XHR0aGlzLl90YXJnZXRzID0gdGFyZ2V0cyA9IF9zbGljZSh0YXJnZXQpOyAgLy9kb24ndCB1c2UgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGFyZ2V0LCAwKSBiZWNhdXNlIHRoYXQgZG9lc24ndCB3b3JrIGluIElFOCB3aXRoIGEgTm9kZUxpc3QgdGhhdCdzIHJldHVybmVkIGJ5IHF1ZXJ5U2VsZWN0b3JBbGwoKVxuXHRcdFx0XHRcdHRoaXMuX3Byb3BMb29rdXAgPSBbXTtcblx0XHRcdFx0XHR0aGlzLl9zaWJsaW5ncyA9IFtdO1xuXHRcdFx0XHRcdGZvciAoaSA9IDA7IGkgPCB0YXJnZXRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0XHR0YXJnID0gdGFyZ2V0c1tpXTtcblx0XHRcdFx0XHRcdGlmICghdGFyZykge1xuXHRcdFx0XHRcdFx0XHR0YXJnZXRzLnNwbGljZShpLS0sIDEpO1xuXHRcdFx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAodHlwZW9mKHRhcmcpID09PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRcdFx0XHRcdHRhcmcgPSB0YXJnZXRzW2ktLV0gPSBUd2VlbkxpdGUuc2VsZWN0b3IodGFyZyk7IC8vaW4gY2FzZSBpdCdzIGFuIGFycmF5IG9mIHN0cmluZ3Ncblx0XHRcdFx0XHRcdFx0aWYgKHR5cGVvZih0YXJnKSA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0XHRcdFx0XHRcdHRhcmdldHMuc3BsaWNlKGkrMSwgMSk7IC8vdG8gYXZvaWQgYW4gZW5kbGVzcyBsb29wIChjYW4ndCBpbWFnaW5lIHdoeSB0aGUgc2VsZWN0b3Igd291bGQgcmV0dXJuIGEgc3RyaW5nLCBidXQganVzdCBpbiBjYXNlKVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICh0YXJnLmxlbmd0aCAmJiB0YXJnICE9PSB3aW5kb3cgJiYgdGFyZ1swXSAmJiAodGFyZ1swXSA9PT0gd2luZG93IHx8ICh0YXJnWzBdLm5vZGVUeXBlICYmIHRhcmdbMF0uc3R5bGUgJiYgIXRhcmcubm9kZVR5cGUpKSkgeyAvL2luIGNhc2UgdGhlIHVzZXIgaXMgcGFzc2luZyBpbiBhbiBhcnJheSBvZiBzZWxlY3RvciBvYmplY3RzIChsaWtlIGpRdWVyeSBvYmplY3RzKSwgd2UgbmVlZCB0byBjaGVjayBvbmUgbW9yZSBsZXZlbCBhbmQgcHVsbCB0aGluZ3Mgb3V0IGlmIG5lY2Vzc2FyeS4gQWxzbyBub3RlIHRoYXQgPHNlbGVjdD4gZWxlbWVudHMgcGFzcyBhbGwgdGhlIGNyaXRlcmlhIHJlZ2FyZGluZyBsZW5ndGggYW5kIHRoZSBmaXJzdCBjaGlsZCBoYXZpbmcgc3R5bGUsIHNvIHdlIG11c3QgYWxzbyBjaGVjayB0byBlbnN1cmUgdGhlIHRhcmdldCBpc24ndCBhbiBIVE1MIG5vZGUgaXRzZWxmLlxuXHRcdFx0XHRcdFx0XHR0YXJnZXRzLnNwbGljZShpLS0sIDEpO1xuXHRcdFx0XHRcdFx0XHR0aGlzLl90YXJnZXRzID0gdGFyZ2V0cyA9IHRhcmdldHMuY29uY2F0KF9zbGljZSh0YXJnKSk7XG5cdFx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0dGhpcy5fc2libGluZ3NbaV0gPSBfcmVnaXN0ZXIodGFyZywgdGhpcywgZmFsc2UpO1xuXHRcdFx0XHRcdFx0aWYgKG92ZXJ3cml0ZSA9PT0gMSkgaWYgKHRoaXMuX3NpYmxpbmdzW2ldLmxlbmd0aCA+IDEpIHtcblx0XHRcdFx0XHRcdFx0X2FwcGx5T3ZlcndyaXRlKHRhcmcsIHRoaXMsIG51bGwsIDEsIHRoaXMuX3NpYmxpbmdzW2ldKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aGlzLl9wcm9wTG9va3VwID0ge307XG5cdFx0XHRcdFx0dGhpcy5fc2libGluZ3MgPSBfcmVnaXN0ZXIodGFyZ2V0LCB0aGlzLCBmYWxzZSk7XG5cdFx0XHRcdFx0aWYgKG92ZXJ3cml0ZSA9PT0gMSkgaWYgKHRoaXMuX3NpYmxpbmdzLmxlbmd0aCA+IDEpIHtcblx0XHRcdFx0XHRcdF9hcHBseU92ZXJ3cml0ZSh0YXJnZXQsIHRoaXMsIG51bGwsIDEsIHRoaXMuX3NpYmxpbmdzKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHRoaXMudmFycy5pbW1lZGlhdGVSZW5kZXIgfHwgKGR1cmF0aW9uID09PSAwICYmIHRoaXMuX2RlbGF5ID09PSAwICYmIHRoaXMudmFycy5pbW1lZGlhdGVSZW5kZXIgIT09IGZhbHNlKSkge1xuXHRcdFx0XHRcdHRoaXMuX3RpbWUgPSAtX3RpbnlOdW07IC8vZm9yY2VzIGEgcmVuZGVyIHdpdGhvdXQgaGF2aW5nIHRvIHNldCB0aGUgcmVuZGVyKCkgXCJmb3JjZVwiIHBhcmFtZXRlciB0byB0cnVlIGJlY2F1c2Ugd2Ugd2FudCB0byBhbGxvdyBsYXp5aW5nIGJ5IGRlZmF1bHQgKHVzaW5nIHRoZSBcImZvcmNlXCIgcGFyYW1ldGVyIGFsd2F5cyBmb3JjZXMgYW4gaW1tZWRpYXRlIGZ1bGwgcmVuZGVyKVxuXHRcdFx0XHRcdHRoaXMucmVuZGVyKC10aGlzLl9kZWxheSk7XG5cdFx0XHRcdH1cblx0XHRcdH0sIHRydWUpLFxuXHRcdFx0X2lzU2VsZWN0b3IgPSBmdW5jdGlvbih2KSB7XG5cdFx0XHRcdHJldHVybiAodiAmJiB2Lmxlbmd0aCAmJiB2ICE9PSB3aW5kb3cgJiYgdlswXSAmJiAodlswXSA9PT0gd2luZG93IHx8ICh2WzBdLm5vZGVUeXBlICYmIHZbMF0uc3R5bGUgJiYgIXYubm9kZVR5cGUpKSk7IC8vd2UgY2Fubm90IGNoZWNrIFwibm9kZVR5cGVcIiBpZiB0aGUgdGFyZ2V0IGlzIHdpbmRvdyBmcm9tIHdpdGhpbiBhbiBpZnJhbWUsIG90aGVyd2lzZSBpdCB3aWxsIHRyaWdnZXIgYSBzZWN1cml0eSBlcnJvciBpbiBzb21lIGJyb3dzZXJzIGxpa2UgRmlyZWZveC5cblx0XHRcdH0sXG5cdFx0XHRfYXV0b0NTUyA9IGZ1bmN0aW9uKHZhcnMsIHRhcmdldCkge1xuXHRcdFx0XHR2YXIgY3NzID0ge30sXG5cdFx0XHRcdFx0cDtcblx0XHRcdFx0Zm9yIChwIGluIHZhcnMpIHtcblx0XHRcdFx0XHRpZiAoIV9yZXNlcnZlZFByb3BzW3BdICYmICghKHAgaW4gdGFyZ2V0KSB8fCBwID09PSBcInRyYW5zZm9ybVwiIHx8IHAgPT09IFwieFwiIHx8IHAgPT09IFwieVwiIHx8IHAgPT09IFwid2lkdGhcIiB8fCBwID09PSBcImhlaWdodFwiIHx8IHAgPT09IFwiY2xhc3NOYW1lXCIgfHwgcCA9PT0gXCJib3JkZXJcIikgJiYgKCFfcGx1Z2luc1twXSB8fCAoX3BsdWdpbnNbcF0gJiYgX3BsdWdpbnNbcF0uX2F1dG9DU1MpKSkgeyAvL25vdGU6IDxpbWc+IGVsZW1lbnRzIGNvbnRhaW4gcmVhZC1vbmx5IFwieFwiIGFuZCBcInlcIiBwcm9wZXJ0aWVzLiBXZSBzaG91bGQgYWxzbyBwcmlvcml0aXplIGVkaXRpbmcgY3NzIHdpZHRoL2hlaWdodCByYXRoZXIgdGhhbiB0aGUgZWxlbWVudCdzIHByb3BlcnRpZXMuXG5cdFx0XHRcdFx0XHRjc3NbcF0gPSB2YXJzW3BdO1xuXHRcdFx0XHRcdFx0ZGVsZXRlIHZhcnNbcF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHZhcnMuY3NzID0gY3NzO1xuXHRcdFx0fTtcblxuXHRcdHAgPSBUd2VlbkxpdGUucHJvdG90eXBlID0gbmV3IEFuaW1hdGlvbigpO1xuXHRcdHAuY29uc3RydWN0b3IgPSBUd2VlbkxpdGU7XG5cdFx0cC5raWxsKCkuX2djID0gZmFsc2U7XG5cbi8vLS0tLVR3ZWVuTGl0ZSBkZWZhdWx0cywgb3ZlcndyaXRlIG1hbmFnZW1lbnQsIGFuZCByb290IHVwZGF0ZXMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5cdFx0cC5yYXRpbyA9IDA7XG5cdFx0cC5fZmlyc3RQVCA9IHAuX3RhcmdldHMgPSBwLl9vdmVyd3JpdHRlblByb3BzID0gcC5fc3RhcnRBdCA9IG51bGw7XG5cdFx0cC5fbm90aWZ5UGx1Z2luc09mRW5hYmxlZCA9IHAuX2xhenkgPSBmYWxzZTtcblxuXHRcdFR3ZWVuTGl0ZS52ZXJzaW9uID0gXCIxLjE4LjBcIjtcblx0XHRUd2VlbkxpdGUuZGVmYXVsdEVhc2UgPSBwLl9lYXNlID0gbmV3IEVhc2UobnVsbCwgbnVsbCwgMSwgMSk7XG5cdFx0VHdlZW5MaXRlLmRlZmF1bHRPdmVyd3JpdGUgPSBcImF1dG9cIjtcblx0XHRUd2VlbkxpdGUudGlja2VyID0gX3RpY2tlcjtcblx0XHRUd2VlbkxpdGUuYXV0b1NsZWVwID0gMTIwO1xuXHRcdFR3ZWVuTGl0ZS5sYWdTbW9vdGhpbmcgPSBmdW5jdGlvbih0aHJlc2hvbGQsIGFkanVzdGVkTGFnKSB7XG5cdFx0XHRfdGlja2VyLmxhZ1Ntb290aGluZyh0aHJlc2hvbGQsIGFkanVzdGVkTGFnKTtcblx0XHR9O1xuXG5cdFx0VHdlZW5MaXRlLnNlbGVjdG9yID0gd2luZG93LiQgfHwgd2luZG93LmpRdWVyeSB8fCBmdW5jdGlvbihlKSB7XG5cdFx0XHR2YXIgc2VsZWN0b3IgPSB3aW5kb3cuJCB8fCB3aW5kb3cualF1ZXJ5O1xuXHRcdFx0aWYgKHNlbGVjdG9yKSB7XG5cdFx0XHRcdFR3ZWVuTGl0ZS5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHRcdFx0XHRyZXR1cm4gc2VsZWN0b3IoZSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gKHR5cGVvZihkb2N1bWVudCkgPT09IFwidW5kZWZpbmVkXCIpID8gZSA6IChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsID8gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChlKSA6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKChlLmNoYXJBdCgwKSA9PT0gXCIjXCIpID8gZS5zdWJzdHIoMSkgOiBlKSk7XG5cdFx0fTtcblxuXHRcdHZhciBfbGF6eVR3ZWVucyA9IFtdLFxuXHRcdFx0X2xhenlMb29rdXAgPSB7fSxcblx0XHRcdF9udW1iZXJzRXhwID0gLyg/OigtfC09fFxcKz0pP1xcZCpcXC4/XFxkKig/OmVbXFwtK10/XFxkKyk/KVswLTldL2lnLFxuXHRcdFx0Ly9fbm9uTnVtYmVyc0V4cCA9IC8oPzooW1xcLStdKD8hKFxcZHw9KSkpfFteXFxkXFwtKz1lXXwoZSg/IVtcXC0rXVtcXGRdKSkpKy9pZyxcblx0XHRcdF9zZXRSYXRpbyA9IGZ1bmN0aW9uKHYpIHtcblx0XHRcdFx0dmFyIHB0ID0gdGhpcy5fZmlyc3RQVCxcblx0XHRcdFx0XHRtaW4gPSAwLjAwMDAwMSxcblx0XHRcdFx0XHR2YWw7XG5cdFx0XHRcdHdoaWxlIChwdCkge1xuXHRcdFx0XHRcdHZhbCA9ICFwdC5ibG9iID8gcHQuYyAqIHYgKyBwdC5zIDogdiA/IHRoaXMuam9pbihcIlwiKSA6IHRoaXMuc3RhcnQ7XG5cdFx0XHRcdFx0aWYgKHB0LnIpIHtcblx0XHRcdFx0XHRcdHZhbCA9IE1hdGgucm91bmQodmFsKTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHZhbCA8IG1pbikgaWYgKHZhbCA+IC1taW4pIHsgLy9wcmV2ZW50cyBpc3N1ZXMgd2l0aCBjb252ZXJ0aW5nIHZlcnkgc21hbGwgbnVtYmVycyB0byBzdHJpbmdzIGluIHRoZSBicm93c2VyXG5cdFx0XHRcdFx0XHR2YWwgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIXB0LmYpIHtcblx0XHRcdFx0XHRcdHB0LnRbcHQucF0gPSB2YWw7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChwdC5mcCkge1xuXHRcdFx0XHRcdFx0cHQudFtwdC5wXShwdC5mcCwgdmFsKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cHQudFtwdC5wXSh2YWwpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwdCA9IHB0Ll9uZXh0O1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0Ly9jb21wYXJlcyB0d28gc3RyaW5ncyAoc3RhcnQvZW5kKSwgZmluZHMgdGhlIG51bWJlcnMgdGhhdCBhcmUgZGlmZmVyZW50IGFuZCBzcGl0cyBiYWNrIGFuIGFycmF5IHJlcHJlc2VudGluZyB0aGUgd2hvbGUgdmFsdWUgYnV0IHdpdGggdGhlIGNoYW5naW5nIHZhbHVlcyBpc29sYXRlZCBhcyBlbGVtZW50cy4gRm9yIGV4YW1wbGUsIFwicmdiKDAsMCwwKVwiIGFuZCBcInJnYigxMDAsNTAsMClcIiB3b3VsZCBiZWNvbWUgW1wicmdiKFwiLCAwLCBcIixcIiwgNTAsIFwiLDApXCJdLiBOb3RpY2UgaXQgbWVyZ2VzIHRoZSBwYXJ0cyB0aGF0IGFyZSBpZGVudGljYWwgKHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbikuIFRoZSBhcnJheSBhbHNvIGhhcyBhIGxpbmtlZCBsaXN0IG9mIFByb3BUd2VlbnMgYXR0YWNoZWQgc3RhcnRpbmcgd2l0aCBfZmlyc3RQVCB0aGF0IGNvbnRhaW4gdGhlIHR3ZWVuaW5nIGRhdGEgKHQsIHAsIHMsIGMsIGYsIGV0Yy4pLiBJdCBhbHNvIHN0b3JlcyB0aGUgc3RhcnRpbmcgdmFsdWUgYXMgYSBcInN0YXJ0XCIgcHJvcGVydHkgc28gdGhhdCB3ZSBjYW4gcmV2ZXJ0IHRvIGl0IGlmL3doZW4gbmVjZXNzYXJ5LCBsaWtlIHdoZW4gYSB0d2VlbiByZXdpbmRzIGZ1bGx5LiBJZiB0aGUgcXVhbnRpdHkgb2YgbnVtYmVycyBkaWZmZXJzIGJldHdlZW4gdGhlIHN0YXJ0IGFuZCBlbmQsIGl0IHdpbGwgYWx3YXlzIHByaW9yaXRpemUgdGhlIGVuZCB2YWx1ZShzKS4gVGhlIHB0IHBhcmFtZXRlciBpcyBvcHRpb25hbCAtIGl0J3MgZm9yIGEgUHJvcFR3ZWVuIHRoYXQgd2lsbCBiZSBhcHBlbmRlZCB0byB0aGUgZW5kIG9mIHRoZSBsaW5rZWQgbGlzdCBhbmQgaXMgdHlwaWNhbGx5IGZvciBhY3R1YWxseSBzZXR0aW5nIHRoZSB2YWx1ZSBhZnRlciBhbGwgb2YgdGhlIGVsZW1lbnRzIGhhdmUgYmVlbiB1cGRhdGVkICh3aXRoIGFycmF5LmpvaW4oXCJcIikpLlxuXHRcdFx0X2Jsb2JEaWYgPSBmdW5jdGlvbihzdGFydCwgZW5kLCBmaWx0ZXIsIHB0KSB7XG5cdFx0XHRcdHZhciBhID0gW3N0YXJ0LCBlbmRdLFxuXHRcdFx0XHRcdGNoYXJJbmRleCA9IDAsXG5cdFx0XHRcdFx0cyA9IFwiXCIsXG5cdFx0XHRcdFx0Y29sb3IgPSAwLFxuXHRcdFx0XHRcdHN0YXJ0TnVtcywgZW5kTnVtcywgbnVtLCBpLCBsLCBub25OdW1iZXJzLCBjdXJyZW50TnVtO1xuXHRcdFx0XHRhLnN0YXJ0ID0gc3RhcnQ7XG5cdFx0XHRcdGlmIChmaWx0ZXIpIHtcblx0XHRcdFx0XHRmaWx0ZXIoYSk7IC8vcGFzcyBhbiBhcnJheSB3aXRoIHRoZSBzdGFydGluZyBhbmQgZW5kaW5nIHZhbHVlcyBhbmQgbGV0IHRoZSBmaWx0ZXIgZG8gd2hhdGV2ZXIgaXQgbmVlZHMgdG8gdGhlIHZhbHVlcy5cblx0XHRcdFx0XHRzdGFydCA9IGFbMF07XG5cdFx0XHRcdFx0ZW5kID0gYVsxXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRhLmxlbmd0aCA9IDA7XG5cdFx0XHRcdHN0YXJ0TnVtcyA9IHN0YXJ0Lm1hdGNoKF9udW1iZXJzRXhwKSB8fCBbXTtcblx0XHRcdFx0ZW5kTnVtcyA9IGVuZC5tYXRjaChfbnVtYmVyc0V4cCkgfHwgW107XG5cdFx0XHRcdGlmIChwdCkge1xuXHRcdFx0XHRcdHB0Ll9uZXh0ID0gbnVsbDtcblx0XHRcdFx0XHRwdC5ibG9iID0gMTtcblx0XHRcdFx0XHRhLl9maXJzdFBUID0gcHQ7IC8vYXBwbHkgbGFzdCBpbiB0aGUgbGlua2VkIGxpc3QgKHdoaWNoIG1lYW5zIGluc2VydGluZyBpdCBmaXJzdClcblx0XHRcdFx0fVxuXHRcdFx0XHRsID0gZW5kTnVtcy5sZW5ndGg7XG5cdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcblx0XHRcdFx0XHRjdXJyZW50TnVtID0gZW5kTnVtc1tpXTtcblx0XHRcdFx0XHRub25OdW1iZXJzID0gZW5kLnN1YnN0cihjaGFySW5kZXgsIGVuZC5pbmRleE9mKGN1cnJlbnROdW0sIGNoYXJJbmRleCktY2hhckluZGV4KTtcblx0XHRcdFx0XHRzICs9IChub25OdW1iZXJzIHx8ICFpKSA/IG5vbk51bWJlcnMgOiBcIixcIjsgLy9ub3RlOiBTVkcgc3BlYyBhbGxvd3Mgb21pc3Npb24gb2YgY29tbWEvc3BhY2Ugd2hlbiBhIG5lZ2F0aXZlIHNpZ24gaXMgd2VkZ2VkIGJldHdlZW4gdHdvIG51bWJlcnMsIGxpa2UgMi41LTUuMyBpbnN0ZWFkIG9mIDIuNSwtNS4zIGJ1dCB3aGVuIHR3ZWVuaW5nLCB0aGUgbmVnYXRpdmUgdmFsdWUgbWF5IHN3aXRjaCB0byBwb3NpdGl2ZSwgc28gd2UgaW5zZXJ0IHRoZSBjb21tYSBqdXN0IGluIGNhc2UuXG5cdFx0XHRcdFx0Y2hhckluZGV4ICs9IG5vbk51bWJlcnMubGVuZ3RoO1xuXHRcdFx0XHRcdGlmIChjb2xvcikgeyAvL3NlbnNlIHJnYmEoKSB2YWx1ZXMgYW5kIHJvdW5kIHRoZW0uXG5cdFx0XHRcdFx0XHRjb2xvciA9IChjb2xvciArIDEpICUgNTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKG5vbk51bWJlcnMuc3Vic3RyKC01KSA9PT0gXCJyZ2JhKFwiKSB7XG5cdFx0XHRcdFx0XHRjb2xvciA9IDE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChjdXJyZW50TnVtID09PSBzdGFydE51bXNbaV0gfHwgc3RhcnROdW1zLmxlbmd0aCA8PSBpKSB7XG5cdFx0XHRcdFx0XHRzICs9IGN1cnJlbnROdW07XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGlmIChzKSB7XG5cdFx0XHRcdFx0XHRcdGEucHVzaChzKTtcblx0XHRcdFx0XHRcdFx0cyA9IFwiXCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRudW0gPSBwYXJzZUZsb2F0KHN0YXJ0TnVtc1tpXSk7XG5cdFx0XHRcdFx0XHRhLnB1c2gobnVtKTtcblx0XHRcdFx0XHRcdGEuX2ZpcnN0UFQgPSB7X25leHQ6IGEuX2ZpcnN0UFQsIHQ6YSwgcDogYS5sZW5ndGgtMSwgczpudW0sIGM6KChjdXJyZW50TnVtLmNoYXJBdCgxKSA9PT0gXCI9XCIpID8gcGFyc2VJbnQoY3VycmVudE51bS5jaGFyQXQoMCkgKyBcIjFcIiwgMTApICogcGFyc2VGbG9hdChjdXJyZW50TnVtLnN1YnN0cigyKSkgOiAocGFyc2VGbG9hdChjdXJyZW50TnVtKSAtIG51bSkpIHx8IDAsIGY6MCwgcjooY29sb3IgJiYgY29sb3IgPCA0KX07XG5cdFx0XHRcdFx0XHQvL25vdGU6IHdlIGRvbid0IHNldCBfcHJldiBiZWNhdXNlIHdlJ2xsIG5ldmVyIG5lZWQgdG8gcmVtb3ZlIGluZGl2aWR1YWwgUHJvcFR3ZWVucyBmcm9tIHRoaXMgbGlzdC5cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y2hhckluZGV4ICs9IGN1cnJlbnROdW0ubGVuZ3RoO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHMgKz0gZW5kLnN1YnN0cihjaGFySW5kZXgpO1xuXHRcdFx0XHRpZiAocykge1xuXHRcdFx0XHRcdGEucHVzaChzKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRhLnNldFJhdGlvID0gX3NldFJhdGlvO1xuXHRcdFx0XHRyZXR1cm4gYTtcblx0XHRcdH0sXG5cdFx0XHQvL25vdGU6IFwiZnVuY1BhcmFtXCIgaXMgb25seSBuZWNlc3NhcnkgZm9yIGZ1bmN0aW9uLWJhc2VkIGdldHRlcnMvc2V0dGVycyB0aGF0IHJlcXVpcmUgYW4gZXh0cmEgcGFyYW1ldGVyIGxpa2UgZ2V0QXR0cmlidXRlKFwid2lkdGhcIikgYW5kIHNldEF0dHJpYnV0ZShcIndpZHRoXCIsIHZhbHVlKS4gSW4gdGhpcyBleGFtcGxlLCBmdW5jUGFyYW0gd291bGQgYmUgXCJ3aWR0aFwiLiBVc2VkIGJ5IEF0dHJQbHVnaW4gZm9yIGV4YW1wbGUuXG5cdFx0XHRfYWRkUHJvcFR3ZWVuID0gZnVuY3Rpb24odGFyZ2V0LCBwcm9wLCBzdGFydCwgZW5kLCBvdmVyd3JpdGVQcm9wLCByb3VuZCwgZnVuY1BhcmFtLCBzdHJpbmdGaWx0ZXIpIHtcblx0XHRcdFx0dmFyIHMgPSAoc3RhcnQgPT09IFwiZ2V0XCIpID8gdGFyZ2V0W3Byb3BdIDogc3RhcnQsXG5cdFx0XHRcdFx0dHlwZSA9IHR5cGVvZih0YXJnZXRbcHJvcF0pLFxuXHRcdFx0XHRcdGlzUmVsYXRpdmUgPSAodHlwZW9mKGVuZCkgPT09IFwic3RyaW5nXCIgJiYgZW5kLmNoYXJBdCgxKSA9PT0gXCI9XCIpLFxuXHRcdFx0XHRcdHB0ID0ge3Q6dGFyZ2V0LCBwOnByb3AsIHM6cywgZjoodHlwZSA9PT0gXCJmdW5jdGlvblwiKSwgcGc6MCwgbjpvdmVyd3JpdGVQcm9wIHx8IHByb3AsIHI6cm91bmQsIHByOjAsIGM6aXNSZWxhdGl2ZSA/IHBhcnNlSW50KGVuZC5jaGFyQXQoMCkgKyBcIjFcIiwgMTApICogcGFyc2VGbG9hdChlbmQuc3Vic3RyKDIpKSA6IChwYXJzZUZsb2F0KGVuZCkgLSBzKSB8fCAwfSxcblx0XHRcdFx0XHRibG9iLCBnZXR0ZXJOYW1lO1xuXHRcdFx0XHRpZiAodHlwZSAhPT0gXCJudW1iZXJcIikge1xuXHRcdFx0XHRcdGlmICh0eXBlID09PSBcImZ1bmN0aW9uXCIgJiYgc3RhcnQgPT09IFwiZ2V0XCIpIHtcblx0XHRcdFx0XHRcdGdldHRlck5hbWUgPSAoKHByb3AuaW5kZXhPZihcInNldFwiKSB8fCB0eXBlb2YodGFyZ2V0W1wiZ2V0XCIgKyBwcm9wLnN1YnN0cigzKV0pICE9PSBcImZ1bmN0aW9uXCIpID8gcHJvcCA6IFwiZ2V0XCIgKyBwcm9wLnN1YnN0cigzKSk7XG5cdFx0XHRcdFx0XHRwdC5zID0gcyA9IGZ1bmNQYXJhbSA/IHRhcmdldFtnZXR0ZXJOYW1lXShmdW5jUGFyYW0pIDogdGFyZ2V0W2dldHRlck5hbWVdKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICh0eXBlb2YocykgPT09IFwic3RyaW5nXCIgJiYgKGZ1bmNQYXJhbSB8fCBpc05hTihzKSkpIHtcblx0XHRcdFx0XHRcdC8vYSBibG9iIChzdHJpbmcgdGhhdCBoYXMgbXVsdGlwbGUgbnVtYmVycyBpbiBpdClcblx0XHRcdFx0XHRcdHB0LmZwID0gZnVuY1BhcmFtO1xuXHRcdFx0XHRcdFx0YmxvYiA9IF9ibG9iRGlmKHMsIGVuZCwgc3RyaW5nRmlsdGVyIHx8IFR3ZWVuTGl0ZS5kZWZhdWx0U3RyaW5nRmlsdGVyLCBwdCk7XG5cdFx0XHRcdFx0XHRwdCA9IHt0OmJsb2IsIHA6XCJzZXRSYXRpb1wiLCBzOjAsIGM6MSwgZjoyLCBwZzowLCBuOm92ZXJ3cml0ZVByb3AgfHwgcHJvcCwgcHI6MH07IC8vXCIyXCIgaW5kaWNhdGVzIGl0J3MgYSBCbG9iIHByb3BlcnR5IHR3ZWVuLiBOZWVkZWQgZm9yIFJvdW5kUHJvcHNQbHVnaW4gZm9yIGV4YW1wbGUuXG5cdFx0XHRcdFx0fSBlbHNlIGlmICghaXNSZWxhdGl2ZSkge1xuXHRcdFx0XHRcdFx0cHQuYyA9IChwYXJzZUZsb2F0KGVuZCkgLSBwYXJzZUZsb2F0KHMpKSB8fCAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAocHQuYykgeyAvL29ubHkgYWRkIGl0IHRvIHRoZSBsaW5rZWQgbGlzdCBpZiB0aGVyZSdzIGEgY2hhbmdlLlxuXHRcdFx0XHRcdGlmICgocHQuX25leHQgPSB0aGlzLl9maXJzdFBUKSkge1xuXHRcdFx0XHRcdFx0cHQuX25leHQuX3ByZXYgPSBwdDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGhpcy5fZmlyc3RQVCA9IHB0O1xuXHRcdFx0XHRcdHJldHVybiBwdDtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdF9pbnRlcm5hbHMgPSBUd2VlbkxpdGUuX2ludGVybmFscyA9IHtpc0FycmF5Ol9pc0FycmF5LCBpc1NlbGVjdG9yOl9pc1NlbGVjdG9yLCBsYXp5VHdlZW5zOl9sYXp5VHdlZW5zLCBibG9iRGlmOl9ibG9iRGlmfSwgLy9naXZlcyB1cyBhIHdheSB0byBleHBvc2UgY2VydGFpbiBwcml2YXRlIHZhbHVlcyB0byBvdGhlciBHcmVlblNvY2sgY2xhc3NlcyB3aXRob3V0IGNvbnRhbWluYXRpbmcgdGhhIG1haW4gVHdlZW5MaXRlIG9iamVjdC5cblx0XHRcdF9wbHVnaW5zID0gVHdlZW5MaXRlLl9wbHVnaW5zID0ge30sXG5cdFx0XHRfdHdlZW5Mb29rdXAgPSBfaW50ZXJuYWxzLnR3ZWVuTG9va3VwID0ge30sXG5cdFx0XHRfdHdlZW5Mb29rdXBOdW0gPSAwLFxuXHRcdFx0X3Jlc2VydmVkUHJvcHMgPSBfaW50ZXJuYWxzLnJlc2VydmVkUHJvcHMgPSB7ZWFzZToxLCBkZWxheToxLCBvdmVyd3JpdGU6MSwgb25Db21wbGV0ZToxLCBvbkNvbXBsZXRlUGFyYW1zOjEsIG9uQ29tcGxldGVTY29wZToxLCB1c2VGcmFtZXM6MSwgcnVuQmFja3dhcmRzOjEsIHN0YXJ0QXQ6MSwgb25VcGRhdGU6MSwgb25VcGRhdGVQYXJhbXM6MSwgb25VcGRhdGVTY29wZToxLCBvblN0YXJ0OjEsIG9uU3RhcnRQYXJhbXM6MSwgb25TdGFydFNjb3BlOjEsIG9uUmV2ZXJzZUNvbXBsZXRlOjEsIG9uUmV2ZXJzZUNvbXBsZXRlUGFyYW1zOjEsIG9uUmV2ZXJzZUNvbXBsZXRlU2NvcGU6MSwgb25SZXBlYXQ6MSwgb25SZXBlYXRQYXJhbXM6MSwgb25SZXBlYXRTY29wZToxLCBlYXNlUGFyYW1zOjEsIHlveW86MSwgaW1tZWRpYXRlUmVuZGVyOjEsIHJlcGVhdDoxLCByZXBlYXREZWxheToxLCBkYXRhOjEsIHBhdXNlZDoxLCByZXZlcnNlZDoxLCBhdXRvQ1NTOjEsIGxhenk6MSwgb25PdmVyd3JpdGU6MSwgY2FsbGJhY2tTY29wZToxLCBzdHJpbmdGaWx0ZXI6MX0sXG5cdFx0XHRfb3ZlcndyaXRlTG9va3VwID0ge25vbmU6MCwgYWxsOjEsIGF1dG86MiwgY29uY3VycmVudDozLCBhbGxPblN0YXJ0OjQsIHByZWV4aXN0aW5nOjUsIFwidHJ1ZVwiOjEsIFwiZmFsc2VcIjowfSxcblx0XHRcdF9yb290RnJhbWVzVGltZWxpbmUgPSBBbmltYXRpb24uX3Jvb3RGcmFtZXNUaW1lbGluZSA9IG5ldyBTaW1wbGVUaW1lbGluZSgpLFxuXHRcdFx0X3Jvb3RUaW1lbGluZSA9IEFuaW1hdGlvbi5fcm9vdFRpbWVsaW5lID0gbmV3IFNpbXBsZVRpbWVsaW5lKCksXG5cdFx0XHRfbmV4dEdDRnJhbWUgPSAzMCxcblx0XHRcdF9sYXp5UmVuZGVyID0gX2ludGVybmFscy5sYXp5UmVuZGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBpID0gX2xhenlUd2VlbnMubGVuZ3RoLFxuXHRcdFx0XHRcdHR3ZWVuO1xuXHRcdFx0XHRfbGF6eUxvb2t1cCA9IHt9O1xuXHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHR0d2VlbiA9IF9sYXp5VHdlZW5zW2ldO1xuXHRcdFx0XHRcdGlmICh0d2VlbiAmJiB0d2Vlbi5fbGF6eSAhPT0gZmFsc2UpIHtcblx0XHRcdFx0XHRcdHR3ZWVuLnJlbmRlcih0d2Vlbi5fbGF6eVswXSwgdHdlZW4uX2xhenlbMV0sIHRydWUpO1xuXHRcdFx0XHRcdFx0dHdlZW4uX2xhenkgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0X2xhenlUd2VlbnMubGVuZ3RoID0gMDtcblx0XHRcdH07XG5cblx0XHRfcm9vdFRpbWVsaW5lLl9zdGFydFRpbWUgPSBfdGlja2VyLnRpbWU7XG5cdFx0X3Jvb3RGcmFtZXNUaW1lbGluZS5fc3RhcnRUaW1lID0gX3RpY2tlci5mcmFtZTtcblx0XHRfcm9vdFRpbWVsaW5lLl9hY3RpdmUgPSBfcm9vdEZyYW1lc1RpbWVsaW5lLl9hY3RpdmUgPSB0cnVlO1xuXHRcdHNldFRpbWVvdXQoX2xhenlSZW5kZXIsIDEpOyAvL29uIHNvbWUgbW9iaWxlIGRldmljZXMsIHRoZXJlIGlzbid0IGEgXCJ0aWNrXCIgYmVmb3JlIGNvZGUgcnVucyB3aGljaCBtZWFucyBhbnkgbGF6eSByZW5kZXJzIHdvdWxkbid0IHJ1biBiZWZvcmUgdGhlIG5leHQgb2ZmaWNpYWwgXCJ0aWNrXCIuXG5cblx0XHRBbmltYXRpb24uX3VwZGF0ZVJvb3QgPSBUd2VlbkxpdGUucmVuZGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBpLCBhLCBwO1xuXHRcdFx0XHRpZiAoX2xhenlUd2VlbnMubGVuZ3RoKSB7IC8vaWYgY29kZSBpcyBydW4gb3V0c2lkZSBvZiB0aGUgcmVxdWVzdEFuaW1hdGlvbkZyYW1lIGxvb3AsIHRoZXJlIG1heSBiZSB0d2VlbnMgcXVldWVkIEFGVEVSIHRoZSBlbmdpbmUgcmVmcmVzaGVkLCBzbyB3ZSBuZWVkIHRvIGVuc3VyZSBhbnkgcGVuZGluZyByZW5kZXJzIG9jY3VyIGJlZm9yZSB3ZSByZWZyZXNoIGFnYWluLlxuXHRcdFx0XHRcdF9sYXp5UmVuZGVyKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0X3Jvb3RUaW1lbGluZS5yZW5kZXIoKF90aWNrZXIudGltZSAtIF9yb290VGltZWxpbmUuX3N0YXJ0VGltZSkgKiBfcm9vdFRpbWVsaW5lLl90aW1lU2NhbGUsIGZhbHNlLCBmYWxzZSk7XG5cdFx0XHRcdF9yb290RnJhbWVzVGltZWxpbmUucmVuZGVyKChfdGlja2VyLmZyYW1lIC0gX3Jvb3RGcmFtZXNUaW1lbGluZS5fc3RhcnRUaW1lKSAqIF9yb290RnJhbWVzVGltZWxpbmUuX3RpbWVTY2FsZSwgZmFsc2UsIGZhbHNlKTtcblx0XHRcdFx0aWYgKF9sYXp5VHdlZW5zLmxlbmd0aCkge1xuXHRcdFx0XHRcdF9sYXp5UmVuZGVyKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKF90aWNrZXIuZnJhbWUgPj0gX25leHRHQ0ZyYW1lKSB7IC8vZHVtcCBnYXJiYWdlIGV2ZXJ5IDEyMCBmcmFtZXMgb3Igd2hhdGV2ZXIgdGhlIHVzZXIgc2V0cyBUd2VlbkxpdGUuYXV0b1NsZWVwIHRvXG5cdFx0XHRcdFx0X25leHRHQ0ZyYW1lID0gX3RpY2tlci5mcmFtZSArIChwYXJzZUludChUd2VlbkxpdGUuYXV0b1NsZWVwLCAxMCkgfHwgMTIwKTtcblx0XHRcdFx0XHRmb3IgKHAgaW4gX3R3ZWVuTG9va3VwKSB7XG5cdFx0XHRcdFx0XHRhID0gX3R3ZWVuTG9va3VwW3BdLnR3ZWVucztcblx0XHRcdFx0XHRcdGkgPSBhLmxlbmd0aDtcblx0XHRcdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdFx0XHRpZiAoYVtpXS5fZ2MpIHtcblx0XHRcdFx0XHRcdFx0XHRhLnNwbGljZShpLCAxKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKGEubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRcdFx0XHRcdGRlbGV0ZSBfdHdlZW5Mb29rdXBbcF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vaWYgdGhlcmUgYXJlIG5vIG1vcmUgdHdlZW5zIGluIHRoZSByb290IHRpbWVsaW5lcywgb3IgaWYgdGhleSdyZSBhbGwgcGF1c2VkLCBtYWtlIHRoZSBfdGltZXIgc2xlZXAgdG8gcmVkdWNlIGxvYWQgb24gdGhlIENQVSBzbGlnaHRseVxuXHRcdFx0XHRcdHAgPSBfcm9vdFRpbWVsaW5lLl9maXJzdDtcblx0XHRcdFx0XHRpZiAoIXAgfHwgcC5fcGF1c2VkKSBpZiAoVHdlZW5MaXRlLmF1dG9TbGVlcCAmJiAhX3Jvb3RGcmFtZXNUaW1lbGluZS5fZmlyc3QgJiYgX3RpY2tlci5fbGlzdGVuZXJzLnRpY2subGVuZ3RoID09PSAxKSB7XG5cdFx0XHRcdFx0XHR3aGlsZSAocCAmJiBwLl9wYXVzZWQpIHtcblx0XHRcdFx0XHRcdFx0cCA9IHAuX25leHQ7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIXApIHtcblx0XHRcdFx0XHRcdFx0X3RpY2tlci5zbGVlcCgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdF90aWNrZXIuYWRkRXZlbnRMaXN0ZW5lcihcInRpY2tcIiwgQW5pbWF0aW9uLl91cGRhdGVSb290KTtcblxuXHRcdHZhciBfcmVnaXN0ZXIgPSBmdW5jdGlvbih0YXJnZXQsIHR3ZWVuLCBzY3J1Yikge1xuXHRcdFx0XHR2YXIgaWQgPSB0YXJnZXQuX2dzVHdlZW5JRCwgYSwgaTtcblx0XHRcdFx0aWYgKCFfdHdlZW5Mb29rdXBbaWQgfHwgKHRhcmdldC5fZ3NUd2VlbklEID0gaWQgPSBcInRcIiArIChfdHdlZW5Mb29rdXBOdW0rKykpXSkge1xuXHRcdFx0XHRcdF90d2Vlbkxvb2t1cFtpZF0gPSB7dGFyZ2V0OnRhcmdldCwgdHdlZW5zOltdfTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodHdlZW4pIHtcblx0XHRcdFx0XHRhID0gX3R3ZWVuTG9va3VwW2lkXS50d2VlbnM7XG5cdFx0XHRcdFx0YVsoaSA9IGEubGVuZ3RoKV0gPSB0d2Vlbjtcblx0XHRcdFx0XHRpZiAoc2NydWIpIHtcblx0XHRcdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdFx0XHRpZiAoYVtpXSA9PT0gdHdlZW4pIHtcblx0XHRcdFx0XHRcdFx0XHRhLnNwbGljZShpLCAxKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gX3R3ZWVuTG9va3VwW2lkXS50d2VlbnM7XG5cdFx0XHR9LFxuXHRcdFx0X29uT3ZlcndyaXRlID0gZnVuY3Rpb24ob3ZlcndyaXR0ZW5Ud2Vlbiwgb3ZlcndyaXRpbmdUd2VlbiwgdGFyZ2V0LCBraWxsZWRQcm9wcykge1xuXHRcdFx0XHR2YXIgZnVuYyA9IG92ZXJ3cml0dGVuVHdlZW4udmFycy5vbk92ZXJ3cml0ZSwgcjEsIHIyO1xuXHRcdFx0XHRpZiAoZnVuYykge1xuXHRcdFx0XHRcdHIxID0gZnVuYyhvdmVyd3JpdHRlblR3ZWVuLCBvdmVyd3JpdGluZ1R3ZWVuLCB0YXJnZXQsIGtpbGxlZFByb3BzKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRmdW5jID0gVHdlZW5MaXRlLm9uT3ZlcndyaXRlO1xuXHRcdFx0XHRpZiAoZnVuYykge1xuXHRcdFx0XHRcdHIyID0gZnVuYyhvdmVyd3JpdHRlblR3ZWVuLCBvdmVyd3JpdGluZ1R3ZWVuLCB0YXJnZXQsIGtpbGxlZFByb3BzKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gKHIxICE9PSBmYWxzZSAmJiByMiAhPT0gZmFsc2UpO1xuXHRcdFx0fSxcblx0XHRcdF9hcHBseU92ZXJ3cml0ZSA9IGZ1bmN0aW9uKHRhcmdldCwgdHdlZW4sIHByb3BzLCBtb2RlLCBzaWJsaW5ncykge1xuXHRcdFx0XHR2YXIgaSwgY2hhbmdlZCwgY3VyVHdlZW4sIGw7XG5cdFx0XHRcdGlmIChtb2RlID09PSAxIHx8IG1vZGUgPj0gNCkge1xuXHRcdFx0XHRcdGwgPSBzaWJsaW5ncy5sZW5ndGg7XG5cdFx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuXHRcdFx0XHRcdFx0aWYgKChjdXJUd2VlbiA9IHNpYmxpbmdzW2ldKSAhPT0gdHdlZW4pIHtcblx0XHRcdFx0XHRcdFx0aWYgKCFjdXJUd2Vlbi5fZ2MpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoY3VyVHdlZW4uX2tpbGwobnVsbCwgdGFyZ2V0LCB0d2VlbikpIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNoYW5nZWQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIGlmIChtb2RlID09PSA1KSB7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gY2hhbmdlZDtcblx0XHRcdFx0fVxuXHRcdFx0XHQvL05PVEU6IEFkZCAwLjAwMDAwMDAwMDEgdG8gb3ZlcmNvbWUgZmxvYXRpbmcgcG9pbnQgZXJyb3JzIHRoYXQgY2FuIGNhdXNlIHRoZSBzdGFydFRpbWUgdG8gYmUgVkVSWSBzbGlnaHRseSBvZmYgKHdoZW4gYSB0d2VlbidzIHRpbWUoKSBpcyBzZXQgZm9yIGV4YW1wbGUpXG5cdFx0XHRcdHZhciBzdGFydFRpbWUgPSB0d2Vlbi5fc3RhcnRUaW1lICsgX3RpbnlOdW0sXG5cdFx0XHRcdFx0b3ZlcmxhcHMgPSBbXSxcblx0XHRcdFx0XHRvQ291bnQgPSAwLFxuXHRcdFx0XHRcdHplcm9EdXIgPSAodHdlZW4uX2R1cmF0aW9uID09PSAwKSxcblx0XHRcdFx0XHRnbG9iYWxTdGFydDtcblx0XHRcdFx0aSA9IHNpYmxpbmdzLmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0aWYgKChjdXJUd2VlbiA9IHNpYmxpbmdzW2ldKSA9PT0gdHdlZW4gfHwgY3VyVHdlZW4uX2djIHx8IGN1clR3ZWVuLl9wYXVzZWQpIHtcblx0XHRcdFx0XHRcdC8vaWdub3JlXG5cdFx0XHRcdFx0fSBlbHNlIGlmIChjdXJUd2Vlbi5fdGltZWxpbmUgIT09IHR3ZWVuLl90aW1lbGluZSkge1xuXHRcdFx0XHRcdFx0Z2xvYmFsU3RhcnQgPSBnbG9iYWxTdGFydCB8fCBfY2hlY2tPdmVybGFwKHR3ZWVuLCAwLCB6ZXJvRHVyKTtcblx0XHRcdFx0XHRcdGlmIChfY2hlY2tPdmVybGFwKGN1clR3ZWVuLCBnbG9iYWxTdGFydCwgemVyb0R1cikgPT09IDApIHtcblx0XHRcdFx0XHRcdFx0b3ZlcmxhcHNbb0NvdW50KytdID0gY3VyVHdlZW47XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChjdXJUd2Vlbi5fc3RhcnRUaW1lIDw9IHN0YXJ0VGltZSkgaWYgKGN1clR3ZWVuLl9zdGFydFRpbWUgKyBjdXJUd2Vlbi50b3RhbER1cmF0aW9uKCkgLyBjdXJUd2Vlbi5fdGltZVNjYWxlID4gc3RhcnRUaW1lKSBpZiAoISgoemVyb0R1ciB8fCAhY3VyVHdlZW4uX2luaXR0ZWQpICYmIHN0YXJ0VGltZSAtIGN1clR3ZWVuLl9zdGFydFRpbWUgPD0gMC4wMDAwMDAwMDAyKSkge1xuXHRcdFx0XHRcdFx0b3ZlcmxhcHNbb0NvdW50KytdID0gY3VyVHdlZW47XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aSA9IG9Db3VudDtcblx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0Y3VyVHdlZW4gPSBvdmVybGFwc1tpXTtcblx0XHRcdFx0XHRpZiAobW9kZSA9PT0gMikgaWYgKGN1clR3ZWVuLl9raWxsKHByb3BzLCB0YXJnZXQsIHR3ZWVuKSkge1xuXHRcdFx0XHRcdFx0Y2hhbmdlZCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChtb2RlICE9PSAyIHx8ICghY3VyVHdlZW4uX2ZpcnN0UFQgJiYgY3VyVHdlZW4uX2luaXR0ZWQpKSB7XG5cdFx0XHRcdFx0XHRpZiAobW9kZSAhPT0gMiAmJiAhX29uT3ZlcndyaXRlKGN1clR3ZWVuLCB0d2VlbikpIHtcblx0XHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoY3VyVHdlZW4uX2VuYWJsZWQoZmFsc2UsIGZhbHNlKSkgeyAvL2lmIGFsbCBwcm9wZXJ0eSB0d2VlbnMgaGF2ZSBiZWVuIG92ZXJ3cml0dGVuLCBraWxsIHRoZSB0d2Vlbi5cblx0XHRcdFx0XHRcdFx0Y2hhbmdlZCA9IHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBjaGFuZ2VkO1xuXHRcdFx0fSxcblx0XHRcdF9jaGVja092ZXJsYXAgPSBmdW5jdGlvbih0d2VlbiwgcmVmZXJlbmNlLCB6ZXJvRHVyKSB7XG5cdFx0XHRcdHZhciB0bCA9IHR3ZWVuLl90aW1lbGluZSxcblx0XHRcdFx0XHR0cyA9IHRsLl90aW1lU2NhbGUsXG5cdFx0XHRcdFx0dCA9IHR3ZWVuLl9zdGFydFRpbWU7XG5cdFx0XHRcdHdoaWxlICh0bC5fdGltZWxpbmUpIHtcblx0XHRcdFx0XHR0ICs9IHRsLl9zdGFydFRpbWU7XG5cdFx0XHRcdFx0dHMgKj0gdGwuX3RpbWVTY2FsZTtcblx0XHRcdFx0XHRpZiAodGwuX3BhdXNlZCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIC0xMDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRsID0gdGwuX3RpbWVsaW5lO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHQgLz0gdHM7XG5cdFx0XHRcdHJldHVybiAodCA+IHJlZmVyZW5jZSkgPyB0IC0gcmVmZXJlbmNlIDogKCh6ZXJvRHVyICYmIHQgPT09IHJlZmVyZW5jZSkgfHwgKCF0d2Vlbi5faW5pdHRlZCAmJiB0IC0gcmVmZXJlbmNlIDwgMiAqIF90aW55TnVtKSkgPyBfdGlueU51bSA6ICgodCArPSB0d2Vlbi50b3RhbER1cmF0aW9uKCkgLyB0d2Vlbi5fdGltZVNjYWxlIC8gdHMpID4gcmVmZXJlbmNlICsgX3RpbnlOdW0pID8gMCA6IHQgLSByZWZlcmVuY2UgLSBfdGlueU51bTtcblx0XHRcdH07XG5cblxuLy8tLS0tIFR3ZWVuTGl0ZSBpbnN0YW5jZSBtZXRob2RzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cblx0XHRwLl9pbml0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdiA9IHRoaXMudmFycyxcblx0XHRcdFx0b3AgPSB0aGlzLl9vdmVyd3JpdHRlblByb3BzLFxuXHRcdFx0XHRkdXIgPSB0aGlzLl9kdXJhdGlvbixcblx0XHRcdFx0aW1tZWRpYXRlID0gISF2LmltbWVkaWF0ZVJlbmRlcixcblx0XHRcdFx0ZWFzZSA9IHYuZWFzZSxcblx0XHRcdFx0aSwgaW5pdFBsdWdpbnMsIHB0LCBwLCBzdGFydFZhcnM7XG5cdFx0XHRpZiAodi5zdGFydEF0KSB7XG5cdFx0XHRcdGlmICh0aGlzLl9zdGFydEF0KSB7XG5cdFx0XHRcdFx0dGhpcy5fc3RhcnRBdC5yZW5kZXIoLTEsIHRydWUpOyAvL2lmIHdlJ3ZlIHJ1biBhIHN0YXJ0QXQgcHJldmlvdXNseSAod2hlbiB0aGUgdHdlZW4gaW5zdGFudGlhdGVkKSwgd2Ugc2hvdWxkIHJldmVydCBpdCBzbyB0aGF0IHRoZSB2YWx1ZXMgcmUtaW5zdGFudGlhdGUgY29ycmVjdGx5IHBhcnRpY3VsYXJseSBmb3IgcmVsYXRpdmUgdHdlZW5zLiBXaXRob3V0IHRoaXMsIGEgVHdlZW5MaXRlLmZyb21UbyhvYmosIDEsIHt4OlwiKz0xMDBcIn0sIHt4OlwiLT0xMDBcIn0pLCBmb3IgZXhhbXBsZSwgd291bGQgYWN0dWFsbHkganVtcCB0byArPTIwMCBiZWNhdXNlIHRoZSBzdGFydEF0IHdvdWxkIHJ1biB0d2ljZSwgZG91YmxpbmcgdGhlIHJlbGF0aXZlIGNoYW5nZS5cblx0XHRcdFx0XHR0aGlzLl9zdGFydEF0LmtpbGwoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRzdGFydFZhcnMgPSB7fTtcblx0XHRcdFx0Zm9yIChwIGluIHYuc3RhcnRBdCkgeyAvL2NvcHkgdGhlIHByb3BlcnRpZXMvdmFsdWVzIGludG8gYSBuZXcgb2JqZWN0IHRvIGF2b2lkIGNvbGxpc2lvbnMsIGxpa2UgdmFyIHRvID0ge3g6MH0sIGZyb20gPSB7eDo1MDB9OyB0aW1lbGluZS5mcm9tVG8oZSwgMSwgZnJvbSwgdG8pLmZyb21UbyhlLCAxLCB0bywgZnJvbSk7XG5cdFx0XHRcdFx0c3RhcnRWYXJzW3BdID0gdi5zdGFydEF0W3BdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN0YXJ0VmFycy5vdmVyd3JpdGUgPSBmYWxzZTtcblx0XHRcdFx0c3RhcnRWYXJzLmltbWVkaWF0ZVJlbmRlciA9IHRydWU7XG5cdFx0XHRcdHN0YXJ0VmFycy5sYXp5ID0gKGltbWVkaWF0ZSAmJiB2LmxhenkgIT09IGZhbHNlKTtcblx0XHRcdFx0c3RhcnRWYXJzLnN0YXJ0QXQgPSBzdGFydFZhcnMuZGVsYXkgPSBudWxsOyAvL25vIG5lc3Rpbmcgb2Ygc3RhcnRBdCBvYmplY3RzIGFsbG93ZWQgKG90aGVyd2lzZSBpdCBjb3VsZCBjYXVzZSBhbiBpbmZpbml0ZSBsb29wKS5cblx0XHRcdFx0dGhpcy5fc3RhcnRBdCA9IFR3ZWVuTGl0ZS50byh0aGlzLnRhcmdldCwgMCwgc3RhcnRWYXJzKTtcblx0XHRcdFx0aWYgKGltbWVkaWF0ZSkge1xuXHRcdFx0XHRcdGlmICh0aGlzLl90aW1lID4gMCkge1xuXHRcdFx0XHRcdFx0dGhpcy5fc3RhcnRBdCA9IG51bGw7IC8vdHdlZW5zIHRoYXQgcmVuZGVyIGltbWVkaWF0ZWx5IChsaWtlIG1vc3QgZnJvbSgpIGFuZCBmcm9tVG8oKSB0d2VlbnMpIHNob3VsZG4ndCByZXZlcnQgd2hlbiB0aGVpciBwYXJlbnQgdGltZWxpbmUncyBwbGF5aGVhZCBnb2VzIGJhY2t3YXJkIHBhc3QgdGhlIHN0YXJ0VGltZSBiZWNhdXNlIHRoZSBpbml0aWFsIHJlbmRlciBjb3VsZCBoYXZlIGhhcHBlbmVkIGFueXRpbWUgYW5kIGl0IHNob3VsZG4ndCBiZSBkaXJlY3RseSBjb3JyZWxhdGVkIHRvIHRoaXMgdHdlZW4ncyBzdGFydFRpbWUuIEltYWdpbmUgc2V0dGluZyB1cCBhIGNvbXBsZXggYW5pbWF0aW9uIHdoZXJlIHRoZSBiZWdpbm5pbmcgc3RhdGVzIG9mIHZhcmlvdXMgb2JqZWN0cyBhcmUgcmVuZGVyZWQgaW1tZWRpYXRlbHkgYnV0IHRoZSB0d2VlbiBkb2Vzbid0IGhhcHBlbiBmb3IgcXVpdGUgc29tZSB0aW1lIC0gaWYgd2UgcmV2ZXJ0IHRvIHRoZSBzdGFydGluZyB2YWx1ZXMgYXMgc29vbiBhcyB0aGUgcGxheWhlYWQgZ29lcyBiYWNrd2FyZCBwYXN0IHRoZSB0d2VlbidzIHN0YXJ0VGltZSwgaXQgd2lsbCB0aHJvdyB0aGluZ3Mgb2ZmIHZpc3VhbGx5LiBSZXZlcnNpb24gc2hvdWxkIG9ubHkgaGFwcGVuIGluIFRpbWVsaW5lTGl0ZS9NYXggaW5zdGFuY2VzIHdoZXJlIGltbWVkaWF0ZVJlbmRlciB3YXMgZmFsc2UgKHdoaWNoIGlzIHRoZSBkZWZhdWx0IGluIHRoZSBjb252ZW5pZW5jZSBtZXRob2RzIGxpa2UgZnJvbSgpKS5cblx0XHRcdFx0XHR9IGVsc2UgaWYgKGR1ciAhPT0gMCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuOyAvL3dlIHNraXAgaW5pdGlhbGl6YXRpb24gaGVyZSBzbyB0aGF0IG92ZXJ3cml0aW5nIGRvZXNuJ3Qgb2NjdXIgdW50aWwgdGhlIHR3ZWVuIGFjdHVhbGx5IGJlZ2lucy4gT3RoZXJ3aXNlLCBpZiB5b3UgY3JlYXRlIHNldmVyYWwgaW1tZWRpYXRlUmVuZGVyOnRydWUgdHdlZW5zIG9mIHRoZSBzYW1lIHRhcmdldC9wcm9wZXJ0aWVzIHRvIGRyb3AgaW50byBhIFRpbWVsaW5lTGl0ZSBvciBUaW1lbGluZU1heCwgdGhlIGxhc3Qgb25lIGNyZWF0ZWQgd291bGQgb3ZlcndyaXRlIHRoZSBmaXJzdCBvbmVzIGJlY2F1c2UgdGhleSBkaWRuJ3QgZ2V0IHBsYWNlZCBpbnRvIHRoZSB0aW1lbGluZSB5ZXQgYmVmb3JlIHRoZSBmaXJzdCByZW5kZXIgb2NjdXJzIGFuZCBraWNrcyBpbiBvdmVyd3JpdGluZy5cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAodi5ydW5CYWNrd2FyZHMgJiYgZHVyICE9PSAwKSB7XG5cdFx0XHRcdC8vZnJvbSgpIHR3ZWVucyBtdXN0IGJlIGhhbmRsZWQgdW5pcXVlbHk6IHRoZWlyIGJlZ2lubmluZyB2YWx1ZXMgbXVzdCBiZSByZW5kZXJlZCBidXQgd2UgZG9uJ3Qgd2FudCBvdmVyd3JpdGluZyB0byBvY2N1ciB5ZXQgKHdoZW4gdGltZSBpcyBzdGlsbCAwKS4gV2FpdCB1bnRpbCB0aGUgdHdlZW4gYWN0dWFsbHkgYmVnaW5zIGJlZm9yZSBkb2luZyBhbGwgdGhlIHJvdXRpbmVzIGxpa2Ugb3ZlcndyaXRpbmcuIEF0IHRoYXQgdGltZSwgd2Ugc2hvdWxkIHJlbmRlciBhdCB0aGUgRU5EIG9mIHRoZSB0d2VlbiB0byBlbnN1cmUgdGhhdCB0aGluZ3MgaW5pdGlhbGl6ZSBjb3JyZWN0bHkgKHJlbWVtYmVyLCBmcm9tKCkgdHdlZW5zIGdvIGJhY2t3YXJkcylcblx0XHRcdFx0aWYgKHRoaXMuX3N0YXJ0QXQpIHtcblx0XHRcdFx0XHR0aGlzLl9zdGFydEF0LnJlbmRlcigtMSwgdHJ1ZSk7XG5cdFx0XHRcdFx0dGhpcy5fc3RhcnRBdC5raWxsKCk7XG5cdFx0XHRcdFx0dGhpcy5fc3RhcnRBdCA9IG51bGw7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aWYgKHRoaXMuX3RpbWUgIT09IDApIHsgLy9pbiByYXJlIGNhc2VzIChsaWtlIGlmIGEgZnJvbSgpIHR3ZWVuIHJ1bnMgYW5kIHRoZW4gaXMgaW52YWxpZGF0ZSgpLWVkKSwgaW1tZWRpYXRlUmVuZGVyIGNvdWxkIGJlIHRydWUgYnV0IHRoZSBpbml0aWFsIGZvcmNlZC1yZW5kZXIgZ2V0cyBza2lwcGVkLCBzbyB0aGVyZSdzIG5vIG5lZWQgdG8gZm9yY2UgdGhlIHJlbmRlciBpbiB0aGlzIGNvbnRleHQgd2hlbiB0aGUgX3RpbWUgaXMgZ3JlYXRlciB0aGFuIDBcblx0XHRcdFx0XHRcdGltbWVkaWF0ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwdCA9IHt9O1xuXHRcdFx0XHRcdGZvciAocCBpbiB2KSB7IC8vY29weSBwcm9wcyBpbnRvIGEgbmV3IG9iamVjdCBhbmQgc2tpcCBhbnkgcmVzZXJ2ZWQgcHJvcHMsIG90aGVyd2lzZSBvbkNvbXBsZXRlIG9yIG9uVXBkYXRlIG9yIG9uU3RhcnQgY291bGQgZmlyZS4gV2Ugc2hvdWxkLCBob3dldmVyLCBwZXJtaXQgYXV0b0NTUyB0byBnbyB0aHJvdWdoLlxuXHRcdFx0XHRcdFx0aWYgKCFfcmVzZXJ2ZWRQcm9wc1twXSB8fCBwID09PSBcImF1dG9DU1NcIikge1xuXHRcdFx0XHRcdFx0XHRwdFtwXSA9IHZbcF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHB0Lm92ZXJ3cml0ZSA9IDA7XG5cdFx0XHRcdFx0cHQuZGF0YSA9IFwiaXNGcm9tU3RhcnRcIjsgLy93ZSB0YWcgdGhlIHR3ZWVuIHdpdGggYXMgXCJpc0Zyb21TdGFydFwiIHNvIHRoYXQgaWYgW2luc2lkZSBhIHBsdWdpbl0gd2UgbmVlZCB0byBvbmx5IGRvIHNvbWV0aGluZyBhdCB0aGUgdmVyeSBFTkQgb2YgYSB0d2Vlbiwgd2UgaGF2ZSBhIHdheSBvZiBpZGVudGlmeWluZyB0aGlzIHR3ZWVuIGFzIG1lcmVseSB0aGUgb25lIHRoYXQncyBzZXR0aW5nIHRoZSBiZWdpbm5pbmcgdmFsdWVzIGZvciBhIFwiZnJvbSgpXCIgdHdlZW4uIEZvciBleGFtcGxlLCBjbGVhclByb3BzIGluIENTU1BsdWdpbiBzaG91bGQgb25seSBnZXQgYXBwbGllZCBhdCB0aGUgdmVyeSBFTkQgb2YgYSB0d2VlbiBhbmQgd2l0aG91dCB0aGlzIHRhZywgZnJvbSguLi57aGVpZ2h0OjEwMCwgY2xlYXJQcm9wczpcImhlaWdodFwiLCBkZWxheToxfSkgd291bGQgd2lwZSB0aGUgaGVpZ2h0IGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIHR3ZWVuIGFuZCBhZnRlciAxIHNlY29uZCwgaXQnZCBraWNrIGJhY2sgaW4uXG5cdFx0XHRcdFx0cHQubGF6eSA9IChpbW1lZGlhdGUgJiYgdi5sYXp5ICE9PSBmYWxzZSk7XG5cdFx0XHRcdFx0cHQuaW1tZWRpYXRlUmVuZGVyID0gaW1tZWRpYXRlOyAvL3plcm8tZHVyYXRpb24gdHdlZW5zIHJlbmRlciBpbW1lZGlhdGVseSBieSBkZWZhdWx0LCBidXQgaWYgd2UncmUgbm90IHNwZWNpZmljYWxseSBpbnN0cnVjdGVkIHRvIHJlbmRlciB0aGlzIHR3ZWVuIGltbWVkaWF0ZWx5LCB3ZSBzaG91bGQgc2tpcCB0aGlzIGFuZCBtZXJlbHkgX2luaXQoKSB0byByZWNvcmQgdGhlIHN0YXJ0aW5nIHZhbHVlcyAocmVuZGVyaW5nIHRoZW0gaW1tZWRpYXRlbHkgd291bGQgcHVzaCB0aGVtIHRvIGNvbXBsZXRpb24gd2hpY2ggaXMgd2FzdGVmdWwgaW4gdGhhdCBjYXNlIC0gd2UnZCBoYXZlIHRvIHJlbmRlcigtMSkgaW1tZWRpYXRlbHkgYWZ0ZXIpXG5cdFx0XHRcdFx0dGhpcy5fc3RhcnRBdCA9IFR3ZWVuTGl0ZS50byh0aGlzLnRhcmdldCwgMCwgcHQpO1xuXHRcdFx0XHRcdGlmICghaW1tZWRpYXRlKSB7XG5cdFx0XHRcdFx0XHR0aGlzLl9zdGFydEF0Ll9pbml0KCk7IC8vZW5zdXJlcyB0aGF0IHRoZSBpbml0aWFsIHZhbHVlcyBhcmUgcmVjb3JkZWRcblx0XHRcdFx0XHRcdHRoaXMuX3N0YXJ0QXQuX2VuYWJsZWQoZmFsc2UpOyAvL25vIG5lZWQgdG8gaGF2ZSB0aGUgdHdlZW4gcmVuZGVyIG9uIHRoZSBuZXh0IGN5Y2xlLiBEaXNhYmxlIGl0IGJlY2F1c2Ugd2UnbGwgYWx3YXlzIG1hbnVhbGx5IGNvbnRyb2wgdGhlIHJlbmRlcnMgb2YgdGhlIF9zdGFydEF0IHR3ZWVuLlxuXHRcdFx0XHRcdFx0aWYgKHRoaXMudmFycy5pbW1lZGlhdGVSZW5kZXIpIHtcblx0XHRcdFx0XHRcdFx0dGhpcy5fc3RhcnRBdCA9IG51bGw7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIGlmICh0aGlzLl90aW1lID09PSAwKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9lYXNlID0gZWFzZSA9ICghZWFzZSkgPyBUd2VlbkxpdGUuZGVmYXVsdEVhc2UgOiAoZWFzZSBpbnN0YW5jZW9mIEVhc2UpID8gZWFzZSA6ICh0eXBlb2YoZWFzZSkgPT09IFwiZnVuY3Rpb25cIikgPyBuZXcgRWFzZShlYXNlLCB2LmVhc2VQYXJhbXMpIDogX2Vhc2VNYXBbZWFzZV0gfHwgVHdlZW5MaXRlLmRlZmF1bHRFYXNlO1xuXHRcdFx0aWYgKHYuZWFzZVBhcmFtcyBpbnN0YW5jZW9mIEFycmF5ICYmIGVhc2UuY29uZmlnKSB7XG5cdFx0XHRcdHRoaXMuX2Vhc2UgPSBlYXNlLmNvbmZpZy5hcHBseShlYXNlLCB2LmVhc2VQYXJhbXMpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5fZWFzZVR5cGUgPSB0aGlzLl9lYXNlLl90eXBlO1xuXHRcdFx0dGhpcy5fZWFzZVBvd2VyID0gdGhpcy5fZWFzZS5fcG93ZXI7XG5cdFx0XHR0aGlzLl9maXJzdFBUID0gbnVsbDtcblxuXHRcdFx0aWYgKHRoaXMuX3RhcmdldHMpIHtcblx0XHRcdFx0aSA9IHRoaXMuX3RhcmdldHMubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMuX2luaXRQcm9wcyggdGhpcy5fdGFyZ2V0c1tpXSwgKHRoaXMuX3Byb3BMb29rdXBbaV0gPSB7fSksIHRoaXMuX3NpYmxpbmdzW2ldLCAob3AgPyBvcFtpXSA6IG51bGwpKSApIHtcblx0XHRcdFx0XHRcdGluaXRQbHVnaW5zID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGluaXRQbHVnaW5zID0gdGhpcy5faW5pdFByb3BzKHRoaXMudGFyZ2V0LCB0aGlzLl9wcm9wTG9va3VwLCB0aGlzLl9zaWJsaW5ncywgb3ApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoaW5pdFBsdWdpbnMpIHtcblx0XHRcdFx0VHdlZW5MaXRlLl9vblBsdWdpbkV2ZW50KFwiX29uSW5pdEFsbFByb3BzXCIsIHRoaXMpOyAvL3Jlb3JkZXJzIHRoZSBhcnJheSBpbiBvcmRlciBvZiBwcmlvcml0eS4gVXNlcyBhIHN0YXRpYyBUd2VlblBsdWdpbiBtZXRob2QgaW4gb3JkZXIgdG8gbWluaW1pemUgZmlsZSBzaXplIGluIFR3ZWVuTGl0ZVxuXHRcdFx0fVxuXHRcdFx0aWYgKG9wKSBpZiAoIXRoaXMuX2ZpcnN0UFQpIGlmICh0eXBlb2YodGhpcy50YXJnZXQpICE9PSBcImZ1bmN0aW9uXCIpIHsgLy9pZiBhbGwgdHdlZW5pbmcgcHJvcGVydGllcyBoYXZlIGJlZW4gb3ZlcndyaXR0ZW4sIGtpbGwgdGhlIHR3ZWVuLiBJZiB0aGUgdGFyZ2V0IGlzIGEgZnVuY3Rpb24sIGl0J3MgcHJvYmFibHkgYSBkZWxheWVkQ2FsbCBzbyBsZXQgaXQgbGl2ZS5cblx0XHRcdFx0dGhpcy5fZW5hYmxlZChmYWxzZSwgZmFsc2UpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHYucnVuQmFja3dhcmRzKSB7XG5cdFx0XHRcdHB0ID0gdGhpcy5fZmlyc3RQVDtcblx0XHRcdFx0d2hpbGUgKHB0KSB7XG5cdFx0XHRcdFx0cHQucyArPSBwdC5jO1xuXHRcdFx0XHRcdHB0LmMgPSAtcHQuYztcblx0XHRcdFx0XHRwdCA9IHB0Ll9uZXh0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9vblVwZGF0ZSA9IHYub25VcGRhdGU7XG5cdFx0XHR0aGlzLl9pbml0dGVkID0gdHJ1ZTtcblx0XHR9O1xuXG5cdFx0cC5faW5pdFByb3BzID0gZnVuY3Rpb24odGFyZ2V0LCBwcm9wTG9va3VwLCBzaWJsaW5ncywgb3ZlcndyaXR0ZW5Qcm9wcykge1xuXHRcdFx0dmFyIHAsIGksIGluaXRQbHVnaW5zLCBwbHVnaW4sIHB0LCB2O1xuXHRcdFx0aWYgKHRhcmdldCA9PSBudWxsKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKF9sYXp5TG9va3VwW3RhcmdldC5fZ3NUd2VlbklEXSkge1xuXHRcdFx0XHRfbGF6eVJlbmRlcigpOyAvL2lmIG90aGVyIHR3ZWVucyBvZiB0aGUgc2FtZSB0YXJnZXQgaGF2ZSByZWNlbnRseSBpbml0dGVkIGJ1dCBoYXZlbid0IHJlbmRlcmVkIHlldCwgd2UndmUgZ290IHRvIGZvcmNlIHRoZSByZW5kZXIgc28gdGhhdCB0aGUgc3RhcnRpbmcgdmFsdWVzIGFyZSBjb3JyZWN0IChpbWFnaW5lIHBvcHVsYXRpbmcgYSB0aW1lbGluZSB3aXRoIGEgYnVuY2ggb2Ygc2VxdWVudGlhbCB0d2VlbnMgYW5kIHRoZW4ganVtcGluZyB0byB0aGUgZW5kKVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIXRoaXMudmFycy5jc3MpIGlmICh0YXJnZXQuc3R5bGUpIGlmICh0YXJnZXQgIT09IHdpbmRvdyAmJiB0YXJnZXQubm9kZVR5cGUpIGlmIChfcGx1Z2lucy5jc3MpIGlmICh0aGlzLnZhcnMuYXV0b0NTUyAhPT0gZmFsc2UpIHsgLy9pdCdzIHNvIGNvbW1vbiB0byB1c2UgVHdlZW5MaXRlL01heCB0byBhbmltYXRlIHRoZSBjc3Mgb2YgRE9NIGVsZW1lbnRzLCB3ZSBhc3N1bWUgdGhhdCBpZiB0aGUgdGFyZ2V0IGlzIGEgRE9NIGVsZW1lbnQsIHRoYXQncyB3aGF0IGlzIGludGVuZGVkIChhIGNvbnZlbmllbmNlIHNvIHRoYXQgdXNlcnMgZG9uJ3QgaGF2ZSB0byB3cmFwIHRoaW5ncyBpbiBjc3M6e30sIGFsdGhvdWdoIHdlIHN0aWxsIHJlY29tbWVuZCBpdCBmb3IgYSBzbGlnaHQgcGVyZm9ybWFuY2UgYm9vc3QgYW5kIGJldHRlciBzcGVjaWZpY2l0eSkuIE5vdGU6IHdlIGNhbm5vdCBjaGVjayBcIm5vZGVUeXBlXCIgb24gdGhlIHdpbmRvdyBpbnNpZGUgYW4gaWZyYW1lLlxuXHRcdFx0XHRfYXV0b0NTUyh0aGlzLnZhcnMsIHRhcmdldCk7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKHAgaW4gdGhpcy52YXJzKSB7XG5cdFx0XHRcdHYgPSB0aGlzLnZhcnNbcF07XG5cdFx0XHRcdGlmIChfcmVzZXJ2ZWRQcm9wc1twXSkge1xuXHRcdFx0XHRcdGlmICh2KSBpZiAoKHYgaW5zdGFuY2VvZiBBcnJheSkgfHwgKHYucHVzaCAmJiBfaXNBcnJheSh2KSkpIGlmICh2LmpvaW4oXCJcIikuaW5kZXhPZihcIntzZWxmfVwiKSAhPT0gLTEpIHtcblx0XHRcdFx0XHRcdHRoaXMudmFyc1twXSA9IHYgPSB0aGlzLl9zd2FwU2VsZkluUGFyYW1zKHYsIHRoaXMpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2UgaWYgKF9wbHVnaW5zW3BdICYmIChwbHVnaW4gPSBuZXcgX3BsdWdpbnNbcF0oKSkuX29uSW5pdFR3ZWVuKHRhcmdldCwgdGhpcy52YXJzW3BdLCB0aGlzKSkge1xuXG5cdFx0XHRcdFx0Ly90IC0gdGFyZ2V0IFx0XHRbb2JqZWN0XVxuXHRcdFx0XHRcdC8vcCAtIHByb3BlcnR5IFx0XHRbc3RyaW5nXVxuXHRcdFx0XHRcdC8vcyAtIHN0YXJ0XHRcdFx0W251bWJlcl1cblx0XHRcdFx0XHQvL2MgLSBjaGFuZ2VcdFx0W251bWJlcl1cblx0XHRcdFx0XHQvL2YgLSBpc0Z1bmN0aW9uXHRbYm9vbGVhbl1cblx0XHRcdFx0XHQvL24gLSBuYW1lXHRcdFx0W3N0cmluZ11cblx0XHRcdFx0XHQvL3BnIC0gaXNQbHVnaW4gXHRbYm9vbGVhbl1cblx0XHRcdFx0XHQvL3ByIC0gcHJpb3JpdHlcdFx0W251bWJlcl1cblx0XHRcdFx0XHR0aGlzLl9maXJzdFBUID0gcHQgPSB7X25leHQ6dGhpcy5fZmlyc3RQVCwgdDpwbHVnaW4sIHA6XCJzZXRSYXRpb1wiLCBzOjAsIGM6MSwgZjoxLCBuOnAsIHBnOjEsIHByOnBsdWdpbi5fcHJpb3JpdHl9O1xuXHRcdFx0XHRcdGkgPSBwbHVnaW4uX292ZXJ3cml0ZVByb3BzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRcdHByb3BMb29rdXBbcGx1Z2luLl9vdmVyd3JpdGVQcm9wc1tpXV0gPSB0aGlzLl9maXJzdFBUO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAocGx1Z2luLl9wcmlvcml0eSB8fCBwbHVnaW4uX29uSW5pdEFsbFByb3BzKSB7XG5cdFx0XHRcdFx0XHRpbml0UGx1Z2lucyA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChwbHVnaW4uX29uRGlzYWJsZSB8fCBwbHVnaW4uX29uRW5hYmxlKSB7XG5cdFx0XHRcdFx0XHR0aGlzLl9ub3RpZnlQbHVnaW5zT2ZFbmFibGVkID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHB0Ll9uZXh0KSB7XG5cdFx0XHRcdFx0XHRwdC5fbmV4dC5fcHJldiA9IHB0O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHByb3BMb29rdXBbcF0gPSBfYWRkUHJvcFR3ZWVuLmNhbGwodGhpcywgdGFyZ2V0LCBwLCBcImdldFwiLCB2LCBwLCAwLCBudWxsLCB0aGlzLnZhcnMuc3RyaW5nRmlsdGVyKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAob3ZlcndyaXR0ZW5Qcm9wcykgaWYgKHRoaXMuX2tpbGwob3ZlcndyaXR0ZW5Qcm9wcywgdGFyZ2V0KSkgeyAvL2Fub3RoZXIgdHdlZW4gbWF5IGhhdmUgdHJpZWQgdG8gb3ZlcndyaXRlIHByb3BlcnRpZXMgb2YgdGhpcyB0d2VlbiBiZWZvcmUgaW5pdCgpIHdhcyBjYWxsZWQgKGxpa2UgaWYgdHdvIHR3ZWVucyBzdGFydCBhdCB0aGUgc2FtZSB0aW1lLCB0aGUgb25lIGNyZWF0ZWQgc2Vjb25kIHdpbGwgcnVuIGZpcnN0KVxuXHRcdFx0XHRyZXR1cm4gdGhpcy5faW5pdFByb3BzKHRhcmdldCwgcHJvcExvb2t1cCwgc2libGluZ3MsIG92ZXJ3cml0dGVuUHJvcHMpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHRoaXMuX292ZXJ3cml0ZSA+IDEpIGlmICh0aGlzLl9maXJzdFBUKSBpZiAoc2libGluZ3MubGVuZ3RoID4gMSkgaWYgKF9hcHBseU92ZXJ3cml0ZSh0YXJnZXQsIHRoaXMsIHByb3BMb29rdXAsIHRoaXMuX292ZXJ3cml0ZSwgc2libGluZ3MpKSB7XG5cdFx0XHRcdHRoaXMuX2tpbGwocHJvcExvb2t1cCwgdGFyZ2V0KTtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX2luaXRQcm9wcyh0YXJnZXQsIHByb3BMb29rdXAsIHNpYmxpbmdzLCBvdmVyd3JpdHRlblByb3BzKTtcblx0XHRcdH1cblx0XHRcdGlmICh0aGlzLl9maXJzdFBUKSBpZiAoKHRoaXMudmFycy5sYXp5ICE9PSBmYWxzZSAmJiB0aGlzLl9kdXJhdGlvbikgfHwgKHRoaXMudmFycy5sYXp5ICYmICF0aGlzLl9kdXJhdGlvbikpIHsgLy96ZXJvIGR1cmF0aW9uIHR3ZWVucyBkb24ndCBsYXp5IHJlbmRlciBieSBkZWZhdWx0OyBldmVyeXRoaW5nIGVsc2UgZG9lcy5cblx0XHRcdFx0X2xhenlMb29rdXBbdGFyZ2V0Ll9nc1R3ZWVuSURdID0gdHJ1ZTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBpbml0UGx1Z2lucztcblx0XHR9O1xuXG5cdFx0cC5yZW5kZXIgPSBmdW5jdGlvbih0aW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpIHtcblx0XHRcdHZhciBwcmV2VGltZSA9IHRoaXMuX3RpbWUsXG5cdFx0XHRcdGR1cmF0aW9uID0gdGhpcy5fZHVyYXRpb24sXG5cdFx0XHRcdHByZXZSYXdQcmV2VGltZSA9IHRoaXMuX3Jhd1ByZXZUaW1lLFxuXHRcdFx0XHRpc0NvbXBsZXRlLCBjYWxsYmFjaywgcHQsIHJhd1ByZXZUaW1lO1xuXHRcdFx0aWYgKHRpbWUgPj0gZHVyYXRpb24pIHtcblx0XHRcdFx0dGhpcy5fdG90YWxUaW1lID0gdGhpcy5fdGltZSA9IGR1cmF0aW9uO1xuXHRcdFx0XHR0aGlzLnJhdGlvID0gdGhpcy5fZWFzZS5fY2FsY0VuZCA/IHRoaXMuX2Vhc2UuZ2V0UmF0aW8oMSkgOiAxO1xuXHRcdFx0XHRpZiAoIXRoaXMuX3JldmVyc2VkICkge1xuXHRcdFx0XHRcdGlzQ29tcGxldGUgPSB0cnVlO1xuXHRcdFx0XHRcdGNhbGxiYWNrID0gXCJvbkNvbXBsZXRlXCI7XG5cdFx0XHRcdFx0Zm9yY2UgPSAoZm9yY2UgfHwgdGhpcy5fdGltZWxpbmUuYXV0b1JlbW92ZUNoaWxkcmVuKTsgLy9vdGhlcndpc2UsIGlmIHRoZSBhbmltYXRpb24gaXMgdW5wYXVzZWQvYWN0aXZhdGVkIGFmdGVyIGl0J3MgYWxyZWFkeSBmaW5pc2hlZCwgaXQgZG9lc24ndCBnZXQgcmVtb3ZlZCBmcm9tIHRoZSBwYXJlbnQgdGltZWxpbmUuXG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGR1cmF0aW9uID09PSAwKSBpZiAodGhpcy5faW5pdHRlZCB8fCAhdGhpcy52YXJzLmxhenkgfHwgZm9yY2UpIHsgLy96ZXJvLWR1cmF0aW9uIHR3ZWVucyBhcmUgdHJpY2t5IGJlY2F1c2Ugd2UgbXVzdCBkaXNjZXJuIHRoZSBtb21lbnR1bS9kaXJlY3Rpb24gb2YgdGltZSBpbiBvcmRlciB0byBkZXRlcm1pbmUgd2hldGhlciB0aGUgc3RhcnRpbmcgdmFsdWVzIHNob3VsZCBiZSByZW5kZXJlZCBvciB0aGUgZW5kaW5nIHZhbHVlcy4gSWYgdGhlIFwicGxheWhlYWRcIiBvZiBpdHMgdGltZWxpbmUgZ29lcyBwYXN0IHRoZSB6ZXJvLWR1cmF0aW9uIHR3ZWVuIGluIHRoZSBmb3J3YXJkIGRpcmVjdGlvbiBvciBsYW5kcyBkaXJlY3RseSBvbiBpdCwgdGhlIGVuZCB2YWx1ZXMgc2hvdWxkIGJlIHJlbmRlcmVkLCBidXQgaWYgdGhlIHRpbWVsaW5lJ3MgXCJwbGF5aGVhZFwiIG1vdmVzIHBhc3QgaXQgaW4gdGhlIGJhY2t3YXJkIGRpcmVjdGlvbiAoZnJvbSBhIHBvc3RpdGl2ZSB0aW1lIHRvIGEgbmVnYXRpdmUgdGltZSksIHRoZSBzdGFydGluZyB2YWx1ZXMgbXVzdCBiZSByZW5kZXJlZC5cblx0XHRcdFx0XHRpZiAodGhpcy5fc3RhcnRUaW1lID09PSB0aGlzLl90aW1lbGluZS5fZHVyYXRpb24pIHsgLy9pZiBhIHplcm8tZHVyYXRpb24gdHdlZW4gaXMgYXQgdGhlIFZFUlkgZW5kIG9mIGEgdGltZWxpbmUgYW5kIHRoYXQgdGltZWxpbmUgcmVuZGVycyBhdCBpdHMgZW5kLCBpdCB3aWxsIHR5cGljYWxseSBhZGQgYSB0aW55IGJpdCBvZiBjdXNoaW9uIHRvIHRoZSByZW5kZXIgdGltZSB0byBwcmV2ZW50IHJvdW5kaW5nIGVycm9ycyBmcm9tIGdldHRpbmcgaW4gdGhlIHdheSBvZiB0d2VlbnMgcmVuZGVyaW5nIHRoZWlyIFZFUlkgZW5kLiBJZiB3ZSB0aGVuIHJldmVyc2UoKSB0aGF0IHRpbWVsaW5lLCB0aGUgemVyby1kdXJhdGlvbiB0d2VlbiB3aWxsIHRyaWdnZXIgaXRzIG9uUmV2ZXJzZUNvbXBsZXRlIGV2ZW4gdGhvdWdoIHRlY2huaWNhbGx5IHRoZSBwbGF5aGVhZCBkaWRuJ3QgcGFzcyBvdmVyIGl0IGFnYWluLiBJdCdzIGEgdmVyeSBzcGVjaWZpYyBlZGdlIGNhc2Ugd2UgbXVzdCBhY2NvbW1vZGF0ZS5cblx0XHRcdFx0XHRcdHRpbWUgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAodGltZSA9PT0gMCB8fCBwcmV2UmF3UHJldlRpbWUgPCAwIHx8IChwcmV2UmF3UHJldlRpbWUgPT09IF90aW55TnVtICYmIHRoaXMuZGF0YSAhPT0gXCJpc1BhdXNlXCIpKSBpZiAocHJldlJhd1ByZXZUaW1lICE9PSB0aW1lKSB7IC8vbm90ZTogd2hlbiB0aGlzLmRhdGEgaXMgXCJpc1BhdXNlXCIsIGl0J3MgYSBjYWxsYmFjayBhZGRlZCBieSBhZGRQYXVzZSgpIG9uIGEgdGltZWxpbmUgdGhhdCB3ZSBzaG91bGQgbm90IGJlIHRyaWdnZXJlZCB3aGVuIExFQVZJTkcgaXRzIGV4YWN0IHN0YXJ0IHRpbWUuIEluIG90aGVyIHdvcmRzLCB0bC5hZGRQYXVzZSgxKS5wbGF5KDEpIHNob3VsZG4ndCBwYXVzZS5cblx0XHRcdFx0XHRcdGZvcmNlID0gdHJ1ZTtcblx0XHRcdFx0XHRcdGlmIChwcmV2UmF3UHJldlRpbWUgPiBfdGlueU51bSkge1xuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IFwib25SZXZlcnNlQ29tcGxldGVcIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGhpcy5fcmF3UHJldlRpbWUgPSByYXdQcmV2VGltZSA9ICghc3VwcHJlc3NFdmVudHMgfHwgdGltZSB8fCBwcmV2UmF3UHJldlRpbWUgPT09IHRpbWUpID8gdGltZSA6IF90aW55TnVtOyAvL3doZW4gdGhlIHBsYXloZWFkIGFycml2ZXMgYXQgRVhBQ1RMWSB0aW1lIDAgKHJpZ2h0IG9uIHRvcCkgb2YgYSB6ZXJvLWR1cmF0aW9uIHR3ZWVuLCB3ZSBuZWVkIHRvIGRpc2Nlcm4gaWYgZXZlbnRzIGFyZSBzdXBwcmVzc2VkIHNvIHRoYXQgd2hlbiB0aGUgcGxheWhlYWQgbW92ZXMgYWdhaW4gKG5leHQgdGltZSksIGl0J2xsIHRyaWdnZXIgdGhlIGNhbGxiYWNrLiBJZiBldmVudHMgYXJlIE5PVCBzdXBwcmVzc2VkLCBvYnZpb3VzbHkgdGhlIGNhbGxiYWNrIHdvdWxkIGJlIHRyaWdnZXJlZCBpbiB0aGlzIHJlbmRlci4gQmFzaWNhbGx5LCB0aGUgY2FsbGJhY2sgc2hvdWxkIGZpcmUgZWl0aGVyIHdoZW4gdGhlIHBsYXloZWFkIEFSUklWRVMgb3IgTEVBVkVTIHRoaXMgZXhhY3Qgc3BvdCwgbm90IGJvdGguIEltYWdpbmUgZG9pbmcgYSB0aW1lbGluZS5zZWVrKDApIGFuZCB0aGVyZSdzIGEgY2FsbGJhY2sgdGhhdCBzaXRzIGF0IDAuIFNpbmNlIGV2ZW50cyBhcmUgc3VwcHJlc3NlZCBvbiB0aGF0IHNlZWsoKSBieSBkZWZhdWx0LCBub3RoaW5nIHdpbGwgZmlyZSwgYnV0IHdoZW4gdGhlIHBsYXloZWFkIG1vdmVzIG9mZiBvZiB0aGF0IHBvc2l0aW9uLCB0aGUgY2FsbGJhY2sgc2hvdWxkIGZpcmUuIFRoaXMgYmVoYXZpb3IgaXMgd2hhdCBwZW9wbGUgaW50dWl0aXZlbHkgZXhwZWN0LiBXZSBzZXQgdGhlIF9yYXdQcmV2VGltZSB0byBiZSBhIHByZWNpc2UgdGlueSBudW1iZXIgdG8gaW5kaWNhdGUgdGhpcyBzY2VuYXJpbyByYXRoZXIgdGhhbiB1c2luZyBhbm90aGVyIHByb3BlcnR5L3ZhcmlhYmxlIHdoaWNoIHdvdWxkIGluY3JlYXNlIG1lbW9yeSB1c2FnZS4gVGhpcyB0ZWNobmlxdWUgaXMgbGVzcyByZWFkYWJsZSwgYnV0IG1vcmUgZWZmaWNpZW50LlxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAodGltZSA8IDAuMDAwMDAwMSkgeyAvL3RvIHdvcmsgYXJvdW5kIG9jY2FzaW9uYWwgZmxvYXRpbmcgcG9pbnQgbWF0aCBhcnRpZmFjdHMsIHJvdW5kIHN1cGVyIHNtYWxsIHZhbHVlcyB0byAwLlxuXHRcdFx0XHR0aGlzLl90b3RhbFRpbWUgPSB0aGlzLl90aW1lID0gMDtcblx0XHRcdFx0dGhpcy5yYXRpbyA9IHRoaXMuX2Vhc2UuX2NhbGNFbmQgPyB0aGlzLl9lYXNlLmdldFJhdGlvKDApIDogMDtcblx0XHRcdFx0aWYgKHByZXZUaW1lICE9PSAwIHx8IChkdXJhdGlvbiA9PT0gMCAmJiBwcmV2UmF3UHJldlRpbWUgPiAwKSkge1xuXHRcdFx0XHRcdGNhbGxiYWNrID0gXCJvblJldmVyc2VDb21wbGV0ZVwiO1xuXHRcdFx0XHRcdGlzQ29tcGxldGUgPSB0aGlzLl9yZXZlcnNlZDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodGltZSA8IDApIHtcblx0XHRcdFx0XHR0aGlzLl9hY3RpdmUgPSBmYWxzZTtcblx0XHRcdFx0XHRpZiAoZHVyYXRpb24gPT09IDApIGlmICh0aGlzLl9pbml0dGVkIHx8ICF0aGlzLnZhcnMubGF6eSB8fCBmb3JjZSkgeyAvL3plcm8tZHVyYXRpb24gdHdlZW5zIGFyZSB0cmlja3kgYmVjYXVzZSB3ZSBtdXN0IGRpc2Nlcm4gdGhlIG1vbWVudHVtL2RpcmVjdGlvbiBvZiB0aW1lIGluIG9yZGVyIHRvIGRldGVybWluZSB3aGV0aGVyIHRoZSBzdGFydGluZyB2YWx1ZXMgc2hvdWxkIGJlIHJlbmRlcmVkIG9yIHRoZSBlbmRpbmcgdmFsdWVzLiBJZiB0aGUgXCJwbGF5aGVhZFwiIG9mIGl0cyB0aW1lbGluZSBnb2VzIHBhc3QgdGhlIHplcm8tZHVyYXRpb24gdHdlZW4gaW4gdGhlIGZvcndhcmQgZGlyZWN0aW9uIG9yIGxhbmRzIGRpcmVjdGx5IG9uIGl0LCB0aGUgZW5kIHZhbHVlcyBzaG91bGQgYmUgcmVuZGVyZWQsIGJ1dCBpZiB0aGUgdGltZWxpbmUncyBcInBsYXloZWFkXCIgbW92ZXMgcGFzdCBpdCBpbiB0aGUgYmFja3dhcmQgZGlyZWN0aW9uIChmcm9tIGEgcG9zdGl0aXZlIHRpbWUgdG8gYSBuZWdhdGl2ZSB0aW1lKSwgdGhlIHN0YXJ0aW5nIHZhbHVlcyBtdXN0IGJlIHJlbmRlcmVkLlxuXHRcdFx0XHRcdFx0aWYgKHByZXZSYXdQcmV2VGltZSA+PSAwICYmICEocHJldlJhd1ByZXZUaW1lID09PSBfdGlueU51bSAmJiB0aGlzLmRhdGEgPT09IFwiaXNQYXVzZVwiKSkge1xuXHRcdFx0XHRcdFx0XHRmb3JjZSA9IHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR0aGlzLl9yYXdQcmV2VGltZSA9IHJhd1ByZXZUaW1lID0gKCFzdXBwcmVzc0V2ZW50cyB8fCB0aW1lIHx8IHByZXZSYXdQcmV2VGltZSA9PT0gdGltZSkgPyB0aW1lIDogX3RpbnlOdW07IC8vd2hlbiB0aGUgcGxheWhlYWQgYXJyaXZlcyBhdCBFWEFDVExZIHRpbWUgMCAocmlnaHQgb24gdG9wKSBvZiBhIHplcm8tZHVyYXRpb24gdHdlZW4sIHdlIG5lZWQgdG8gZGlzY2VybiBpZiBldmVudHMgYXJlIHN1cHByZXNzZWQgc28gdGhhdCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBhZ2FpbiAobmV4dCB0aW1lKSwgaXQnbGwgdHJpZ2dlciB0aGUgY2FsbGJhY2suIElmIGV2ZW50cyBhcmUgTk9UIHN1cHByZXNzZWQsIG9idmlvdXNseSB0aGUgY2FsbGJhY2sgd291bGQgYmUgdHJpZ2dlcmVkIGluIHRoaXMgcmVuZGVyLiBCYXNpY2FsbHksIHRoZSBjYWxsYmFjayBzaG91bGQgZmlyZSBlaXRoZXIgd2hlbiB0aGUgcGxheWhlYWQgQVJSSVZFUyBvciBMRUFWRVMgdGhpcyBleGFjdCBzcG90LCBub3QgYm90aC4gSW1hZ2luZSBkb2luZyBhIHRpbWVsaW5lLnNlZWsoMCkgYW5kIHRoZXJlJ3MgYSBjYWxsYmFjayB0aGF0IHNpdHMgYXQgMC4gU2luY2UgZXZlbnRzIGFyZSBzdXBwcmVzc2VkIG9uIHRoYXQgc2VlaygpIGJ5IGRlZmF1bHQsIG5vdGhpbmcgd2lsbCBmaXJlLCBidXQgd2hlbiB0aGUgcGxheWhlYWQgbW92ZXMgb2ZmIG9mIHRoYXQgcG9zaXRpb24sIHRoZSBjYWxsYmFjayBzaG91bGQgZmlyZS4gVGhpcyBiZWhhdmlvciBpcyB3aGF0IHBlb3BsZSBpbnR1aXRpdmVseSBleHBlY3QuIFdlIHNldCB0aGUgX3Jhd1ByZXZUaW1lIHRvIGJlIGEgcHJlY2lzZSB0aW55IG51bWJlciB0byBpbmRpY2F0ZSB0aGlzIHNjZW5hcmlvIHJhdGhlciB0aGFuIHVzaW5nIGFub3RoZXIgcHJvcGVydHkvdmFyaWFibGUgd2hpY2ggd291bGQgaW5jcmVhc2UgbWVtb3J5IHVzYWdlLiBUaGlzIHRlY2huaXF1ZSBpcyBsZXNzIHJlYWRhYmxlLCBidXQgbW9yZSBlZmZpY2llbnQuXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICghdGhpcy5faW5pdHRlZCkgeyAvL2lmIHdlIHJlbmRlciB0aGUgdmVyeSBiZWdpbm5pbmcgKHRpbWUgPT0gMCkgb2YgYSBmcm9tVG8oKSwgd2UgbXVzdCBmb3JjZSB0aGUgcmVuZGVyIChub3JtYWwgdHdlZW5zIHdvdWxkbid0IG5lZWQgdG8gcmVuZGVyIGF0IGEgdGltZSBvZiAwIHdoZW4gdGhlIHByZXZUaW1lIHdhcyBhbHNvIDApLiBUaGlzIGlzIGFsc28gbWFuZGF0b3J5IHRvIG1ha2Ugc3VyZSBvdmVyd3JpdGluZyBraWNrcyBpbiBpbW1lZGlhdGVseS5cblx0XHRcdFx0XHRmb3JjZSA9IHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuX3RvdGFsVGltZSA9IHRoaXMuX3RpbWUgPSB0aW1lO1xuXG5cdFx0XHRcdGlmICh0aGlzLl9lYXNlVHlwZSkge1xuXHRcdFx0XHRcdHZhciByID0gdGltZSAvIGR1cmF0aW9uLCB0eXBlID0gdGhpcy5fZWFzZVR5cGUsIHBvdyA9IHRoaXMuX2Vhc2VQb3dlcjtcblx0XHRcdFx0XHRpZiAodHlwZSA9PT0gMSB8fCAodHlwZSA9PT0gMyAmJiByID49IDAuNSkpIHtcblx0XHRcdFx0XHRcdHIgPSAxIC0gcjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHR5cGUgPT09IDMpIHtcblx0XHRcdFx0XHRcdHIgKj0gMjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHBvdyA9PT0gMSkge1xuXHRcdFx0XHRcdFx0ciAqPSByO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAocG93ID09PSAyKSB7XG5cdFx0XHRcdFx0XHRyICo9IHIgKiByO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAocG93ID09PSAzKSB7XG5cdFx0XHRcdFx0XHRyICo9IHIgKiByICogcjtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHBvdyA9PT0gNCkge1xuXHRcdFx0XHRcdFx0ciAqPSByICogciAqIHIgKiByO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICh0eXBlID09PSAxKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnJhdGlvID0gMSAtIHI7XG5cdFx0XHRcdFx0fSBlbHNlIGlmICh0eXBlID09PSAyKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnJhdGlvID0gcjtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHRpbWUgLyBkdXJhdGlvbiA8IDAuNSkge1xuXHRcdFx0XHRcdFx0dGhpcy5yYXRpbyA9IHIgLyAyO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0aGlzLnJhdGlvID0gMSAtIChyIC8gMik7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5yYXRpbyA9IHRoaXMuX2Vhc2UuZ2V0UmF0aW8odGltZSAvIGR1cmF0aW9uKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAodGhpcy5fdGltZSA9PT0gcHJldlRpbWUgJiYgIWZvcmNlKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH0gZWxzZSBpZiAoIXRoaXMuX2luaXR0ZWQpIHtcblx0XHRcdFx0dGhpcy5faW5pdCgpO1xuXHRcdFx0XHRpZiAoIXRoaXMuX2luaXR0ZWQgfHwgdGhpcy5fZ2MpIHsgLy9pbW1lZGlhdGVSZW5kZXIgdHdlZW5zIHR5cGljYWxseSB3b24ndCBpbml0aWFsaXplIHVudGlsIHRoZSBwbGF5aGVhZCBhZHZhbmNlcyAoX3RpbWUgaXMgZ3JlYXRlciB0aGFuIDApIGluIG9yZGVyIHRvIGVuc3VyZSB0aGF0IG92ZXJ3cml0aW5nIG9jY3VycyBwcm9wZXJseS4gQWxzbywgaWYgYWxsIG9mIHRoZSB0d2VlbmluZyBwcm9wZXJ0aWVzIGhhdmUgYmVlbiBvdmVyd3JpdHRlbiAod2hpY2ggd291bGQgY2F1c2UgX2djIHRvIGJlIHRydWUsIGFzIHNldCBpbiBfaW5pdCgpKSwgd2Ugc2hvdWxkbid0IGNvbnRpbnVlIG90aGVyd2lzZSBhbiBvblN0YXJ0IGNhbGxiYWNrIGNvdWxkIGJlIGNhbGxlZCBmb3IgZXhhbXBsZS5cblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH0gZWxzZSBpZiAoIWZvcmNlICYmIHRoaXMuX2ZpcnN0UFQgJiYgKCh0aGlzLnZhcnMubGF6eSAhPT0gZmFsc2UgJiYgdGhpcy5fZHVyYXRpb24pIHx8ICh0aGlzLnZhcnMubGF6eSAmJiAhdGhpcy5fZHVyYXRpb24pKSkge1xuXHRcdFx0XHRcdHRoaXMuX3RpbWUgPSB0aGlzLl90b3RhbFRpbWUgPSBwcmV2VGltZTtcblx0XHRcdFx0XHR0aGlzLl9yYXdQcmV2VGltZSA9IHByZXZSYXdQcmV2VGltZTtcblx0XHRcdFx0XHRfbGF6eVR3ZWVucy5wdXNoKHRoaXMpO1xuXHRcdFx0XHRcdHRoaXMuX2xhenkgPSBbdGltZSwgc3VwcHJlc3NFdmVudHNdO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHQvL19lYXNlIGlzIGluaXRpYWxseSBzZXQgdG8gZGVmYXVsdEVhc2UsIHNvIG5vdyB0aGF0IGluaXQoKSBoYXMgcnVuLCBfZWFzZSBpcyBzZXQgcHJvcGVybHkgYW5kIHdlIG5lZWQgdG8gcmVjYWxjdWxhdGUgdGhlIHJhdGlvLiBPdmVyYWxsIHRoaXMgaXMgZmFzdGVyIHRoYW4gdXNpbmcgY29uZGl0aW9uYWwgbG9naWMgZWFybGllciBpbiB0aGUgbWV0aG9kIHRvIGF2b2lkIGhhdmluZyB0byBzZXQgcmF0aW8gdHdpY2UgYmVjYXVzZSB3ZSBvbmx5IGluaXQoKSBvbmNlIGJ1dCByZW5kZXJUaW1lKCkgZ2V0cyBjYWxsZWQgVkVSWSBmcmVxdWVudGx5LlxuXHRcdFx0XHRpZiAodGhpcy5fdGltZSAmJiAhaXNDb21wbGV0ZSkge1xuXHRcdFx0XHRcdHRoaXMucmF0aW8gPSB0aGlzLl9lYXNlLmdldFJhdGlvKHRoaXMuX3RpbWUgLyBkdXJhdGlvbik7XG5cdFx0XHRcdH0gZWxzZSBpZiAoaXNDb21wbGV0ZSAmJiB0aGlzLl9lYXNlLl9jYWxjRW5kKSB7XG5cdFx0XHRcdFx0dGhpcy5yYXRpbyA9IHRoaXMuX2Vhc2UuZ2V0UmF0aW8oKHRoaXMuX3RpbWUgPT09IDApID8gMCA6IDEpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAodGhpcy5fbGF6eSAhPT0gZmFsc2UpIHsgLy9pbiBjYXNlIGEgbGF6eSByZW5kZXIgaXMgcGVuZGluZywgd2Ugc2hvdWxkIGZsdXNoIGl0IGJlY2F1c2UgdGhlIG5ldyByZW5kZXIgaXMgb2NjdXJyaW5nIG5vdyAoaW1hZ2luZSBhIGxhenkgdHdlZW4gaW5zdGFudGlhdGluZyBhbmQgdGhlbiBpbW1lZGlhdGVseSB0aGUgdXNlciBjYWxscyB0d2Vlbi5zZWVrKHR3ZWVuLmR1cmF0aW9uKCkpLCBza2lwcGluZyB0byB0aGUgZW5kIC0gdGhlIGVuZCByZW5kZXIgd291bGQgYmUgZm9yY2VkLCBhbmQgdGhlbiBpZiB3ZSBkaWRuJ3QgZmx1c2ggdGhlIGxhenkgcmVuZGVyLCBpdCdkIGZpcmUgQUZURVIgdGhlIHNlZWsoKSwgcmVuZGVyaW5nIGl0IGF0IHRoZSB3cm9uZyB0aW1lLlxuXHRcdFx0XHR0aGlzLl9sYXp5ID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIXRoaXMuX2FjdGl2ZSkgaWYgKCF0aGlzLl9wYXVzZWQgJiYgdGhpcy5fdGltZSAhPT0gcHJldlRpbWUgJiYgdGltZSA+PSAwKSB7XG5cdFx0XHRcdHRoaXMuX2FjdGl2ZSA9IHRydWU7ICAvL3NvIHRoYXQgaWYgdGhlIHVzZXIgcmVuZGVycyBhIHR3ZWVuIChhcyBvcHBvc2VkIHRvIHRoZSB0aW1lbGluZSByZW5kZXJpbmcgaXQpLCB0aGUgdGltZWxpbmUgaXMgZm9yY2VkIHRvIHJlLXJlbmRlciBhbmQgYWxpZ24gaXQgd2l0aCB0aGUgcHJvcGVyIHRpbWUvZnJhbWUgb24gdGhlIG5leHQgcmVuZGVyaW5nIGN5Y2xlLiBNYXliZSB0aGUgdHdlZW4gYWxyZWFkeSBmaW5pc2hlZCBidXQgdGhlIHVzZXIgbWFudWFsbHkgcmUtcmVuZGVycyBpdCBhcyBoYWxmd2F5IGRvbmUuXG5cdFx0XHR9XG5cdFx0XHRpZiAocHJldlRpbWUgPT09IDApIHtcblx0XHRcdFx0aWYgKHRoaXMuX3N0YXJ0QXQpIHtcblx0XHRcdFx0XHRpZiAodGltZSA+PSAwKSB7XG5cdFx0XHRcdFx0XHR0aGlzLl9zdGFydEF0LnJlbmRlcih0aW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIWNhbGxiYWNrKSB7XG5cdFx0XHRcdFx0XHRjYWxsYmFjayA9IFwiX2R1bW15R1NcIjsgLy9pZiBubyBjYWxsYmFjayBpcyBkZWZpbmVkLCB1c2UgYSBkdW1teSB2YWx1ZSBqdXN0IHNvIHRoYXQgdGhlIGNvbmRpdGlvbiBhdCB0aGUgZW5kIGV2YWx1YXRlcyBhcyB0cnVlIGJlY2F1c2UgX3N0YXJ0QXQgc2hvdWxkIHJlbmRlciBBRlRFUiB0aGUgbm9ybWFsIHJlbmRlciBsb29wIHdoZW4gdGhlIHRpbWUgaXMgbmVnYXRpdmUuIFdlIGNvdWxkIGhhbmRsZSB0aGlzIGluIGEgbW9yZSBpbnR1aXRpdmUgd2F5LCBvZiBjb3Vyc2UsIGJ1dCB0aGUgcmVuZGVyIGxvb3AgaXMgdGhlIE1PU1QgaW1wb3J0YW50IHRoaW5nIHRvIG9wdGltaXplLCBzbyB0aGlzIHRlY2huaXF1ZSBhbGxvd3MgdXMgdG8gYXZvaWQgYWRkaW5nIGV4dHJhIGNvbmRpdGlvbmFsIGxvZ2ljIGluIGEgaGlnaC1mcmVxdWVuY3kgYXJlYS5cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHRoaXMudmFycy5vblN0YXJ0KSBpZiAodGhpcy5fdGltZSAhPT0gMCB8fCBkdXJhdGlvbiA9PT0gMCkgaWYgKCFzdXBwcmVzc0V2ZW50cykge1xuXHRcdFx0XHRcdHRoaXMuX2NhbGxiYWNrKFwib25TdGFydFwiKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cHQgPSB0aGlzLl9maXJzdFBUO1xuXHRcdFx0d2hpbGUgKHB0KSB7XG5cdFx0XHRcdGlmIChwdC5mKSB7XG5cdFx0XHRcdFx0cHQudFtwdC5wXShwdC5jICogdGhpcy5yYXRpbyArIHB0LnMpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHB0LnRbcHQucF0gPSBwdC5jICogdGhpcy5yYXRpbyArIHB0LnM7XG5cdFx0XHRcdH1cblx0XHRcdFx0cHQgPSBwdC5fbmV4dDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHRoaXMuX29uVXBkYXRlKSB7XG5cdFx0XHRcdGlmICh0aW1lIDwgMCkgaWYgKHRoaXMuX3N0YXJ0QXQgJiYgdGltZSAhPT0gLTAuMDAwMSkgeyAvL2lmIHRoZSB0d2VlbiBpcyBwb3NpdGlvbmVkIGF0IHRoZSBWRVJZIGJlZ2lubmluZyAoX3N0YXJ0VGltZSAwKSBvZiBpdHMgcGFyZW50IHRpbWVsaW5lLCBpdCdzIGlsbGVnYWwgZm9yIHRoZSBwbGF5aGVhZCB0byBnbyBiYWNrIGZ1cnRoZXIsIHNvIHdlIHNob3VsZCBub3QgcmVuZGVyIHRoZSByZWNvcmRlZCBzdGFydEF0IHZhbHVlcy5cblx0XHRcdFx0XHR0aGlzLl9zdGFydEF0LnJlbmRlcih0aW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpOyAvL25vdGU6IGZvciBwZXJmb3JtYW5jZSByZWFzb25zLCB3ZSB0dWNrIHRoaXMgY29uZGl0aW9uYWwgbG9naWMgaW5zaWRlIGxlc3MgdHJhdmVsZWQgYXJlYXMgKG1vc3QgdHdlZW5zIGRvbid0IGhhdmUgYW4gb25VcGRhdGUpLiBXZSdkIGp1c3QgaGF2ZSBpdCBhdCB0aGUgZW5kIGJlZm9yZSB0aGUgb25Db21wbGV0ZSwgYnV0IHRoZSB2YWx1ZXMgc2hvdWxkIGJlIHVwZGF0ZWQgYmVmb3JlIGFueSBvblVwZGF0ZSBpcyBjYWxsZWQsIHNvIHdlIEFMU08gcHV0IGl0IGhlcmUgYW5kIHRoZW4gaWYgaXQncyBub3QgY2FsbGVkLCB3ZSBkbyBzbyBsYXRlciBuZWFyIHRoZSBvbkNvbXBsZXRlLlxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICghc3VwcHJlc3NFdmVudHMpIGlmICh0aGlzLl90aW1lICE9PSBwcmV2VGltZSB8fCBpc0NvbXBsZXRlKSB7XG5cdFx0XHRcdFx0dGhpcy5fY2FsbGJhY2soXCJvblVwZGF0ZVwiKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKGNhbGxiYWNrKSBpZiAoIXRoaXMuX2djIHx8IGZvcmNlKSB7IC8vY2hlY2sgX2djIGJlY2F1c2UgdGhlcmUncyBhIGNoYW5jZSB0aGF0IGtpbGwoKSBjb3VsZCBiZSBjYWxsZWQgaW4gYW4gb25VcGRhdGVcblx0XHRcdFx0aWYgKHRpbWUgPCAwICYmIHRoaXMuX3N0YXJ0QXQgJiYgIXRoaXMuX29uVXBkYXRlICYmIHRpbWUgIT09IC0wLjAwMDEpIHsgLy8tMC4wMDAxIGlzIGEgc3BlY2lhbCB2YWx1ZSB0aGF0IHdlIHVzZSB3aGVuIGxvb3BpbmcgYmFjayB0byB0aGUgYmVnaW5uaW5nIG9mIGEgcmVwZWF0ZWQgVGltZWxpbmVNYXgsIGluIHdoaWNoIGNhc2Ugd2Ugc2hvdWxkbid0IHJlbmRlciB0aGUgX3N0YXJ0QXQgdmFsdWVzLlxuXHRcdFx0XHRcdHRoaXMuX3N0YXJ0QXQucmVuZGVyKHRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGlzQ29tcGxldGUpIHtcblx0XHRcdFx0XHRpZiAodGhpcy5fdGltZWxpbmUuYXV0b1JlbW92ZUNoaWxkcmVuKSB7XG5cdFx0XHRcdFx0XHR0aGlzLl9lbmFibGVkKGZhbHNlLCBmYWxzZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRoaXMuX2FjdGl2ZSA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICghc3VwcHJlc3NFdmVudHMgJiYgdGhpcy52YXJzW2NhbGxiYWNrXSkge1xuXHRcdFx0XHRcdHRoaXMuX2NhbGxiYWNrKGNhbGxiYWNrKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoZHVyYXRpb24gPT09IDAgJiYgdGhpcy5fcmF3UHJldlRpbWUgPT09IF90aW55TnVtICYmIHJhd1ByZXZUaW1lICE9PSBfdGlueU51bSkgeyAvL3RoZSBvbkNvbXBsZXRlIG9yIG9uUmV2ZXJzZUNvbXBsZXRlIGNvdWxkIHRyaWdnZXIgbW92ZW1lbnQgb2YgdGhlIHBsYXloZWFkIGFuZCBmb3IgemVyby1kdXJhdGlvbiB0d2VlbnMgKHdoaWNoIG11c3QgZGlzY2VybiBkaXJlY3Rpb24pIHRoYXQgbGFuZCBkaXJlY3RseSBiYWNrIG9uIHRoZWlyIHN0YXJ0IHRpbWUsIHdlIGRvbid0IHdhbnQgdG8gZmlyZSBhZ2FpbiBvbiB0aGUgbmV4dCByZW5kZXIuIFRoaW5rIG9mIHNldmVyYWwgYWRkUGF1c2UoKSdzIGluIGEgdGltZWxpbmUgdGhhdCBmb3JjZXMgdGhlIHBsYXloZWFkIHRvIGEgY2VydGFpbiBzcG90LCBidXQgd2hhdCBpZiBpdCdzIGFscmVhZHkgcGF1c2VkIGFuZCBhbm90aGVyIHR3ZWVuIGlzIHR3ZWVuaW5nIHRoZSBcInRpbWVcIiBvZiB0aGUgdGltZWxpbmU/IEVhY2ggdGltZSBpdCBtb3ZlcyBbZm9yd2FyZF0gcGFzdCB0aGF0IHNwb3QsIGl0IHdvdWxkIG1vdmUgYmFjaywgYW5kIHNpbmNlIHN1cHByZXNzRXZlbnRzIGlzIHRydWUsIGl0J2QgcmVzZXQgX3Jhd1ByZXZUaW1lIHRvIF90aW55TnVtIHNvIHRoYXQgd2hlbiBpdCBiZWdpbnMgYWdhaW4sIHRoZSBjYWxsYmFjayB3b3VsZCBmaXJlIChzbyB1bHRpbWF0ZWx5IGl0IGNvdWxkIGJvdW5jZSBiYWNrIGFuZCBmb3J0aCBkdXJpbmcgdGhhdCB0d2VlbikuIEFnYWluLCB0aGlzIGlzIGEgdmVyeSB1bmNvbW1vbiBzY2VuYXJpbywgYnV0IHBvc3NpYmxlIG5vbmV0aGVsZXNzLlxuXHRcdFx0XHRcdHRoaXMuX3Jhd1ByZXZUaW1lID0gMDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRwLl9raWxsID0gZnVuY3Rpb24odmFycywgdGFyZ2V0LCBvdmVyd3JpdGluZ1R3ZWVuKSB7XG5cdFx0XHRpZiAodmFycyA9PT0gXCJhbGxcIikge1xuXHRcdFx0XHR2YXJzID0gbnVsbDtcblx0XHRcdH1cblx0XHRcdGlmICh2YXJzID09IG51bGwpIGlmICh0YXJnZXQgPT0gbnVsbCB8fCB0YXJnZXQgPT09IHRoaXMudGFyZ2V0KSB7XG5cdFx0XHRcdHRoaXMuX2xhenkgPSBmYWxzZTtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX2VuYWJsZWQoZmFsc2UsIGZhbHNlKTtcblx0XHRcdH1cblx0XHRcdHRhcmdldCA9ICh0eXBlb2YodGFyZ2V0KSAhPT0gXCJzdHJpbmdcIikgPyAodGFyZ2V0IHx8IHRoaXMuX3RhcmdldHMgfHwgdGhpcy50YXJnZXQpIDogVHdlZW5MaXRlLnNlbGVjdG9yKHRhcmdldCkgfHwgdGFyZ2V0O1xuXHRcdFx0dmFyIHNpbXVsdGFuZW91c092ZXJ3cml0ZSA9IChvdmVyd3JpdGluZ1R3ZWVuICYmIHRoaXMuX3RpbWUgJiYgb3ZlcndyaXRpbmdUd2Vlbi5fc3RhcnRUaW1lID09PSB0aGlzLl9zdGFydFRpbWUgJiYgdGhpcy5fdGltZWxpbmUgPT09IG92ZXJ3cml0aW5nVHdlZW4uX3RpbWVsaW5lKSxcblx0XHRcdFx0aSwgb3ZlcndyaXR0ZW5Qcm9wcywgcCwgcHQsIHByb3BMb29rdXAsIGNoYW5nZWQsIGtpbGxQcm9wcywgcmVjb3JkLCBraWxsZWQ7XG5cdFx0XHRpZiAoKF9pc0FycmF5KHRhcmdldCkgfHwgX2lzU2VsZWN0b3IodGFyZ2V0KSkgJiYgdHlwZW9mKHRhcmdldFswXSkgIT09IFwibnVtYmVyXCIpIHtcblx0XHRcdFx0aSA9IHRhcmdldC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdGlmICh0aGlzLl9raWxsKHZhcnMsIHRhcmdldFtpXSwgb3ZlcndyaXRpbmdUd2VlbikpIHtcblx0XHRcdFx0XHRcdGNoYW5nZWQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYgKHRoaXMuX3RhcmdldHMpIHtcblx0XHRcdFx0XHRpID0gdGhpcy5fdGFyZ2V0cy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0XHRpZiAodGFyZ2V0ID09PSB0aGlzLl90YXJnZXRzW2ldKSB7XG5cdFx0XHRcdFx0XHRcdHByb3BMb29rdXAgPSB0aGlzLl9wcm9wTG9va3VwW2ldIHx8IHt9O1xuXHRcdFx0XHRcdFx0XHR0aGlzLl9vdmVyd3JpdHRlblByb3BzID0gdGhpcy5fb3ZlcndyaXR0ZW5Qcm9wcyB8fCBbXTtcblx0XHRcdFx0XHRcdFx0b3ZlcndyaXR0ZW5Qcm9wcyA9IHRoaXMuX292ZXJ3cml0dGVuUHJvcHNbaV0gPSB2YXJzID8gdGhpcy5fb3ZlcndyaXR0ZW5Qcm9wc1tpXSB8fCB7fSA6IFwiYWxsXCI7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIGlmICh0YXJnZXQgIT09IHRoaXMudGFyZ2V0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHByb3BMb29rdXAgPSB0aGlzLl9wcm9wTG9va3VwO1xuXHRcdFx0XHRcdG92ZXJ3cml0dGVuUHJvcHMgPSB0aGlzLl9vdmVyd3JpdHRlblByb3BzID0gdmFycyA/IHRoaXMuX292ZXJ3cml0dGVuUHJvcHMgfHwge30gOiBcImFsbFwiO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHByb3BMb29rdXApIHtcblx0XHRcdFx0XHRraWxsUHJvcHMgPSB2YXJzIHx8IHByb3BMb29rdXA7XG5cdFx0XHRcdFx0cmVjb3JkID0gKHZhcnMgIT09IG92ZXJ3cml0dGVuUHJvcHMgJiYgb3ZlcndyaXR0ZW5Qcm9wcyAhPT0gXCJhbGxcIiAmJiB2YXJzICE9PSBwcm9wTG9va3VwICYmICh0eXBlb2YodmFycykgIT09IFwib2JqZWN0XCIgfHwgIXZhcnMuX3RlbXBLaWxsKSk7IC8vX3RlbXBLaWxsIGlzIGEgc3VwZXItc2VjcmV0IHdheSB0byBkZWxldGUgYSBwYXJ0aWN1bGFyIHR3ZWVuaW5nIHByb3BlcnR5IGJ1dCBOT1QgaGF2ZSBpdCByZW1lbWJlcmVkIGFzIGFuIG9mZmljaWFsIG92ZXJ3cml0dGVuIHByb3BlcnR5IChsaWtlIGluIEJlemllclBsdWdpbilcblx0XHRcdFx0XHRpZiAob3ZlcndyaXRpbmdUd2VlbiAmJiAoVHdlZW5MaXRlLm9uT3ZlcndyaXRlIHx8IHRoaXMudmFycy5vbk92ZXJ3cml0ZSkpIHtcblx0XHRcdFx0XHRcdGZvciAocCBpbiBraWxsUHJvcHMpIHtcblx0XHRcdFx0XHRcdFx0aWYgKHByb3BMb29rdXBbcF0pIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIWtpbGxlZCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0a2lsbGVkID0gW107XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGtpbGxlZC5wdXNoKHApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoKGtpbGxlZCB8fCAhdmFycykgJiYgIV9vbk92ZXJ3cml0ZSh0aGlzLCBvdmVyd3JpdGluZ1R3ZWVuLCB0YXJnZXQsIGtpbGxlZCkpIHsgLy9pZiB0aGUgb25PdmVyd3JpdGUgcmV0dXJuZWQgZmFsc2UsIHRoYXQgbWVhbnMgdGhlIHVzZXIgd2FudHMgdG8gb3ZlcnJpZGUgdGhlIG92ZXJ3cml0aW5nIChjYW5jZWwgaXQpLlxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Zm9yIChwIGluIGtpbGxQcm9wcykge1xuXHRcdFx0XHRcdFx0aWYgKChwdCA9IHByb3BMb29rdXBbcF0pKSB7XG5cdFx0XHRcdFx0XHRcdGlmIChzaW11bHRhbmVvdXNPdmVyd3JpdGUpIHsgLy9pZiBhbm90aGVyIHR3ZWVuIG92ZXJ3cml0ZXMgdGhpcyBvbmUgYW5kIHRoZXkgYm90aCBzdGFydCBhdCBleGFjdGx5IHRoZSBzYW1lIHRpbWUsIHlldCB0aGlzIHR3ZWVuIGhhcyBhbHJlYWR5IHJlbmRlcmVkIG9uY2UgKGZvciBleGFtcGxlLCBhdCAwLjAwMSkgYmVjYXVzZSBpdCdzIGZpcnN0IGluIHRoZSBxdWV1ZSwgd2Ugc2hvdWxkIHJldmVydCB0aGUgdmFsdWVzIHRvIHdoZXJlIHRoZXkgd2VyZSBhdCAwIHNvIHRoYXQgdGhlIHN0YXJ0aW5nIHZhbHVlcyBhcmVuJ3QgY29udGFtaW5hdGVkIG9uIHRoZSBvdmVyd3JpdGluZyB0d2Vlbi5cblx0XHRcdFx0XHRcdFx0XHRpZiAocHQuZikge1xuXHRcdFx0XHRcdFx0XHRcdFx0cHQudFtwdC5wXShwdC5zKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0cHQudFtwdC5wXSA9IHB0LnM7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGNoYW5nZWQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGlmIChwdC5wZyAmJiBwdC50Ll9raWxsKGtpbGxQcm9wcykpIHtcblx0XHRcdFx0XHRcdFx0XHRjaGFuZ2VkID0gdHJ1ZTsgLy9zb21lIHBsdWdpbnMgbmVlZCB0byBiZSBub3RpZmllZCBzbyB0aGV5IGNhbiBwZXJmb3JtIGNsZWFudXAgdGFza3MgZmlyc3Rcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRpZiAoIXB0LnBnIHx8IHB0LnQuX292ZXJ3cml0ZVByb3BzLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0XHRcdFx0XHRcdGlmIChwdC5fcHJldikge1xuXHRcdFx0XHRcdFx0XHRcdFx0cHQuX3ByZXYuX25leHQgPSBwdC5fbmV4dDtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKHB0ID09PSB0aGlzLl9maXJzdFBUKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR0aGlzLl9maXJzdFBUID0gcHQuX25leHQ7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGlmIChwdC5fbmV4dCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cHQuX25leHQuX3ByZXYgPSBwdC5fcHJldjtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0cHQuX25leHQgPSBwdC5fcHJldiA9IG51bGw7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0ZGVsZXRlIHByb3BMb29rdXBbcF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAocmVjb3JkKSB7XG5cdFx0XHRcdFx0XHRcdG92ZXJ3cml0dGVuUHJvcHNbcF0gPSAxO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIXRoaXMuX2ZpcnN0UFQgJiYgdGhpcy5faW5pdHRlZCkgeyAvL2lmIGFsbCB0d2VlbmluZyBwcm9wZXJ0aWVzIGFyZSBraWxsZWQsIGtpbGwgdGhlIHR3ZWVuLiBXaXRob3V0IHRoaXMgbGluZSwgaWYgdGhlcmUncyBhIHR3ZWVuIHdpdGggbXVsdGlwbGUgdGFyZ2V0cyBhbmQgdGhlbiB5b3Uga2lsbFR3ZWVuc09mKCkgZWFjaCB0YXJnZXQgaW5kaXZpZHVhbGx5LCB0aGUgdHdlZW4gd291bGQgdGVjaG5pY2FsbHkgc3RpbGwgcmVtYWluIGFjdGl2ZSBhbmQgZmlyZSBpdHMgb25Db21wbGV0ZSBldmVuIHRob3VnaCB0aGVyZSBhcmVuJ3QgYW55IG1vcmUgcHJvcGVydGllcyB0d2VlbmluZy5cblx0XHRcdFx0XHRcdHRoaXMuX2VuYWJsZWQoZmFsc2UsIGZhbHNlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBjaGFuZ2VkO1xuXHRcdH07XG5cblx0XHRwLmludmFsaWRhdGUgPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICh0aGlzLl9ub3RpZnlQbHVnaW5zT2ZFbmFibGVkKSB7XG5cdFx0XHRcdFR3ZWVuTGl0ZS5fb25QbHVnaW5FdmVudChcIl9vbkRpc2FibGVcIiwgdGhpcyk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9maXJzdFBUID0gdGhpcy5fb3ZlcndyaXR0ZW5Qcm9wcyA9IHRoaXMuX3N0YXJ0QXQgPSB0aGlzLl9vblVwZGF0ZSA9IG51bGw7XG5cdFx0XHR0aGlzLl9ub3RpZnlQbHVnaW5zT2ZFbmFibGVkID0gdGhpcy5fYWN0aXZlID0gdGhpcy5fbGF6eSA9IGZhbHNlO1xuXHRcdFx0dGhpcy5fcHJvcExvb2t1cCA9ICh0aGlzLl90YXJnZXRzKSA/IHt9IDogW107XG5cdFx0XHRBbmltYXRpb24ucHJvdG90eXBlLmludmFsaWRhdGUuY2FsbCh0aGlzKTtcblx0XHRcdGlmICh0aGlzLnZhcnMuaW1tZWRpYXRlUmVuZGVyKSB7XG5cdFx0XHRcdHRoaXMuX3RpbWUgPSAtX3RpbnlOdW07IC8vZm9yY2VzIGEgcmVuZGVyIHdpdGhvdXQgaGF2aW5nIHRvIHNldCB0aGUgcmVuZGVyKCkgXCJmb3JjZVwiIHBhcmFtZXRlciB0byB0cnVlIGJlY2F1c2Ugd2Ugd2FudCB0byBhbGxvdyBsYXp5aW5nIGJ5IGRlZmF1bHQgKHVzaW5nIHRoZSBcImZvcmNlXCIgcGFyYW1ldGVyIGFsd2F5cyBmb3JjZXMgYW4gaW1tZWRpYXRlIGZ1bGwgcmVuZGVyKVxuXHRcdFx0XHR0aGlzLnJlbmRlcigtdGhpcy5fZGVsYXkpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fTtcblxuXHRcdHAuX2VuYWJsZWQgPSBmdW5jdGlvbihlbmFibGVkLCBpZ25vcmVUaW1lbGluZSkge1xuXHRcdFx0aWYgKCFfdGlja2VyQWN0aXZlKSB7XG5cdFx0XHRcdF90aWNrZXIud2FrZSgpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGVuYWJsZWQgJiYgdGhpcy5fZ2MpIHtcblx0XHRcdFx0dmFyIHRhcmdldHMgPSB0aGlzLl90YXJnZXRzLFxuXHRcdFx0XHRcdGk7XG5cdFx0XHRcdGlmICh0YXJnZXRzKSB7XG5cdFx0XHRcdFx0aSA9IHRhcmdldHMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdFx0dGhpcy5fc2libGluZ3NbaV0gPSBfcmVnaXN0ZXIodGFyZ2V0c1tpXSwgdGhpcywgdHJ1ZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRoaXMuX3NpYmxpbmdzID0gX3JlZ2lzdGVyKHRoaXMudGFyZ2V0LCB0aGlzLCB0cnVlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0QW5pbWF0aW9uLnByb3RvdHlwZS5fZW5hYmxlZC5jYWxsKHRoaXMsIGVuYWJsZWQsIGlnbm9yZVRpbWVsaW5lKTtcblx0XHRcdGlmICh0aGlzLl9ub3RpZnlQbHVnaW5zT2ZFbmFibGVkKSBpZiAodGhpcy5fZmlyc3RQVCkge1xuXHRcdFx0XHRyZXR1cm4gVHdlZW5MaXRlLl9vblBsdWdpbkV2ZW50KChlbmFibGVkID8gXCJfb25FbmFibGVcIiA6IFwiX29uRGlzYWJsZVwiKSwgdGhpcyk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXG4vLy0tLS1Ud2VlbkxpdGUgc3RhdGljIG1ldGhvZHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXHRcdFR3ZWVuTGl0ZS50byA9IGZ1bmN0aW9uKHRhcmdldCwgZHVyYXRpb24sIHZhcnMpIHtcblx0XHRcdHJldHVybiBuZXcgVHdlZW5MaXRlKHRhcmdldCwgZHVyYXRpb24sIHZhcnMpO1xuXHRcdH07XG5cblx0XHRUd2VlbkxpdGUuZnJvbSA9IGZ1bmN0aW9uKHRhcmdldCwgZHVyYXRpb24sIHZhcnMpIHtcblx0XHRcdHZhcnMucnVuQmFja3dhcmRzID0gdHJ1ZTtcblx0XHRcdHZhcnMuaW1tZWRpYXRlUmVuZGVyID0gKHZhcnMuaW1tZWRpYXRlUmVuZGVyICE9IGZhbHNlKTtcblx0XHRcdHJldHVybiBuZXcgVHdlZW5MaXRlKHRhcmdldCwgZHVyYXRpb24sIHZhcnMpO1xuXHRcdH07XG5cblx0XHRUd2VlbkxpdGUuZnJvbVRvID0gZnVuY3Rpb24odGFyZ2V0LCBkdXJhdGlvbiwgZnJvbVZhcnMsIHRvVmFycykge1xuXHRcdFx0dG9WYXJzLnN0YXJ0QXQgPSBmcm9tVmFycztcblx0XHRcdHRvVmFycy5pbW1lZGlhdGVSZW5kZXIgPSAodG9WYXJzLmltbWVkaWF0ZVJlbmRlciAhPSBmYWxzZSAmJiBmcm9tVmFycy5pbW1lZGlhdGVSZW5kZXIgIT0gZmFsc2UpO1xuXHRcdFx0cmV0dXJuIG5ldyBUd2VlbkxpdGUodGFyZ2V0LCBkdXJhdGlvbiwgdG9WYXJzKTtcblx0XHR9O1xuXG5cdFx0VHdlZW5MaXRlLmRlbGF5ZWRDYWxsID0gZnVuY3Rpb24oZGVsYXksIGNhbGxiYWNrLCBwYXJhbXMsIHNjb3BlLCB1c2VGcmFtZXMpIHtcblx0XHRcdHJldHVybiBuZXcgVHdlZW5MaXRlKGNhbGxiYWNrLCAwLCB7ZGVsYXk6ZGVsYXksIG9uQ29tcGxldGU6Y2FsbGJhY2ssIG9uQ29tcGxldGVQYXJhbXM6cGFyYW1zLCBjYWxsYmFja1Njb3BlOnNjb3BlLCBvblJldmVyc2VDb21wbGV0ZTpjYWxsYmFjaywgb25SZXZlcnNlQ29tcGxldGVQYXJhbXM6cGFyYW1zLCBpbW1lZGlhdGVSZW5kZXI6ZmFsc2UsIGxhenk6ZmFsc2UsIHVzZUZyYW1lczp1c2VGcmFtZXMsIG92ZXJ3cml0ZTowfSk7XG5cdFx0fTtcblxuXHRcdFR3ZWVuTGl0ZS5zZXQgPSBmdW5jdGlvbih0YXJnZXQsIHZhcnMpIHtcblx0XHRcdHJldHVybiBuZXcgVHdlZW5MaXRlKHRhcmdldCwgMCwgdmFycyk7XG5cdFx0fTtcblxuXHRcdFR3ZWVuTGl0ZS5nZXRUd2VlbnNPZiA9IGZ1bmN0aW9uKHRhcmdldCwgb25seUFjdGl2ZSkge1xuXHRcdFx0aWYgKHRhcmdldCA9PSBudWxsKSB7IHJldHVybiBbXTsgfVxuXHRcdFx0dGFyZ2V0ID0gKHR5cGVvZih0YXJnZXQpICE9PSBcInN0cmluZ1wiKSA/IHRhcmdldCA6IFR3ZWVuTGl0ZS5zZWxlY3Rvcih0YXJnZXQpIHx8IHRhcmdldDtcblx0XHRcdHZhciBpLCBhLCBqLCB0O1xuXHRcdFx0aWYgKChfaXNBcnJheSh0YXJnZXQpIHx8IF9pc1NlbGVjdG9yKHRhcmdldCkpICYmIHR5cGVvZih0YXJnZXRbMF0pICE9PSBcIm51bWJlclwiKSB7XG5cdFx0XHRcdGkgPSB0YXJnZXQubGVuZ3RoO1xuXHRcdFx0XHRhID0gW107XG5cdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdGEgPSBhLmNvbmNhdChUd2VlbkxpdGUuZ2V0VHdlZW5zT2YodGFyZ2V0W2ldLCBvbmx5QWN0aXZlKSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aSA9IGEubGVuZ3RoO1xuXHRcdFx0XHQvL25vdyBnZXQgcmlkIG9mIGFueSBkdXBsaWNhdGVzICh0d2VlbnMgb2YgYXJyYXlzIG9mIG9iamVjdHMgY291bGQgY2F1c2UgZHVwbGljYXRlcylcblx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0dCA9IGFbaV07XG5cdFx0XHRcdFx0aiA9IGk7XG5cdFx0XHRcdFx0d2hpbGUgKC0taiA+IC0xKSB7XG5cdFx0XHRcdFx0XHRpZiAodCA9PT0gYVtqXSkge1xuXHRcdFx0XHRcdFx0XHRhLnNwbGljZShpLCAxKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGEgPSBfcmVnaXN0ZXIodGFyZ2V0KS5jb25jYXQoKTtcblx0XHRcdFx0aSA9IGEubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRpZiAoYVtpXS5fZ2MgfHwgKG9ubHlBY3RpdmUgJiYgIWFbaV0uaXNBY3RpdmUoKSkpIHtcblx0XHRcdFx0XHRcdGEuc3BsaWNlKGksIDEpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGE7XG5cdFx0fTtcblxuXHRcdFR3ZWVuTGl0ZS5raWxsVHdlZW5zT2YgPSBUd2VlbkxpdGUua2lsbERlbGF5ZWRDYWxsc1RvID0gZnVuY3Rpb24odGFyZ2V0LCBvbmx5QWN0aXZlLCB2YXJzKSB7XG5cdFx0XHRpZiAodHlwZW9mKG9ubHlBY3RpdmUpID09PSBcIm9iamVjdFwiKSB7XG5cdFx0XHRcdHZhcnMgPSBvbmx5QWN0aXZlOyAvL2ZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSAoYmVmb3JlIFwib25seUFjdGl2ZVwiIHBhcmFtZXRlciB3YXMgaW5zZXJ0ZWQpXG5cdFx0XHRcdG9ubHlBY3RpdmUgPSBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHZhciBhID0gVHdlZW5MaXRlLmdldFR3ZWVuc09mKHRhcmdldCwgb25seUFjdGl2ZSksXG5cdFx0XHRcdGkgPSBhLmxlbmd0aDtcblx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRhW2ldLl9raWxsKHZhcnMsIHRhcmdldCk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXG5cbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBUd2VlblBsdWdpbiAgIChjb3VsZCBlYXNpbHkgYmUgc3BsaXQgb3V0IGFzIGEgc2VwYXJhdGUgZmlsZS9jbGFzcywgYnV0IGluY2x1ZGVkIGZvciBlYXNlIG9mIHVzZSAoc28gdGhhdCBwZW9wbGUgZG9uJ3QgbmVlZCB0byBpbmNsdWRlIGFub3RoZXIgc2NyaXB0IGNhbGwgYmVmb3JlIGxvYWRpbmcgcGx1Z2lucyB3aGljaCBpcyBlYXN5IHRvIGZvcmdldClcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXHRcdHZhciBUd2VlblBsdWdpbiA9IF9jbGFzcyhcInBsdWdpbnMuVHdlZW5QbHVnaW5cIiwgZnVuY3Rpb24ocHJvcHMsIHByaW9yaXR5KSB7XG5cdFx0XHRcdFx0dGhpcy5fb3ZlcndyaXRlUHJvcHMgPSAocHJvcHMgfHwgXCJcIikuc3BsaXQoXCIsXCIpO1xuXHRcdFx0XHRcdHRoaXMuX3Byb3BOYW1lID0gdGhpcy5fb3ZlcndyaXRlUHJvcHNbMF07XG5cdFx0XHRcdFx0dGhpcy5fcHJpb3JpdHkgPSBwcmlvcml0eSB8fCAwO1xuXHRcdFx0XHRcdHRoaXMuX3N1cGVyID0gVHdlZW5QbHVnaW4ucHJvdG90eXBlO1xuXHRcdFx0XHR9LCB0cnVlKTtcblxuXHRcdHAgPSBUd2VlblBsdWdpbi5wcm90b3R5cGU7XG5cdFx0VHdlZW5QbHVnaW4udmVyc2lvbiA9IFwiMS4xOC4wXCI7XG5cdFx0VHdlZW5QbHVnaW4uQVBJID0gMjtcblx0XHRwLl9maXJzdFBUID0gbnVsbDtcblx0XHRwLl9hZGRUd2VlbiA9IF9hZGRQcm9wVHdlZW47XG5cdFx0cC5zZXRSYXRpbyA9IF9zZXRSYXRpbztcblxuXHRcdHAuX2tpbGwgPSBmdW5jdGlvbihsb29rdXApIHtcblx0XHRcdHZhciBhID0gdGhpcy5fb3ZlcndyaXRlUHJvcHMsXG5cdFx0XHRcdHB0ID0gdGhpcy5fZmlyc3RQVCxcblx0XHRcdFx0aTtcblx0XHRcdGlmIChsb29rdXBbdGhpcy5fcHJvcE5hbWVdICE9IG51bGwpIHtcblx0XHRcdFx0dGhpcy5fb3ZlcndyaXRlUHJvcHMgPSBbXTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGkgPSBhLmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0aWYgKGxvb2t1cFthW2ldXSAhPSBudWxsKSB7XG5cdFx0XHRcdFx0XHRhLnNwbGljZShpLCAxKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHdoaWxlIChwdCkge1xuXHRcdFx0XHRpZiAobG9va3VwW3B0Lm5dICE9IG51bGwpIHtcblx0XHRcdFx0XHRpZiAocHQuX25leHQpIHtcblx0XHRcdFx0XHRcdHB0Ll9uZXh0Ll9wcmV2ID0gcHQuX3ByZXY7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChwdC5fcHJldikge1xuXHRcdFx0XHRcdFx0cHQuX3ByZXYuX25leHQgPSBwdC5fbmV4dDtcblx0XHRcdFx0XHRcdHB0Ll9wcmV2ID0gbnVsbDtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHRoaXMuX2ZpcnN0UFQgPT09IHB0KSB7XG5cdFx0XHRcdFx0XHR0aGlzLl9maXJzdFBUID0gcHQuX25leHQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHB0ID0gcHQuX25leHQ7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHRcdHAuX3JvdW5kUHJvcHMgPSBmdW5jdGlvbihsb29rdXAsIHZhbHVlKSB7XG5cdFx0XHR2YXIgcHQgPSB0aGlzLl9maXJzdFBUO1xuXHRcdFx0d2hpbGUgKHB0KSB7XG5cdFx0XHRcdGlmIChsb29rdXBbdGhpcy5fcHJvcE5hbWVdIHx8IChwdC5uICE9IG51bGwgJiYgbG9va3VwWyBwdC5uLnNwbGl0KHRoaXMuX3Byb3BOYW1lICsgXCJfXCIpLmpvaW4oXCJcIikgXSkpIHsgLy9zb21lIHByb3BlcnRpZXMgdGhhdCBhcmUgdmVyeSBwbHVnaW4tc3BlY2lmaWMgYWRkIGEgcHJlZml4IG5hbWVkIGFmdGVyIHRoZSBfcHJvcE5hbWUgcGx1cyBhbiB1bmRlcnNjb3JlLCBzbyB3ZSBuZWVkIHRvIGlnbm9yZSB0aGF0IGV4dHJhIHN0dWZmIGhlcmUuXG5cdFx0XHRcdFx0cHQuciA9IHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHB0ID0gcHQuX25leHQ7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdFR3ZWVuTGl0ZS5fb25QbHVnaW5FdmVudCA9IGZ1bmN0aW9uKHR5cGUsIHR3ZWVuKSB7XG5cdFx0XHR2YXIgcHQgPSB0d2Vlbi5fZmlyc3RQVCxcblx0XHRcdFx0Y2hhbmdlZCwgcHQyLCBmaXJzdCwgbGFzdCwgbmV4dDtcblx0XHRcdGlmICh0eXBlID09PSBcIl9vbkluaXRBbGxQcm9wc1wiKSB7XG5cdFx0XHRcdC8vc29ydHMgdGhlIFByb3BUd2VlbiBsaW5rZWQgbGlzdCBpbiBvcmRlciBvZiBwcmlvcml0eSBiZWNhdXNlIHNvbWUgcGx1Z2lucyBuZWVkIHRvIHJlbmRlciBlYXJsaWVyL2xhdGVyIHRoYW4gb3RoZXJzLCBsaWtlIE1vdGlvbkJsdXJQbHVnaW4gYXBwbGllcyBpdHMgZWZmZWN0cyBhZnRlciBhbGwgeC95L2FscGhhIHR3ZWVucyBoYXZlIHJlbmRlcmVkIG9uIGVhY2ggZnJhbWUuXG5cdFx0XHRcdHdoaWxlIChwdCkge1xuXHRcdFx0XHRcdG5leHQgPSBwdC5fbmV4dDtcblx0XHRcdFx0XHRwdDIgPSBmaXJzdDtcblx0XHRcdFx0XHR3aGlsZSAocHQyICYmIHB0Mi5wciA+IHB0LnByKSB7XG5cdFx0XHRcdFx0XHRwdDIgPSBwdDIuX25leHQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICgocHQuX3ByZXYgPSBwdDIgPyBwdDIuX3ByZXYgOiBsYXN0KSkge1xuXHRcdFx0XHRcdFx0cHQuX3ByZXYuX25leHQgPSBwdDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Zmlyc3QgPSBwdDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKChwdC5fbmV4dCA9IHB0MikpIHtcblx0XHRcdFx0XHRcdHB0Mi5fcHJldiA9IHB0O1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRsYXN0ID0gcHQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHB0ID0gbmV4dDtcblx0XHRcdFx0fVxuXHRcdFx0XHRwdCA9IHR3ZWVuLl9maXJzdFBUID0gZmlyc3Q7XG5cdFx0XHR9XG5cdFx0XHR3aGlsZSAocHQpIHtcblx0XHRcdFx0aWYgKHB0LnBnKSBpZiAodHlwZW9mKHB0LnRbdHlwZV0pID09PSBcImZ1bmN0aW9uXCIpIGlmIChwdC50W3R5cGVdKCkpIHtcblx0XHRcdFx0XHRjaGFuZ2VkID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRwdCA9IHB0Ll9uZXh0O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGNoYW5nZWQ7XG5cdFx0fTtcblxuXHRcdFR3ZWVuUGx1Z2luLmFjdGl2YXRlID0gZnVuY3Rpb24ocGx1Z2lucykge1xuXHRcdFx0dmFyIGkgPSBwbHVnaW5zLmxlbmd0aDtcblx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRpZiAocGx1Z2luc1tpXS5BUEkgPT09IFR3ZWVuUGx1Z2luLkFQSSkge1xuXHRcdFx0XHRcdF9wbHVnaW5zWyhuZXcgcGx1Z2luc1tpXSgpKS5fcHJvcE5hbWVdID0gcGx1Z2luc1tpXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fTtcblxuXHRcdC8vcHJvdmlkZXMgYSBtb3JlIGNvbmNpc2Ugd2F5IHRvIGRlZmluZSBwbHVnaW5zIHRoYXQgaGF2ZSBubyBkZXBlbmRlbmNpZXMgYmVzaWRlcyBUd2VlblBsdWdpbiBhbmQgVHdlZW5MaXRlLCB3cmFwcGluZyBjb21tb24gYm9pbGVycGxhdGUgc3R1ZmYgaW50byBvbmUgZnVuY3Rpb24gKGFkZGVkIGluIDEuOS4wKS4gWW91IGRvbid0IE5FRUQgdG8gdXNlIHRoaXMgdG8gZGVmaW5lIGEgcGx1Z2luIC0gdGhlIG9sZCB3YXkgc3RpbGwgd29ya3MgYW5kIGNhbiBiZSB1c2VmdWwgaW4gY2VydGFpbiAocmFyZSkgc2l0dWF0aW9ucy5cblx0XHRfZ3NEZWZpbmUucGx1Z2luID0gZnVuY3Rpb24oY29uZmlnKSB7XG5cdFx0XHRpZiAoIWNvbmZpZyB8fCAhY29uZmlnLnByb3BOYW1lIHx8ICFjb25maWcuaW5pdCB8fCAhY29uZmlnLkFQSSkgeyB0aHJvdyBcImlsbGVnYWwgcGx1Z2luIGRlZmluaXRpb24uXCI7IH1cblx0XHRcdHZhciBwcm9wTmFtZSA9IGNvbmZpZy5wcm9wTmFtZSxcblx0XHRcdFx0cHJpb3JpdHkgPSBjb25maWcucHJpb3JpdHkgfHwgMCxcblx0XHRcdFx0b3ZlcndyaXRlUHJvcHMgPSBjb25maWcub3ZlcndyaXRlUHJvcHMsXG5cdFx0XHRcdG1hcCA9IHtpbml0OlwiX29uSW5pdFR3ZWVuXCIsIHNldDpcInNldFJhdGlvXCIsIGtpbGw6XCJfa2lsbFwiLCByb3VuZDpcIl9yb3VuZFByb3BzXCIsIGluaXRBbGw6XCJfb25Jbml0QWxsUHJvcHNcIn0sXG5cdFx0XHRcdFBsdWdpbiA9IF9jbGFzcyhcInBsdWdpbnMuXCIgKyBwcm9wTmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHByb3BOYW1lLnN1YnN0cigxKSArIFwiUGx1Z2luXCIsXG5cdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRUd2VlblBsdWdpbi5jYWxsKHRoaXMsIHByb3BOYW1lLCBwcmlvcml0eSk7XG5cdFx0XHRcdFx0XHR0aGlzLl9vdmVyd3JpdGVQcm9wcyA9IG92ZXJ3cml0ZVByb3BzIHx8IFtdO1xuXHRcdFx0XHRcdH0sIChjb25maWcuZ2xvYmFsID09PSB0cnVlKSksXG5cdFx0XHRcdHAgPSBQbHVnaW4ucHJvdG90eXBlID0gbmV3IFR3ZWVuUGx1Z2luKHByb3BOYW1lKSxcblx0XHRcdFx0cHJvcDtcblx0XHRcdHAuY29uc3RydWN0b3IgPSBQbHVnaW47XG5cdFx0XHRQbHVnaW4uQVBJID0gY29uZmlnLkFQSTtcblx0XHRcdGZvciAocHJvcCBpbiBtYXApIHtcblx0XHRcdFx0aWYgKHR5cGVvZihjb25maWdbcHJvcF0pID09PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdFx0XHRwW21hcFtwcm9wXV0gPSBjb25maWdbcHJvcF07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdFBsdWdpbi52ZXJzaW9uID0gY29uZmlnLnZlcnNpb247XG5cdFx0XHRUd2VlblBsdWdpbi5hY3RpdmF0ZShbUGx1Z2luXSk7XG5cdFx0XHRyZXR1cm4gUGx1Z2luO1xuXHRcdH07XG5cblxuXHRcdC8vbm93IHJ1biB0aHJvdWdoIGFsbCB0aGUgZGVwZW5kZW5jaWVzIGRpc2NvdmVyZWQgYW5kIGlmIGFueSBhcmUgbWlzc2luZywgbG9nIHRoYXQgdG8gdGhlIGNvbnNvbGUgYXMgYSB3YXJuaW5nLiBUaGlzIGlzIHdoeSBpdCdzIGJlc3QgdG8gaGF2ZSBUd2VlbkxpdGUgbG9hZCBsYXN0IC0gaXQgY2FuIGNoZWNrIGFsbCB0aGUgZGVwZW5kZW5jaWVzIGZvciB5b3UuXG5cdFx0YSA9IHdpbmRvdy5fZ3NRdWV1ZTtcblx0XHRpZiAoYSkge1xuXHRcdFx0Zm9yIChpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0YVtpXSgpO1xuXHRcdFx0fVxuXHRcdFx0Zm9yIChwIGluIF9kZWZMb29rdXApIHtcblx0XHRcdFx0aWYgKCFfZGVmTG9va3VwW3BdLmZ1bmMpIHtcblx0XHRcdFx0XHR3aW5kb3cuY29uc29sZS5sb2coXCJHU0FQIGVuY291bnRlcmVkIG1pc3NpbmcgZGVwZW5kZW5jeTogY29tLmdyZWVuc29jay5cIiArIHApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0X3RpY2tlckFjdGl2ZSA9IGZhbHNlOyAvL2Vuc3VyZXMgdGhhdCB0aGUgZmlyc3Qgb2ZmaWNpYWwgYW5pbWF0aW9uIGZvcmNlcyBhIHRpY2tlci50aWNrKCkgdG8gdXBkYXRlIHRoZSB0aW1lIHdoZW4gaXQgaXMgaW5zdGFudGlhdGVkXG5cbn0pKCh0eXBlb2YobW9kdWxlKSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBtb2R1bGUuZXhwb3J0cyAmJiB0eXBlb2YoZ2xvYmFsKSAhPT0gXCJ1bmRlZmluZWRcIikgPyBnbG9iYWwgOiB0aGlzIHx8IHdpbmRvdywgXCJUd2Vlbk1heFwiKTsiXX0=","export default class Cube {\n  constructor(){\n    this.cubes = []\n    this.tex\n    this.Height = window.innerHeight\n    this.Width = window.innerWidth\n    this.windowHalfX =  this.Width / 2\n    this.windowHalfY = this.Height / 2\n  }\n\n  init(texture){\n    this._initCube(texture)\n  }\n\n  _initCube(texture, camera, project=false){\n    let scale = 200\n\n    // const scale = 0.00001\n    const geometry = new THREE.BoxGeometry(scale, scale, 1)\n    geometry.computeBoundingBox()\n    const material = new THREE.MeshPhongMaterial({\n      color: '#ffffff',\n      shading: THREE.FlatShading,\n      map: THREE.ImageUtils.loadTexture(texture)\n    })\n\n    this.mesh = new THREE.Mesh(geometry, material)\n    if(!project){\n      scale = 0.0001\n      this.mesh.scale.set(scale, scale, scale)\n      // this.mesh.position.set(0,0,2200)\n      this.mesh.position.copy( camera.position )\n      this.mesh.rotation.copy( camera.rotation )\n      this.mesh.translateZ(-1000)\n      // this.mesh.translateX(this.windowHalfX / 3 )\n\n      TweenMax.to(this.mesh.scale,  .4, {\n        x: 1.5,\n        y: 1.5,\n        z: 1.5,\n        ease: Power2.In,\n        delay: 0.1\n      })\n      TweenMax.to(this.mesh.rotation, 5, {\n        // x: Math.PI * 2,\n        y: \"+=\" + Math.PI * 2,\n        // z: - Math.PI *2,\n        ease: Power0.easeNone,\n        repeat: -1\n      })\n    }else{\n      const scale = 1.5\n      this.mesh.position.set(0,0,2000)\n      this.mesh.scale.set(scale, scale, scale)\n    }\n    return this.mesh\n  }\n\n  _removeCube(){\n    TweenMax.to(this.mesh.position, .5, {\n      z: 3500,\n      ease: Cubic.In\n    })\n    let thisMesh = this.mesh\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n          resolve(thisMesh);\n          this.cubes.shift()\n      }, 500);\n    })\n  }\n\n\n  _getObjects(){\n    return this.mesh\n  }\n}\n","export default class LoadingPanel{\n  constructor(){\n    this.image = '/images/loading.jpg'\n    this.scale = 4\n  }\n\n  init(){\n    this._initLoading()\n  }\n\n  _initLoading(){\n    this.loadingManager = new THREE.LoadingManager()\n    this.textureLoader = new THREE.ImageLoader(this.loadingManager)\n    this.texture = new THREE.Texture()\n    this.geometry = new THREE.BoxGeometry(100, 100, 0.1)\n    this.material = new THREE.MeshPhongMaterial({\n      color: '#ffffff',\n      shading: THREE.FlatShading,\n      side: THREE.DoubleSide,\n      map: THREE.ImageUtils.loadTexture(this.image)\n    })\n    this.mesh = new THREE.Mesh(this.geometry, this.material)\n    this.mesh.scale.set(this.scale, this.scale)\n    this.mesh.position.z = 2200\n\n    this.textureLoader.load([this.image], () => {\n        this.texture.image = this.image\n    })\n  }\n\n  _getObjects(){\n    return new Promise((resolve, reject) => {\n      this.loadingManager.onLoad = () => {\n        resolve(this.mesh)\n      }\n    })\n  }\n}\n","import {GetColor} from './Util'\n\nimport {pjaxTime, bPjax, bLoading, bParticles, bThumbnail, thumbnail} from './Space'\n\nexport class Meteor {\n  constructor(color, shape, texture){\n    !color ? color = '#ffffff' : color\n    if(texture){\n      texture = texture.replace(/images\\//g, 'images/128/')\n      this.col = '#ffffff'\n      this.tex =  THREE.ImageUtils.loadTexture(texture)\n    }else{\n      this.col = color\n      this.tex =  ''\n    }\n    if(shape > 0.5){\n      this.geometry = new THREE.OctahedronGeometry(10, 0)\n      this.material = new THREE.MeshPhongMaterial({\n        color: this.col,\n        shading: THREE.FlatShading,\n        map: this.tex\n      })\n    }else{\n      this.geometry = new THREE.IcosahedronGeometry(10, 0)\n      this.material = new THREE.MeshPhongMaterial({\n        color: this.col,\n        shading: THREE.FlatShading,\n        map: this.tex\n      })\n    }\n    this.mesh = new THREE.Mesh(this.geometry, this.material)\n  }\n}\n\n\nexport class Meteors{\n  constructor() {\n    this.colors = ['ffffff', 'ffffff', 'eeeeee', 'eeeeee', 'eeeeee', 'EA6A63', '61D0EA', 'EAA760'],\n    this.flyingParticles = []\n    this.counter = 0\n    this.Height = window.innerHeight\n    this.Width = window.innerWidth\n  }\n\n  init(){\n\n  }\n\n  _animate(){\n\n    if(this.cube){\n      if(this.cube.position.z >= 3000){\n        for (var i = 0; i < this.cubes.length; i++) {\n          this.scene.remove(this.cubes[i])\n          this.cubes[i].geometry.dispose()\n          this.cubes[i].material.dispose()\n          this.cubes[i].texture.dispose()\n        }\n        this.cubes = []\n      }\n      for (var i = 0; i < this.cube.geometry.vertices.length; i++) {\n        this.cube.geometry.vertices[i].x += Math.sin(time)*0.25*Math.random();\n        this.cube.geometry.vertices[i].y += Math.cos(time)*0.25*Math.random();\n        this.cube.geometry.vertices[i].z += Math.cos(time)*0.25*Math.random();\n      }\n    }\n  }\n\n  _createParticle(p){\n    p.mesh.material.needsUpdate =  true\n\n    if(bThumbnail == false){\n      p.mesh.position.x = (-this.Width + Math.random()*this.Width*2) / 3\n      p.mesh.position.y = (-this.Height + Math.random()*this.Height*2) / 3\n    }else {\n      p.mesh.position.x = (-this.Width + Math.random()*this.Width*2) / 3\n      p.mesh.position.y = (-this.Height + Math.random()*this.Height*2) / 3\n      // p.mesh.position.x = (-this.Width + Math.random()*this.Width * 2)\n      // p.mesh.position.y = (-this.Height + Math.random()*this.Height * 2)\n    }\n    const scale = 0.1\n    p.mesh.scale.set(scale, scale, scale)\n\n    this.flyingParticles.push(p)\n    bParticles == true ? this._flyParticle(p) : this._flyParticle(p, 'fast')\n    return p.mesh\n\n  }\n\n  _flyParticle(p, mode){\n    let thisMesh = p.mesh\n    let scale = thisMesh.scale.x * Math.random() * 7\n    let duration = 4\n    let scaleDuration = 1\n    let rotate = Math.random() > 0.5 ? scale : - scale\n\n    if(mode == 'fast'){\n       scaleDuration = 0.4\n       duration = 1\n    }\n\n    TweenMax.to(p.mesh.scale, scaleDuration, {\n      x: scale,\n      y: scale,\n      z: scale,\n      ease : Quart.In\n    });\n    TweenMax.to(p.mesh.rotation, duration, {\n      x: Math.PI * 2 * rotate,\n      y: Math.PI * 2 * rotate,\n      z: Math.PI * 2 * rotate,\n      ease : Power0.easeNone\n    });\n    TweenMax.to(p.mesh.position, duration, {\n      x: p.mesh.position.x ,\n      y: p.mesh.position.y ,\n      z: 3000,\n      ease: Strong.QuartIn\n    });\n\n  }\n\n  _createParticles(){\n    let p = this._getParticle();\n    this._flyParticle(p);\n  }\n\n  _updateParticlesLoad(){\n    let shape = Math.random()\n    let color = GetColor(this.colors, '#')\n    let texture = thumbnail\n      return this._createParticle(new Meteor(color, shape, texture) )\n  }\n\n}\n","import {GetColor} from './Util'\n\nexport default class Planet {\n  constructor(type, radius, detail) {\n    this.type = type\n    this.radius = radius\n    this.detail = detail\n  }\n\n  init(){\n    this._initPlanet()\n  }\n\n  _initPlanet(){\n    // IcosahedronGeometry　\n    switch (this.type) {\n      case 'EarthLand':\n        this.colors = ['329A47']\n        this.geometry = new THREE.IcosahedronGeometry(199, 2)\n        this.shininess = 30\n        this.position = { x:500, y:300}\n        this.rotation = {duration: 10, x: 1, y: 1}\n        this.noise = 20\n        break;\n      case 'EarthSea':\n        this.colors = ['4891DE']\n        this.geometry = new THREE.IcosahedronGeometry(200, 2)\n        this.shininess = 70\n        this.position = { x:500, y:300}\n        this.rotation = {duration: 10, x: 1, y: 1}\n        this.noise = 20\n        break;\n      case'EarthCloud':\n        this.colors = ['ffffff']\n        this.geometry = new THREE.IcosahedronGeometry(195, 2)\n        // this.opacity = 1\n        this.shininess = 30\n        this.position = {x:500, y:300}\n        this.rotation = {duration: 10, x: 1, y: 1}\n        this.noise = 20\n        break;\n      case 'Fire':\n        this.colors = ['f7461f', 'e95b2f', 'cd3006']\n        this.geometry = new THREE.OctahedronGeometry(200, 5)\n        this.shininess = 30\n        this.position = {x:-500, y:-500}\n        this.rotation = {duration: 9, x: -1, y: 1}\n        this.noise = 30\n        break;\n      case 'Ice':\n        this.colors = ['cdd8e7', 'f2ede6', 'edfbfc']\n        this.geometry = new THREE.OctahedronGeometry(220, 6)\n        this.shininess = 300\n        this.position = {x:1000, y:1000}\n        this.rotation = {duration: 8, x: 1, y: -1}\n        this.noise = 30\n        break;\n      case 'Sea':\n        this.colors = ['27CDF6', '48DDDE', '79D2EA']\n        this.geometry = new THREE.IcosahedronGeometry(300, 3)\n        this.shininess = 200\n        this.position = {x: -499, y: 200}\n        this.rotation = {duration: 12, x: 1, y: 1}\n        this.noise = 20\n        break;\n      default:\n        this.colors = ['cdd8e7', 'f2ede6', 'edfbfc']\n        this.geometry = new THREE.OctahedronGeometry(200, 4)\n        this.shininess = 30\n        this.position = {x:1000, y:1000}\n        this.rotation = {duration: 50, x: 1, y: 1}\n        this.noise = 30\n        break;\n    }\n\n    this.material = new THREE.MeshPhongMaterial({\n      color: 0xffffff,\n      vertexColors: THREE.FaceColors,\n      shading: THREE.FlatShading,\n      shininess:this.shininess,\n      // opacity: this.opacity,\n      transparent: true\n    })\n\n    this.mesh = new THREE.Mesh(this.geometry, this.material)\n    this.mesh.position.set(0, 0, -1000)\n\n    this.mesh.castShadow = true\n\n    for(var i = 0; i < this.mesh.geometry.faces.length; i++){\n      let col = GetColor(this.colors, '0x')\n      this.mesh.geometry.faces[i].color.setHex(col)\n    }\n\n    for(var i = 0; i < this.mesh.geometry.vertices.length; i++){\n      this.mesh.geometry.vertices[i].x += this.noise*Math.random()\n      this.mesh.geometry.vertices[i].y += this.noise*Math.random()\n      this.mesh.geometry.vertices[i].z += this.noise*Math.random()\n    }\n\n    TweenMax.to(this.mesh.rotation, this.rotation.duration, {\n      x: Math.PI*2 * this.rotation.x,\n      y: Math.PI*2 * this.rotation.y,\n      // z: Math.PI,\n      ease: Power0.easeNone,\n      repeat: -1\n    })\n  }\n\n  _getObjects(){\n    return this.mesh\n  }\n}\n","export default class Raycaster{\n  constructor(ray, target){\n      this.ray = ray\n      this.target = target\n  }\n\n  init(){\n    this._initRay()\n  }\n\n  _initRay(){\n\n  }\n\n}\n","import Detector from '../three/Detector'\nimport Stats from '../three/Stats'\nimport {HasClass} from './Util'\n\nexport default class Scene {\n\n  constructor() {\n    this.debugging = false\n    this.container = document.getElementById('world')\n    this.mouseX = null\n    this.mouseY = null\n    this.projects = document.getElementsByClassName('project')\n    this.tex = null\n    this.Height = window.innerHeight\n    this.Width = window.innerWidth\n    this.windowHalfX =  this.Width / 2\n    this.windowHalfY = this.Height / 2\n    this.cubes = []\n    this.counter = 0\n    this.frequency = 3\n\n    this._bindEvents()\n  }\n\n  init() {\n    this._initScene()\n    this._initClock()\n    this._initRenderer()\n    this._initCamera()\n    this._initGeometry()\n    this._initLights()\n    this._initTween()\n    this._addDomElement()\n\n    if (this.debugging) {\n      this._debugStats()\n    }\n\n    this._update()\n  }\n\n  _initScene() {\n    this.scene = new THREE.Scene()\n    this.scene.fog = new THREE.FogExp2(0x050505, 0.0003) //3\n    // this.scene.fog = new THREE.FogExp2(0x111111, 0.0006)\n  }\n\n  _initClock() {\n    this.clock = new THREE.Clock()\n  }\n\n  _initRenderer() {\n    if (Detector.webgl) {\n      this.renderer = new THREE.WebGLRenderer({\n        antialias: false,\n        alpha: true\n      })\n      // this.renderer.setPixelRatio(window.devicePixelRatio)\n      this.renderer.setSize(this.Width, this.Height)\n    } else if (Detector.canvas) {\n      this.renderer = new THREE.CanvasRenderer({\n        antialias: false,\n        alpha: true\n      })\n      // this.renderer.setPixelRatio(window.devicePixelRatio)\n      this.renderer.setSize(window.innerWidth, window.innerHeight)\n    } else {\n      Detector.addGetWebGLMessage()\n    }\n  }\n\n  _initCamera() {\n    const far = 3000\n    this.camera = new THREE.PerspectiveCamera(45, this.Width / this.Height, 1, far)\n    this.camera.position.x = this.camera.position. y = 0\n    this.camera.position.z = far\n\n    this.camera.lookAt({x: 0, y: 0, z: 0})\n    this.scene.add(this.camera)\n  }\n\n  _initGeometry() {\n    if (this.debugging) this._axis()\n  }\n\n  _axis() {\n    this.axes = new THREE.AxisHelper(10000)\n    this.scene.add(this.axes)\n  }\n\n  _initLights() {\n    this.shadowLight = new THREE.DirectionalLight(0xffffff, 1.15)\n    this.shadowLight.position.set(20, 0, 10)\n    this.shadowLight.castShadow = true\n    this.shadowLight.shadowDarkness = 0.01\n    this.scene.add(this.shadowLight)\n\n    this.light = new THREE.DirectionalLight(0xffffff, .5)\n    this.light.position.set(-20, 0, 20)\n    // this.shadowLight.castShadow = true\n    this.scene.add(this.light)\n\n    this.backLight = new THREE.DirectionalLight(0xffffff, .1)\n    this.backLight.position.set(0, 0, -20)\n    // this.shadowLight.castShadow = true\n    this.scene.add(this.backLight)\n  }\n\n  _debugStats() {\n    this.stats = new Stats()\n    this.stats.setMode(0)\n    this.stats.domElement.style.position = 'absolute'\n    this.stats.domElement.style.left = '0px'\n    this.stats.domElement.style.bottom = '0px'\n    document.body.appendChild(this.stats.domElement)\n  }\n\n  _initTween(){\n  }\n\n  _update() {\n    window.requestAnimationFrame(() => {\n      this._update()\n    })\n    this._animate()\n    this._render()\n  }\n\n  _animate() {\n    var time = this.clock.getElapsedTime()\n    // const max = 200\n    // if(this.mouseX >= 0 && this.camera.position.x < max){\n    //   this.camera.position.x += (this.mouseX - this.camera.position.x) * .0015\n    // }else if(this.mouseX < 0 && this.camera.position.x > -max){\n    //   this.camera.position.x += (this.mouseX - this.camera.position.x) * .0015\n    // }\n    // if(this.mouseY >= 0 && this.camera.position.y < max){\n    //   this.camera.position.y += (this.mouseX - this.camera.position.y) * .0015\n    // }else if(this.mouseX < 0 && this.camera.position.x > -max){\n    //   this.camera.position.x += (this.mouseX - this.camera.position.x) * .0015\n    // }\n    if(!document.querySelectorAll('#works.single').length > 0){\n      this.camera.position.x += (this.mouseX - this.camera.position.x) * .002\n      this.camera.position.y += (-this.mouseY - this.camera.position.y) * .002\n    }else{\n      // this.camera.position.x = 0\n      // this.camera.position.y = 0\n    }\n    this.camera.lookAt(this.scene.position)\n    // console.log(this.camera.position);\n  }\n\n  _render() {\n    if (this.debugging) this.stats.begin()\n    this.renderer.render(this.scene, this.camera)\n    if (this.debugging) this.stats.end()\n  }\n\n  _addDomElement() {\n    this.container.appendChild(this.renderer.domElement)\n  }\n\n  _bindEvents() {\n    if (this._isTouchDevice) {\n      this.container.addEventListener('touchmove', (e) => { this._onTouchMove(e) })\n    } else {\n      window.addEventListener('mousemove', (e) => { this._onMouseMove(e) })\n    }\n  }\n\n  get _isTouchDevice() {\n    return (('ontouchstart' in window) || (navigator.MaxTouchPoints > 0) || (navigator.msMaxTouchPoints > 0))\n  }\n\n  _onMouseMove(e) {\n    e.preventDefault()\n    this.mouseX = e.clientX - window.innerWidth / 2\n    this.mouseY = e.clientY - window.innerHeight / 2\n  }\n\n  _onTouchMove(e) {\n    if (e.touches.length === 1) {\n      e.preventDefault\n      this.mouseX = e.touches[0].pageX - window.innerWidth / 2\n      this.mouseY = e.touches[0].pageY - window.innerHeight / 2\n    }\n  }\n\n}\n","import Scene from './Scene'\nimport TweenMax from '../libs/greensock/src/uncompressed/TweenMax'\n\nimport Planet from './Planet'\nimport LoadingPanel from './LoadingPanel'\nimport SpaceShuttle from './SpaceShuttle'\nimport {Meteor, Meteors} from './Meteor'\nimport Cube from './Cube'\nimport Raycaster from './Raycaster'\n\nimport Style from './Style'\n\nimport {GetColor, MouseOn, HasClass, AddClass, RemoveClass} from './Util'\n\nexport var pjaxTime = 1000\nexport var bPjax = false\nexport var bLoading = true\nexport var bParticles = false\nexport var bThumbnail = false\nexport var thumbnail = null\nexport var bBox = true\n\n\nexport class Pjax {\n  constructor() {\n  }\n\n  _counter(){\n    pjaxTime++\n    if(pjaxTime > 150 && !bPjax){\n      bPjax = true\n    }\n    requestAnimationFrame(this._counter.bind(this))\n  }\n\n  _start(el, scene, camera, flyingParticles, cubes){\n    // console.log('start');\n    let target = el.target.href\n    let lcoation = window.location.href.indexOf('works')\n    bBox = false\n\n    AddClass(document.body, 'stopScrolling')\n    document.body.addEventListener(\"touchmove\", (el) => {\n     if(HasClass(document.body,'stopScrolling')){\n          el.preventDefault();\n     }\n     }, false);\n    // document.body.addEventListener('touchmove', (el) => {el.preventDefault() })\n\n    if(!HasClass(el.target, 'project')){\n      thumbnail = null\n\n      const thisScene = scene\n      if(cubes.length > 0){\n        for (var i = 0; i < cubes.length; i++) {\n          let cube = cubes[i]\n          TweenMax.to(cube.rotation, 1, {\n            // x: 0.1,\n            y: Math.PI,\n            // z: 0.1,\n            ease: Strong.CubicIn,\n            onComplete () {\n              thisScene.remove(cube)\n            }\n          })\n          TweenMax.to(cube.scale, 1, {\n            x: 0.001,\n            y: 0.001,\n            // z: 0.1,\n            ease: Strong.CubicIn,\n            onComplete () {\n              thisScene.remove(cube)\n            }\n          })\n        }\n        cubes = []\n      }\n    }\n\n    if(cubes.length > 0 && !target.indexOf('works') > -1 ){\n      for (var i = 0; i < cubes.length; i++) {\n        let cube = cubes[i]\n        // let positionX = camera.position.x\n        // let positionY = camera.position.y\n        cube.rotation.set(0, 0, 0)\n        cube.material.transparent = true\n        TweenMax.to(cube.rotation, 1.5, {\n          x: 0,\n          y: - Math.PI ,\n          z: 0,\n          ease: Cubic.In,\n        })\n        TweenMax.to(cube.position, 1.5, {\n          x: 0,\n          y: 0,\n          z: 2000,\n          ease: Cubic.In\n        })\n        TweenMax.to(camera.position, 1.5, {\n          x: 0,\n          y: 0,\n          ease: Cubic.In,\n          onComplete () {\n            bBox = true\n          }\n        })\n      }\n\n    }else if(target.indexOf('works')){\n      bBox = true\n\n      for (var i = 0; i < cubes.length; i++) {\n        let cube = cubes[i]\n        cube._removeCube().then(response => {\n          this.scene.remove(response)\n        }, error => {\n        })\n      }\n\n    }else{\n      bBox = true\n    }\n\n    bLoading = true\n    bParticles = false\n\n    document.getElementById('wrap').style.visibility ='hidden'\n    for (var i=0; i<flyingParticles.length; i++){\n      var p = flyingParticles[i];\n      var s = p.mesh.scale.x;\n\n      TweenMax.to(p.mesh.position, 1, {\n        x: p.mesh.position.x * 2,\n        y: p.mesh.position.y * 2,\n        z: 3000,\n      \tease: Cubic.In\n      });\n    }\n  }\n\n  _complete(){\n    // console.log('pjaxComplete', window.location);\n    bPjax = false\n    pjaxTime = 0\n    this._preLoadImages();\n  }\n\n  _popstate(){\n  }\n\n  _onLoad(){\n    const regex = new RegExp('http[s]?:[/]+.*[/]*([^/]*)\\/works\\/[a-zA-Z0-9]+\\/.*', 'g')\n    const regex2 = new RegExp('^http[s]?:[/]+.*[/]*([^/]*)\\/works\\/secret[/]$', 'g')\n    let target = window.location.href\n    if (target.match(regex) && !target.match(regex2) ){\n      let project = target.match(\".+/(.+?)([\\?#;].*)?$\")[1].replace('/', '')\n      let thumbnail = '/images/' + project + '.jpg'\n      return thumbnail\n     }\n  }\n\n  _preLoadImages(){\n    let projects = document.getElementsByClassName(\"project\")\n    if(projects.length > 0){\n      let textureManager = new THREE.LoadingManager()\n      textureManager.onLoad = () => {\n          bLoading = false\n          // console.log('Finish preload images ------------------');\n      }\n      textureManager.onError = () => {\n          bLoading = false\n          // console.log('Finish preload images ------------------');\n      }\n\n      let textureLoader = new THREE.ImageLoader(textureManager)\n      let textures = []\n      let texture = new THREE.Texture()\n      textures.push(texture)\n\n      for (var i = 0; i < projects.length; i++) {\n        let image = projects[i].dataset.tex\n        textureLoader.load([image],function(image){\n          texture.image = image\n          // console.log('done', image)\n        })\n      }\n    }else{\n        bLoading = false\n        // console.log('No preload images  ------------------');\n    }\n  }\n}\n\n\nexport default class Space extends Scene{\n  constructor() {\n    super()\n    this.pjax = new Pjax()\n    this.earth = new THREE.Object3D()\n    this.earthLand = new Planet('EarthLand')\n    this.earthSea = new Planet('EarthSea')\n    this.earthCloud = new Planet('EarthCloud')\n    this.fire = new Planet('Fire')\n    this.sea = new Planet('Sea')\n    this.ice = new Planet('Ice')\n    // this.shuttle = new SpaceShuttle()\n    // this.loading = new LoadingPanel()\n    this.meteor = new Meteor()\n    this.meteors = new Meteors()\n    this.cube = new Cube()\n    // this.raycaster = new Raycaster()\n\n    this.style = new Style()\n\n    this.pjax._counter()\n    // this.shuttle.init()\n    this.earthLand.init()\n    this.earthSea.init()\n    this.earthCloud.init()\n    this.fire.init()\n    this.sea.init()\n    this.ice.init()\n    // this.loading.init()\n    this.pjax._preLoadImages()\n\n    document.body.style.visibility = 'visible';\n  }\n\n  _start(el){\n    this.pjax._start(el, this.scene, this.camera,this.meteors.flyingParticles, this.cube.cubes)\n\n    let rand = Math.random()*100\n\n    const planets = [this.earth, this.ice.mesh, this.fire.mesh, this.sea.mesh]\n    let planet = planets[Math.floor(Math.random() * planets.length)];\n\n    let positionX = (Math.random() > 0.5) ? Math.random() * (this.Width - this.windowHalfX) + this.windowHalfX : -1 * (Math.random() * (this.Width - this.windowHalfX) + this.windowHalfX)\n    let positionY = (Math.random() > 0.5) ? Math.random() * (this.Height - this.windowHalfY) + this.windowHalfY : -1 * (Math.random() * (this.Height - this.windowHalfY) + this.windowHalfY)\n\n    if(~~rand % 1 == 0){\n      planet.position.set(positionX *.7 , positionY*.7, -1000)\n      TweenMax.to(planet.position, 3,{\n        z: 4000,\n        delay: Math.random() + 0.3,\n        ease: Strong.Cubic\n      })\n    }\n  }\n\n  _complete(){\n    this.pjax._complete()\n    this.earth.position.z = this.ice.mesh.position.z = this.fire.mesh.position.z = this.sea.mesh.position.z = -1000\n  }\n\n  _preLoadImages(){\n    this.pjax._preLoadImages()\n  }\n\n  _popstate(){\n    this.pjax._popstate()\n    const thisScene = this.scene\n    const regex = new RegExp('http[s]?:[/]+.*[/]*([^/]*)/works/[a-zA-Z0-9]+\\/.*', 'g')\n    const regex2 = new RegExp('^http[s]?:[/]+.*[/]*([^/]*)\\/works\\/secret[/]$', 'g')\n    let target = window.location.href\n    if (!target.match(regex) || target.match(regex2)){\n      console.log('1');\n      for (var i = 0; i < this.cube.cubes.length; i++) {\n        let cube = this.cube.cubes[i]\n        TweenMax.to(cube.rotation, 1, {\n          // x: 0.1,\n          y: Math.PI,\n          // z: 0.1,\n          ease: Strong.CubicIn,\n          onComplete () {\n            thisScene.remove(cube)\n          }\n        })\n        TweenMax.to(cube.scale, 1, {\n          x: 0.001,\n          y: 0.001,\n          // z: 0.1,\n          ease: Strong.CubicIn,\n          onComplete () {\n            thisScene.remove(cube)\n          }\n        })\n      }\n      this.cube.cubes = []\n      bBox = true\n      thumbnail = null\n      bThumbnail = false\n    }else if(target.match(regex)){\n      console.log('2');\n      if(this.pjax._onLoad()){\n        this.scene.add(this.cube._initCube(this.pjax._onLoad(), this.camera, true))\n        this.cube.cubes.push(this.cube._getObjects())\n      }\n    }else{\n      console.log('3');\n      bBox = true\n      thumbnail = null\n      bThumbnail = false\n    }\n  }\n\n  _onLoad(){\n    if(this.pjax._onLoad()){\n      thumbnail = this.pjax._onLoad()\n      this.scene.add(this.cube._initCube(this.pjax._onLoad(), this.camera, true))\n      this.cube.cubes.push(this.cube._getObjects())\n    }\n    // this.style.init()\n  }\n\n  _initScene() {\n    super._initScene()\n  }\n\n  _initCamera() {\n    super._initCamera()\n  }\n\n  _initLights() {\n    super._initLights()\n  }\n\n  _initGeometry() {\n    super._initGeometry()\n    this._onLoad()\n\n    this.earth.add(this.earthLand._getObjects())\n    this.earth.add(this.earthSea._getObjects())\n    this.earth.add(this.earthCloud._getObjects())\n    this.scene.add(this.earth)\n\n    this.scene.add(this.fire._getObjects())\n    this.scene.add(this.ice._getObjects())\n    this.scene.add(this.sea._getObjects())\n    // this.loading._getObjects().then(response => {\n    //   // this.scene.add(sresponse)\n    // }, error => {\n    // })\n    // this.shuttle._getObjects().then(response => {\n    //   // this.scene.add(response)\n    // }, error => {\n    // })\n  }\n\n  _initTween(){\n    super._initTween()\n  }\n\n  _initThumbnail(id){\n    if(this.cube && Modernizr.touch){\n      this.scene.remove(this.cube)\n    }\n    bThumbnail = true\n    thumbnail = id.target.dataset.tex\n    this.scene.add(this.cube._initCube(thumbnail, this.camera))\n    this.cube.cubes.push(this.cube._getObjects())\n\n    for (var i = 0; i < this.meteors.flyingParticles.length; i++) {\n      const meteor = this.meteors.flyingParticles[i].mesh\n      const scale = meteor.scale.x\n      const duration = 2\n      TweenMax.to(meteor.position, .6, {\n        x: meteor.position.x * 3,\n        y: meteor.position.y * 3,\n        z: 3000,\n      \tease: Cubic.In\n      })\n    }\n  }\n\n  _removeThumbnail(){\n    if(bBox){\n      thumbnail = null\n      this.cube._removeCube().then(response => {\n        this.scene.remove(response)\n      }, error => {\n      })\n    }\n  }\n\n  _animate(){\n    if(!bLoading && bPjax){\n      bParticles = true\n      document.getElementById('wrap').style.visibility = 'visible';\n      HasClass(document.body, 'stopScrolling') ?  RemoveClass(document.body, 'stopScrolling') : null\n    }\n    super._animate()\n    this.meteors._animate()\n    for(var i = 0; i < this.meteors.flyingParticles.length; i++){\n      var meteor = this.meteors.flyingParticles[i].mesh\n      if(meteor.position.z >= 3000){\n        this.scene.remove(meteor)\n        meteor.material.dispose()\n        this.meteors.flyingParticles.splice(i, 1)\n      }\n    }\n    if(this.counter % this.frequency == 0){\n      this.scene.add(this.meteors._updateParticlesLoad());\n    }\n\n    this.counter < 1000 ? this.counter++ : this.counter = 0\n    // console.log(this.counter)\n    // console.log(pjaxTime);\n  }\n\n  _render() {\n    super._render()\n  }\n\n}\n","export default class SpaceShuttle{\n  constructor(){\n    this.json = '/images/SpaceShuttle.json'\n  }\n\n  init(){\n    this._initShuttle()\n  }\n\n  _initShuttle(){\n    this.loadingManager = new THREE.LoadingManager()\n    this.loader = new THREE.JSONLoader(this.loadingManager)\n    this.loader.load(\n      this.json, (geometry, materials) =>{\n        this.material = new THREE.MeshFaceMaterial(materials)\n        this.geometry = geometry\n        for (var i = 0; i < materials.length; i++) {\n          materials[i].shading = THREE.FlatShading\n        }\n        this.mesh = new THREE.Mesh(this.geometry, this.material)\n        this.mesh.scale.set(100,100,100)\n        this.mesh.position.x = this.mesh.position.y = 0\n        this.mesh.position.z = 2000\n        this.mesh.rotation.x = 90 * Math.PI / 180\n        this.mesh.rotation.y = 180  * Math.PI / 180\n        this.mesh.rotation.z = 0\n      })\n  }\n\n  _getObjects(){\n    // this.loadingManager.onProgress = (item, loaded, total) => {\n    //   console.log(item, loaded, total)\n    // }\n    return new Promise((resolve, reject) => {\n      this.loadingManager.onLoad = () => {\n        resolve(this.mesh)\n      }\n    })\n  }\n}\n","export default class Style {\n  constructor() {\n    this.Height = window.innerHeight\n    this.Width = window.innerWidth\n  }\n\n  init(){\n    if(document.querySelector('#header')){\n      this._general('#header')\n    }else if(document.querySelector('#about') || document.querySelector('#works.list')){\n      this._general('section')\n    }else if(document.querySelector('#works.single')){\n      this._worksSingle()\n    }\n  }\n\n  _general(_target = 'section'){\n    const target = document.querySelector(_target)\n    let targetHeight = target.clientHeight\n    if(this.Height > targetHeight + 150){\n      target.style.top = ( this.Height - targetHeight ) / 2 + 'px'\n      target.style.paddingBottom = 0\n    }else{\n      target.style.top = '150px'\n      target.style.paddingBottom = '150px'\n    }\n  }\n\n  _worksSingle(){\n    const header = document.querySelector('header')\n    const headerH1 = document.querySelector('header h1')\n    const headerA = document.querySelectorAll('header a')\n    const section = document.querySelector('section')\n    let sectionHeight = section.clientHeight\n\n    header.style.height = this.Height * .95 + 'px'\n    headerH1.style.top = (this.Height - headerH1.clientHeight) / 2 + 'px'\n    if(headerA){\n      for (var i = 0; i < headerA.length; i++) {\n        headerA[i].style.top = (this.Height - headerH1.clientHeight) / 2 + 'px'\n      }\n    }\n  }\n\n  _onResize(){\n    this.Height = window.innerHeight\n    this.Width = window.innerWidth\n    this.init()\n  }\n\n}\n","export const MouseOn = function(){\n  if(Modernizr.touch){\n    return 'click'\n  }else{\n    return 'mouseenter'\n  }\n}\n\nexport const MouseOff = function(){\n  if(Modernizr.touch){\n    return 'touchend'\n  }else{\n    return 'mouseleave'\n  }\n}\n\nexport const AddClass = function(el, _class){\n  return  el.className += ' ' + _class\n}\n\nexport const RemoveClass = function(el, _class){\n  let elClass = ' '+　el.className　+' '\n  while(elClass.indexOf(' '+_class+' ') != -1){\n    elClass = elClass.replace(' '+_class+' ', '')\n  }\n  el.className = elClass\n}\n\nexport const HasClass = function(el, _class){\n  return (' ' + el.className + ' ').indexOf(' '+_class+' ') > -1\n }\n\n\n  ///////////////////////////////////////////////////////////////////\n  ///////////////////////////////////////////////////////////////////\n\nexport const GetColor = function(colors, prefix=''){\n  return prefix + colors[Math.floor(Math.random() * colors.length)];\n}\n\nexport const RgbToHex = function(r, g, b, prefix=''){\n    return prefix + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n  }\n\nexport const HexToTgb = function(hex){\n  let result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n  return result ? {\n    r: parseInt(result[1], 16),\n    g: parseInt(result[2], 16),\n    b: parseInt(result[3], 16)\n  } : null\n}\n\n  ///////////////////////////////////////////////////////////////////\n  ///////////////////////////////////////////////////////////////////\n\nexport const Easing = function(mode, t){\n  switch(mode){\n    case 'linear':\n      return t\n    break\n    // accelerating from zero velocity\n    case 'easeInQuad':\n      return t*t\n    break\n    // decelerating to zero velocity\n    case 'easeOutQuad':\n      return t*(2-t)\n    break\n    // acceleration until halfway, then deceleration\n    case 'easeInOutQuad':\n      return t<.5 ? 2*t*t : -1+(4-2*t)*t\n    break\n    // accelerating from zero velocity\n    case 'easeInCubic':\n      return t*t*t\n    break\n    // decelerating to zero velocity\n    case 'easeOutCubic':\n      return (--t)*t*t+1\n    break\n    // acceleration until halfway, then deceleration\n    case 'easeInOutCubic':\n      return t<.5 ? 4*t*t*t : (t-1)*(2*t-2)*(2*t-2)+1\n    break\n    // accelerating from zero velocity\n    case 'easeInQuart':\n      return t*t*t*t\n    break\n    // decelerating to zero velocity\n    case 'easeOutQuart':\n      return 1-(--t)*t*t*t\n    break\n    // acceleration until halfway, then deceleration\n    case 'easeInOutQuart':\n      return t<.5 ? 8*t*t*t*t : 1-8*(--t)*t*t*t\n    break\n    // accelerating from zero velocity\n    case 'easeInQuint':\n      return t*t*t*t*t\n    break\n    // decelerating to zero velocity\n    case 'easeOutQuint':\n      return 1+(--t)*t*t*t*t\n    break\n    // acceleration until halfway, then deceleration\n    case 'easeInOutQuint':\n      return t<.5 ? 16*t*t*t*t*t : 1+16*(--t)*t*t*t*t\n  }\n}\n","/**\n * @author alteredq / http://alteredqualia.com/\n * @author mr.doob / http://mrdoob.com/\n */\n\nvar Detector = {\n\n\tcanvas: !! window.CanvasRenderingContext2D,\n\twebgl: ( function () {\n\n\t\ttry {\n\n\t\t\tvar canvas = document.createElement( 'canvas' ); return !! ( window.WebGLRenderingContext && ( canvas.getContext( 'webgl' ) || canvas.getContext( 'experimental-webgl' ) ) );\n\n\t\t} catch ( e ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t} )(),\n\tworkers: !! window.Worker,\n\tfileapi: window.File && window.FileReader && window.FileList && window.Blob,\n\n\tgetWebGLErrorMessage: function () {\n\n\t\tvar element = document.createElement( 'div' );\n\t\telement.id = 'webgl-error-message';\n\t\telement.style.fontFamily = 'monospace';\n\t\telement.style.fontSize = '13px';\n\t\telement.style.fontWeight = 'normal';\n\t\telement.style.textAlign = 'center';\n\t\telement.style.background = '#fff';\n\t\telement.style.color = '#000';\n\t\telement.style.padding = '1.5em';\n\t\telement.style.width = '400px';\n\t\telement.style.margin = '5em auto 0';\n\n\t\tif ( ! this.webgl ) {\n\n\t\t\telement.innerHTML = window.WebGLRenderingContext ? [\n\t\t\t\t'Your graphics card does not seem to support <a href=\"http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation\" style=\"color:#000\">WebGL</a>.<br />',\n\t\t\t\t'Find out how to get it <a href=\"http://get.webgl.org/\" style=\"color:#000\">here</a>.'\n\t\t\t].join( '\\n' ) : [\n\t\t\t\t'Your browser does not seem to support <a href=\"http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation\" style=\"color:#000\">WebGL</a>.<br/>',\n\t\t\t\t'Find out how to get it <a href=\"http://get.webgl.org/\" style=\"color:#000\">here</a>.'\n\t\t\t].join( '\\n' );\n\n\t\t}\n\n\t\treturn element;\n\n\t},\n\n\taddGetWebGLMessage: function ( parameters ) {\n\n\t\tvar parent, id, element;\n\n\t\tparameters = parameters || {};\n\n\t\tparent = parameters.parent !== undefined ? parameters.parent : document.body;\n\t\tid = parameters.id !== undefined ? parameters.id : 'oldie';\n\n\t\telement = Detector.getWebGLErrorMessage();\n\t\telement.id = id;\n\n\t\tparent.appendChild( element );\n\n\t}\n\n};\n\n// browserify support\nif ( typeof module === 'object' ) {\n\n\tmodule.exports = Detector;\n\n}\n","/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar Stats = function () {\n\n\tvar now = ( self.performance && self.performance.now ) ? self.performance.now.bind( performance ) : Date.now;\n\n\tvar startTime = now(), prevTime = startTime;\n\tvar frames = 0, mode = 0;\n\n\tfunction createElement( tag, id, css ) {\n\n\t\tvar element = document.createElement( tag );\n\t\telement.id = id;\n\t\telement.style.cssText = css;\n\t\treturn element;\n\n\t}\n\n\tfunction createPanel( id, fg, bg ) {\n\n\t\tvar div = createElement( 'div', id, 'padding:0 0 3px 3px;text-align:left;background:' + bg );\n\n\t\tvar text = createElement( 'div', id + 'Text', 'font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px;color:' + fg );\n\t\ttext.innerHTML = id.toUpperCase();\n\t\tdiv.appendChild( text );\n\n\t\tvar graph = createElement( 'div', id + 'Graph', 'width:74px;height:30px;background:' + fg );\n\t\tdiv.appendChild( graph );\n\n\t\tfor ( var i = 0; i < 74; i ++ ) {\n\n\t\t\tgraph.appendChild( createElement( 'span', '', 'width:1px;height:30px;float:left;opacity:0.9;background:' + bg ) );\n\n\t\t}\n\n\t\treturn div;\n\n\t}\n\n\tfunction setMode( value ) {\n\n\t\tvar children = container.children;\n\n\t\tfor ( var i = 0; i < children.length; i ++ ) {\n\n\t\t\tchildren[ i ].style.display = i === value ? 'block' : 'none';\n\n\t\t}\n\n\t\tmode = value;\n\n\t}\n\n\tfunction updateGraph( dom, value ) {\n\n\t\tvar child = dom.appendChild( dom.firstChild );\n\t\tchild.style.height = Math.min( 30, 30 - value * 30 ) + 'px';\n\n\t}\n\n\t//\n\n\tvar container = createElement( 'div', 'stats', 'width:80px;opacity:0.9;cursor:pointer' );\n\tcontainer.addEventListener( 'mousedown', function ( event ) {\n\n\t\tevent.preventDefault();\n\t\tsetMode( ++ mode % container.children.length );\n\n\t}, false );\n\n\t// FPS\n\n\tvar fps = 0, fpsMin = Infinity, fpsMax = 0;\n\n\tvar fpsDiv = createPanel( 'fps', '#0ff', '#002' );\n\tvar fpsText = fpsDiv.children[ 0 ];\n\tvar fpsGraph = fpsDiv.children[ 1 ];\n\n\tcontainer.appendChild( fpsDiv );\n\n\t// MS\n\n\tvar ms = 0, msMin = Infinity, msMax = 0;\n\n\tvar msDiv = createPanel( 'ms', '#0f0', '#020' );\n\tvar msText = msDiv.children[ 0 ];\n\tvar msGraph = msDiv.children[ 1 ];\n\n\tcontainer.appendChild( msDiv );\n\n\t// MEM\n\n\tif ( self.performance && self.performance.memory ) {\n\n\t\tvar mem = 0, memMin = Infinity, memMax = 0;\n\n\t\tvar memDiv = createPanel( 'mb', '#f08', '#201' );\n\t\tvar memText = memDiv.children[ 0 ];\n\t\tvar memGraph = memDiv.children[ 1 ];\n\n\t\tcontainer.appendChild( memDiv );\n\n\t}\n\n\t//\n\n\tsetMode( mode );\n\n\treturn {\n\n\t\tREVISION: 14,\n\n\t\tdomElement: container,\n\n\t\tsetMode: setMode,\n\n\t\tbegin: function () {\n\n\t\t\tstartTime = now();\n\n\t\t},\n\n\t\tend: function () {\n\n\t\t\tvar time = now();\n\n\t\t\tms = time - startTime;\n\t\t\tmsMin = Math.min( msMin, ms );\n\t\t\tmsMax = Math.max( msMax, ms );\n\n\t\t\tmsText.textContent = ( ms | 0 ) + ' MS (' + ( msMin | 0 ) + '-' + ( msMax | 0 ) + ')';\n\t\t\tupdateGraph( msGraph, ms / 200 );\n\n\t\t\tframes ++;\n\n\t\t\tif ( time > prevTime + 1000 ) {\n\n\t\t\t\tfps = Math.round( ( frames * 1000 ) / ( time - prevTime ) );\n\t\t\t\tfpsMin = Math.min( fpsMin, fps );\n\t\t\t\tfpsMax = Math.max( fpsMax, fps );\n\n\t\t\t\tfpsText.textContent = fps + ' FPS (' + fpsMin + '-' + fpsMax + ')';\n\t\t\t\tupdateGraph( fpsGraph, fps / 100 );\n\n\t\t\t\tprevTime = time;\n\t\t\t\tframes = 0;\n\n\t\t\t\tif ( mem !== undefined ) {\n\n\t\t\t\t\tvar heapSize = performance.memory.usedJSHeapSize;\n\t\t\t\t\tvar heapSizeLimit = performance.memory.jsHeapSizeLimit;\n\n\t\t\t\t\tmem = Math.round( heapSize * 0.000000954 );\n\t\t\t\t\tmemMin = Math.min( memMin, mem );\n\t\t\t\t\tmemMax = Math.max( memMax, mem );\n\n\t\t\t\t\tmemText.textContent = mem + ' MB (' + memMin + '-' + memMax + ')';\n\t\t\t\t\tupdateGraph( memGraph, heapSize / heapSizeLimit );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn time;\n\n\t\t},\n\n\t\tupdate: function () {\n\n\t\t\tstartTime = this.end();\n\n\t\t}\n\n\t};\n\n};\n\nif ( typeof module === 'object' ) {\n\n\tmodule.exports = Stats;\n\n}\n"]}